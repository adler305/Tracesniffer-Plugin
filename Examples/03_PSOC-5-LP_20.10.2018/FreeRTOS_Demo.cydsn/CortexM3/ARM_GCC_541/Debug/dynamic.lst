ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"dynamic.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sniffIDFilter,13,4
  20              		.comm	buffer,4098,4
  21              		.comm	objectList,1704,4
  22              		.bss
  23              		.align	2
  24              	xContinuousIncrementHandle:
  25 0000 00000000 		.space	4
  26              		.align	2
  27              	xLimitedIncrementHandle:
  28 0004 00000000 		.space	4
  29              		.align	2
  30              	ulCounter:
  31 0008 00000000 		.space	4
  32              		.align	1
  33              	usCheckVariable:
  34 000c 0000     		.space	2
  35 000e 0000     		.align	2
  36              	xSuspendedQueueSendError:
  37 0010 00000000 		.space	4
  38              		.align	2
  39              	xSuspendedQueueReceiveError:
  40 0014 00000000 		.space	4
  41              		.comm	xSuspendedTestQueue,4,4
  42              		.align	2
  43              	ulExpectedValue:
  44 0018 00000000 		.space	4
  45              		.section	.rodata
  46              		.align	2
  47              	.LC0:
  48 0000 53757370 		.ascii	"Suspended_Test_Queue\000"
  48      656E6465 
  48      645F5465 
  48      73745F51 
  48      75657565 
  49 0015 000000   		.align	2
  50              	.LC1:
  51 0018 434E545F 		.ascii	"CNT_INC\000"
  51      494E4300 
  52              		.align	2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 2


  53              	.LC2:
  54 0020 4C494D5F 		.ascii	"LIM_INC\000"
  54      494E4300 
  55              		.align	2
  56              	.LC3:
  57 0028 435F4354 		.ascii	"C_CTRL\000"
  57      524C00
  58 002f 00       		.align	2
  59              	.LC4:
  60 0030 53555350 		.ascii	"SUSP_TX\000"
  60      5F545800 
  61              		.align	2
  62              	.LC5:
  63 0038 53555350 		.ascii	"SUSP_RX\000"
  63      5F525800 
  64              		.section	.text.vStartDynamicPriorityTasks,"ax",%progbits
  65              		.align	2
  66              		.global	vStartDynamicPriorityTasks
  67              		.thumb
  68              		.thumb_func
  69              		.type	vStartDynamicPriorityTasks, %function
  70              	vStartDynamicPriorityTasks:
  71              	.LFB68:
  72              		.file 1 "..\\Common\\Minimal\\dynamic.c"
   1:..\Common\Minimal/dynamic.c **** /*
   2:..\Common\Minimal/dynamic.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/dynamic.c ****     All rights reserved
   4:..\Common\Minimal/dynamic.c **** 
   5:..\Common\Minimal/dynamic.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/dynamic.c **** 
   7:..\Common\Minimal/dynamic.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/dynamic.c **** 
   9:..\Common\Minimal/dynamic.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/dynamic.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/dynamic.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/dynamic.c **** 
  13:..\Common\Minimal/dynamic.c ****     ***************************************************************************
  14:..\Common\Minimal/dynamic.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/dynamic.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/dynamic.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/dynamic.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/dynamic.c ****     ***************************************************************************
  19:..\Common\Minimal/dynamic.c **** 
  20:..\Common\Minimal/dynamic.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/dynamic.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/dynamic.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/dynamic.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/dynamic.c **** 
  25:..\Common\Minimal/dynamic.c ****     ***************************************************************************
  26:..\Common\Minimal/dynamic.c ****      *                                                                       *
  27:..\Common\Minimal/dynamic.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/dynamic.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/dynamic.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/dynamic.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/dynamic.c ****      *                                                                       *
  32:..\Common\Minimal/dynamic.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/dynamic.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 3


  34:..\Common\Minimal/dynamic.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/dynamic.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/dynamic.c ****      *                                                                       *
  37:..\Common\Minimal/dynamic.c ****     ***************************************************************************
  38:..\Common\Minimal/dynamic.c **** 
  39:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/dynamic.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/dynamic.c ****     defined configASSERT()?
  42:..\Common\Minimal/dynamic.c **** 
  43:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/dynamic.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/dynamic.c ****     participating in the support forum.
  46:..\Common\Minimal/dynamic.c **** 
  47:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/dynamic.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/dynamic.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/dynamic.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/dynamic.c **** 
  52:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/dynamic.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/dynamic.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Common\Minimal/dynamic.c **** 
  56:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/dynamic.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/dynamic.c **** 
  59:..\Common\Minimal/dynamic.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/dynamic.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/dynamic.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/dynamic.c **** 
  63:..\Common\Minimal/dynamic.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/dynamic.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/dynamic.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/dynamic.c **** 
  67:..\Common\Minimal/dynamic.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/dynamic.c **** */
  69:..\Common\Minimal/dynamic.c **** 
  70:..\Common\Minimal/dynamic.c **** /*
  71:..\Common\Minimal/dynamic.c ****  * The first test creates three tasks - two counter tasks (one continuous count
  72:..\Common\Minimal/dynamic.c ****  * and one limited count) and one controller.  A "count" variable is shared
  73:..\Common\Minimal/dynamic.c ****  * between all three tasks.  The two counter tasks should never be in a "ready"
  74:..\Common\Minimal/dynamic.c ****  * state at the same time.  The controller task runs at the same priority as
  75:..\Common\Minimal/dynamic.c ****  * the continuous count task, and at a lower priority than the limited count
  76:..\Common\Minimal/dynamic.c ****  * task.
  77:..\Common\Minimal/dynamic.c ****  *
  78:..\Common\Minimal/dynamic.c ****  * One counter task loops indefinitely, incrementing the shared count variable
  79:..\Common\Minimal/dynamic.c ****  * on each iteration.  To ensure it has exclusive access to the variable it
  80:..\Common\Minimal/dynamic.c ****  * raises its priority above that of the controller task before each
  81:..\Common\Minimal/dynamic.c ****  * increment, lowering it again to its original priority before starting the
  82:..\Common\Minimal/dynamic.c ****  * next iteration.
  83:..\Common\Minimal/dynamic.c ****  *
  84:..\Common\Minimal/dynamic.c ****  * The other counter task increments the shared count variable on each
  85:..\Common\Minimal/dynamic.c ****  * iteration of its loop until the count has reached a limit of 0xff - at
  86:..\Common\Minimal/dynamic.c ****  * which point it suspends itself.  It will not start a new loop until the
  87:..\Common\Minimal/dynamic.c ****  * controller task has made it "ready" again by calling vTaskResume().
  88:..\Common\Minimal/dynamic.c ****  * This second counter task operates at a higher priority than controller
  89:..\Common\Minimal/dynamic.c ****  * task so does not need to worry about mutual exclusion of the counter
  90:..\Common\Minimal/dynamic.c ****  * variable.
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 4


  91:..\Common\Minimal/dynamic.c ****  *
  92:..\Common\Minimal/dynamic.c ****  * The controller task is in two sections.  The first section controls and
  93:..\Common\Minimal/dynamic.c ****  * monitors the continuous count task.  When this section is operational the
  94:..\Common\Minimal/dynamic.c ****  * limited count task is suspended.  Likewise, the second section controls
  95:..\Common\Minimal/dynamic.c ****  * and monitors the limited count task.  When this section is operational the
  96:..\Common\Minimal/dynamic.c ****  * continuous count task is suspended.
  97:..\Common\Minimal/dynamic.c ****  *
  98:..\Common\Minimal/dynamic.c ****  * In the first section the controller task first takes a copy of the shared
  99:..\Common\Minimal/dynamic.c ****  * count variable.  To ensure mutual exclusion on the count variable it
 100:..\Common\Minimal/dynamic.c ****  * suspends the continuous count task, resuming it again when the copy has been
 101:..\Common\Minimal/dynamic.c ****  * taken.  The controller task then sleeps for a fixed period - during which
 102:..\Common\Minimal/dynamic.c ****  * the continuous count task will execute and increment the shared variable.
 103:..\Common\Minimal/dynamic.c ****  * When the controller task wakes it checks that the continuous count task
 104:..\Common\Minimal/dynamic.c ****  * has executed by comparing the copy of the shared variable with its current
 105:..\Common\Minimal/dynamic.c ****  * value.  This time, to ensure mutual exclusion, the scheduler itself is
 106:..\Common\Minimal/dynamic.c ****  * suspended with a call to vTaskSuspendAll ().  This is for demonstration
 107:..\Common\Minimal/dynamic.c ****  * purposes only and is not a recommended technique due to its inefficiency.
 108:..\Common\Minimal/dynamic.c ****  *
 109:..\Common\Minimal/dynamic.c ****  * After a fixed number of iterations the controller task suspends the
 110:..\Common\Minimal/dynamic.c ****  * continuous count task, and moves on to its second section.
 111:..\Common\Minimal/dynamic.c ****  *
 112:..\Common\Minimal/dynamic.c ****  * At the start of the second section the shared variable is cleared to zero.
 113:..\Common\Minimal/dynamic.c ****  * The limited count task is then woken from its suspension by a call to
 114:..\Common\Minimal/dynamic.c ****  * vTaskResume ().  As this counter task operates at a higher priority than
 115:..\Common\Minimal/dynamic.c ****  * the controller task the controller task should not run again until the
 116:..\Common\Minimal/dynamic.c ****  * shared variable has been counted up to the limited value causing the counter
 117:..\Common\Minimal/dynamic.c ****  * task to suspend itself.  The next line after vTaskResume () is therefore
 118:..\Common\Minimal/dynamic.c ****  * a check on the shared variable to ensure everything is as expected.
 119:..\Common\Minimal/dynamic.c ****  *
 120:..\Common\Minimal/dynamic.c ****  *
 121:..\Common\Minimal/dynamic.c ****  * The second test consists of a couple of very simple tasks that post onto a
 122:..\Common\Minimal/dynamic.c ****  * queue while the scheduler is suspended.  This test was added to test parts
 123:..\Common\Minimal/dynamic.c ****  * of the scheduler not exercised by the first test.
 124:..\Common\Minimal/dynamic.c ****  *
 125:..\Common\Minimal/dynamic.c ****  */
 126:..\Common\Minimal/dynamic.c **** 
 127:..\Common\Minimal/dynamic.c **** #include <stdlib.h>
 128:..\Common\Minimal/dynamic.c **** 
 129:..\Common\Minimal/dynamic.c **** /* Scheduler include files. */
 130:..\Common\Minimal/dynamic.c **** #include "FreeRTOS.h"
 131:..\Common\Minimal/dynamic.c **** #include "task.h"
 132:..\Common\Minimal/dynamic.c **** #include "semphr.h"
 133:..\Common\Minimal/dynamic.c **** 
 134:..\Common\Minimal/dynamic.c **** /* Demo app include files. */
 135:..\Common\Minimal/dynamic.c **** #include "dynamic.h"
 136:..\Common\Minimal/dynamic.c **** 
 137:..\Common\Minimal/dynamic.c **** /* Function that implements the "limited count" task as described above. */
 138:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vLimitedIncrementTask, pvParameters );
 139:..\Common\Minimal/dynamic.c **** 
 140:..\Common\Minimal/dynamic.c **** /* Function that implements the "continuous count" task as described above. */
 141:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vContinuousIncrementTask, pvParameters );
 142:..\Common\Minimal/dynamic.c **** 
 143:..\Common\Minimal/dynamic.c **** /* Function that implements the controller task as described above. */
 144:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vCounterControlTask, pvParameters );
 145:..\Common\Minimal/dynamic.c **** 
 146:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueReceiveWhenSuspendedTask, pvParameters );
 147:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueSendWhenSuspendedTask, pvParameters );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 5


 148:..\Common\Minimal/dynamic.c **** 
 149:..\Common\Minimal/dynamic.c **** /* Demo task specific constants. */
 150:..\Common\Minimal/dynamic.c **** #define priSTACK_SIZE				( configMINIMAL_STACK_SIZE )
 151:..\Common\Minimal/dynamic.c **** #define priSLEEP_TIME				pdMS_TO_TICKS( 128 )
 152:..\Common\Minimal/dynamic.c **** #define priLOOPS					( 5 )
 153:..\Common\Minimal/dynamic.c **** #define priMAX_COUNT				( ( uint32_t ) 0xff )
 154:..\Common\Minimal/dynamic.c **** #define priNO_BLOCK					( ( TickType_t ) 0 )
 155:..\Common\Minimal/dynamic.c **** #define priSUSPENDED_QUEUE_LENGTH	( 1 )
 156:..\Common\Minimal/dynamic.c **** 
 157:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 158:..\Common\Minimal/dynamic.c **** 
 159:..\Common\Minimal/dynamic.c **** /* Handles to the two counter tasks.  These could be passed in as parameters
 160:..\Common\Minimal/dynamic.c **** to the controller task to prevent them having to be file scope. */
 161:..\Common\Minimal/dynamic.c **** static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle;
 162:..\Common\Minimal/dynamic.c **** 
 163:..\Common\Minimal/dynamic.c **** /* The shared counter variable.  This is passed in as a parameter to the two
 164:..\Common\Minimal/dynamic.c **** counter variables for demonstration purposes. */
 165:..\Common\Minimal/dynamic.c **** static volatile uint32_t ulCounter;
 166:..\Common\Minimal/dynamic.c **** 
 167:..\Common\Minimal/dynamic.c **** /* Variables used to check that the tasks are still operating without error.
 168:..\Common\Minimal/dynamic.c **** Each complete iteration of the controller task increments this variable
 169:..\Common\Minimal/dynamic.c **** provided no errors have been found.  The variable maintaining the same value
 170:..\Common\Minimal/dynamic.c **** is therefore indication of an error. */
 171:..\Common\Minimal/dynamic.c **** static volatile uint16_t usCheckVariable = ( uint16_t ) 0;
 172:..\Common\Minimal/dynamic.c **** static volatile BaseType_t xSuspendedQueueSendError = pdFALSE;
 173:..\Common\Minimal/dynamic.c **** static volatile BaseType_t xSuspendedQueueReceiveError = pdFALSE;
 174:..\Common\Minimal/dynamic.c **** 
 175:..\Common\Minimal/dynamic.c **** /* Queue used by the second test. */
 176:..\Common\Minimal/dynamic.c **** QueueHandle_t xSuspendedTestQueue;
 177:..\Common\Minimal/dynamic.c **** 
 178:..\Common\Minimal/dynamic.c **** /* The value the queue receive task expects to receive next.  This is file
 179:..\Common\Minimal/dynamic.c **** scope so xAreDynamicPriorityTasksStillRunning() can ensure it is still
 180:..\Common\Minimal/dynamic.c **** incrementing. */
 181:..\Common\Minimal/dynamic.c **** static uint32_t ulExpectedValue = ( uint32_t ) 0;
 182:..\Common\Minimal/dynamic.c **** 
 183:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 184:..\Common\Minimal/dynamic.c **** /*
 185:..\Common\Minimal/dynamic.c ****  * Start the three tasks as described at the top of the file.
 186:..\Common\Minimal/dynamic.c ****  * Note that the limited count task is given a higher priority.
 187:..\Common\Minimal/dynamic.c ****  */
 188:..\Common\Minimal/dynamic.c **** void vStartDynamicPriorityTasks( void )
 189:..\Common\Minimal/dynamic.c **** {
  73              		.loc 1 189 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 1, uses_anonymous_args = 0
  77 0000 80B5     		push	{r7, lr}
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 82B0     		sub	sp, sp, #8
  82              		.cfi_def_cfa_offset 16
  83 0004 02AF     		add	r7, sp, #8
  84              		.cfi_def_cfa 7, 8
 190:..\Common\Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
  85              		.loc 1 190 0
  86 0006 0022     		movs	r2, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 6


  87 0008 0421     		movs	r1, #4
  88 000a 0120     		movs	r0, #1
  89 000c FFF7FEFF 		bl	xQueueGenericCreate
  90 0010 0246     		mov	r2, r0
  91 0012 204B     		ldr	r3, .L4
  92 0014 1A60     		str	r2, [r3]
 191:..\Common\Minimal/dynamic.c **** 
 192:..\Common\Minimal/dynamic.c **** 	if( xSuspendedTestQueue != NULL )
  93              		.loc 1 192 0
  94 0016 1F4B     		ldr	r3, .L4
  95 0018 1B68     		ldr	r3, [r3]
  96 001a 002B     		cmp	r3, #0
  97 001c 37D0     		beq	.L3
 193:..\Common\Minimal/dynamic.c **** 	{
 194:..\Common\Minimal/dynamic.c **** 		/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 195:..\Common\Minimal/dynamic.c **** 		in use.  The queue registry is provided as a means for kernel aware
 196:..\Common\Minimal/dynamic.c **** 		debuggers to locate queues and has no purpose if a kernel aware debugger
 197:..\Common\Minimal/dynamic.c **** 		is not being used.  The call to vQueueAddToRegistry() will be removed
 198:..\Common\Minimal/dynamic.c **** 		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 199:..\Common\Minimal/dynamic.c **** 		defined to be less than 1. */
 200:..\Common\Minimal/dynamic.c **** 		vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );
  98              		.loc 1 200 0
  99 001e 1D4B     		ldr	r3, .L4
 100 0020 1B68     		ldr	r3, [r3]
 101 0022 1D49     		ldr	r1, .L4+4
 102 0024 1846     		mov	r0, r3
 103 0026 FFF7FEFF 		bl	vQueueAddToRegistry
 201:..\Common\Minimal/dynamic.c **** 
 202:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_P
 104              		.loc 1 202 0
 105 002a 1C4B     		ldr	r3, .L4+8
 106 002c 0193     		str	r3, [sp, #4]
 107 002e 0023     		movs	r3, #0
 108 0030 0093     		str	r3, [sp]
 109 0032 1B4B     		ldr	r3, .L4+12
 110 0034 6422     		movs	r2, #100
 111 0036 1B49     		ldr	r1, .L4+16
 112 0038 1B48     		ldr	r0, .L4+20
 113 003a FFF7FEFF 		bl	xTaskCreate
 203:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIO
 114              		.loc 1 203 0
 115 003e 1B4B     		ldr	r3, .L4+24
 116 0040 0193     		str	r3, [sp, #4]
 117 0042 0123     		movs	r3, #1
 118 0044 0093     		str	r3, [sp]
 119 0046 164B     		ldr	r3, .L4+12
 120 0048 6422     		movs	r2, #100
 121 004a 1949     		ldr	r1, .L4+28
 122 004c 1948     		ldr	r0, .L4+32
 123 004e FFF7FEFF 		bl	xTaskCreate
 204:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vCounterControlTask, "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 124              		.loc 1 204 0
 125 0052 0023     		movs	r3, #0
 126 0054 0193     		str	r3, [sp, #4]
 127 0056 0023     		movs	r3, #0
 128 0058 0093     		str	r3, [sp]
 129 005a 0023     		movs	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 7


 130 005c 6422     		movs	r2, #100
 131 005e 1649     		ldr	r1, .L4+36
 132 0060 1648     		ldr	r0, .L4+40
 133 0062 FFF7FEFF 		bl	xTaskCreate
 205:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL 
 134              		.loc 1 205 0
 135 0066 0023     		movs	r3, #0
 136 0068 0193     		str	r3, [sp, #4]
 137 006a 0023     		movs	r3, #0
 138 006c 0093     		str	r3, [sp]
 139 006e 0023     		movs	r3, #0
 140 0070 6422     		movs	r2, #100
 141 0072 1349     		ldr	r1, .L4+44
 142 0074 1348     		ldr	r0, .L4+48
 143 0076 FFF7FEFF 		bl	xTaskCreate
 206:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NU
 144              		.loc 1 206 0
 145 007a 0023     		movs	r3, #0
 146 007c 0193     		str	r3, [sp, #4]
 147 007e 0023     		movs	r3, #0
 148 0080 0093     		str	r3, [sp]
 149 0082 0023     		movs	r3, #0
 150 0084 6422     		movs	r2, #100
 151 0086 1049     		ldr	r1, .L4+52
 152 0088 1048     		ldr	r0, .L4+56
 153 008a FFF7FEFF 		bl	xTaskCreate
 154              	.L3:
 207:..\Common\Minimal/dynamic.c **** 	}
 208:..\Common\Minimal/dynamic.c **** }
 155              		.loc 1 208 0
 156 008e 00BF     		nop
 157 0090 BD46     		mov	sp, r7
 158              		.cfi_def_cfa_register 13
 159              		@ sp needed
 160 0092 80BD     		pop	{r7, pc}
 161              	.L5:
 162              		.align	2
 163              	.L4:
 164 0094 00000000 		.word	xSuspendedTestQueue
 165 0098 00000000 		.word	.LC0
 166 009c 00000000 		.word	xContinuousIncrementHandle
 167 00a0 08000000 		.word	ulCounter
 168 00a4 18000000 		.word	.LC1
 169 00a8 00000000 		.word	vContinuousIncrementTask
 170 00ac 04000000 		.word	xLimitedIncrementHandle
 171 00b0 20000000 		.word	.LC2
 172 00b4 00000000 		.word	vLimitedIncrementTask
 173 00b8 28000000 		.word	.LC3
 174 00bc 00000000 		.word	vCounterControlTask
 175 00c0 30000000 		.word	.LC4
 176 00c4 00000000 		.word	vQueueSendWhenSuspendedTask
 177 00c8 38000000 		.word	.LC5
 178 00cc 00000000 		.word	vQueueReceiveWhenSuspendedTask
 179              		.cfi_endproc
 180              	.LFE68:
 181              		.size	vStartDynamicPriorityTasks, .-vStartDynamicPriorityTasks
 182              		.section	.text.vLimitedIncrementTask,"ax",%progbits
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 8


 183              		.align	2
 184              		.thumb
 185              		.thumb_func
 186              		.type	vLimitedIncrementTask, %function
 187              	vLimitedIncrementTask:
 188              	.LFB69:
 209:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 210:..\Common\Minimal/dynamic.c **** 
 211:..\Common\Minimal/dynamic.c **** /*
 212:..\Common\Minimal/dynamic.c ****  * Just loops around incrementing the shared variable until the limit has been
 213:..\Common\Minimal/dynamic.c ****  * reached.  Once the limit has been reached it suspends itself.
 214:..\Common\Minimal/dynamic.c ****  */
 215:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
 216:..\Common\Minimal/dynamic.c **** {
 189              		.loc 1 216 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 16
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 80B5     		push	{r7, lr}
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 84B0     		sub	sp, sp, #16
 198              		.cfi_def_cfa_offset 24
 199 0004 00AF     		add	r7, sp, #0
 200              		.cfi_def_cfa_register 7
 201 0006 7860     		str	r0, [r7, #4]
 217:..\Common\Minimal/dynamic.c **** uint32_t *pulCounter;
 218:..\Common\Minimal/dynamic.c **** 
 219:..\Common\Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 220:..\Common\Minimal/dynamic.c **** 	the task. */
 221:..\Common\Minimal/dynamic.c **** 	pulCounter = ( uint32_t * ) pvParameters;
 202              		.loc 1 221 0
 203 0008 7B68     		ldr	r3, [r7, #4]
 204 000a FB60     		str	r3, [r7, #12]
 222:..\Common\Minimal/dynamic.c **** 
 223:..\Common\Minimal/dynamic.c **** 	/* This will run before the control task, so the first thing it does is
 224:..\Common\Minimal/dynamic.c **** 	suspend - the control task will resume it when ready. */
 225:..\Common\Minimal/dynamic.c **** 	vTaskSuspend( NULL );
 205              		.loc 1 225 0
 206 000c 0020     		movs	r0, #0
 207 000e FFF7FEFF 		bl	vTaskSuspend
 208              	.L8:
 226:..\Common\Minimal/dynamic.c **** 
 227:..\Common\Minimal/dynamic.c **** 	for( ;; )
 228:..\Common\Minimal/dynamic.c **** 	{
 229:..\Common\Minimal/dynamic.c **** 		/* Just count up to a value then suspend. */
 230:..\Common\Minimal/dynamic.c **** 		( *pulCounter )++;
 209              		.loc 1 230 0
 210 0012 FB68     		ldr	r3, [r7, #12]
 211 0014 1B68     		ldr	r3, [r3]
 212 0016 5A1C     		adds	r2, r3, #1
 213 0018 FB68     		ldr	r3, [r7, #12]
 214 001a 1A60     		str	r2, [r3]
 231:..\Common\Minimal/dynamic.c **** 
 232:..\Common\Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 215              		.loc 1 232 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 9


 216 001c FB68     		ldr	r3, [r7, #12]
 217 001e 1B68     		ldr	r3, [r3]
 218 0020 FE2B     		cmp	r3, #254
 219 0022 F6D9     		bls	.L8
 233:..\Common\Minimal/dynamic.c **** 		{
 234:..\Common\Minimal/dynamic.c **** 			vTaskSuspend( NULL );
 220              		.loc 1 234 0
 221 0024 0020     		movs	r0, #0
 222 0026 FFF7FEFF 		bl	vTaskSuspend
 235:..\Common\Minimal/dynamic.c **** 		}
 236:..\Common\Minimal/dynamic.c **** 	}
 223              		.loc 1 236 0
 224 002a F2E7     		b	.L8
 225              		.cfi_endproc
 226              	.LFE69:
 227              		.size	vLimitedIncrementTask, .-vLimitedIncrementTask
 228              		.section	.text.vContinuousIncrementTask,"ax",%progbits
 229              		.align	2
 230              		.thumb
 231              		.thumb_func
 232              		.type	vContinuousIncrementTask, %function
 233              	vContinuousIncrementTask:
 234              	.LFB70:
 237:..\Common\Minimal/dynamic.c **** }
 238:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 239:..\Common\Minimal/dynamic.c **** 
 240:..\Common\Minimal/dynamic.c **** /*
 241:..\Common\Minimal/dynamic.c ****  * Just keep counting the shared variable up.  The control task will suspend
 242:..\Common\Minimal/dynamic.c ****  * this task when it wants.
 243:..\Common\Minimal/dynamic.c ****  */
 244:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
 245:..\Common\Minimal/dynamic.c **** {
 235              		.loc 1 245 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 16
 238              		@ frame_needed = 1, uses_anonymous_args = 0
 239 0000 80B5     		push	{r7, lr}
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 7, -8
 242              		.cfi_offset 14, -4
 243 0002 84B0     		sub	sp, sp, #16
 244              		.cfi_def_cfa_offset 24
 245 0004 00AF     		add	r7, sp, #0
 246              		.cfi_def_cfa_register 7
 247 0006 7860     		str	r0, [r7, #4]
 246:..\Common\Minimal/dynamic.c **** volatile uint32_t *pulCounter;
 247:..\Common\Minimal/dynamic.c **** UBaseType_t uxOurPriority;
 248:..\Common\Minimal/dynamic.c **** 
 249:..\Common\Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 250:..\Common\Minimal/dynamic.c **** 	the task. */
 251:..\Common\Minimal/dynamic.c **** 	pulCounter = ( uint32_t * ) pvParameters;
 248              		.loc 1 251 0
 249 0008 7B68     		ldr	r3, [r7, #4]
 250 000a FB60     		str	r3, [r7, #12]
 252:..\Common\Minimal/dynamic.c **** 
 253:..\Common\Minimal/dynamic.c **** 	/* Query our priority so we can raise it when exclusive access to the
 254:..\Common\Minimal/dynamic.c **** 	shared variable is required. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 10


 255:..\Common\Minimal/dynamic.c **** 	uxOurPriority = uxTaskPriorityGet( NULL );
 251              		.loc 1 255 0
 252 000c 0020     		movs	r0, #0
 253 000e FFF7FEFF 		bl	uxTaskPriorityGet
 254 0012 B860     		str	r0, [r7, #8]
 255              	.L10:
 256:..\Common\Minimal/dynamic.c **** 
 257:..\Common\Minimal/dynamic.c **** 	for( ;; )
 258:..\Common\Minimal/dynamic.c **** 	{
 259:..\Common\Minimal/dynamic.c **** 		/* Raise the priority above the controller task to ensure a context
 260:..\Common\Minimal/dynamic.c **** 		switch does not occur while the variable is being accessed. */
 261:..\Common\Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 256              		.loc 1 261 0 discriminator 1
 257 0014 BB68     		ldr	r3, [r7, #8]
 258 0016 0133     		adds	r3, r3, #1
 259 0018 1946     		mov	r1, r3
 260 001a 0020     		movs	r0, #0
 261 001c FFF7FEFF 		bl	vTaskPrioritySet
 262:..\Common\Minimal/dynamic.c **** 		{
 263:..\Common\Minimal/dynamic.c **** 			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 264:..\Common\Minimal/dynamic.c **** 			( *pulCounter )++;
 262              		.loc 1 264 0 discriminator 1
 263 0020 FB68     		ldr	r3, [r7, #12]
 264 0022 1B68     		ldr	r3, [r3]
 265 0024 5A1C     		adds	r2, r3, #1
 266 0026 FB68     		ldr	r3, [r7, #12]
 267 0028 1A60     		str	r2, [r3]
 265:..\Common\Minimal/dynamic.c **** 		}
 266:..\Common\Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 268              		.loc 1 266 0 discriminator 1
 269 002a B968     		ldr	r1, [r7, #8]
 270 002c 0020     		movs	r0, #0
 271 002e FFF7FEFF 		bl	vTaskPrioritySet
 267:..\Common\Minimal/dynamic.c **** 
 268:..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 269:..\Common\Minimal/dynamic.c **** 			taskYIELD();
 270:..\Common\Minimal/dynamic.c **** 		#endif
 271:..\Common\Minimal/dynamic.c **** 
 272:..\Common\Minimal/dynamic.c **** 		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 273:..\Common\Minimal/dynamic.c **** 	}
 272              		.loc 1 273 0 discriminator 1
 273 0032 EFE7     		b	.L10
 274              		.cfi_endproc
 275              	.LFE70:
 276              		.size	vContinuousIncrementTask, .-vContinuousIncrementTask
 277              		.section	.text.vCounterControlTask,"ax",%progbits
 278              		.align	2
 279              		.thumb
 280              		.thumb_func
 281              		.type	vCounterControlTask, %function
 282              	vCounterControlTask:
 283              	.LFB71:
 274:..\Common\Minimal/dynamic.c **** }
 275:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 276:..\Common\Minimal/dynamic.c **** 
 277:..\Common\Minimal/dynamic.c **** /*
 278:..\Common\Minimal/dynamic.c ****  * Controller task as described above.
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 11


 279:..\Common\Minimal/dynamic.c ****  */
 280:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vCounterControlTask, pvParameters )
 281:..\Common\Minimal/dynamic.c **** {
 284              		.loc 1 281 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 16
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0000 80B5     		push	{r7, lr}
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 84B0     		sub	sp, sp, #16
 293              		.cfi_def_cfa_offset 24
 294 0004 00AF     		add	r7, sp, #0
 295              		.cfi_def_cfa_register 7
 296 0006 7860     		str	r0, [r7, #4]
 282:..\Common\Minimal/dynamic.c **** uint32_t ulLastCounter;
 283:..\Common\Minimal/dynamic.c **** short sLoops;
 284:..\Common\Minimal/dynamic.c **** short sError = pdFALSE;
 297              		.loc 1 284 0
 298 0008 0023     		movs	r3, #0
 299 000a BB81     		strh	r3, [r7, #12]	@ movhi
 300              	.L17:
 285:..\Common\Minimal/dynamic.c **** 
 286:..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 287:..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
 288:..\Common\Minimal/dynamic.c **** 
 289:..\Common\Minimal/dynamic.c **** 	for( ;; )
 290:..\Common\Minimal/dynamic.c **** 	{
 291:..\Common\Minimal/dynamic.c **** 		/* Start with the counter at zero. */
 292:..\Common\Minimal/dynamic.c **** 		ulCounter = ( uint32_t ) 0;
 301              		.loc 1 292 0
 302 000c 294B     		ldr	r3, .L18
 303 000e 0022     		movs	r2, #0
 304 0010 1A60     		str	r2, [r3]
 293:..\Common\Minimal/dynamic.c **** 
 294:..\Common\Minimal/dynamic.c **** 		/* First section : */
 295:..\Common\Minimal/dynamic.c **** 
 296:..\Common\Minimal/dynamic.c **** 		/* Check the continuous count task is running. */
 297:..\Common\Minimal/dynamic.c **** 		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 305              		.loc 1 297 0
 306 0012 0023     		movs	r3, #0
 307 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 308 0016 20E0     		b	.L12
 309              	.L14:
 298:..\Common\Minimal/dynamic.c **** 		{
 299:..\Common\Minimal/dynamic.c **** 			/* Suspend the continuous count task so we can take a mirror of the
 300:..\Common\Minimal/dynamic.c **** 			shared variable without risk of corruption.  This is not really
 301:..\Common\Minimal/dynamic.c **** 			needed as the other task raises its priority above this task's
 302:..\Common\Minimal/dynamic.c **** 			priority. */
 303:..\Common\Minimal/dynamic.c **** 			vTaskSuspend( xContinuousIncrementHandle );
 310              		.loc 1 303 0
 311 0018 274B     		ldr	r3, .L18+4
 312 001a 1B68     		ldr	r3, [r3]
 313 001c 1846     		mov	r0, r3
 314 001e FFF7FEFF 		bl	vTaskSuspend
 304:..\Common\Minimal/dynamic.c **** 			{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 12


 305:..\Common\Minimal/dynamic.c **** 				#if( INCLUDE_eTaskGetState == 1 )
 306:..\Common\Minimal/dynamic.c **** 				{
 307:..\Common\Minimal/dynamic.c **** 					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
 308:..\Common\Minimal/dynamic.c **** 				}
 309:..\Common\Minimal/dynamic.c **** 				#endif /* INCLUDE_eTaskGetState */
 310:..\Common\Minimal/dynamic.c **** 
 311:..\Common\Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 315              		.loc 1 311 0
 316 0022 244B     		ldr	r3, .L18
 317 0024 1B68     		ldr	r3, [r3]
 318 0026 BB60     		str	r3, [r7, #8]
 312:..\Common\Minimal/dynamic.c **** 			}
 313:..\Common\Minimal/dynamic.c **** 			vTaskResume( xContinuousIncrementHandle );
 319              		.loc 1 313 0
 320 0028 234B     		ldr	r3, .L18+4
 321 002a 1B68     		ldr	r3, [r3]
 322 002c 1846     		mov	r0, r3
 323 002e FFF7FEFF 		bl	vTaskResume
 314:..\Common\Minimal/dynamic.c **** 
 315:..\Common\Minimal/dynamic.c **** 			#if( configUSE_PREEMPTION == 0 )
 316:..\Common\Minimal/dynamic.c **** 				taskYIELD();
 317:..\Common\Minimal/dynamic.c **** 			#endif
 318:..\Common\Minimal/dynamic.c **** 
 319:..\Common\Minimal/dynamic.c **** 			#if( INCLUDE_eTaskGetState == 1 )
 320:..\Common\Minimal/dynamic.c **** 			{
 321:..\Common\Minimal/dynamic.c **** 				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
 322:..\Common\Minimal/dynamic.c **** 			}
 323:..\Common\Minimal/dynamic.c **** 			#endif /* INCLUDE_eTaskGetState */
 324:..\Common\Minimal/dynamic.c **** 
 325:..\Common\Minimal/dynamic.c **** 			/* Now delay to ensure the other task has processor time. */
 326:..\Common\Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 324              		.loc 1 326 0
 325 0032 8020     		movs	r0, #128
 326 0034 FFF7FEFF 		bl	vTaskDelay
 327:..\Common\Minimal/dynamic.c **** 
 328:..\Common\Minimal/dynamic.c **** 			/* Check the shared variable again.  This time to ensure mutual
 329:..\Common\Minimal/dynamic.c **** 			exclusion the whole scheduler will be locked.  This is just for
 330:..\Common\Minimal/dynamic.c **** 			demo purposes! */
 331:..\Common\Minimal/dynamic.c **** 			vTaskSuspendAll();
 327              		.loc 1 331 0
 328 0038 FFF7FEFF 		bl	vTaskSuspendAll
 332:..\Common\Minimal/dynamic.c **** 			{
 333:..\Common\Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 329              		.loc 1 333 0
 330 003c 1D4B     		ldr	r3, .L18
 331 003e 1B68     		ldr	r3, [r3]
 332 0040 BA68     		ldr	r2, [r7, #8]
 333 0042 9A42     		cmp	r2, r3
 334 0044 01D1     		bne	.L13
 334:..\Common\Minimal/dynamic.c **** 				{
 335:..\Common\Minimal/dynamic.c **** 					/* The shared variable has not changed.  There is a problem
 336:..\Common\Minimal/dynamic.c **** 					with the continuous count task so flag an error. */
 337:..\Common\Minimal/dynamic.c **** 					sError = pdTRUE;
 335              		.loc 1 337 0
 336 0046 0123     		movs	r3, #1
 337 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 338              	.L13:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 13


 338:..\Common\Minimal/dynamic.c **** 				}
 339:..\Common\Minimal/dynamic.c **** 			}
 340:..\Common\Minimal/dynamic.c **** 			xTaskResumeAll();
 339              		.loc 1 340 0 discriminator 2
 340 004a FFF7FEFF 		bl	xTaskResumeAll
 297:..\Common\Minimal/dynamic.c **** 		{
 341              		.loc 1 297 0 discriminator 2
 342 004e B7F90E30 		ldrsh	r3, [r7, #14]
 343 0052 9BB2     		uxth	r3, r3
 344 0054 0133     		adds	r3, r3, #1
 345 0056 9BB2     		uxth	r3, r3
 346 0058 FB81     		strh	r3, [r7, #14]	@ movhi
 347              	.L12:
 297:..\Common\Minimal/dynamic.c **** 		{
 348              		.loc 1 297 0 is_stmt 0 discriminator 1
 349 005a B7F90E30 		ldrsh	r3, [r7, #14]
 350 005e 042B     		cmp	r3, #4
 351 0060 DADD     		ble	.L14
 341:..\Common\Minimal/dynamic.c **** 		}
 342:..\Common\Minimal/dynamic.c **** 
 343:..\Common\Minimal/dynamic.c **** 		/* Second section: */
 344:..\Common\Minimal/dynamic.c **** 
 345:..\Common\Minimal/dynamic.c **** 		/* Suspend the continuous counter task so it stops accessing the shared
 346:..\Common\Minimal/dynamic.c **** 		variable. */
 347:..\Common\Minimal/dynamic.c **** 		vTaskSuspend( xContinuousIncrementHandle );
 352              		.loc 1 347 0 is_stmt 1
 353 0062 154B     		ldr	r3, .L18+4
 354 0064 1B68     		ldr	r3, [r3]
 355 0066 1846     		mov	r0, r3
 356 0068 FFF7FEFF 		bl	vTaskSuspend
 348:..\Common\Minimal/dynamic.c **** 
 349:..\Common\Minimal/dynamic.c **** 		/* Reset the variable. */
 350:..\Common\Minimal/dynamic.c **** 		ulCounter = ( uint32_t ) 0;
 357              		.loc 1 350 0
 358 006c 114B     		ldr	r3, .L18
 359 006e 0022     		movs	r2, #0
 360 0070 1A60     		str	r2, [r3]
 351:..\Common\Minimal/dynamic.c **** 
 352:..\Common\Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 353:..\Common\Minimal/dynamic.c **** 		{
 354:..\Common\Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 355:..\Common\Minimal/dynamic.c **** 		}
 356:..\Common\Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 357:..\Common\Minimal/dynamic.c **** 
 358:..\Common\Minimal/dynamic.c **** 		/* Resume the limited count task which has a higher priority than us.
 359:..\Common\Minimal/dynamic.c **** 		We should therefore not return from this call until the limited count
 360:..\Common\Minimal/dynamic.c **** 		task has suspended itself with a known value in the counter variable. */
 361:..\Common\Minimal/dynamic.c **** 		vTaskResume( xLimitedIncrementHandle );
 361              		.loc 1 361 0
 362 0072 124B     		ldr	r3, .L18+8
 363 0074 1B68     		ldr	r3, [r3]
 364 0076 1846     		mov	r0, r3
 365 0078 FFF7FEFF 		bl	vTaskResume
 362:..\Common\Minimal/dynamic.c **** 
 363:..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 364:..\Common\Minimal/dynamic.c **** 			taskYIELD();
 365:..\Common\Minimal/dynamic.c **** 		#endif
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 14


 366:..\Common\Minimal/dynamic.c **** 
 367:..\Common\Minimal/dynamic.c **** 		/* This task should not run again until xLimitedIncrementHandle has
 368:..\Common\Minimal/dynamic.c **** 		suspended itself. */
 369:..\Common\Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 370:..\Common\Minimal/dynamic.c **** 		{
 371:..\Common\Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 372:..\Common\Minimal/dynamic.c **** 		}
 373:..\Common\Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 374:..\Common\Minimal/dynamic.c **** 
 375:..\Common\Minimal/dynamic.c **** 		/* Does the counter variable have the expected value? */
 376:..\Common\Minimal/dynamic.c **** 		if( ulCounter != priMAX_COUNT )
 366              		.loc 1 376 0
 367 007c 0D4B     		ldr	r3, .L18
 368 007e 1B68     		ldr	r3, [r3]
 369 0080 FF2B     		cmp	r3, #255
 370 0082 01D0     		beq	.L15
 377:..\Common\Minimal/dynamic.c **** 		{
 378:..\Common\Minimal/dynamic.c **** 			sError = pdTRUE;
 371              		.loc 1 378 0
 372 0084 0123     		movs	r3, #1
 373 0086 BB81     		strh	r3, [r7, #12]	@ movhi
 374              	.L15:
 379:..\Common\Minimal/dynamic.c **** 		}
 380:..\Common\Minimal/dynamic.c **** 
 381:..\Common\Minimal/dynamic.c **** 		if( sError == pdFALSE )
 375              		.loc 1 381 0
 376 0088 B7F90C30 		ldrsh	r3, [r7, #12]
 377 008c 002B     		cmp	r3, #0
 378 008e 0AD1     		bne	.L16
 382:..\Common\Minimal/dynamic.c **** 		{
 383:..\Common\Minimal/dynamic.c **** 			/* If no errors have occurred then increment the check variable. */
 384:..\Common\Minimal/dynamic.c **** 			portENTER_CRITICAL();
 379              		.loc 1 384 0
 380 0090 FFF7FEFF 		bl	vPortEnterCritical
 385:..\Common\Minimal/dynamic.c **** 				usCheckVariable++;
 381              		.loc 1 385 0
 382 0094 0A4B     		ldr	r3, .L18+12
 383 0096 1B88     		ldrh	r3, [r3]	@ movhi
 384 0098 9BB2     		uxth	r3, r3
 385 009a 0133     		adds	r3, r3, #1
 386 009c 9AB2     		uxth	r2, r3
 387 009e 084B     		ldr	r3, .L18+12
 388 00a0 1A80     		strh	r2, [r3]	@ movhi
 386:..\Common\Minimal/dynamic.c **** 			portEXIT_CRITICAL();
 389              		.loc 1 386 0
 390 00a2 FFF7FEFF 		bl	vPortExitCritical
 391              	.L16:
 387:..\Common\Minimal/dynamic.c **** 		}
 388:..\Common\Minimal/dynamic.c **** 
 389:..\Common\Minimal/dynamic.c **** 		/* Resume the continuous count task and do it all again. */
 390:..\Common\Minimal/dynamic.c **** 		vTaskResume( xContinuousIncrementHandle );
 392              		.loc 1 390 0
 393 00a6 044B     		ldr	r3, .L18+4
 394 00a8 1B68     		ldr	r3, [r3]
 395 00aa 1846     		mov	r0, r3
 396 00ac FFF7FEFF 		bl	vTaskResume
 391:..\Common\Minimal/dynamic.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 15


 392:..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 393:..\Common\Minimal/dynamic.c **** 			taskYIELD();
 394:..\Common\Minimal/dynamic.c **** 		#endif
 395:..\Common\Minimal/dynamic.c **** 	}
 397              		.loc 1 395 0
 398 00b0 ACE7     		b	.L17
 399              	.L19:
 400 00b2 00BF     		.align	2
 401              	.L18:
 402 00b4 08000000 		.word	ulCounter
 403 00b8 00000000 		.word	xContinuousIncrementHandle
 404 00bc 04000000 		.word	xLimitedIncrementHandle
 405 00c0 0C000000 		.word	usCheckVariable
 406              		.cfi_endproc
 407              	.LFE71:
 408              		.size	vCounterControlTask, .-vCounterControlTask
 409              		.section	.text.vQueueSendWhenSuspendedTask,"ax",%progbits
 410              		.align	2
 411              		.thumb
 412              		.thumb_func
 413              		.type	vQueueSendWhenSuspendedTask, %function
 414              	vQueueSendWhenSuspendedTask:
 415              	.LFB72:
 396:..\Common\Minimal/dynamic.c **** }
 397:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 398:..\Common\Minimal/dynamic.c **** 
 399:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
 400:..\Common\Minimal/dynamic.c **** {
 416              		.loc 1 400 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 8
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420 0000 80B5     		push	{r7, lr}
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 82B0     		sub	sp, sp, #8
 425              		.cfi_def_cfa_offset 16
 426 0004 00AF     		add	r7, sp, #0
 427              		.cfi_def_cfa_register 7
 428 0006 7860     		str	r0, [r7, #4]
 429              	.L22:
 401:..\Common\Minimal/dynamic.c **** static uint32_t ulValueToSend = ( uint32_t ) 0;
 402:..\Common\Minimal/dynamic.c **** 
 403:..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 404:..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
 405:..\Common\Minimal/dynamic.c **** 
 406:..\Common\Minimal/dynamic.c **** 	for( ;; )
 407:..\Common\Minimal/dynamic.c **** 	{
 408:..\Common\Minimal/dynamic.c **** 		vTaskSuspendAll();
 430              		.loc 1 408 0
 431 0008 FFF7FEFF 		bl	vTaskSuspendAll
 409:..\Common\Minimal/dynamic.c **** 		{
 410:..\Common\Minimal/dynamic.c **** 			/* We must not block while the scheduler is suspended! */
 411:..\Common\Minimal/dynamic.c **** 			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 432              		.loc 1 411 0
 433 000c 0B4B     		ldr	r3, .L23
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 16


 434 000e 1868     		ldr	r0, [r3]
 435 0010 0023     		movs	r3, #0
 436 0012 0022     		movs	r2, #0
 437 0014 0A49     		ldr	r1, .L23+4
 438 0016 FFF7FEFF 		bl	xQueueGenericSend
 439 001a 0346     		mov	r3, r0
 440 001c 012B     		cmp	r3, #1
 441 001e 02D0     		beq	.L21
 412:..\Common\Minimal/dynamic.c **** 			{
 413:..\Common\Minimal/dynamic.c **** 				xSuspendedQueueSendError = pdTRUE;
 442              		.loc 1 413 0
 443 0020 084B     		ldr	r3, .L23+8
 444 0022 0122     		movs	r2, #1
 445 0024 1A60     		str	r2, [r3]
 446              	.L21:
 414:..\Common\Minimal/dynamic.c **** 			}
 415:..\Common\Minimal/dynamic.c **** 		}
 416:..\Common\Minimal/dynamic.c **** 		xTaskResumeAll();
 447              		.loc 1 416 0
 448 0026 FFF7FEFF 		bl	xTaskResumeAll
 417:..\Common\Minimal/dynamic.c **** 
 418:..\Common\Minimal/dynamic.c **** 		vTaskDelay( priSLEEP_TIME );
 449              		.loc 1 418 0
 450 002a 8020     		movs	r0, #128
 451 002c FFF7FEFF 		bl	vTaskDelay
 419:..\Common\Minimal/dynamic.c **** 
 420:..\Common\Minimal/dynamic.c **** 		++ulValueToSend;
 452              		.loc 1 420 0
 453 0030 034B     		ldr	r3, .L23+4
 454 0032 1B68     		ldr	r3, [r3]
 455 0034 0133     		adds	r3, r3, #1
 456 0036 024A     		ldr	r2, .L23+4
 457 0038 1360     		str	r3, [r2]
 421:..\Common\Minimal/dynamic.c **** 	}
 458              		.loc 1 421 0
 459 003a E5E7     		b	.L22
 460              	.L24:
 461              		.align	2
 462              	.L23:
 463 003c 00000000 		.word	xSuspendedTestQueue
 464 0040 1C000000 		.word	ulValueToSend.7577
 465 0044 10000000 		.word	xSuspendedQueueSendError
 466              		.cfi_endproc
 467              	.LFE72:
 468              		.size	vQueueSendWhenSuspendedTask, .-vQueueSendWhenSuspendedTask
 469              		.section	.text.vQueueReceiveWhenSuspendedTask,"ax",%progbits
 470              		.align	2
 471              		.thumb
 472              		.thumb_func
 473              		.type	vQueueReceiveWhenSuspendedTask, %function
 474              	vQueueReceiveWhenSuspendedTask:
 475              	.LFB73:
 422:..\Common\Minimal/dynamic.c **** }
 423:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 424:..\Common\Minimal/dynamic.c **** 
 425:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
 426:..\Common\Minimal/dynamic.c **** {
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 17


 476              		.loc 1 426 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 16
 479              		@ frame_needed = 1, uses_anonymous_args = 0
 480 0000 80B5     		push	{r7, lr}
 481              		.cfi_def_cfa_offset 8
 482              		.cfi_offset 7, -8
 483              		.cfi_offset 14, -4
 484 0002 84B0     		sub	sp, sp, #16
 485              		.cfi_def_cfa_offset 24
 486 0004 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 488 0006 7860     		str	r0, [r7, #4]
 489              	.L27:
 427:..\Common\Minimal/dynamic.c **** uint32_t ulReceivedValue;
 428:..\Common\Minimal/dynamic.c **** BaseType_t xGotValue;
 429:..\Common\Minimal/dynamic.c **** 
 430:..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 431:..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
 432:..\Common\Minimal/dynamic.c **** 
 433:..\Common\Minimal/dynamic.c **** 	for( ;; )
 434:..\Common\Minimal/dynamic.c **** 	{
 435:..\Common\Minimal/dynamic.c **** 		do
 436:..\Common\Minimal/dynamic.c **** 		{
 437:..\Common\Minimal/dynamic.c **** 			/* Suspending the scheduler here is fairly pointless and
 438:..\Common\Minimal/dynamic.c **** 			undesirable for a normal application.  It is done here purely
 439:..\Common\Minimal/dynamic.c **** 			to test the scheduler.  The inner xTaskResumeAll() should
 440:..\Common\Minimal/dynamic.c **** 			never return pdTRUE as the scheduler is still locked by the
 441:..\Common\Minimal/dynamic.c **** 			outer call. */
 442:..\Common\Minimal/dynamic.c **** 			vTaskSuspendAll();
 490              		.loc 1 442 0
 491 0008 FFF7FEFF 		bl	vTaskSuspendAll
 443:..\Common\Minimal/dynamic.c **** 			{
 444:..\Common\Minimal/dynamic.c **** 				vTaskSuspendAll();
 492              		.loc 1 444 0
 493 000c FFF7FEFF 		bl	vTaskSuspendAll
 445:..\Common\Minimal/dynamic.c **** 				{
 446:..\Common\Minimal/dynamic.c **** 					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 494              		.loc 1 446 0
 495 0010 134B     		ldr	r3, .L30
 496 0012 1868     		ldr	r0, [r3]
 497 0014 07F10801 		add	r1, r7, #8
 498 0018 0023     		movs	r3, #0
 499 001a 0022     		movs	r2, #0
 500 001c FFF7FEFF 		bl	xQueueGenericReceive
 501 0020 F860     		str	r0, [r7, #12]
 447:..\Common\Minimal/dynamic.c **** 				}
 448:..\Common\Minimal/dynamic.c **** 				if( xTaskResumeAll() != pdFALSE )
 502              		.loc 1 448 0
 503 0022 FFF7FEFF 		bl	xTaskResumeAll
 504 0026 0346     		mov	r3, r0
 505 0028 002B     		cmp	r3, #0
 506 002a 02D0     		beq	.L26
 449:..\Common\Minimal/dynamic.c **** 				{
 450:..\Common\Minimal/dynamic.c **** 					xSuspendedQueueReceiveError = pdTRUE;
 507              		.loc 1 450 0
 508 002c 0D4B     		ldr	r3, .L30+4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 18


 509 002e 0122     		movs	r2, #1
 510 0030 1A60     		str	r2, [r3]
 511              	.L26:
 451:..\Common\Minimal/dynamic.c **** 				}
 452:..\Common\Minimal/dynamic.c **** 			}
 453:..\Common\Minimal/dynamic.c **** 			xTaskResumeAll();
 512              		.loc 1 453 0
 513 0032 FFF7FEFF 		bl	xTaskResumeAll
 454:..\Common\Minimal/dynamic.c **** 
 455:..\Common\Minimal/dynamic.c **** 			#if configUSE_PREEMPTION == 0
 456:..\Common\Minimal/dynamic.c **** 			{
 457:..\Common\Minimal/dynamic.c **** 				taskYIELD();
 458:..\Common\Minimal/dynamic.c **** 			}
 459:..\Common\Minimal/dynamic.c **** 			#endif
 460:..\Common\Minimal/dynamic.c **** 
 461:..\Common\Minimal/dynamic.c **** 		} while( xGotValue == pdFALSE );
 514              		.loc 1 461 0
 515 0036 FB68     		ldr	r3, [r7, #12]
 516 0038 002B     		cmp	r3, #0
 517 003a E5D0     		beq	.L27
 462:..\Common\Minimal/dynamic.c **** 
 463:..\Common\Minimal/dynamic.c **** 		if( ulReceivedValue != ulExpectedValue )
 518              		.loc 1 463 0
 519 003c BA68     		ldr	r2, [r7, #8]
 520 003e 0A4B     		ldr	r3, .L30+8
 521 0040 1B68     		ldr	r3, [r3]
 522 0042 9A42     		cmp	r2, r3
 523 0044 02D0     		beq	.L28
 464:..\Common\Minimal/dynamic.c **** 		{
 465:..\Common\Minimal/dynamic.c **** 			xSuspendedQueueReceiveError = pdTRUE;
 524              		.loc 1 465 0
 525 0046 074B     		ldr	r3, .L30+4
 526 0048 0122     		movs	r2, #1
 527 004a 1A60     		str	r2, [r3]
 528              	.L28:
 466:..\Common\Minimal/dynamic.c **** 		}
 467:..\Common\Minimal/dynamic.c **** 
 468:..\Common\Minimal/dynamic.c **** 		if( xSuspendedQueueReceiveError != pdTRUE )
 529              		.loc 1 468 0
 530 004c 054B     		ldr	r3, .L30+4
 531 004e 1B68     		ldr	r3, [r3]
 532 0050 012B     		cmp	r3, #1
 533 0052 D9D0     		beq	.L27
 469:..\Common\Minimal/dynamic.c **** 		{
 470:..\Common\Minimal/dynamic.c **** 			/* Only increment the variable if an error has not occurred.  This
 471:..\Common\Minimal/dynamic.c **** 			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
 472:..\Common\Minimal/dynamic.c **** 			tasks as well as explicit errors. */
 473:..\Common\Minimal/dynamic.c **** 			++ulExpectedValue;
 534              		.loc 1 473 0
 535 0054 044B     		ldr	r3, .L30+8
 536 0056 1B68     		ldr	r3, [r3]
 537 0058 0133     		adds	r3, r3, #1
 538 005a 034A     		ldr	r2, .L30+8
 539 005c 1360     		str	r3, [r2]
 474:..\Common\Minimal/dynamic.c **** 		}
 475:..\Common\Minimal/dynamic.c **** 	}
 540              		.loc 1 475 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 19


 541 005e D3E7     		b	.L27
 542              	.L31:
 543              		.align	2
 544              	.L30:
 545 0060 00000000 		.word	xSuspendedTestQueue
 546 0064 14000000 		.word	xSuspendedQueueReceiveError
 547 0068 18000000 		.word	ulExpectedValue
 548              		.cfi_endproc
 549              	.LFE73:
 550              		.size	vQueueReceiveWhenSuspendedTask, .-vQueueReceiveWhenSuspendedTask
 551              		.section	.text.xAreDynamicPriorityTasksStillRunning,"ax",%progbits
 552              		.align	2
 553              		.global	xAreDynamicPriorityTasksStillRunning
 554              		.thumb
 555              		.thumb_func
 556              		.type	xAreDynamicPriorityTasksStillRunning, %function
 557              	xAreDynamicPriorityTasksStillRunning:
 558              	.LFB74:
 476:..\Common\Minimal/dynamic.c **** }
 477:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 478:..\Common\Minimal/dynamic.c **** 
 479:..\Common\Minimal/dynamic.c **** /* Called to check that all the created tasks are still running without error. */
 480:..\Common\Minimal/dynamic.c **** BaseType_t xAreDynamicPriorityTasksStillRunning( void )
 481:..\Common\Minimal/dynamic.c **** {
 559              		.loc 1 481 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 8
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 564 0000 80B4     		push	{r7}
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 7, -4
 567 0002 83B0     		sub	sp, sp, #12
 568              		.cfi_def_cfa_offset 16
 569 0004 00AF     		add	r7, sp, #0
 570              		.cfi_def_cfa_register 7
 482:..\Common\Minimal/dynamic.c **** /* Keep a history of the check variables so we know if it has been incremented
 483:..\Common\Minimal/dynamic.c **** since the last call. */
 484:..\Common\Minimal/dynamic.c **** static uint16_t usLastTaskCheck = ( uint16_t ) 0;
 485:..\Common\Minimal/dynamic.c **** static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
 486:..\Common\Minimal/dynamic.c **** BaseType_t xReturn = pdTRUE;
 571              		.loc 1 486 0
 572 0006 0123     		movs	r3, #1
 573 0008 7B60     		str	r3, [r7, #4]
 487:..\Common\Minimal/dynamic.c **** 
 488:..\Common\Minimal/dynamic.c **** 	/* Check the tasks are still running by ensuring the check variable
 489:..\Common\Minimal/dynamic.c **** 	is still incrementing. */
 490:..\Common\Minimal/dynamic.c **** 
 491:..\Common\Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 574              		.loc 1 491 0
 575 000a 164B     		ldr	r3, .L38
 576 000c 1B88     		ldrh	r3, [r3]	@ movhi
 577 000e 9AB2     		uxth	r2, r3
 578 0010 154B     		ldr	r3, .L38+4
 579 0012 1B88     		ldrh	r3, [r3]
 580 0014 9A42     		cmp	r2, r3
 581 0016 01D1     		bne	.L33
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 20


 492:..\Common\Minimal/dynamic.c **** 	{
 493:..\Common\Minimal/dynamic.c **** 		/* The check has not incremented so an error exists. */
 494:..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 582              		.loc 1 494 0
 583 0018 0023     		movs	r3, #0
 584 001a 7B60     		str	r3, [r7, #4]
 585              	.L33:
 495:..\Common\Minimal/dynamic.c **** 	}
 496:..\Common\Minimal/dynamic.c **** 
 497:..\Common\Minimal/dynamic.c **** 	if( ulExpectedValue == ulLastExpectedValue )
 586              		.loc 1 497 0
 587 001c 134B     		ldr	r3, .L38+8
 588 001e 1A68     		ldr	r2, [r3]
 589 0020 134B     		ldr	r3, .L38+12
 590 0022 1B68     		ldr	r3, [r3]
 591 0024 9A42     		cmp	r2, r3
 592 0026 01D1     		bne	.L34
 498:..\Common\Minimal/dynamic.c **** 	{
 499:..\Common\Minimal/dynamic.c **** 		/* The value being received by the queue receive task has not
 500:..\Common\Minimal/dynamic.c **** 		incremented so an error exists. */
 501:..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 593              		.loc 1 501 0
 594 0028 0023     		movs	r3, #0
 595 002a 7B60     		str	r3, [r7, #4]
 596              	.L34:
 502:..\Common\Minimal/dynamic.c **** 	}
 503:..\Common\Minimal/dynamic.c **** 
 504:..\Common\Minimal/dynamic.c **** 	if( xSuspendedQueueSendError == pdTRUE )
 597              		.loc 1 504 0
 598 002c 114B     		ldr	r3, .L38+16
 599 002e 1B68     		ldr	r3, [r3]
 600 0030 012B     		cmp	r3, #1
 601 0032 01D1     		bne	.L35
 505:..\Common\Minimal/dynamic.c **** 	{
 506:..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 602              		.loc 1 506 0
 603 0034 0023     		movs	r3, #0
 604 0036 7B60     		str	r3, [r7, #4]
 605              	.L35:
 507:..\Common\Minimal/dynamic.c **** 	}
 508:..\Common\Minimal/dynamic.c **** 
 509:..\Common\Minimal/dynamic.c **** 	if( xSuspendedQueueReceiveError == pdTRUE )
 606              		.loc 1 509 0
 607 0038 0F4B     		ldr	r3, .L38+20
 608 003a 1B68     		ldr	r3, [r3]
 609 003c 012B     		cmp	r3, #1
 610 003e 01D1     		bne	.L36
 510:..\Common\Minimal/dynamic.c **** 	{
 511:..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 611              		.loc 1 511 0
 612 0040 0023     		movs	r3, #0
 613 0042 7B60     		str	r3, [r7, #4]
 614              	.L36:
 512:..\Common\Minimal/dynamic.c **** 	}
 513:..\Common\Minimal/dynamic.c **** 
 514:..\Common\Minimal/dynamic.c **** 	usLastTaskCheck = usCheckVariable;
 615              		.loc 1 514 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 21


 616 0044 074B     		ldr	r3, .L38
 617 0046 1B88     		ldrh	r3, [r3]	@ movhi
 618 0048 9AB2     		uxth	r2, r3
 619 004a 074B     		ldr	r3, .L38+4
 620 004c 1A80     		strh	r2, [r3]	@ movhi
 515:..\Common\Minimal/dynamic.c **** 	ulLastExpectedValue = ulExpectedValue;
 621              		.loc 1 515 0
 622 004e 074B     		ldr	r3, .L38+8
 623 0050 1B68     		ldr	r3, [r3]
 624 0052 074A     		ldr	r2, .L38+12
 625 0054 1360     		str	r3, [r2]
 516:..\Common\Minimal/dynamic.c **** 
 517:..\Common\Minimal/dynamic.c **** 	return xReturn;
 626              		.loc 1 517 0
 627 0056 7B68     		ldr	r3, [r7, #4]
 518:..\Common\Minimal/dynamic.c **** }
 628              		.loc 1 518 0
 629 0058 1846     		mov	r0, r3
 630 005a 0C37     		adds	r7, r7, #12
 631              		.cfi_def_cfa_offset 4
 632 005c BD46     		mov	sp, r7
 633              		.cfi_def_cfa_register 13
 634              		@ sp needed
 635 005e 80BC     		pop	{r7}
 636              		.cfi_restore 7
 637              		.cfi_def_cfa_offset 0
 638 0060 7047     		bx	lr
 639              	.L39:
 640 0062 00BF     		.align	2
 641              	.L38:
 642 0064 0C000000 		.word	usCheckVariable
 643 0068 20000000 		.word	usLastTaskCheck.7590
 644 006c 18000000 		.word	ulExpectedValue
 645 0070 24000000 		.word	ulLastExpectedValue.7591
 646 0074 10000000 		.word	xSuspendedQueueSendError
 647 0078 14000000 		.word	xSuspendedQueueReceiveError
 648              		.cfi_endproc
 649              	.LFE74:
 650              		.size	xAreDynamicPriorityTasksStillRunning, .-xAreDynamicPriorityTasksStillRunning
 651              		.bss
 652              		.align	2
 653              	ulValueToSend.7577:
 654 001c 00000000 		.space	4
 655              		.align	1
 656              	usLastTaskCheck.7590:
 657 0020 0000     		.space	2
 658 0022 0000     		.align	2
 659              	ulLastExpectedValue.7591:
 660 0024 00000000 		.space	4
 661              		.text
 662              	.Letext0:
 663              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 664              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 665              		.file 4 ".\\Tracer/sniffPayload.h"
 666              		.file 5 ".\\Tracer/selfFIFO.h"
 667              		.file 6 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 668              		.file 7 "..\\Source\\include/task.h"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 22


 669              		.file 8 "..\\Source\\include/queue.h"
 670              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 671              		.file 10 ".\\Tracer/sniffTask.h"
 672              		.section	.debug_info,"",%progbits
 673              	.Ldebug_info0:
 674 0000 13050000 		.4byte	0x513
 675 0004 0400     		.2byte	0x4
 676 0006 00000000 		.4byte	.Ldebug_abbrev0
 677 000a 04       		.byte	0x4
 678 000b 01       		.uleb128 0x1
 679 000c 7C000000 		.4byte	.LASF79
 680 0010 0C       		.byte	0xc
 681 0011 5D020000 		.4byte	.LASF80
 682 0015 0D050000 		.4byte	.LASF81
 683 0019 00000000 		.4byte	.Ldebug_ranges0+0
 684 001d 00000000 		.4byte	0
 685 0021 00000000 		.4byte	.Ldebug_line0
 686 0025 02       		.uleb128 0x2
 687 0026 04       		.byte	0x4
 688 0027 07       		.byte	0x7
 689 0028 F3020000 		.4byte	.LASF0
 690 002c 03       		.uleb128 0x3
 691 002d 04       		.byte	0x4
 692 002e 05       		.byte	0x5
 693 002f 696E7400 		.ascii	"int\000"
 694 0033 02       		.uleb128 0x2
 695 0034 08       		.byte	0x8
 696 0035 05       		.byte	0x5
 697 0036 B5010000 		.4byte	.LASF1
 698 003a 02       		.uleb128 0x2
 699 003b 08       		.byte	0x8
 700 003c 04       		.byte	0x4
 701 003d 0A010000 		.4byte	.LASF2
 702 0041 02       		.uleb128 0x2
 703 0042 01       		.byte	0x1
 704 0043 06       		.byte	0x6
 705 0044 9E020000 		.4byte	.LASF3
 706 0048 04       		.uleb128 0x4
 707 0049 F5010000 		.4byte	.LASF6
 708 004d 02       		.byte	0x2
 709 004e 1D       		.byte	0x1d
 710 004f 53000000 		.4byte	0x53
 711 0053 02       		.uleb128 0x2
 712 0054 01       		.byte	0x1
 713 0055 08       		.byte	0x8
 714 0056 4F020000 		.4byte	.LASF4
 715 005a 02       		.uleb128 0x2
 716 005b 02       		.byte	0x2
 717 005c 05       		.byte	0x5
 718 005d 3B000000 		.4byte	.LASF5
 719 0061 04       		.uleb128 0x4
 720 0062 40010000 		.4byte	.LASF7
 721 0066 02       		.byte	0x2
 722 0067 2B       		.byte	0x2b
 723 0068 6C000000 		.4byte	0x6c
 724 006c 02       		.uleb128 0x2
 725 006d 02       		.byte	0x2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 23


 726 006e 07       		.byte	0x7
 727 006f 54030000 		.4byte	.LASF8
 728 0073 04       		.uleb128 0x4
 729 0074 70040000 		.4byte	.LASF9
 730 0078 02       		.byte	0x2
 731 0079 3F       		.byte	0x3f
 732 007a 7E000000 		.4byte	0x7e
 733 007e 02       		.uleb128 0x2
 734 007f 04       		.byte	0x4
 735 0080 05       		.byte	0x5
 736 0081 CE010000 		.4byte	.LASF10
 737 0085 04       		.uleb128 0x4
 738 0086 16010000 		.4byte	.LASF11
 739 008a 02       		.byte	0x2
 740 008b 41       		.byte	0x41
 741 008c 90000000 		.4byte	0x90
 742 0090 02       		.uleb128 0x2
 743 0091 04       		.byte	0x4
 744 0092 07       		.byte	0x7
 745 0093 28040000 		.4byte	.LASF12
 746 0097 02       		.uleb128 0x2
 747 0098 08       		.byte	0x8
 748 0099 07       		.byte	0x7
 749 009a B8020000 		.4byte	.LASF13
 750 009e 02       		.uleb128 0x2
 751 009f 04       		.byte	0x4
 752 00a0 07       		.byte	0x7
 753 00a1 55000000 		.4byte	.LASF14
 754 00a5 05       		.uleb128 0x5
 755 00a6 04       		.byte	0x4
 756 00a7 02       		.uleb128 0x2
 757 00a8 01       		.byte	0x1
 758 00a9 08       		.byte	0x8
 759 00aa 67030000 		.4byte	.LASF15
 760 00ae 04       		.uleb128 0x4
 761 00af 4B010000 		.4byte	.LASF16
 762 00b3 03       		.byte	0x3
 763 00b4 18       		.byte	0x18
 764 00b5 48000000 		.4byte	0x48
 765 00b9 04       		.uleb128 0x4
 766 00ba 6C030000 		.4byte	.LASF17
 767 00be 03       		.byte	0x3
 768 00bf 24       		.byte	0x24
 769 00c0 61000000 		.4byte	0x61
 770 00c4 04       		.uleb128 0x4
 771 00c5 9D030000 		.4byte	.LASF18
 772 00c9 03       		.byte	0x3
 773 00ca 2C       		.byte	0x2c
 774 00cb 73000000 		.4byte	0x73
 775 00cf 04       		.uleb128 0x4
 776 00d0 EA020000 		.4byte	.LASF19
 777 00d4 03       		.byte	0x3
 778 00d5 30       		.byte	0x30
 779 00d6 85000000 		.4byte	0x85
 780 00da 02       		.uleb128 0x2
 781 00db 04       		.byte	0x4
 782 00dc 04       		.byte	0x4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 24


 783 00dd A3010000 		.4byte	.LASF20
 784 00e1 02       		.uleb128 0x2
 785 00e2 08       		.byte	0x8
 786 00e3 04       		.byte	0x4
 787 00e4 3A040000 		.4byte	.LASF21
 788 00e8 06       		.uleb128 0x6
 789 00e9 CF000000 		.4byte	0xcf
 790 00ed 06       		.uleb128 0x6
 791 00ee B9000000 		.4byte	0xb9
 792 00f2 07       		.uleb128 0x7
 793 00f3 01       		.byte	0x1
 794 00f4 53000000 		.4byte	0x53
 795 00f8 04       		.byte	0x4
 796 00f9 10       		.byte	0x10
 797 00fa 29010000 		.4byte	0x129
 798 00fe 08       		.uleb128 0x8
 799 00ff 1B020000 		.4byte	.LASF22
 800 0103 00       		.byte	0
 801 0104 08       		.uleb128 0x8
 802 0105 5E000000 		.4byte	.LASF23
 803 0109 01       		.byte	0x1
 804 010a 08       		.uleb128 0x8
 805 010b 21020000 		.4byte	.LASF24
 806 010f 02       		.byte	0x2
 807 0110 08       		.uleb128 0x8
 808 0111 41040000 		.4byte	.LASF25
 809 0115 03       		.byte	0x3
 810 0116 08       		.uleb128 0x8
 811 0117 E5010000 		.4byte	.LASF26
 812 011b 04       		.byte	0x4
 813 011c 08       		.uleb128 0x8
 814 011d 6B040000 		.4byte	.LASF27
 815 0121 05       		.byte	0x5
 816 0122 08       		.uleb128 0x8
 817 0123 12040000 		.4byte	.LASF28
 818 0127 06       		.byte	0x6
 819 0128 00       		.byte	0
 820 0129 04       		.uleb128 0x4
 821 012a 78010000 		.4byte	.LASF29
 822 012e 04       		.byte	0x4
 823 012f 10       		.byte	0x10
 824 0130 F2000000 		.4byte	0xf2
 825 0134 09       		.uleb128 0x9
 826 0135 04       		.byte	0x4
 827 0136 04       		.byte	0x4
 828 0137 86       		.byte	0x86
 829 0138 6D010000 		.4byte	0x16d
 830 013c 0A       		.uleb128 0xa
 831 013d 94030000 		.4byte	.LASF30
 832 0141 04       		.byte	0x4
 833 0142 87       		.byte	0x87
 834 0143 AE000000 		.4byte	0xae
 835 0147 00       		.byte	0
 836 0148 0A       		.uleb128 0xa
 837 0149 10000000 		.4byte	.LASF31
 838 014d 04       		.byte	0x4
 839 014e 88       		.byte	0x88
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 25


 840 014f AE000000 		.4byte	0xae
 841 0153 01       		.byte	0x1
 842 0154 0A       		.uleb128 0xa
 843 0155 71000000 		.4byte	.LASF32
 844 0159 04       		.byte	0x4
 845 015a 89       		.byte	0x89
 846 015b 29010000 		.4byte	0x129
 847 015f 02       		.byte	0x2
 848 0160 0A       		.uleb128 0xa
 849 0161 9C010000 		.4byte	.LASF33
 850 0165 04       		.byte	0x4
 851 0166 8A       		.byte	0x8a
 852 0167 AE000000 		.4byte	0xae
 853 016b 03       		.byte	0x3
 854 016c 00       		.byte	0
 855 016d 04       		.uleb128 0x4
 856 016e 00030000 		.4byte	.LASF34
 857 0172 04       		.byte	0x4
 858 0173 8B       		.byte	0x8b
 859 0174 34010000 		.4byte	0x134
 860 0178 09       		.uleb128 0x9
 861 0179 0E       		.byte	0xe
 862 017a 04       		.byte	0x4
 863 017b 95       		.byte	0x95
 864 017c A5010000 		.4byte	0x1a5
 865 0180 0A       		.uleb128 0xa
 866 0181 2E000000 		.4byte	.LASF35
 867 0185 04       		.byte	0x4
 868 0186 96       		.byte	0x96
 869 0187 AE000000 		.4byte	0xae
 870 018b 00       		.byte	0
 871 018c 0A       		.uleb128 0xa
 872 018d 5F010000 		.4byte	.LASF36
 873 0191 04       		.byte	0x4
 874 0192 97       		.byte	0x97
 875 0193 AE000000 		.4byte	0xae
 876 0197 01       		.byte	0x1
 877 0198 0A       		.uleb128 0xa
 878 0199 6D010000 		.4byte	.LASF37
 879 019d 04       		.byte	0x4
 880 019e 98       		.byte	0x98
 881 019f A5010000 		.4byte	0x1a5
 882 01a3 02       		.byte	0x2
 883 01a4 00       		.byte	0
 884 01a5 0B       		.uleb128 0xb
 885 01a6 A7000000 		.4byte	0xa7
 886 01aa B5010000 		.4byte	0x1b5
 887 01ae 0C       		.uleb128 0xc
 888 01af 9E000000 		.4byte	0x9e
 889 01b3 0B       		.byte	0xb
 890 01b4 00       		.byte	0
 891 01b5 04       		.uleb128 0x4
 892 01b6 A9010000 		.4byte	.LASF38
 893 01ba 04       		.byte	0x4
 894 01bb 99       		.byte	0x99
 895 01bc 78010000 		.4byte	0x178
 896 01c0 0D       		.uleb128 0xd
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 26


 897 01c1 1C01     		.2byte	0x11c
 898 01c3 04       		.byte	0x4
 899 01c4 A3       		.byte	0xa3
 900 01c5 E2010000 		.4byte	0x1e2
 901 01c9 0A       		.uleb128 0xa
 902 01ca 33010000 		.4byte	.LASF39
 903 01ce 04       		.byte	0x4
 904 01cf A4       		.byte	0xa4
 905 01d0 6D010000 		.4byte	0x16d
 906 01d4 00       		.byte	0
 907 01d5 0A       		.uleb128 0xa
 908 01d6 53010000 		.4byte	.LASF40
 909 01da 04       		.byte	0x4
 910 01db A5       		.byte	0xa5
 911 01dc E2010000 		.4byte	0x1e2
 912 01e0 04       		.byte	0x4
 913 01e1 00       		.byte	0
 914 01e2 0B       		.uleb128 0xb
 915 01e3 B5010000 		.4byte	0x1b5
 916 01e7 F2010000 		.4byte	0x1f2
 917 01eb 0C       		.uleb128 0xc
 918 01ec 9E000000 		.4byte	0x9e
 919 01f0 13       		.byte	0x13
 920 01f1 00       		.byte	0
 921 01f2 04       		.uleb128 0x4
 922 01f3 96040000 		.4byte	.LASF41
 923 01f7 04       		.byte	0x4
 924 01f8 A6       		.byte	0xa6
 925 01f9 C0010000 		.4byte	0x1c0
 926 01fd 0E       		.uleb128 0xe
 927 01fe BD040000 		.4byte	.LASF82
 928 0202 0210     		.2byte	0x1002
 929 0204 05       		.byte	0x5
 930 0205 0C       		.byte	0xc
 931 0206 31020000 		.4byte	0x231
 932 020a 0A       		.uleb128 0xa
 933 020b CB030000 		.4byte	.LASF42
 934 020f 05       		.byte	0x5
 935 0210 0D       		.byte	0xd
 936 0211 31020000 		.4byte	0x231
 937 0215 00       		.byte	0
 938 0216 0F       		.uleb128 0xf
 939 0217 B0010000 		.4byte	.LASF43
 940 021b 05       		.byte	0x5
 941 021c 0E       		.byte	0xe
 942 021d AE000000 		.4byte	0xae
 943 0221 0010     		.2byte	0x1000
 944 0223 0F       		.uleb128 0xf
 945 0224 1E000000 		.4byte	.LASF44
 946 0228 05       		.byte	0x5
 947 0229 0F       		.byte	0xf
 948 022a AE000000 		.4byte	0xae
 949 022e 0110     		.2byte	0x1001
 950 0230 00       		.byte	0
 951 0231 0B       		.uleb128 0xb
 952 0232 AE000000 		.4byte	0xae
 953 0236 42020000 		.4byte	0x242
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 27


 954 023a 10       		.uleb128 0x10
 955 023b 9E000000 		.4byte	0x9e
 956 023f FF0F     		.2byte	0xfff
 957 0241 00       		.byte	0
 958 0242 04       		.uleb128 0x4
 959 0243 11030000 		.4byte	.LASF45
 960 0247 06       		.byte	0x6
 961 0248 62       		.byte	0x62
 962 0249 7E000000 		.4byte	0x7e
 963 024d 04       		.uleb128 0x4
 964 024e A5030000 		.4byte	.LASF46
 965 0252 06       		.byte	0x6
 966 0253 63       		.byte	0x63
 967 0254 90000000 		.4byte	0x90
 968 0258 04       		.uleb128 0x4
 969 0259 C3010000 		.4byte	.LASF47
 970 025d 06       		.byte	0x6
 971 025e 69       		.byte	0x69
 972 025f CF000000 		.4byte	0xcf
 973 0263 04       		.uleb128 0x4
 974 0264 64000000 		.4byte	.LASF48
 975 0268 07       		.byte	0x7
 976 0269 67       		.byte	0x67
 977 026a A5000000 		.4byte	0xa5
 978 026e 04       		.uleb128 0x4
 979 026f FF010000 		.4byte	.LASF49
 980 0273 08       		.byte	0x8
 981 0274 58       		.byte	0x58
 982 0275 A5000000 		.4byte	0xa5
 983 0279 11       		.uleb128 0x11
 984 027a CF020000 		.4byte	.LASF83
 985 027e 01       		.byte	0x1
 986 027f BC       		.byte	0xbc
 987 0280 00000000 		.4byte	.LFB68
 988 0284 D0000000 		.4byte	.LFE68-.LFB68
 989 0288 01       		.uleb128 0x1
 990 0289 9C       		.byte	0x9c
 991 028a 12       		.uleb128 0x12
 992 028b FC030000 		.4byte	.LASF50
 993 028f 01       		.byte	0x1
 994 0290 D7       		.byte	0xd7
 995 0291 00000000 		.4byte	.LFB69
 996 0295 2C000000 		.4byte	.LFE69-.LFB69
 997 0299 01       		.uleb128 0x1
 998 029a 9C       		.byte	0x9c
 999 029b BC020000 		.4byte	0x2bc
 1000 029f 13       		.uleb128 0x13
 1001 02a0 1C030000 		.4byte	.LASF52
 1002 02a4 01       		.byte	0x1
 1003 02a5 D7       		.byte	0xd7
 1004 02a6 A5000000 		.4byte	0xa5
 1005 02aa 02       		.uleb128 0x2
 1006 02ab 91       		.byte	0x91
 1007 02ac 6C       		.sleb128 -20
 1008 02ad 14       		.uleb128 0x14
 1009 02ae 21010000 		.4byte	.LASF53
 1010 02b2 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 28


 1011 02b3 D9       		.byte	0xd9
 1012 02b4 BC020000 		.4byte	0x2bc
 1013 02b8 02       		.uleb128 0x2
 1014 02b9 91       		.byte	0x91
 1015 02ba 74       		.sleb128 -12
 1016 02bb 00       		.byte	0
 1017 02bc 15       		.uleb128 0x15
 1018 02bd 04       		.byte	0x4
 1019 02be CF000000 		.4byte	0xcf
 1020 02c2 12       		.uleb128 0x12
 1021 02c3 83010000 		.4byte	.LASF51
 1022 02c7 01       		.byte	0x1
 1023 02c8 F4       		.byte	0xf4
 1024 02c9 00000000 		.4byte	.LFB70
 1025 02cd 34000000 		.4byte	.LFE70-.LFB70
 1026 02d1 01       		.uleb128 0x1
 1027 02d2 9C       		.byte	0x9c
 1028 02d3 02030000 		.4byte	0x302
 1029 02d7 13       		.uleb128 0x13
 1030 02d8 1C030000 		.4byte	.LASF52
 1031 02dc 01       		.byte	0x1
 1032 02dd F4       		.byte	0xf4
 1033 02de A5000000 		.4byte	0xa5
 1034 02e2 02       		.uleb128 0x2
 1035 02e3 91       		.byte	0x91
 1036 02e4 6C       		.sleb128 -20
 1037 02e5 14       		.uleb128 0x14
 1038 02e6 21010000 		.4byte	.LASF53
 1039 02ea 01       		.byte	0x1
 1040 02eb F6       		.byte	0xf6
 1041 02ec 02030000 		.4byte	0x302
 1042 02f0 02       		.uleb128 0x2
 1043 02f1 91       		.byte	0x91
 1044 02f2 74       		.sleb128 -12
 1045 02f3 14       		.uleb128 0x14
 1046 02f4 0D020000 		.4byte	.LASF54
 1047 02f8 01       		.byte	0x1
 1048 02f9 F7       		.byte	0xf7
 1049 02fa 4D020000 		.4byte	0x24d
 1050 02fe 02       		.uleb128 0x2
 1051 02ff 91       		.byte	0x91
 1052 0300 70       		.sleb128 -16
 1053 0301 00       		.byte	0
 1054 0302 15       		.uleb128 0x15
 1055 0303 04       		.byte	0x4
 1056 0304 E8000000 		.4byte	0xe8
 1057 0308 16       		.uleb128 0x16
 1058 0309 3B020000 		.4byte	.LASF55
 1059 030d 01       		.byte	0x1
 1060 030e 1801     		.2byte	0x118
 1061 0310 00000000 		.4byte	.LFB71
 1062 0314 C4000000 		.4byte	.LFE71-.LFB71
 1063 0318 01       		.uleb128 0x1
 1064 0319 9C       		.byte	0x9c
 1065 031a 5B030000 		.4byte	0x35b
 1066 031e 17       		.uleb128 0x17
 1067 031f 1C030000 		.4byte	.LASF52
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 29


 1068 0323 01       		.byte	0x1
 1069 0324 1801     		.2byte	0x118
 1070 0326 A5000000 		.4byte	0xa5
 1071 032a 02       		.uleb128 0x2
 1072 032b 91       		.byte	0x91
 1073 032c 6C       		.sleb128 -20
 1074 032d 18       		.uleb128 0x18
 1075 032e 5D040000 		.4byte	.LASF56
 1076 0332 01       		.byte	0x1
 1077 0333 1A01     		.2byte	0x11a
 1078 0335 CF000000 		.4byte	0xcf
 1079 0339 02       		.uleb128 0x2
 1080 033a 91       		.byte	0x91
 1081 033b 70       		.sleb128 -16
 1082 033c 18       		.uleb128 0x18
 1083 033d 34020000 		.4byte	.LASF57
 1084 0341 01       		.byte	0x1
 1085 0342 1B01     		.2byte	0x11b
 1086 0344 5A000000 		.4byte	0x5a
 1087 0348 02       		.uleb128 0x2
 1088 0349 91       		.byte	0x91
 1089 034a 76       		.sleb128 -10
 1090 034b 18       		.uleb128 0x18
 1091 034c 2C010000 		.4byte	.LASF58
 1092 0350 01       		.byte	0x1
 1093 0351 1C01     		.2byte	0x11c
 1094 0353 5A000000 		.4byte	0x5a
 1095 0357 02       		.uleb128 0x2
 1096 0358 91       		.byte	0x91
 1097 0359 74       		.sleb128 -12
 1098 035a 00       		.byte	0
 1099 035b 16       		.uleb128 0x16
 1100 035c A1040000 		.4byte	.LASF59
 1101 0360 01       		.byte	0x1
 1102 0361 8F01     		.2byte	0x18f
 1103 0363 00000000 		.4byte	.LFB72
 1104 0367 48000000 		.4byte	.LFE72-.LFB72
 1105 036b 01       		.uleb128 0x1
 1106 036c 9C       		.byte	0x9c
 1107 036d 93030000 		.4byte	0x393
 1108 0371 17       		.uleb128 0x17
 1109 0372 1C030000 		.4byte	.LASF52
 1110 0376 01       		.byte	0x1
 1111 0377 8F01     		.2byte	0x18f
 1112 0379 A5000000 		.4byte	0xa5
 1113 037d 02       		.uleb128 0x2
 1114 037e 91       		.byte	0x91
 1115 037f 74       		.sleb128 -12
 1116 0380 18       		.uleb128 0x18
 1117 0381 AA020000 		.4byte	.LASF60
 1118 0385 01       		.byte	0x1
 1119 0386 9101     		.2byte	0x191
 1120 0388 CF000000 		.4byte	0xcf
 1121 038c 05       		.uleb128 0x5
 1122 038d 03       		.byte	0x3
 1123 038e 1C000000 		.4byte	ulValueToSend.7577
 1124 0392 00       		.byte	0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 30


 1125 0393 16       		.uleb128 0x16
 1126 0394 75030000 		.4byte	.LASF61
 1127 0398 01       		.byte	0x1
 1128 0399 A901     		.2byte	0x1a9
 1129 039b 00000000 		.4byte	.LFB73
 1130 039f 6C000000 		.4byte	.LFE73-.LFB73
 1131 03a3 01       		.uleb128 0x1
 1132 03a4 9C       		.byte	0x9c
 1133 03a5 D7030000 		.4byte	0x3d7
 1134 03a9 17       		.uleb128 0x17
 1135 03aa 1C030000 		.4byte	.LASF52
 1136 03ae 01       		.byte	0x1
 1137 03af A901     		.2byte	0x1a9
 1138 03b1 A5000000 		.4byte	0xa5
 1139 03b5 02       		.uleb128 0x2
 1140 03b6 91       		.byte	0x91
 1141 03b7 6C       		.sleb128 -20
 1142 03b8 18       		.uleb128 0x18
 1143 03b9 45000000 		.4byte	.LASF62
 1144 03bd 01       		.byte	0x1
 1145 03be AB01     		.2byte	0x1ab
 1146 03c0 CF000000 		.4byte	0xcf
 1147 03c4 02       		.uleb128 0x2
 1148 03c5 91       		.byte	0x91
 1149 03c6 70       		.sleb128 -16
 1150 03c7 18       		.uleb128 0x18
 1151 03c8 B1030000 		.4byte	.LASF63
 1152 03cc 01       		.byte	0x1
 1153 03cd AC01     		.2byte	0x1ac
 1154 03cf 42020000 		.4byte	0x242
 1155 03d3 02       		.uleb128 0x2
 1156 03d4 91       		.byte	0x91
 1157 03d5 74       		.sleb128 -12
 1158 03d6 00       		.byte	0
 1159 03d7 19       		.uleb128 0x19
 1160 03d8 D0030000 		.4byte	.LASF84
 1161 03dc 01       		.byte	0x1
 1162 03dd E001     		.2byte	0x1e0
 1163 03df 42020000 		.4byte	0x242
 1164 03e3 00000000 		.4byte	.LFB74
 1165 03e7 7C000000 		.4byte	.LFE74-.LFB74
 1166 03eb 01       		.uleb128 0x1
 1167 03ec 9C       		.byte	0x9c
 1168 03ed 25040000 		.4byte	0x425
 1169 03f1 18       		.uleb128 0x18
 1170 03f2 29030000 		.4byte	.LASF64
 1171 03f6 01       		.byte	0x1
 1172 03f7 E401     		.2byte	0x1e4
 1173 03f9 B9000000 		.4byte	0xb9
 1174 03fd 05       		.uleb128 0x5
 1175 03fe 03       		.byte	0x3
 1176 03ff 20000000 		.4byte	usLastTaskCheck.7590
 1177 0403 18       		.uleb128 0x18
 1178 0404 F9040000 		.4byte	.LASF65
 1179 0408 01       		.byte	0x1
 1180 0409 E501     		.2byte	0x1e5
 1181 040b CF000000 		.4byte	0xcf
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 31


 1182 040f 05       		.uleb128 0x5
 1183 0410 03       		.byte	0x3
 1184 0411 24000000 		.4byte	ulLastExpectedValue.7591
 1185 0415 18       		.uleb128 0x18
 1186 0416 8E040000 		.4byte	.LASF66
 1187 041a 01       		.byte	0x1
 1188 041b E601     		.2byte	0x1e6
 1189 041d 42020000 		.4byte	0x242
 1190 0421 02       		.uleb128 0x2
 1191 0422 91       		.byte	0x91
 1192 0423 74       		.sleb128 -12
 1193 0424 00       		.byte	0
 1194 0425 14       		.uleb128 0x14
 1195 0426 39030000 		.4byte	.LASF67
 1196 042a 01       		.byte	0x1
 1197 042b A1       		.byte	0xa1
 1198 042c 63020000 		.4byte	0x263
 1199 0430 05       		.uleb128 0x5
 1200 0431 03       		.byte	0x3
 1201 0432 00000000 		.4byte	xContinuousIncrementHandle
 1202 0436 14       		.uleb128 0x14
 1203 0437 79020000 		.4byte	.LASF68
 1204 043b 01       		.byte	0x1
 1205 043c A1       		.byte	0xa1
 1206 043d 63020000 		.4byte	0x263
 1207 0441 05       		.uleb128 0x5
 1208 0442 03       		.byte	0x3
 1209 0443 04000000 		.4byte	xLimitedIncrementHandle
 1210 0447 14       		.uleb128 0x14
 1211 0448 24000000 		.4byte	.LASF69
 1212 044c 01       		.byte	0x1
 1213 044d A5       		.byte	0xa5
 1214 044e E8000000 		.4byte	0xe8
 1215 0452 05       		.uleb128 0x5
 1216 0453 03       		.byte	0x3
 1217 0454 08000000 		.4byte	ulCounter
 1218 0458 14       		.uleb128 0x14
 1219 0459 BB030000 		.4byte	.LASF70
 1220 045d 01       		.byte	0x1
 1221 045e AB       		.byte	0xab
 1222 045f ED000000 		.4byte	0xed
 1223 0463 05       		.uleb128 0x5
 1224 0464 03       		.byte	0x3
 1225 0465 0C000000 		.4byte	usCheckVariable
 1226 0469 14       		.uleb128 0x14
 1227 046a C4040000 		.4byte	.LASF71
 1228 046e 01       		.byte	0x1
 1229 046f AC       		.byte	0xac
 1230 0470 7A040000 		.4byte	0x47a
 1231 0474 05       		.uleb128 0x5
 1232 0475 03       		.byte	0x3
 1233 0476 10000000 		.4byte	xSuspendedQueueSendError
 1234 047a 06       		.uleb128 0x6
 1235 047b 42020000 		.4byte	0x242
 1236 047f 14       		.uleb128 0x14
 1237 0480 DD040000 		.4byte	.LASF72
 1238 0484 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 32


 1239 0485 AD       		.byte	0xad
 1240 0486 7A040000 		.4byte	0x47a
 1241 048a 05       		.uleb128 0x5
 1242 048b 03       		.byte	0x3
 1243 048c 14000000 		.4byte	xSuspendedQueueReceiveError
 1244 0490 14       		.uleb128 0x14
 1245 0491 00000000 		.4byte	.LASF73
 1246 0495 01       		.byte	0x1
 1247 0496 B5       		.byte	0xb5
 1248 0497 CF000000 		.4byte	0xcf
 1249 049b 05       		.uleb128 0x5
 1250 049c 03       		.byte	0x3
 1251 049d 18000000 		.4byte	ulExpectedValue
 1252 04a1 1A       		.uleb128 0x1a
 1253 04a2 91020000 		.4byte	.LASF74
 1254 04a6 09       		.byte	0x9
 1255 04a7 9606     		.2byte	0x696
 1256 04a9 AD040000 		.4byte	0x4ad
 1257 04ad 06       		.uleb128 0x6
 1258 04ae C4000000 		.4byte	0xc4
 1259 04b2 0B       		.uleb128 0xb
 1260 04b3 AE000000 		.4byte	0xae
 1261 04b7 C2040000 		.4byte	0x4c2
 1262 04bb 0C       		.uleb128 0xc
 1263 04bc 9E000000 		.4byte	0x9e
 1264 04c0 0C       		.byte	0xc
 1265 04c1 00       		.byte	0
 1266 04c2 1B       		.uleb128 0x1b
 1267 04c3 D7010000 		.4byte	.LASF75
 1268 04c7 04       		.byte	0x4
 1269 04c8 12       		.byte	0x12
 1270 04c9 B2040000 		.4byte	0x4b2
 1271 04cd 05       		.uleb128 0x5
 1272 04ce 03       		.byte	0x3
 1273 04cf 00000000 		.4byte	sniffIDFilter
 1274 04d3 1B       		.uleb128 0x1b
 1275 04d4 F5030000 		.4byte	.LASF76
 1276 04d8 05       		.byte	0x5
 1277 04d9 10       		.byte	0x10
 1278 04da FD010000 		.4byte	0x1fd
 1279 04de 05       		.uleb128 0x5
 1280 04df 03       		.byte	0x3
 1281 04e0 00000000 		.4byte	buffer
 1282 04e4 0B       		.uleb128 0xb
 1283 04e5 F2010000 		.4byte	0x1f2
 1284 04e9 F4040000 		.4byte	0x4f4
 1285 04ed 0C       		.uleb128 0xc
 1286 04ee 9E000000 		.4byte	0x9e
 1287 04f2 05       		.byte	0x5
 1288 04f3 00       		.byte	0
 1289 04f4 1B       		.uleb128 0x1b
 1290 04f5 52040000 		.4byte	.LASF77
 1291 04f9 0A       		.byte	0xa
 1292 04fa 0D       		.byte	0xd
 1293 04fb E4040000 		.4byte	0x4e4
 1294 04ff 05       		.uleb128 0x5
 1295 0500 03       		.byte	0x3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 33


 1296 0501 00000000 		.4byte	objectList
 1297 0505 1B       		.uleb128 0x1b
 1298 0506 7A040000 		.4byte	.LASF78
 1299 050a 01       		.byte	0x1
 1300 050b B0       		.byte	0xb0
 1301 050c 6E020000 		.4byte	0x26e
 1302 0510 05       		.uleb128 0x5
 1303 0511 03       		.byte	0x3
 1304 0512 00000000 		.4byte	xSuspendedTestQueue
 1305 0516 00       		.byte	0
 1306              		.section	.debug_abbrev,"",%progbits
 1307              	.Ldebug_abbrev0:
 1308 0000 01       		.uleb128 0x1
 1309 0001 11       		.uleb128 0x11
 1310 0002 01       		.byte	0x1
 1311 0003 25       		.uleb128 0x25
 1312 0004 0E       		.uleb128 0xe
 1313 0005 13       		.uleb128 0x13
 1314 0006 0B       		.uleb128 0xb
 1315 0007 03       		.uleb128 0x3
 1316 0008 0E       		.uleb128 0xe
 1317 0009 1B       		.uleb128 0x1b
 1318 000a 0E       		.uleb128 0xe
 1319 000b 55       		.uleb128 0x55
 1320 000c 17       		.uleb128 0x17
 1321 000d 11       		.uleb128 0x11
 1322 000e 01       		.uleb128 0x1
 1323 000f 10       		.uleb128 0x10
 1324 0010 17       		.uleb128 0x17
 1325 0011 00       		.byte	0
 1326 0012 00       		.byte	0
 1327 0013 02       		.uleb128 0x2
 1328 0014 24       		.uleb128 0x24
 1329 0015 00       		.byte	0
 1330 0016 0B       		.uleb128 0xb
 1331 0017 0B       		.uleb128 0xb
 1332 0018 3E       		.uleb128 0x3e
 1333 0019 0B       		.uleb128 0xb
 1334 001a 03       		.uleb128 0x3
 1335 001b 0E       		.uleb128 0xe
 1336 001c 00       		.byte	0
 1337 001d 00       		.byte	0
 1338 001e 03       		.uleb128 0x3
 1339 001f 24       		.uleb128 0x24
 1340 0020 00       		.byte	0
 1341 0021 0B       		.uleb128 0xb
 1342 0022 0B       		.uleb128 0xb
 1343 0023 3E       		.uleb128 0x3e
 1344 0024 0B       		.uleb128 0xb
 1345 0025 03       		.uleb128 0x3
 1346 0026 08       		.uleb128 0x8
 1347 0027 00       		.byte	0
 1348 0028 00       		.byte	0
 1349 0029 04       		.uleb128 0x4
 1350 002a 16       		.uleb128 0x16
 1351 002b 00       		.byte	0
 1352 002c 03       		.uleb128 0x3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 34


 1353 002d 0E       		.uleb128 0xe
 1354 002e 3A       		.uleb128 0x3a
 1355 002f 0B       		.uleb128 0xb
 1356 0030 3B       		.uleb128 0x3b
 1357 0031 0B       		.uleb128 0xb
 1358 0032 49       		.uleb128 0x49
 1359 0033 13       		.uleb128 0x13
 1360 0034 00       		.byte	0
 1361 0035 00       		.byte	0
 1362 0036 05       		.uleb128 0x5
 1363 0037 0F       		.uleb128 0xf
 1364 0038 00       		.byte	0
 1365 0039 0B       		.uleb128 0xb
 1366 003a 0B       		.uleb128 0xb
 1367 003b 00       		.byte	0
 1368 003c 00       		.byte	0
 1369 003d 06       		.uleb128 0x6
 1370 003e 35       		.uleb128 0x35
 1371 003f 00       		.byte	0
 1372 0040 49       		.uleb128 0x49
 1373 0041 13       		.uleb128 0x13
 1374 0042 00       		.byte	0
 1375 0043 00       		.byte	0
 1376 0044 07       		.uleb128 0x7
 1377 0045 04       		.uleb128 0x4
 1378 0046 01       		.byte	0x1
 1379 0047 0B       		.uleb128 0xb
 1380 0048 0B       		.uleb128 0xb
 1381 0049 49       		.uleb128 0x49
 1382 004a 13       		.uleb128 0x13
 1383 004b 3A       		.uleb128 0x3a
 1384 004c 0B       		.uleb128 0xb
 1385 004d 3B       		.uleb128 0x3b
 1386 004e 0B       		.uleb128 0xb
 1387 004f 01       		.uleb128 0x1
 1388 0050 13       		.uleb128 0x13
 1389 0051 00       		.byte	0
 1390 0052 00       		.byte	0
 1391 0053 08       		.uleb128 0x8
 1392 0054 28       		.uleb128 0x28
 1393 0055 00       		.byte	0
 1394 0056 03       		.uleb128 0x3
 1395 0057 0E       		.uleb128 0xe
 1396 0058 1C       		.uleb128 0x1c
 1397 0059 0B       		.uleb128 0xb
 1398 005a 00       		.byte	0
 1399 005b 00       		.byte	0
 1400 005c 09       		.uleb128 0x9
 1401 005d 13       		.uleb128 0x13
 1402 005e 01       		.byte	0x1
 1403 005f 0B       		.uleb128 0xb
 1404 0060 0B       		.uleb128 0xb
 1405 0061 3A       		.uleb128 0x3a
 1406 0062 0B       		.uleb128 0xb
 1407 0063 3B       		.uleb128 0x3b
 1408 0064 0B       		.uleb128 0xb
 1409 0065 01       		.uleb128 0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 35


 1410 0066 13       		.uleb128 0x13
 1411 0067 00       		.byte	0
 1412 0068 00       		.byte	0
 1413 0069 0A       		.uleb128 0xa
 1414 006a 0D       		.uleb128 0xd
 1415 006b 00       		.byte	0
 1416 006c 03       		.uleb128 0x3
 1417 006d 0E       		.uleb128 0xe
 1418 006e 3A       		.uleb128 0x3a
 1419 006f 0B       		.uleb128 0xb
 1420 0070 3B       		.uleb128 0x3b
 1421 0071 0B       		.uleb128 0xb
 1422 0072 49       		.uleb128 0x49
 1423 0073 13       		.uleb128 0x13
 1424 0074 38       		.uleb128 0x38
 1425 0075 0B       		.uleb128 0xb
 1426 0076 00       		.byte	0
 1427 0077 00       		.byte	0
 1428 0078 0B       		.uleb128 0xb
 1429 0079 01       		.uleb128 0x1
 1430 007a 01       		.byte	0x1
 1431 007b 49       		.uleb128 0x49
 1432 007c 13       		.uleb128 0x13
 1433 007d 01       		.uleb128 0x1
 1434 007e 13       		.uleb128 0x13
 1435 007f 00       		.byte	0
 1436 0080 00       		.byte	0
 1437 0081 0C       		.uleb128 0xc
 1438 0082 21       		.uleb128 0x21
 1439 0083 00       		.byte	0
 1440 0084 49       		.uleb128 0x49
 1441 0085 13       		.uleb128 0x13
 1442 0086 2F       		.uleb128 0x2f
 1443 0087 0B       		.uleb128 0xb
 1444 0088 00       		.byte	0
 1445 0089 00       		.byte	0
 1446 008a 0D       		.uleb128 0xd
 1447 008b 13       		.uleb128 0x13
 1448 008c 01       		.byte	0x1
 1449 008d 0B       		.uleb128 0xb
 1450 008e 05       		.uleb128 0x5
 1451 008f 3A       		.uleb128 0x3a
 1452 0090 0B       		.uleb128 0xb
 1453 0091 3B       		.uleb128 0x3b
 1454 0092 0B       		.uleb128 0xb
 1455 0093 01       		.uleb128 0x1
 1456 0094 13       		.uleb128 0x13
 1457 0095 00       		.byte	0
 1458 0096 00       		.byte	0
 1459 0097 0E       		.uleb128 0xe
 1460 0098 13       		.uleb128 0x13
 1461 0099 01       		.byte	0x1
 1462 009a 03       		.uleb128 0x3
 1463 009b 0E       		.uleb128 0xe
 1464 009c 0B       		.uleb128 0xb
 1465 009d 05       		.uleb128 0x5
 1466 009e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 36


 1467 009f 0B       		.uleb128 0xb
 1468 00a0 3B       		.uleb128 0x3b
 1469 00a1 0B       		.uleb128 0xb
 1470 00a2 01       		.uleb128 0x1
 1471 00a3 13       		.uleb128 0x13
 1472 00a4 00       		.byte	0
 1473 00a5 00       		.byte	0
 1474 00a6 0F       		.uleb128 0xf
 1475 00a7 0D       		.uleb128 0xd
 1476 00a8 00       		.byte	0
 1477 00a9 03       		.uleb128 0x3
 1478 00aa 0E       		.uleb128 0xe
 1479 00ab 3A       		.uleb128 0x3a
 1480 00ac 0B       		.uleb128 0xb
 1481 00ad 3B       		.uleb128 0x3b
 1482 00ae 0B       		.uleb128 0xb
 1483 00af 49       		.uleb128 0x49
 1484 00b0 13       		.uleb128 0x13
 1485 00b1 38       		.uleb128 0x38
 1486 00b2 05       		.uleb128 0x5
 1487 00b3 00       		.byte	0
 1488 00b4 00       		.byte	0
 1489 00b5 10       		.uleb128 0x10
 1490 00b6 21       		.uleb128 0x21
 1491 00b7 00       		.byte	0
 1492 00b8 49       		.uleb128 0x49
 1493 00b9 13       		.uleb128 0x13
 1494 00ba 2F       		.uleb128 0x2f
 1495 00bb 05       		.uleb128 0x5
 1496 00bc 00       		.byte	0
 1497 00bd 00       		.byte	0
 1498 00be 11       		.uleb128 0x11
 1499 00bf 2E       		.uleb128 0x2e
 1500 00c0 00       		.byte	0
 1501 00c1 3F       		.uleb128 0x3f
 1502 00c2 19       		.uleb128 0x19
 1503 00c3 03       		.uleb128 0x3
 1504 00c4 0E       		.uleb128 0xe
 1505 00c5 3A       		.uleb128 0x3a
 1506 00c6 0B       		.uleb128 0xb
 1507 00c7 3B       		.uleb128 0x3b
 1508 00c8 0B       		.uleb128 0xb
 1509 00c9 27       		.uleb128 0x27
 1510 00ca 19       		.uleb128 0x19
 1511 00cb 11       		.uleb128 0x11
 1512 00cc 01       		.uleb128 0x1
 1513 00cd 12       		.uleb128 0x12
 1514 00ce 06       		.uleb128 0x6
 1515 00cf 40       		.uleb128 0x40
 1516 00d0 18       		.uleb128 0x18
 1517 00d1 9642     		.uleb128 0x2116
 1518 00d3 19       		.uleb128 0x19
 1519 00d4 00       		.byte	0
 1520 00d5 00       		.byte	0
 1521 00d6 12       		.uleb128 0x12
 1522 00d7 2E       		.uleb128 0x2e
 1523 00d8 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 37


 1524 00d9 03       		.uleb128 0x3
 1525 00da 0E       		.uleb128 0xe
 1526 00db 3A       		.uleb128 0x3a
 1527 00dc 0B       		.uleb128 0xb
 1528 00dd 3B       		.uleb128 0x3b
 1529 00de 0B       		.uleb128 0xb
 1530 00df 27       		.uleb128 0x27
 1531 00e0 19       		.uleb128 0x19
 1532 00e1 11       		.uleb128 0x11
 1533 00e2 01       		.uleb128 0x1
 1534 00e3 12       		.uleb128 0x12
 1535 00e4 06       		.uleb128 0x6
 1536 00e5 40       		.uleb128 0x40
 1537 00e6 18       		.uleb128 0x18
 1538 00e7 9642     		.uleb128 0x2116
 1539 00e9 19       		.uleb128 0x19
 1540 00ea 01       		.uleb128 0x1
 1541 00eb 13       		.uleb128 0x13
 1542 00ec 00       		.byte	0
 1543 00ed 00       		.byte	0
 1544 00ee 13       		.uleb128 0x13
 1545 00ef 05       		.uleb128 0x5
 1546 00f0 00       		.byte	0
 1547 00f1 03       		.uleb128 0x3
 1548 00f2 0E       		.uleb128 0xe
 1549 00f3 3A       		.uleb128 0x3a
 1550 00f4 0B       		.uleb128 0xb
 1551 00f5 3B       		.uleb128 0x3b
 1552 00f6 0B       		.uleb128 0xb
 1553 00f7 49       		.uleb128 0x49
 1554 00f8 13       		.uleb128 0x13
 1555 00f9 02       		.uleb128 0x2
 1556 00fa 18       		.uleb128 0x18
 1557 00fb 00       		.byte	0
 1558 00fc 00       		.byte	0
 1559 00fd 14       		.uleb128 0x14
 1560 00fe 34       		.uleb128 0x34
 1561 00ff 00       		.byte	0
 1562 0100 03       		.uleb128 0x3
 1563 0101 0E       		.uleb128 0xe
 1564 0102 3A       		.uleb128 0x3a
 1565 0103 0B       		.uleb128 0xb
 1566 0104 3B       		.uleb128 0x3b
 1567 0105 0B       		.uleb128 0xb
 1568 0106 49       		.uleb128 0x49
 1569 0107 13       		.uleb128 0x13
 1570 0108 02       		.uleb128 0x2
 1571 0109 18       		.uleb128 0x18
 1572 010a 00       		.byte	0
 1573 010b 00       		.byte	0
 1574 010c 15       		.uleb128 0x15
 1575 010d 0F       		.uleb128 0xf
 1576 010e 00       		.byte	0
 1577 010f 0B       		.uleb128 0xb
 1578 0110 0B       		.uleb128 0xb
 1579 0111 49       		.uleb128 0x49
 1580 0112 13       		.uleb128 0x13
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 38


 1581 0113 00       		.byte	0
 1582 0114 00       		.byte	0
 1583 0115 16       		.uleb128 0x16
 1584 0116 2E       		.uleb128 0x2e
 1585 0117 01       		.byte	0x1
 1586 0118 03       		.uleb128 0x3
 1587 0119 0E       		.uleb128 0xe
 1588 011a 3A       		.uleb128 0x3a
 1589 011b 0B       		.uleb128 0xb
 1590 011c 3B       		.uleb128 0x3b
 1591 011d 05       		.uleb128 0x5
 1592 011e 27       		.uleb128 0x27
 1593 011f 19       		.uleb128 0x19
 1594 0120 11       		.uleb128 0x11
 1595 0121 01       		.uleb128 0x1
 1596 0122 12       		.uleb128 0x12
 1597 0123 06       		.uleb128 0x6
 1598 0124 40       		.uleb128 0x40
 1599 0125 18       		.uleb128 0x18
 1600 0126 9642     		.uleb128 0x2116
 1601 0128 19       		.uleb128 0x19
 1602 0129 01       		.uleb128 0x1
 1603 012a 13       		.uleb128 0x13
 1604 012b 00       		.byte	0
 1605 012c 00       		.byte	0
 1606 012d 17       		.uleb128 0x17
 1607 012e 05       		.uleb128 0x5
 1608 012f 00       		.byte	0
 1609 0130 03       		.uleb128 0x3
 1610 0131 0E       		.uleb128 0xe
 1611 0132 3A       		.uleb128 0x3a
 1612 0133 0B       		.uleb128 0xb
 1613 0134 3B       		.uleb128 0x3b
 1614 0135 05       		.uleb128 0x5
 1615 0136 49       		.uleb128 0x49
 1616 0137 13       		.uleb128 0x13
 1617 0138 02       		.uleb128 0x2
 1618 0139 18       		.uleb128 0x18
 1619 013a 00       		.byte	0
 1620 013b 00       		.byte	0
 1621 013c 18       		.uleb128 0x18
 1622 013d 34       		.uleb128 0x34
 1623 013e 00       		.byte	0
 1624 013f 03       		.uleb128 0x3
 1625 0140 0E       		.uleb128 0xe
 1626 0141 3A       		.uleb128 0x3a
 1627 0142 0B       		.uleb128 0xb
 1628 0143 3B       		.uleb128 0x3b
 1629 0144 05       		.uleb128 0x5
 1630 0145 49       		.uleb128 0x49
 1631 0146 13       		.uleb128 0x13
 1632 0147 02       		.uleb128 0x2
 1633 0148 18       		.uleb128 0x18
 1634 0149 00       		.byte	0
 1635 014a 00       		.byte	0
 1636 014b 19       		.uleb128 0x19
 1637 014c 2E       		.uleb128 0x2e
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 39


 1638 014d 01       		.byte	0x1
 1639 014e 3F       		.uleb128 0x3f
 1640 014f 19       		.uleb128 0x19
 1641 0150 03       		.uleb128 0x3
 1642 0151 0E       		.uleb128 0xe
 1643 0152 3A       		.uleb128 0x3a
 1644 0153 0B       		.uleb128 0xb
 1645 0154 3B       		.uleb128 0x3b
 1646 0155 05       		.uleb128 0x5
 1647 0156 27       		.uleb128 0x27
 1648 0157 19       		.uleb128 0x19
 1649 0158 49       		.uleb128 0x49
 1650 0159 13       		.uleb128 0x13
 1651 015a 11       		.uleb128 0x11
 1652 015b 01       		.uleb128 0x1
 1653 015c 12       		.uleb128 0x12
 1654 015d 06       		.uleb128 0x6
 1655 015e 40       		.uleb128 0x40
 1656 015f 18       		.uleb128 0x18
 1657 0160 9742     		.uleb128 0x2117
 1658 0162 19       		.uleb128 0x19
 1659 0163 01       		.uleb128 0x1
 1660 0164 13       		.uleb128 0x13
 1661 0165 00       		.byte	0
 1662 0166 00       		.byte	0
 1663 0167 1A       		.uleb128 0x1a
 1664 0168 34       		.uleb128 0x34
 1665 0169 00       		.byte	0
 1666 016a 03       		.uleb128 0x3
 1667 016b 0E       		.uleb128 0xe
 1668 016c 3A       		.uleb128 0x3a
 1669 016d 0B       		.uleb128 0xb
 1670 016e 3B       		.uleb128 0x3b
 1671 016f 05       		.uleb128 0x5
 1672 0170 49       		.uleb128 0x49
 1673 0171 13       		.uleb128 0x13
 1674 0172 3F       		.uleb128 0x3f
 1675 0173 19       		.uleb128 0x19
 1676 0174 3C       		.uleb128 0x3c
 1677 0175 19       		.uleb128 0x19
 1678 0176 00       		.byte	0
 1679 0177 00       		.byte	0
 1680 0178 1B       		.uleb128 0x1b
 1681 0179 34       		.uleb128 0x34
 1682 017a 00       		.byte	0
 1683 017b 03       		.uleb128 0x3
 1684 017c 0E       		.uleb128 0xe
 1685 017d 3A       		.uleb128 0x3a
 1686 017e 0B       		.uleb128 0xb
 1687 017f 3B       		.uleb128 0x3b
 1688 0180 0B       		.uleb128 0xb
 1689 0181 49       		.uleb128 0x49
 1690 0182 13       		.uleb128 0x13
 1691 0183 3F       		.uleb128 0x3f
 1692 0184 19       		.uleb128 0x19
 1693 0185 02       		.uleb128 0x2
 1694 0186 18       		.uleb128 0x18
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 40


 1695 0187 00       		.byte	0
 1696 0188 00       		.byte	0
 1697 0189 00       		.byte	0
 1698              		.section	.debug_aranges,"",%progbits
 1699 0000 4C000000 		.4byte	0x4c
 1700 0004 0200     		.2byte	0x2
 1701 0006 00000000 		.4byte	.Ldebug_info0
 1702 000a 04       		.byte	0x4
 1703 000b 00       		.byte	0
 1704 000c 0000     		.2byte	0
 1705 000e 0000     		.2byte	0
 1706 0010 00000000 		.4byte	.LFB68
 1707 0014 D0000000 		.4byte	.LFE68-.LFB68
 1708 0018 00000000 		.4byte	.LFB69
 1709 001c 2C000000 		.4byte	.LFE69-.LFB69
 1710 0020 00000000 		.4byte	.LFB70
 1711 0024 34000000 		.4byte	.LFE70-.LFB70
 1712 0028 00000000 		.4byte	.LFB71
 1713 002c C4000000 		.4byte	.LFE71-.LFB71
 1714 0030 00000000 		.4byte	.LFB72
 1715 0034 48000000 		.4byte	.LFE72-.LFB72
 1716 0038 00000000 		.4byte	.LFB73
 1717 003c 6C000000 		.4byte	.LFE73-.LFB73
 1718 0040 00000000 		.4byte	.LFB74
 1719 0044 7C000000 		.4byte	.LFE74-.LFB74
 1720 0048 00000000 		.4byte	0
 1721 004c 00000000 		.4byte	0
 1722              		.section	.debug_ranges,"",%progbits
 1723              	.Ldebug_ranges0:
 1724 0000 00000000 		.4byte	.LFB68
 1725 0004 D0000000 		.4byte	.LFE68
 1726 0008 00000000 		.4byte	.LFB69
 1727 000c 2C000000 		.4byte	.LFE69
 1728 0010 00000000 		.4byte	.LFB70
 1729 0014 34000000 		.4byte	.LFE70
 1730 0018 00000000 		.4byte	.LFB71
 1731 001c C4000000 		.4byte	.LFE71
 1732 0020 00000000 		.4byte	.LFB72
 1733 0024 48000000 		.4byte	.LFE72
 1734 0028 00000000 		.4byte	.LFB73
 1735 002c 6C000000 		.4byte	.LFE73
 1736 0030 00000000 		.4byte	.LFB74
 1737 0034 7C000000 		.4byte	.LFE74
 1738 0038 00000000 		.4byte	0
 1739 003c 00000000 		.4byte	0
 1740              		.section	.debug_line,"",%progbits
 1741              	.Ldebug_line0:
 1742 0000 CE020000 		.section	.debug_str,"MS",%progbits,1
 1742      0200E101 
 1742      00000201 
 1742      FB0E0D00 
 1742      01010101 
 1743              	.LASF73:
 1744 0000 756C4578 		.ascii	"ulExpectedValue\000"
 1744      70656374 
 1744      65645661 
 1744      6C756500 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 41


 1745              	.LASF31:
 1746 0010 696E666F 		.ascii	"informationID\000"
 1746      726D6174 
 1746      696F6E49 
 1746      4400
 1747              	.LASF44:
 1748 001e 77726974 		.ascii	"write\000"
 1748      6500
 1749              	.LASF69:
 1750 0024 756C436F 		.ascii	"ulCounter\000"
 1750      756E7465 
 1750      7200
 1751              	.LASF35:
 1752 002e 6F626A65 		.ascii	"objectNumber\000"
 1752      63744E75 
 1752      6D626572 
 1752      00
 1753              	.LASF5:
 1754 003b 73686F72 		.ascii	"short int\000"
 1754      7420696E 
 1754      7400
 1755              	.LASF62:
 1756 0045 756C5265 		.ascii	"ulReceivedValue\000"
 1756      63656976 
 1756      65645661 
 1756      6C756500 
 1757              	.LASF14:
 1758 0055 73697A65 		.ascii	"sizetype\000"
 1758      74797065 
 1758      00
 1759              	.LASF23:
 1760 005e 4D555445 		.ascii	"MUTEX\000"
 1760      5800
 1761              	.LASF48:
 1762 0064 5461736B 		.ascii	"TaskHandle_t\000"
 1762      48616E64 
 1762      6C655F74 
 1762      00
 1763              	.LASF32:
 1764 0071 6F626A65 		.ascii	"objectType\000"
 1764      63745479 
 1764      706500
 1765              	.LASF79:
 1766 007c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1766      43313120 
 1766      352E342E 
 1766      31203230 
 1766      31363036 
 1767 00af 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1767      20726576 
 1767      6973696F 
 1767      6E203233 
 1767      37373135 
 1768 00e2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1768      66756E63 
 1768      74696F6E 
 1768      2D736563 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 42


 1768      74696F6E 
 1769              	.LASF2:
 1770 010a 6C6F6E67 		.ascii	"long double\000"
 1770      20646F75 
 1770      626C6500 
 1771              	.LASF11:
 1772 0116 5F5F7569 		.ascii	"__uint32_t\000"
 1772      6E743332 
 1772      5F7400
 1773              	.LASF53:
 1774 0121 70756C43 		.ascii	"pulCounter\000"
 1774      6F756E74 
 1774      657200
 1775              	.LASF58:
 1776 012c 73457272 		.ascii	"sError\000"
 1776      6F7200
 1777              	.LASF39:
 1778 0133 6F626A65 		.ascii	"objectHeader\000"
 1778      63744865 
 1778      61646572 
 1778      00
 1779              	.LASF7:
 1780 0140 5F5F7569 		.ascii	"__uint16_t\000"
 1780      6E743136 
 1780      5F7400
 1781              	.LASF16:
 1782 014b 75696E74 		.ascii	"uint8_t\000"
 1782      385F7400 
 1783              	.LASF40:
 1784 0153 6F626A65 		.ascii	"objectArray\000"
 1784      63744172 
 1784      72617900 
 1785              	.LASF36:
 1786 015f 6C656E4F 		.ascii	"lenObjectName\000"
 1786      626A6563 
 1786      744E616D 
 1786      6500
 1787              	.LASF37:
 1788 016d 6F626A65 		.ascii	"objectName\000"
 1788      63744E61 
 1788      6D6500
 1789              	.LASF29:
 1790 0178 4F626A65 		.ascii	"ObjectType\000"
 1790      63745479 
 1790      706500
 1791              	.LASF51:
 1792 0183 76436F6E 		.ascii	"vContinuousIncrementTask\000"
 1792      74696E75 
 1792      6F757349 
 1792      6E637265 
 1792      6D656E74 
 1793              	.LASF33:
 1794 019c 6C656E67 		.ascii	"length\000"
 1794      746800
 1795              	.LASF20:
 1796 01a3 666C6F61 		.ascii	"float\000"
 1796      7400
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 43


 1797              	.LASF38:
 1798 01a9 4F626A65 		.ascii	"Object\000"
 1798      637400
 1799              	.LASF43:
 1800 01b0 72656164 		.ascii	"read\000"
 1800      00
 1801              	.LASF1:
 1802 01b5 6C6F6E67 		.ascii	"long long int\000"
 1802      206C6F6E 
 1802      6720696E 
 1802      7400
 1803              	.LASF47:
 1804 01c3 5469636B 		.ascii	"TickType_t\000"
 1804      54797065 
 1804      5F7400
 1805              	.LASF10:
 1806 01ce 6C6F6E67 		.ascii	"long int\000"
 1806      20696E74 
 1806      00
 1807              	.LASF75:
 1808 01d7 736E6966 		.ascii	"sniffIDFilter\000"
 1808      66494446 
 1808      696C7465 
 1808      7200
 1809              	.LASF26:
 1810 01e5 52454355 		.ascii	"RECURSIVE_MUTEX\000"
 1810      52534956 
 1810      455F4D55 
 1810      54455800 
 1811              	.LASF6:
 1812 01f5 5F5F7569 		.ascii	"__uint8_t\000"
 1812      6E74385F 
 1812      7400
 1813              	.LASF49:
 1814 01ff 51756575 		.ascii	"QueueHandle_t\000"
 1814      6548616E 
 1814      646C655F 
 1814      7400
 1815              	.LASF54:
 1816 020d 75784F75 		.ascii	"uxOurPriority\000"
 1816      72507269 
 1816      6F726974 
 1816      7900
 1817              	.LASF22:
 1818 021b 51554555 		.ascii	"QUEUE\000"
 1818      4500
 1819              	.LASF24:
 1820 0221 434F554E 		.ascii	"COUNTING_SEMAPHORE\000"
 1820      54494E47 
 1820      5F53454D 
 1820      4150484F 
 1820      524500
 1821              	.LASF57:
 1822 0234 734C6F6F 		.ascii	"sLoops\000"
 1822      707300
 1823              	.LASF55:
 1824 023b 76436F75 		.ascii	"vCounterControlTask\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 44


 1824      6E746572 
 1824      436F6E74 
 1824      726F6C54 
 1824      61736B00 
 1825              	.LASF4:
 1826 024f 756E7369 		.ascii	"unsigned char\000"
 1826      676E6564 
 1826      20636861 
 1826      7200
 1827              	.LASF80:
 1828 025d 2E2E5C43 		.ascii	"..\\Common\\Minimal\\dynamic.c\000"
 1828      6F6D6D6F 
 1828      6E5C4D69 
 1828      6E696D61 
 1828      6C5C6479 
 1829              	.LASF68:
 1830 0279 784C696D 		.ascii	"xLimitedIncrementHandle\000"
 1830      69746564 
 1830      496E6372 
 1830      656D656E 
 1830      7448616E 
 1831              	.LASF74:
 1832 0291 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1832      52784275 
 1832      66666572 
 1832      00
 1833              	.LASF3:
 1834 029e 7369676E 		.ascii	"signed char\000"
 1834      65642063 
 1834      68617200 
 1835              	.LASF60:
 1836 02aa 756C5661 		.ascii	"ulValueToSend\000"
 1836      6C756554 
 1836      6F53656E 
 1836      6400
 1837              	.LASF13:
 1838 02b8 6C6F6E67 		.ascii	"long long unsigned int\000"
 1838      206C6F6E 
 1838      6720756E 
 1838      7369676E 
 1838      65642069 
 1839              	.LASF83:
 1840 02cf 76537461 		.ascii	"vStartDynamicPriorityTasks\000"
 1840      72744479 
 1840      6E616D69 
 1840      63507269 
 1840      6F726974 
 1841              	.LASF19:
 1842 02ea 75696E74 		.ascii	"uint32_t\000"
 1842      33325F74 
 1842      00
 1843              	.LASF0:
 1844 02f3 756E7369 		.ascii	"unsigned int\000"
 1844      676E6564 
 1844      20696E74 
 1844      00
 1845              	.LASF34:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 45


 1846 0300 4F626A65 		.ascii	"ObjectListHeader\000"
 1846      63744C69 
 1846      73744865 
 1846      61646572 
 1846      00
 1847              	.LASF45:
 1848 0311 42617365 		.ascii	"BaseType_t\000"
 1848      54797065 
 1848      5F7400
 1849              	.LASF52:
 1850 031c 70765061 		.ascii	"pvParameters\000"
 1850      72616D65 
 1850      74657273 
 1850      00
 1851              	.LASF64:
 1852 0329 75734C61 		.ascii	"usLastTaskCheck\000"
 1852      73745461 
 1852      736B4368 
 1852      65636B00 
 1853              	.LASF67:
 1854 0339 78436F6E 		.ascii	"xContinuousIncrementHandle\000"
 1854      74696E75 
 1854      6F757349 
 1854      6E637265 
 1854      6D656E74 
 1855              	.LASF8:
 1856 0354 73686F72 		.ascii	"short unsigned int\000"
 1856      7420756E 
 1856      7369676E 
 1856      65642069 
 1856      6E7400
 1857              	.LASF15:
 1858 0367 63686172 		.ascii	"char\000"
 1858      00
 1859              	.LASF17:
 1860 036c 75696E74 		.ascii	"uint16_t\000"
 1860      31365F74 
 1860      00
 1861              	.LASF61:
 1862 0375 76517565 		.ascii	"vQueueReceiveWhenSuspendedTask\000"
 1862      75655265 
 1862      63656976 
 1862      65576865 
 1862      6E537573 
 1863              	.LASF30:
 1864 0394 7061636B 		.ascii	"packetID\000"
 1864      65744944 
 1864      00
 1865              	.LASF18:
 1866 039d 696E7433 		.ascii	"int32_t\000"
 1866      325F7400 
 1867              	.LASF46:
 1868 03a5 55426173 		.ascii	"UBaseType_t\000"
 1868      65547970 
 1868      655F7400 
 1869              	.LASF63:
 1870 03b1 78476F74 		.ascii	"xGotValue\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 46


 1870      56616C75 
 1870      6500
 1871              	.LASF70:
 1872 03bb 75734368 		.ascii	"usCheckVariable\000"
 1872      65636B56 
 1872      61726961 
 1872      626C6500 
 1873              	.LASF42:
 1874 03cb 64617461 		.ascii	"data\000"
 1874      00
 1875              	.LASF84:
 1876 03d0 78417265 		.ascii	"xAreDynamicPriorityTasksStillRunning\000"
 1876      44796E61 
 1876      6D696350 
 1876      72696F72 
 1876      69747954 
 1877              	.LASF76:
 1878 03f5 62756666 		.ascii	"buffer\000"
 1878      657200
 1879              	.LASF50:
 1880 03fc 764C696D 		.ascii	"vLimitedIncrementTask\000"
 1880      69746564 
 1880      496E6372 
 1880      656D656E 
 1880      74546173 
 1881              	.LASF28:
 1882 0412 4E554D42 		.ascii	"NUMBER_OF_OBJECTTYPES\000"
 1882      45525F4F 
 1882      465F4F42 
 1882      4A454354 
 1882      54595045 
 1883              	.LASF12:
 1884 0428 6C6F6E67 		.ascii	"long unsigned int\000"
 1884      20756E73 
 1884      69676E65 
 1884      6420696E 
 1884      7400
 1885              	.LASF21:
 1886 043a 646F7562 		.ascii	"double\000"
 1886      6C6500
 1887              	.LASF25:
 1888 0441 42494E41 		.ascii	"BINARY_SEMAPHORE\000"
 1888      52595F53 
 1888      454D4150 
 1888      484F5245 
 1888      00
 1889              	.LASF77:
 1890 0452 6F626A65 		.ascii	"objectList\000"
 1890      63744C69 
 1890      737400
 1891              	.LASF56:
 1892 045d 756C4C61 		.ascii	"ulLastCounter\000"
 1892      7374436F 
 1892      756E7465 
 1892      7200
 1893              	.LASF27:
 1894 046b 5441534B 		.ascii	"TASK\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 47


 1894      00
 1895              	.LASF9:
 1896 0470 5F5F696E 		.ascii	"__int32_t\000"
 1896      7433325F 
 1896      7400
 1897              	.LASF78:
 1898 047a 78537573 		.ascii	"xSuspendedTestQueue\000"
 1898      70656E64 
 1898      65645465 
 1898      73745175 
 1898      65756500 
 1899              	.LASF66:
 1900 048e 78526574 		.ascii	"xReturn\000"
 1900      75726E00 
 1901              	.LASF41:
 1902 0496 4F626A65 		.ascii	"ObjectList\000"
 1902      63744C69 
 1902      737400
 1903              	.LASF59:
 1904 04a1 76517565 		.ascii	"vQueueSendWhenSuspendedTask\000"
 1904      75655365 
 1904      6E645768 
 1904      656E5375 
 1904      7370656E 
 1905              	.LASF82:
 1906 04bd 42756666 		.ascii	"Buffer\000"
 1906      657200
 1907              	.LASF71:
 1908 04c4 78537573 		.ascii	"xSuspendedQueueSendError\000"
 1908      70656E64 
 1908      65645175 
 1908      65756553 
 1908      656E6445 
 1909              	.LASF72:
 1910 04dd 78537573 		.ascii	"xSuspendedQueueReceiveError\000"
 1910      70656E64 
 1910      65645175 
 1910      65756552 
 1910      65636569 
 1911              	.LASF65:
 1912 04f9 756C4C61 		.ascii	"ulLastExpectedValue\000"
 1912      73744578 
 1912      70656374 
 1912      65645661 
 1912      6C756500 
 1913              	.LASF81:
 1914 050d 463A5C50 		.ascii	"F:\\Programme_Scripts\\PSOC Creator\\FreeRTOS\\Free"
 1914      726F6772 
 1914      616D6D65 
 1914      5F536372 
 1914      69707473 
 1915 053c 52544F53 		.ascii	"RTOS_CY8CKIT_059-master\\FreeRTOS_Demo.cydsn\000"
 1915      5F435938 
 1915      434B4954 
 1915      5F303539 
 1915      2D6D6173 
 1916              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccatGRCc.s 			page 48



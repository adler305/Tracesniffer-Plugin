ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PollQ.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sniffIDFilter,13,4
  20              		.comm	buffer,4098,4
  21              		.comm	objectList,1704,4
  22              		.bss
  23              		.align	2
  24              	xPollingConsumerCount:
  25 0000 00000000 		.space	4
  26              		.align	2
  27              	xPollingProducerCount:
  28 0004 00000000 		.space	4
  29              		.section	.rodata
  30              		.align	2
  31              	.LC0:
  32 0000 506F6C6C 		.ascii	"Poll_Test_Queue\000"
  32      5F546573 
  32      745F5175 
  32      65756500 
  33              		.align	2
  34              	.LC1:
  35 0010 51436F6E 		.ascii	"QConsNB\000"
  35      734E4200 
  36              		.align	2
  37              	.LC2:
  38 0018 5150726F 		.ascii	"QProdNB\000"
  38      644E4200 
  39              		.section	.text.vStartPolledQueueTasks,"ax",%progbits
  40              		.align	2
  41              		.global	vStartPolledQueueTasks
  42              		.thumb
  43              		.thumb_func
  44              		.type	vStartPolledQueueTasks, %function
  45              	vStartPolledQueueTasks:
  46              	.LFB68:
  47              		.file 1 "..\\Common\\Minimal\\PollQ.c"
   1:..\Common\Minimal/PollQ.c **** /*
   2:..\Common\Minimal/PollQ.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/PollQ.c ****     All rights reserved
   4:..\Common\Minimal/PollQ.c **** 
   5:..\Common\Minimal/PollQ.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 2


   6:..\Common\Minimal/PollQ.c **** 
   7:..\Common\Minimal/PollQ.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/PollQ.c **** 
   9:..\Common\Minimal/PollQ.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/PollQ.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/PollQ.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/PollQ.c **** 
  13:..\Common\Minimal/PollQ.c ****     ***************************************************************************
  14:..\Common\Minimal/PollQ.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/PollQ.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/PollQ.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/PollQ.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/PollQ.c ****     ***************************************************************************
  19:..\Common\Minimal/PollQ.c **** 
  20:..\Common\Minimal/PollQ.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/PollQ.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/PollQ.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/PollQ.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/PollQ.c **** 
  25:..\Common\Minimal/PollQ.c ****     ***************************************************************************
  26:..\Common\Minimal/PollQ.c ****      *                                                                       *
  27:..\Common\Minimal/PollQ.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/PollQ.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/PollQ.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/PollQ.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/PollQ.c ****      *                                                                       *
  32:..\Common\Minimal/PollQ.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/PollQ.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/PollQ.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/PollQ.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/PollQ.c ****      *                                                                       *
  37:..\Common\Minimal/PollQ.c ****     ***************************************************************************
  38:..\Common\Minimal/PollQ.c **** 
  39:..\Common\Minimal/PollQ.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/PollQ.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/PollQ.c ****     defined configASSERT()?
  42:..\Common\Minimal/PollQ.c **** 
  43:..\Common\Minimal/PollQ.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/PollQ.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/PollQ.c ****     participating in the support forum.
  46:..\Common\Minimal/PollQ.c **** 
  47:..\Common\Minimal/PollQ.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/PollQ.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/PollQ.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/PollQ.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/PollQ.c **** 
  52:..\Common\Minimal/PollQ.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/PollQ.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/PollQ.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Common\Minimal/PollQ.c **** 
  56:..\Common\Minimal/PollQ.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/PollQ.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/PollQ.c **** 
  59:..\Common\Minimal/PollQ.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/PollQ.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/PollQ.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/PollQ.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 3


  63:..\Common\Minimal/PollQ.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/PollQ.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/PollQ.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/PollQ.c **** 
  67:..\Common\Minimal/PollQ.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/PollQ.c **** */
  69:..\Common\Minimal/PollQ.c **** 
  70:..\Common\Minimal/PollQ.c **** /*
  71:..\Common\Minimal/PollQ.c ****  * This version of PollQ. c is for use on systems that have limited stack
  72:..\Common\Minimal/PollQ.c ****  * space and no display facilities.  The complete version can be found in
  73:..\Common\Minimal/PollQ.c ****  * the Demo/Common/Full directory.
  74:..\Common\Minimal/PollQ.c ****  *
  75:..\Common\Minimal/PollQ.c ****  * Creates two tasks that communicate over a single queue.  One task acts as a
  76:..\Common\Minimal/PollQ.c ****  * producer, the other a consumer.
  77:..\Common\Minimal/PollQ.c ****  *
  78:..\Common\Minimal/PollQ.c ****  * The producer loops for three iteration, posting an incrementing number onto the
  79:..\Common\Minimal/PollQ.c ****  * queue each cycle.  It then delays for a fixed period before doing exactly the
  80:..\Common\Minimal/PollQ.c ****  * same again.
  81:..\Common\Minimal/PollQ.c ****  *
  82:..\Common\Minimal/PollQ.c ****  * The consumer loops emptying the queue.  Each item removed from the queue is
  83:..\Common\Minimal/PollQ.c ****  * checked to ensure it contains the expected value.  When the queue is empty it
  84:..\Common\Minimal/PollQ.c ****  * blocks for a fixed period, then does the same again.
  85:..\Common\Minimal/PollQ.c ****  *
  86:..\Common\Minimal/PollQ.c ****  * All queue access is performed without blocking.  The consumer completely empties
  87:..\Common\Minimal/PollQ.c ****  * the queue each time it runs so the producer should never find the queue full.
  88:..\Common\Minimal/PollQ.c ****  *
  89:..\Common\Minimal/PollQ.c ****  * An error is flagged if the consumer obtains an unexpected value or the producer
  90:..\Common\Minimal/PollQ.c ****  * find the queue is full.
  91:..\Common\Minimal/PollQ.c ****  */
  92:..\Common\Minimal/PollQ.c **** 
  93:..\Common\Minimal/PollQ.c **** /*
  94:..\Common\Minimal/PollQ.c **** Changes from V2.0.0
  95:..\Common\Minimal/PollQ.c **** 
  96:..\Common\Minimal/PollQ.c **** 	+ Delay periods are now specified using variables and constants of
  97:..\Common\Minimal/PollQ.c **** 	  TickType_t rather than uint32_t.
  98:..\Common\Minimal/PollQ.c **** */
  99:..\Common\Minimal/PollQ.c **** 
 100:..\Common\Minimal/PollQ.c **** #include <stdlib.h>
 101:..\Common\Minimal/PollQ.c **** 
 102:..\Common\Minimal/PollQ.c **** /* Scheduler include files. */
 103:..\Common\Minimal/PollQ.c **** #include "FreeRTOS.h"
 104:..\Common\Minimal/PollQ.c **** #include "task.h"
 105:..\Common\Minimal/PollQ.c **** #include "queue.h"
 106:..\Common\Minimal/PollQ.c **** 
 107:..\Common\Minimal/PollQ.c **** /* Demo program include files. */
 108:..\Common\Minimal/PollQ.c **** #include "PollQ.h"
 109:..\Common\Minimal/PollQ.c **** 
 110:..\Common\Minimal/PollQ.c **** #define pollqSTACK_SIZE			configMINIMAL_STACK_SIZE
 111:..\Common\Minimal/PollQ.c **** #define pollqQUEUE_SIZE			( 10 )
 112:..\Common\Minimal/PollQ.c **** #define pollqPRODUCER_DELAY		( pdMS_TO_TICKS( ( TickType_t ) 200 ) )
 113:..\Common\Minimal/PollQ.c **** #define pollqCONSUMER_DELAY		( pollqPRODUCER_DELAY - ( TickType_t ) ( 20 / portTICK_PERIOD_MS ) )
 114:..\Common\Minimal/PollQ.c **** #define pollqNO_DELAY			( ( TickType_t ) 0 )
 115:..\Common\Minimal/PollQ.c **** #define pollqVALUES_TO_PRODUCE	( ( BaseType_t ) 3 )
 116:..\Common\Minimal/PollQ.c **** #define pollqINITIAL_VALUE		( ( BaseType_t ) 0 )
 117:..\Common\Minimal/PollQ.c **** 
 118:..\Common\Minimal/PollQ.c **** /* The task that posts the incrementing number onto the queue. */
 119:..\Common\Minimal/PollQ.c **** static portTASK_FUNCTION_PROTO( vPolledQueueProducer, pvParameters );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 4


 120:..\Common\Minimal/PollQ.c **** 
 121:..\Common\Minimal/PollQ.c **** /* The task that empties the queue. */
 122:..\Common\Minimal/PollQ.c **** static portTASK_FUNCTION_PROTO( vPolledQueueConsumer, pvParameters );
 123:..\Common\Minimal/PollQ.c **** 
 124:..\Common\Minimal/PollQ.c **** /* Variables that are used to check that the tasks are still running with no
 125:..\Common\Minimal/PollQ.c **** errors. */
 126:..\Common\Minimal/PollQ.c **** static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = poll
 127:..\Common\Minimal/PollQ.c **** 
 128:..\Common\Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 129:..\Common\Minimal/PollQ.c **** 
 130:..\Common\Minimal/PollQ.c **** void vStartPolledQueueTasks( UBaseType_t uxPriority )
 131:..\Common\Minimal/PollQ.c **** {
  48              		.loc 1 131 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 8
  51              		@ frame_needed = 1, uses_anonymous_args = 0
  52 0000 80B5     		push	{r7, lr}
  53              		.cfi_def_cfa_offset 8
  54              		.cfi_offset 7, -8
  55              		.cfi_offset 14, -4
  56 0002 84B0     		sub	sp, sp, #16
  57              		.cfi_def_cfa_offset 24
  58 0004 02AF     		add	r7, sp, #8
  59              		.cfi_def_cfa 7, 16
  60 0006 7860     		str	r0, [r7, #4]
 132:..\Common\Minimal/PollQ.c **** static QueueHandle_t xPolledQueue;
 133:..\Common\Minimal/PollQ.c **** 
 134:..\Common\Minimal/PollQ.c **** 	/* Create the queue used by the producer and consumer. */
 135:..\Common\Minimal/PollQ.c **** 	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
  61              		.loc 1 135 0
  62 0008 0022     		movs	r2, #0
  63 000a 0221     		movs	r1, #2
  64 000c 0A20     		movs	r0, #10
  65 000e FFF7FEFF 		bl	xQueueGenericCreate
  66 0012 0246     		mov	r2, r0
  67 0014 114B     		ldr	r3, .L4
  68 0016 1A60     		str	r2, [r3]
 136:..\Common\Minimal/PollQ.c **** 
 137:..\Common\Minimal/PollQ.c **** 	if( xPolledQueue != NULL )
  69              		.loc 1 137 0
  70 0018 104B     		ldr	r3, .L4
  71 001a 1B68     		ldr	r3, [r3]
  72 001c 002B     		cmp	r3, #0
  73 001e 19D0     		beq	.L3
 138:..\Common\Minimal/PollQ.c **** 	{
 139:..\Common\Minimal/PollQ.c **** 		/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 140:..\Common\Minimal/PollQ.c **** 		in use.  The queue registry is provided as a means for kernel aware
 141:..\Common\Minimal/PollQ.c **** 		debuggers to locate queues and has no purpose if a kernel aware debugger
 142:..\Common\Minimal/PollQ.c **** 		is not being used.  The call to vQueueAddToRegistry() will be removed
 143:..\Common\Minimal/PollQ.c **** 		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 144:..\Common\Minimal/PollQ.c **** 		defined to be less than 1. */
 145:..\Common\Minimal/PollQ.c **** 		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );
  74              		.loc 1 145 0
  75 0020 0E4B     		ldr	r3, .L4
  76 0022 1B68     		ldr	r3, [r3]
  77 0024 0E49     		ldr	r1, .L4+4
  78 0026 1846     		mov	r0, r3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 5


  79 0028 FFF7FEFF 		bl	vQueueAddToRegistry
 146:..\Common\Minimal/PollQ.c **** 
 147:..\Common\Minimal/PollQ.c **** 		/* Spawn the producer and consumer. */
 148:..\Common\Minimal/PollQ.c **** 		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriori
  80              		.loc 1 148 0
  81 002c 0023     		movs	r3, #0
  82 002e 0193     		str	r3, [sp, #4]
  83 0030 7B68     		ldr	r3, [r7, #4]
  84 0032 0093     		str	r3, [sp]
  85 0034 094B     		ldr	r3, .L4
  86 0036 6422     		movs	r2, #100
  87 0038 0A49     		ldr	r1, .L4+8
  88 003a 0B48     		ldr	r0, .L4+12
  89 003c FFF7FEFF 		bl	xTaskCreate
 149:..\Common\Minimal/PollQ.c **** 		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriori
  90              		.loc 1 149 0
  91 0040 0023     		movs	r3, #0
  92 0042 0193     		str	r3, [sp, #4]
  93 0044 7B68     		ldr	r3, [r7, #4]
  94 0046 0093     		str	r3, [sp]
  95 0048 044B     		ldr	r3, .L4
  96 004a 6422     		movs	r2, #100
  97 004c 0749     		ldr	r1, .L4+16
  98 004e 0848     		ldr	r0, .L4+20
  99 0050 FFF7FEFF 		bl	xTaskCreate
 100              	.L3:
 150:..\Common\Minimal/PollQ.c **** 	}
 151:..\Common\Minimal/PollQ.c **** }
 101              		.loc 1 151 0
 102 0054 00BF     		nop
 103 0056 0837     		adds	r7, r7, #8
 104              		.cfi_def_cfa_offset 8
 105 0058 BD46     		mov	sp, r7
 106              		.cfi_def_cfa_register 13
 107              		@ sp needed
 108 005a 80BD     		pop	{r7, pc}
 109              	.L5:
 110              		.align	2
 111              	.L4:
 112 005c 08000000 		.word	xPolledQueue.7540
 113 0060 00000000 		.word	.LC0
 114 0064 10000000 		.word	.LC1
 115 0068 00000000 		.word	vPolledQueueConsumer
 116 006c 18000000 		.word	.LC2
 117 0070 00000000 		.word	vPolledQueueProducer
 118              		.cfi_endproc
 119              	.LFE68:
 120              		.size	vStartPolledQueueTasks, .-vStartPolledQueueTasks
 121              		.section	.text.vPolledQueueProducer,"ax",%progbits
 122              		.align	2
 123              		.thumb
 124              		.thumb_func
 125              		.type	vPolledQueueProducer, %function
 126              	vPolledQueueProducer:
 127              	.LFB69:
 152:..\Common\Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 153:..\Common\Minimal/PollQ.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 6


 154:..\Common\Minimal/PollQ.c **** static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
 155:..\Common\Minimal/PollQ.c **** {
 128              		.loc 1 155 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 24
 131              		@ frame_needed = 1, uses_anonymous_args = 0
 132 0000 80B5     		push	{r7, lr}
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 7, -8
 135              		.cfi_offset 14, -4
 136 0002 86B0     		sub	sp, sp, #24
 137              		.cfi_def_cfa_offset 32
 138 0004 00AF     		add	r7, sp, #0
 139              		.cfi_def_cfa_register 7
 140 0006 7860     		str	r0, [r7, #4]
 156:..\Common\Minimal/PollQ.c **** uint16_t usValue = ( uint16_t ) 0;
 141              		.loc 1 156 0
 142 0008 0023     		movs	r3, #0
 143 000a FB81     		strh	r3, [r7, #14]	@ movhi
 157:..\Common\Minimal/PollQ.c **** BaseType_t xError = pdFALSE, xLoop;
 144              		.loc 1 157 0
 145 000c 0023     		movs	r3, #0
 146 000e 7B61     		str	r3, [r7, #20]
 147              	.L12:
 158:..\Common\Minimal/PollQ.c **** 
 159:..\Common\Minimal/PollQ.c **** 	for( ;; )
 160:..\Common\Minimal/PollQ.c **** 	{
 161:..\Common\Minimal/PollQ.c **** 		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 148              		.loc 1 161 0
 149 0010 0023     		movs	r3, #0
 150 0012 3B61     		str	r3, [r7, #16]
 151 0014 20E0     		b	.L7
 152              	.L11:
 162:..\Common\Minimal/PollQ.c **** 		{
 163:..\Common\Minimal/PollQ.c **** 			/* Send an incrementing number on the queue without blocking. */
 164:..\Common\Minimal/PollQ.c **** 			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != p
 153              		.loc 1 164 0
 154 0016 7B68     		ldr	r3, [r7, #4]
 155 0018 1868     		ldr	r0, [r3]
 156 001a 07F10E01 		add	r1, r7, #14
 157 001e 0023     		movs	r3, #0
 158 0020 0022     		movs	r2, #0
 159 0022 FFF7FEFF 		bl	xQueueGenericSend
 160 0026 0346     		mov	r3, r0
 161 0028 012B     		cmp	r3, #1
 162 002a 02D0     		beq	.L8
 165:..\Common\Minimal/PollQ.c **** 			{
 166:..\Common\Minimal/PollQ.c **** 				/* We should never find the queue full so if we get here there
 167:..\Common\Minimal/PollQ.c **** 				has been an error. */
 168:..\Common\Minimal/PollQ.c **** 				xError = pdTRUE;
 163              		.loc 1 168 0
 164 002c 0123     		movs	r3, #1
 165 002e 7B61     		str	r3, [r7, #20]
 166 0030 0FE0     		b	.L9
 167              	.L8:
 169:..\Common\Minimal/PollQ.c **** 			}
 170:..\Common\Minimal/PollQ.c **** 			else
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 7


 171:..\Common\Minimal/PollQ.c **** 			{
 172:..\Common\Minimal/PollQ.c **** 				if( xError == pdFALSE )
 168              		.loc 1 172 0
 169 0032 7B69     		ldr	r3, [r7, #20]
 170 0034 002B     		cmp	r3, #0
 171 0036 08D1     		bne	.L10
 173:..\Common\Minimal/PollQ.c **** 				{
 174:..\Common\Minimal/PollQ.c **** 					/* If an error has ever been recorded we stop incrementing the
 175:..\Common\Minimal/PollQ.c **** 					check variable. */
 176:..\Common\Minimal/PollQ.c **** 					portENTER_CRITICAL();
 172              		.loc 1 176 0
 173 0038 FFF7FEFF 		bl	vPortEnterCritical
 177:..\Common\Minimal/PollQ.c **** 						xPollingProducerCount++;
 174              		.loc 1 177 0
 175 003c 0A4B     		ldr	r3, .L13
 176 003e 1B68     		ldr	r3, [r3]
 177 0040 0133     		adds	r3, r3, #1
 178 0042 094A     		ldr	r2, .L13
 179 0044 1360     		str	r3, [r2]
 178:..\Common\Minimal/PollQ.c **** 					portEXIT_CRITICAL();
 180              		.loc 1 178 0
 181 0046 FFF7FEFF 		bl	vPortExitCritical
 182              	.L10:
 179:..\Common\Minimal/PollQ.c **** 				}
 180:..\Common\Minimal/PollQ.c **** 
 181:..\Common\Minimal/PollQ.c **** 				/* Update the value we are going to post next time around. */
 182:..\Common\Minimal/PollQ.c **** 				usValue++;
 183              		.loc 1 182 0
 184 004a FB89     		ldrh	r3, [r7, #14]
 185 004c 0133     		adds	r3, r3, #1
 186 004e 9BB2     		uxth	r3, r3
 187 0050 FB81     		strh	r3, [r7, #14]	@ movhi
 188              	.L9:
 161:..\Common\Minimal/PollQ.c **** 		{
 189              		.loc 1 161 0 discriminator 2
 190 0052 3B69     		ldr	r3, [r7, #16]
 191 0054 0133     		adds	r3, r3, #1
 192 0056 3B61     		str	r3, [r7, #16]
 193              	.L7:
 161:..\Common\Minimal/PollQ.c **** 		{
 194              		.loc 1 161 0 is_stmt 0 discriminator 1
 195 0058 3B69     		ldr	r3, [r7, #16]
 196 005a 022B     		cmp	r3, #2
 197 005c DBDD     		ble	.L11
 183:..\Common\Minimal/PollQ.c **** 			}
 184:..\Common\Minimal/PollQ.c **** 		}
 185:..\Common\Minimal/PollQ.c **** 
 186:..\Common\Minimal/PollQ.c **** 		/* Wait before we start posting again to ensure the consumer runs and
 187:..\Common\Minimal/PollQ.c **** 		empties the queue. */
 188:..\Common\Minimal/PollQ.c **** 		vTaskDelay( pollqPRODUCER_DELAY );
 198              		.loc 1 188 0 is_stmt 1
 199 005e C820     		movs	r0, #200
 200 0060 FFF7FEFF 		bl	vTaskDelay
 189:..\Common\Minimal/PollQ.c **** 	}
 201              		.loc 1 189 0
 202 0064 D4E7     		b	.L12
 203              	.L14:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 8


 204 0066 00BF     		.align	2
 205              	.L13:
 206 0068 04000000 		.word	xPollingProducerCount
 207              		.cfi_endproc
 208              	.LFE69:
 209              		.size	vPolledQueueProducer, .-vPolledQueueProducer
 210              		.section	.text.vPolledQueueConsumer,"ax",%progbits
 211              		.align	2
 212              		.thumb
 213              		.thumb_func
 214              		.type	vPolledQueueConsumer, %function
 215              	vPolledQueueConsumer:
 216              	.LFB70:
 190:..\Common\Minimal/PollQ.c **** }  /*lint !e818 Function prototype must conform to API. */
 191:..\Common\Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 192:..\Common\Minimal/PollQ.c **** 
 193:..\Common\Minimal/PollQ.c **** static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
 194:..\Common\Minimal/PollQ.c **** {
 217              		.loc 1 194 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 24
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221 0000 80B5     		push	{r7, lr}
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 225 0002 86B0     		sub	sp, sp, #24
 226              		.cfi_def_cfa_offset 32
 227 0004 00AF     		add	r7, sp, #0
 228              		.cfi_def_cfa_register 7
 229 0006 7860     		str	r0, [r7, #4]
 195:..\Common\Minimal/PollQ.c **** uint16_t usData, usExpectedValue = ( uint16_t ) 0;
 230              		.loc 1 195 0
 231 0008 0023     		movs	r3, #0
 232 000a FB82     		strh	r3, [r7, #22]	@ movhi
 196:..\Common\Minimal/PollQ.c **** BaseType_t xError = pdFALSE;
 233              		.loc 1 196 0
 234 000c 0023     		movs	r3, #0
 235 000e 3B61     		str	r3, [r7, #16]
 236              	.L20:
 197:..\Common\Minimal/PollQ.c **** 
 198:..\Common\Minimal/PollQ.c **** 	for( ;; )
 199:..\Common\Minimal/PollQ.c **** 	{
 200:..\Common\Minimal/PollQ.c **** 		/* Loop until the queue is empty. */
 201:..\Common\Minimal/PollQ.c **** 		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
 237              		.loc 1 201 0
 238 0010 22E0     		b	.L16
 239              	.L19:
 202:..\Common\Minimal/PollQ.c **** 		{
 203:..\Common\Minimal/PollQ.c **** 			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 240              		.loc 1 203 0
 241 0012 7B68     		ldr	r3, [r7, #4]
 242 0014 1868     		ldr	r0, [r3]
 243 0016 07F10E01 		add	r1, r7, #14
 244 001a 0023     		movs	r3, #0
 245 001c 0022     		movs	r2, #0
 246 001e FFF7FEFF 		bl	xQueueGenericReceive
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 9


 247 0022 0346     		mov	r3, r0
 248 0024 012B     		cmp	r3, #1
 249 0026 17D1     		bne	.L16
 204:..\Common\Minimal/PollQ.c **** 			{
 205:..\Common\Minimal/PollQ.c **** 				if( usData != usExpectedValue )
 250              		.loc 1 205 0
 251 0028 FB89     		ldrh	r3, [r7, #14]
 252 002a FA8A     		ldrh	r2, [r7, #22]
 253 002c 9A42     		cmp	r2, r3
 254 002e 04D0     		beq	.L17
 206:..\Common\Minimal/PollQ.c **** 				{
 207:..\Common\Minimal/PollQ.c **** 					/* This is not what we expected to receive so an error has
 208:..\Common\Minimal/PollQ.c **** 					occurred. */
 209:..\Common\Minimal/PollQ.c **** 					xError = pdTRUE;
 255              		.loc 1 209 0
 256 0030 0123     		movs	r3, #1
 257 0032 3B61     		str	r3, [r7, #16]
 210:..\Common\Minimal/PollQ.c **** 
 211:..\Common\Minimal/PollQ.c **** 					/* Catch-up to the value we received so our next expected
 212:..\Common\Minimal/PollQ.c **** 					value should again be correct. */
 213:..\Common\Minimal/PollQ.c **** 					usExpectedValue = usData;
 258              		.loc 1 213 0
 259 0034 FB89     		ldrh	r3, [r7, #14]	@ movhi
 260 0036 FB82     		strh	r3, [r7, #22]	@ movhi
 261 0038 0BE0     		b	.L18
 262              	.L17:
 214:..\Common\Minimal/PollQ.c **** 				}
 215:..\Common\Minimal/PollQ.c **** 				else
 216:..\Common\Minimal/PollQ.c **** 				{
 217:..\Common\Minimal/PollQ.c **** 					if( xError == pdFALSE )
 263              		.loc 1 217 0
 264 003a 3B69     		ldr	r3, [r7, #16]
 265 003c 002B     		cmp	r3, #0
 266 003e 08D1     		bne	.L18
 218:..\Common\Minimal/PollQ.c **** 					{
 219:..\Common\Minimal/PollQ.c **** 						/* Only increment the check variable if no errors have
 220:..\Common\Minimal/PollQ.c **** 						occurred. */
 221:..\Common\Minimal/PollQ.c **** 						portENTER_CRITICAL();
 267              		.loc 1 221 0
 268 0040 FFF7FEFF 		bl	vPortEnterCritical
 222:..\Common\Minimal/PollQ.c **** 							xPollingConsumerCount++;
 269              		.loc 1 222 0
 270 0044 0A4B     		ldr	r3, .L21
 271 0046 1B68     		ldr	r3, [r3]
 272 0048 0133     		adds	r3, r3, #1
 273 004a 094A     		ldr	r2, .L21
 274 004c 1360     		str	r3, [r2]
 223:..\Common\Minimal/PollQ.c **** 						portEXIT_CRITICAL();
 275              		.loc 1 223 0
 276 004e FFF7FEFF 		bl	vPortExitCritical
 277              	.L18:
 224:..\Common\Minimal/PollQ.c **** 					}
 225:..\Common\Minimal/PollQ.c **** 				}
 226:..\Common\Minimal/PollQ.c **** 
 227:..\Common\Minimal/PollQ.c **** 				/* Next time round we would expect the number to be one higher. */
 228:..\Common\Minimal/PollQ.c **** 				usExpectedValue++;
 278              		.loc 1 228 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 10


 279 0052 FB8A     		ldrh	r3, [r7, #22]
 280 0054 0133     		adds	r3, r3, #1
 281 0056 FB82     		strh	r3, [r7, #22]	@ movhi
 282              	.L16:
 201:..\Common\Minimal/PollQ.c **** 		{
 283              		.loc 1 201 0
 284 0058 7B68     		ldr	r3, [r7, #4]
 285 005a 1B68     		ldr	r3, [r3]
 286 005c 1846     		mov	r0, r3
 287 005e FFF7FEFF 		bl	uxQueueMessagesWaiting
 288 0062 0346     		mov	r3, r0
 289 0064 002B     		cmp	r3, #0
 290 0066 D4D1     		bne	.L19
 229:..\Common\Minimal/PollQ.c **** 			}
 230:..\Common\Minimal/PollQ.c **** 		}
 231:..\Common\Minimal/PollQ.c **** 
 232:..\Common\Minimal/PollQ.c **** 		/* Now the queue is empty we block, allowing the producer to place more
 233:..\Common\Minimal/PollQ.c **** 		items in the queue. */
 234:..\Common\Minimal/PollQ.c **** 		vTaskDelay( pollqCONSUMER_DELAY );
 291              		.loc 1 234 0
 292 0068 B420     		movs	r0, #180
 293 006a FFF7FEFF 		bl	vTaskDelay
 235:..\Common\Minimal/PollQ.c **** 	}
 294              		.loc 1 235 0
 295 006e CFE7     		b	.L20
 296              	.L22:
 297              		.align	2
 298              	.L21:
 299 0070 00000000 		.word	xPollingConsumerCount
 300              		.cfi_endproc
 301              	.LFE70:
 302              		.size	vPolledQueueConsumer, .-vPolledQueueConsumer
 303              		.section	.text.xArePollingQueuesStillRunning,"ax",%progbits
 304              		.align	2
 305              		.global	xArePollingQueuesStillRunning
 306              		.thumb
 307              		.thumb_func
 308              		.type	xArePollingQueuesStillRunning, %function
 309              	xArePollingQueuesStillRunning:
 310              	.LFB71:
 236:..\Common\Minimal/PollQ.c **** } /*lint !e818 Function prototype must conform to API. */
 237:..\Common\Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 238:..\Common\Minimal/PollQ.c **** 
 239:..\Common\Minimal/PollQ.c **** /* This is called to check that all the created tasks are still running with no errors. */
 240:..\Common\Minimal/PollQ.c **** BaseType_t xArePollingQueuesStillRunning( void )
 241:..\Common\Minimal/PollQ.c **** {
 311              		.loc 1 241 0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 1, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 316 0000 80B4     		push	{r7}
 317              		.cfi_def_cfa_offset 4
 318              		.cfi_offset 7, -4
 319 0002 83B0     		sub	sp, sp, #12
 320              		.cfi_def_cfa_offset 16
 321 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 11


 322              		.cfi_def_cfa_register 7
 242:..\Common\Minimal/PollQ.c **** BaseType_t xReturn;
 243:..\Common\Minimal/PollQ.c **** 
 244:..\Common\Minimal/PollQ.c **** 	/* Check both the consumer and producer poll count to check they have both
 245:..\Common\Minimal/PollQ.c **** 	been changed since out last trip round.  We do not need a critical section
 246:..\Common\Minimal/PollQ.c **** 	around the check variables as this is called from a higher priority than
 247:..\Common\Minimal/PollQ.c **** 	the other tasks that access the same variables. */
 248:..\Common\Minimal/PollQ.c **** 	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 323              		.loc 1 248 0
 324 0006 0C4B     		ldr	r3, .L28
 325 0008 1B68     		ldr	r3, [r3]
 326 000a 002B     		cmp	r3, #0
 327 000c 03D0     		beq	.L24
 249:..\Common\Minimal/PollQ.c **** 		( xPollingProducerCount == pollqINITIAL_VALUE )
 328              		.loc 1 249 0 discriminator 1
 329 000e 0B4B     		ldr	r3, .L28+4
 330 0010 1B68     		ldr	r3, [r3]
 248:..\Common\Minimal/PollQ.c **** 		( xPollingProducerCount == pollqINITIAL_VALUE )
 331              		.loc 1 248 0 discriminator 1
 332 0012 002B     		cmp	r3, #0
 333 0014 02D1     		bne	.L25
 334              	.L24:
 250:..\Common\Minimal/PollQ.c **** 	  )
 251:..\Common\Minimal/PollQ.c **** 	{
 252:..\Common\Minimal/PollQ.c **** 		xReturn = pdFALSE;
 335              		.loc 1 252 0
 336 0016 0023     		movs	r3, #0
 337 0018 7B60     		str	r3, [r7, #4]
 338 001a 01E0     		b	.L26
 339              	.L25:
 253:..\Common\Minimal/PollQ.c **** 	}
 254:..\Common\Minimal/PollQ.c **** 	else
 255:..\Common\Minimal/PollQ.c **** 	{
 256:..\Common\Minimal/PollQ.c **** 		xReturn = pdTRUE;
 340              		.loc 1 256 0
 341 001c 0123     		movs	r3, #1
 342 001e 7B60     		str	r3, [r7, #4]
 343              	.L26:
 257:..\Common\Minimal/PollQ.c **** 	}
 258:..\Common\Minimal/PollQ.c **** 
 259:..\Common\Minimal/PollQ.c **** 	/* Set the check variables back down so we know if they have been
 260:..\Common\Minimal/PollQ.c **** 	incremented the next time around. */
 261:..\Common\Minimal/PollQ.c **** 	xPollingConsumerCount = pollqINITIAL_VALUE;
 344              		.loc 1 261 0
 345 0020 054B     		ldr	r3, .L28
 346 0022 0022     		movs	r2, #0
 347 0024 1A60     		str	r2, [r3]
 262:..\Common\Minimal/PollQ.c **** 	xPollingProducerCount = pollqINITIAL_VALUE;
 348              		.loc 1 262 0
 349 0026 054B     		ldr	r3, .L28+4
 350 0028 0022     		movs	r2, #0
 351 002a 1A60     		str	r2, [r3]
 263:..\Common\Minimal/PollQ.c **** 
 264:..\Common\Minimal/PollQ.c **** 	return xReturn;
 352              		.loc 1 264 0
 353 002c 7B68     		ldr	r3, [r7, #4]
 265:..\Common\Minimal/PollQ.c **** }
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 12


 354              		.loc 1 265 0
 355 002e 1846     		mov	r0, r3
 356 0030 0C37     		adds	r7, r7, #12
 357              		.cfi_def_cfa_offset 4
 358 0032 BD46     		mov	sp, r7
 359              		.cfi_def_cfa_register 13
 360              		@ sp needed
 361 0034 80BC     		pop	{r7}
 362              		.cfi_restore 7
 363              		.cfi_def_cfa_offset 0
 364 0036 7047     		bx	lr
 365              	.L29:
 366              		.align	2
 367              	.L28:
 368 0038 00000000 		.word	xPollingConsumerCount
 369 003c 04000000 		.word	xPollingProducerCount
 370              		.cfi_endproc
 371              	.LFE71:
 372              		.size	xArePollingQueuesStillRunning, .-xArePollingQueuesStillRunning
 373              		.bss
 374              		.align	2
 375              	xPolledQueue.7540:
 376 0008 00000000 		.space	4
 377              		.text
 378              	.Letext0:
 379              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 380              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 381              		.file 4 ".\\Tracer/sniffPayload.h"
 382              		.file 5 ".\\Tracer/selfFIFO.h"
 383              		.file 6 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 384              		.file 7 "..\\Source\\include/task.h"
 385              		.file 8 "..\\Source\\include/queue.h"
 386              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 387              		.file 10 ".\\Tracer/sniffTask.h"
 388              		.section	.debug_info,"",%progbits
 389              	.Ldebug_info0:
 390 0000 F0030000 		.4byte	0x3f0
 391 0004 0400     		.2byte	0x4
 392 0006 00000000 		.4byte	.Ldebug_abbrev0
 393 000a 04       		.byte	0x4
 394 000b 01       		.uleb128 0x1
 395 000c 7B000000 		.4byte	.LASF67
 396 0010 0C       		.byte	0xc
 397 0011 4A020000 		.4byte	.LASF68
 398 0015 F5030000 		.4byte	.LASF69
 399 0019 00000000 		.4byte	.Ldebug_ranges0+0
 400 001d 00000000 		.4byte	0
 401 0021 00000000 		.4byte	.Ldebug_line0
 402 0025 02       		.uleb128 0x2
 403 0026 04       		.byte	0x4
 404 0027 07       		.byte	0x7
 405 0028 9D020000 		.4byte	.LASF0
 406 002c 03       		.uleb128 0x3
 407 002d 04       		.byte	0x4
 408 002e 05       		.byte	0x5
 409 002f 696E7400 		.ascii	"int\000"
 410 0033 02       		.uleb128 0x2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 13


 411 0034 08       		.byte	0x8
 412 0035 05       		.byte	0x5
 413 0036 97010000 		.4byte	.LASF1
 414 003a 02       		.uleb128 0x2
 415 003b 08       		.byte	0x8
 416 003c 04       		.byte	0x4
 417 003d 30020000 		.4byte	.LASF2
 418 0041 02       		.uleb128 0x2
 419 0042 01       		.byte	0x1
 420 0043 06       		.byte	0x6
 421 0044 64020000 		.4byte	.LASF3
 422 0048 04       		.uleb128 0x4
 423 0049 D7010000 		.4byte	.LASF6
 424 004d 02       		.byte	0x2
 425 004e 1D       		.byte	0x1d
 426 004f 53000000 		.4byte	0x53
 427 0053 02       		.uleb128 0x2
 428 0054 01       		.byte	0x1
 429 0055 08       		.byte	0x8
 430 0056 3C020000 		.4byte	.LASF4
 431 005a 02       		.uleb128 0x2
 432 005b 02       		.byte	0x2
 433 005c 05       		.byte	0x5
 434 005d 41000000 		.4byte	.LASF5
 435 0061 04       		.uleb128 0x4
 436 0062 21010000 		.4byte	.LASF7
 437 0066 02       		.byte	0x2
 438 0067 2B       		.byte	0x2b
 439 0068 6C000000 		.4byte	0x6c
 440 006c 02       		.uleb128 0x2
 441 006d 02       		.byte	0x2
 442 006e 07       		.byte	0x7
 443 006f D3020000 		.4byte	.LASF8
 444 0073 04       		.uleb128 0x4
 445 0074 A0030000 		.4byte	.LASF9
 446 0078 02       		.byte	0x2
 447 0079 3F       		.byte	0x3f
 448 007a 7E000000 		.4byte	0x7e
 449 007e 02       		.uleb128 0x2
 450 007f 04       		.byte	0x4
 451 0080 05       		.byte	0x5
 452 0081 B0010000 		.4byte	.LASF10
 453 0085 04       		.uleb128 0x4
 454 0086 09010000 		.4byte	.LASF11
 455 008a 02       		.byte	0x2
 456 008b 41       		.byte	0x41
 457 008c 90000000 		.4byte	0x90
 458 0090 02       		.uleb128 0x2
 459 0091 04       		.byte	0x4
 460 0092 07       		.byte	0x7
 461 0093 51030000 		.4byte	.LASF12
 462 0097 02       		.uleb128 0x2
 463 0098 08       		.byte	0x8
 464 0099 07       		.byte	0x7
 465 009a 70020000 		.4byte	.LASF13
 466 009e 02       		.uleb128 0x2
 467 009f 04       		.byte	0x4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 14


 468 00a0 07       		.byte	0x7
 469 00a1 52000000 		.4byte	.LASF14
 470 00a5 05       		.uleb128 0x5
 471 00a6 04       		.byte	0x4
 472 00a7 02       		.uleb128 0x2
 473 00a8 01       		.byte	0x1
 474 00a9 08       		.byte	0x8
 475 00aa 04030000 		.4byte	.LASF15
 476 00ae 04       		.uleb128 0x4
 477 00af 3C010000 		.4byte	.LASF16
 478 00b3 03       		.byte	0x3
 479 00b4 18       		.byte	0x18
 480 00b5 48000000 		.4byte	0x48
 481 00b9 04       		.uleb128 0x4
 482 00ba 09030000 		.4byte	.LASF17
 483 00be 03       		.byte	0x3
 484 00bf 24       		.byte	0x24
 485 00c0 61000000 		.4byte	0x61
 486 00c4 04       		.uleb128 0x4
 487 00c5 1B030000 		.4byte	.LASF18
 488 00c9 03       		.byte	0x3
 489 00ca 2C       		.byte	0x2c
 490 00cb 73000000 		.4byte	0x73
 491 00cf 04       		.uleb128 0x4
 492 00d0 87020000 		.4byte	.LASF19
 493 00d4 03       		.byte	0x3
 494 00d5 30       		.byte	0x30
 495 00d6 85000000 		.4byte	0x85
 496 00da 02       		.uleb128 0x2
 497 00db 04       		.byte	0x4
 498 00dc 04       		.byte	0x4
 499 00dd 85010000 		.4byte	.LASF20
 500 00e1 02       		.uleb128 0x2
 501 00e2 08       		.byte	0x8
 502 00e3 04       		.byte	0x4
 503 00e4 63030000 		.4byte	.LASF21
 504 00e8 06       		.uleb128 0x6
 505 00e9 01       		.byte	0x1
 506 00ea 53000000 		.4byte	0x53
 507 00ee 04       		.byte	0x4
 508 00ef 10       		.byte	0x10
 509 00f0 1F010000 		.4byte	0x11f
 510 00f4 07       		.uleb128 0x7
 511 00f5 0C020000 		.4byte	.LASF22
 512 00f9 00       		.byte	0
 513 00fa 07       		.uleb128 0x7
 514 00fb 5B000000 		.4byte	.LASF23
 515 00ff 01       		.byte	0x1
 516 0100 07       		.uleb128 0x7
 517 0101 12020000 		.4byte	.LASF24
 518 0105 02       		.byte	0x2
 519 0106 07       		.uleb128 0x7
 520 0107 8A030000 		.4byte	.LASF25
 521 010b 03       		.byte	0x3
 522 010c 07       		.uleb128 0x7
 523 010d C7010000 		.4byte	.LASF26
 524 0111 04       		.byte	0x4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 15


 525 0112 07       		.uleb128 0x7
 526 0113 9B030000 		.4byte	.LASF27
 527 0117 05       		.byte	0x5
 528 0118 07       		.uleb128 0x7
 529 0119 3B030000 		.4byte	.LASF28
 530 011d 06       		.byte	0x6
 531 011e 00       		.byte	0
 532 011f 04       		.uleb128 0x4
 533 0120 5E010000 		.4byte	.LASF29
 534 0124 04       		.byte	0x4
 535 0125 10       		.byte	0x10
 536 0126 E8000000 		.4byte	0xe8
 537 012a 08       		.uleb128 0x8
 538 012b 04       		.byte	0x4
 539 012c 04       		.byte	0x4
 540 012d 86       		.byte	0x86
 541 012e 63010000 		.4byte	0x163
 542 0132 09       		.uleb128 0x9
 543 0133 12030000 		.4byte	.LASF30
 544 0137 04       		.byte	0x4
 545 0138 87       		.byte	0x87
 546 0139 AE000000 		.4byte	0xae
 547 013d 00       		.byte	0
 548 013e 09       		.uleb128 0x9
 549 013f B8030000 		.4byte	.LASF31
 550 0143 04       		.byte	0x4
 551 0144 88       		.byte	0x88
 552 0145 AE000000 		.4byte	0xae
 553 0149 01       		.byte	0x1
 554 014a 09       		.uleb128 0x9
 555 014b 70000000 		.4byte	.LASF32
 556 014f 04       		.byte	0x4
 557 0150 89       		.byte	0x89
 558 0151 1F010000 		.4byte	0x11f
 559 0155 02       		.byte	0x2
 560 0156 09       		.uleb128 0x9
 561 0157 7E010000 		.4byte	.LASF33
 562 015b 04       		.byte	0x4
 563 015c 8A       		.byte	0x8a
 564 015d AE000000 		.4byte	0xae
 565 0161 03       		.byte	0x3
 566 0162 00       		.byte	0
 567 0163 04       		.uleb128 0x4
 568 0164 AA020000 		.4byte	.LASF34
 569 0168 04       		.byte	0x4
 570 0169 8B       		.byte	0x8b
 571 016a 2A010000 		.4byte	0x12a
 572 016e 08       		.uleb128 0x8
 573 016f 0E       		.byte	0xe
 574 0170 04       		.byte	0x4
 575 0171 95       		.byte	0x95
 576 0172 9B010000 		.4byte	0x19b
 577 0176 09       		.uleb128 0x9
 578 0177 34000000 		.4byte	.LASF35
 579 017b 04       		.byte	0x4
 580 017c 96       		.byte	0x96
 581 017d AE000000 		.4byte	0xae
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 16


 582 0181 00       		.byte	0
 583 0182 09       		.uleb128 0x9
 584 0183 50010000 		.4byte	.LASF36
 585 0187 04       		.byte	0x4
 586 0188 97       		.byte	0x97
 587 0189 AE000000 		.4byte	0xae
 588 018d 01       		.byte	0x1
 589 018e 09       		.uleb128 0x9
 590 018f 25020000 		.4byte	.LASF37
 591 0193 04       		.byte	0x4
 592 0194 98       		.byte	0x98
 593 0195 9B010000 		.4byte	0x19b
 594 0199 02       		.byte	0x2
 595 019a 00       		.byte	0
 596 019b 0A       		.uleb128 0xa
 597 019c A7000000 		.4byte	0xa7
 598 01a0 AB010000 		.4byte	0x1ab
 599 01a4 0B       		.uleb128 0xb
 600 01a5 9E000000 		.4byte	0x9e
 601 01a9 0B       		.byte	0xb
 602 01aa 00       		.byte	0
 603 01ab 04       		.uleb128 0x4
 604 01ac 8B010000 		.4byte	.LASF38
 605 01b0 04       		.byte	0x4
 606 01b1 99       		.byte	0x99
 607 01b2 6E010000 		.4byte	0x16e
 608 01b6 0C       		.uleb128 0xc
 609 01b7 1C01     		.2byte	0x11c
 610 01b9 04       		.byte	0x4
 611 01ba A3       		.byte	0xa3
 612 01bb D8010000 		.4byte	0x1d8
 613 01bf 09       		.uleb128 0x9
 614 01c0 14010000 		.4byte	.LASF39
 615 01c4 04       		.byte	0x4
 616 01c5 A4       		.byte	0xa4
 617 01c6 63010000 		.4byte	0x163
 618 01ca 00       		.byte	0
 619 01cb 09       		.uleb128 0x9
 620 01cc 44010000 		.4byte	.LASF40
 621 01d0 04       		.byte	0x4
 622 01d1 A5       		.byte	0xa5
 623 01d2 D8010000 		.4byte	0x1d8
 624 01d6 04       		.byte	0x4
 625 01d7 00       		.byte	0
 626 01d8 0A       		.uleb128 0xa
 627 01d9 AB010000 		.4byte	0x1ab
 628 01dd E8010000 		.4byte	0x1e8
 629 01e1 0B       		.uleb128 0xb
 630 01e2 9E000000 		.4byte	0x9e
 631 01e6 13       		.byte	0x13
 632 01e7 00       		.byte	0
 633 01e8 04       		.uleb128 0x4
 634 01e9 C6030000 		.4byte	.LASF41
 635 01ed 04       		.byte	0x4
 636 01ee A6       		.byte	0xa6
 637 01ef B6010000 		.4byte	0x1b6
 638 01f3 0D       		.uleb128 0xd
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 17


 639 01f4 05020000 		.4byte	.LASF70
 640 01f8 0210     		.2byte	0x1002
 641 01fa 05       		.byte	0x5
 642 01fb 0C       		.byte	0xc
 643 01fc 27020000 		.4byte	0x227
 644 0200 09       		.uleb128 0x9
 645 0201 2F030000 		.4byte	.LASF42
 646 0205 05       		.byte	0x5
 647 0206 0D       		.byte	0xd
 648 0207 27020000 		.4byte	0x227
 649 020b 00       		.byte	0
 650 020c 0E       		.uleb128 0xe
 651 020d 92010000 		.4byte	.LASF43
 652 0211 05       		.byte	0x5
 653 0212 0E       		.byte	0xe
 654 0213 AE000000 		.4byte	0xae
 655 0217 0010     		.2byte	0x1000
 656 0219 0E       		.uleb128 0xe
 657 021a 18000000 		.4byte	.LASF44
 658 021e 05       		.byte	0x5
 659 021f 0F       		.byte	0xf
 660 0220 AE000000 		.4byte	0xae
 661 0224 0110     		.2byte	0x1001
 662 0226 00       		.byte	0
 663 0227 0A       		.uleb128 0xa
 664 0228 AE000000 		.4byte	0xae
 665 022c 38020000 		.4byte	0x238
 666 0230 0F       		.uleb128 0xf
 667 0231 9E000000 		.4byte	0x9e
 668 0235 FF0F     		.2byte	0xfff
 669 0237 00       		.byte	0
 670 0238 04       		.uleb128 0x4
 671 0239 BB020000 		.4byte	.LASF45
 672 023d 06       		.byte	0x6
 673 023e 62       		.byte	0x62
 674 023f 7E000000 		.4byte	0x7e
 675 0243 04       		.uleb128 0x4
 676 0244 23030000 		.4byte	.LASF46
 677 0248 06       		.byte	0x6
 678 0249 63       		.byte	0x63
 679 024a 90000000 		.4byte	0x90
 680 024e 04       		.uleb128 0x4
 681 024f A5010000 		.4byte	.LASF47
 682 0253 06       		.byte	0x6
 683 0254 69       		.byte	0x69
 684 0255 CF000000 		.4byte	0xcf
 685 0259 04       		.uleb128 0x4
 686 025a 90020000 		.4byte	.LASF48
 687 025e 07       		.byte	0x7
 688 025f 67       		.byte	0x67
 689 0260 A5000000 		.4byte	0xa5
 690 0264 04       		.uleb128 0x4
 691 0265 E1010000 		.4byte	.LASF49
 692 0269 08       		.byte	0x8
 693 026a 58       		.byte	0x58
 694 026b A5000000 		.4byte	0xa5
 695 026f 10       		.uleb128 0x10
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 18


 696 0270 DE030000 		.4byte	.LASF71
 697 0274 01       		.byte	0x1
 698 0275 82       		.byte	0x82
 699 0276 00000000 		.4byte	.LFB68
 700 027a 74000000 		.4byte	.LFE68-.LFB68
 701 027e 01       		.uleb128 0x1
 702 027f 9C       		.byte	0x9c
 703 0280 A4020000 		.4byte	0x2a4
 704 0284 11       		.uleb128 0x11
 705 0285 0D000000 		.4byte	.LASF50
 706 0289 01       		.byte	0x1
 707 028a 82       		.byte	0x82
 708 028b 43020000 		.4byte	0x243
 709 028f 02       		.uleb128 0x2
 710 0290 91       		.byte	0x91
 711 0291 74       		.sleb128 -12
 712 0292 12       		.uleb128 0x12
 713 0293 00000000 		.4byte	.LASF52
 714 0297 01       		.byte	0x1
 715 0298 84       		.byte	0x84
 716 0299 64020000 		.4byte	0x264
 717 029d 05       		.uleb128 0x5
 718 029e 03       		.byte	0x3
 719 029f 08000000 		.4byte	xPolledQueue.7540
 720 02a3 00       		.byte	0
 721 02a4 13       		.uleb128 0x13
 722 02a5 6A030000 		.4byte	.LASF56
 723 02a9 01       		.byte	0x1
 724 02aa 9A       		.byte	0x9a
 725 02ab 00000000 		.4byte	.LFB69
 726 02af 6C000000 		.4byte	.LFE69-.LFB69
 727 02b3 01       		.uleb128 0x1
 728 02b4 9C       		.byte	0x9c
 729 02b5 F2020000 		.4byte	0x2f2
 730 02b9 11       		.uleb128 0x11
 731 02ba C6020000 		.4byte	.LASF51
 732 02be 01       		.byte	0x1
 733 02bf 9A       		.byte	0x9a
 734 02c0 A5000000 		.4byte	0xa5
 735 02c4 02       		.uleb128 0x2
 736 02c5 91       		.byte	0x91
 737 02c6 64       		.sleb128 -28
 738 02c7 12       		.uleb128 0x12
 739 02c8 68000000 		.4byte	.LASF53
 740 02cc 01       		.byte	0x1
 741 02cd 9C       		.byte	0x9c
 742 02ce B9000000 		.4byte	0xb9
 743 02d2 02       		.uleb128 0x2
 744 02d3 91       		.byte	0x91
 745 02d4 6E       		.sleb128 -18
 746 02d5 12       		.uleb128 0x12
 747 02d6 61000000 		.4byte	.LASF54
 748 02da 01       		.byte	0x1
 749 02db 9D       		.byte	0x9d
 750 02dc 38020000 		.4byte	0x238
 751 02e0 02       		.uleb128 0x2
 752 02e1 91       		.byte	0x91
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 19


 753 02e2 74       		.sleb128 -12
 754 02e3 12       		.uleb128 0x12
 755 02e4 AA030000 		.4byte	.LASF55
 756 02e8 01       		.byte	0x1
 757 02e9 9D       		.byte	0x9d
 758 02ea 38020000 		.4byte	0x238
 759 02ee 02       		.uleb128 0x2
 760 02ef 91       		.byte	0x91
 761 02f0 70       		.sleb128 -16
 762 02f1 00       		.byte	0
 763 02f2 13       		.uleb128 0x13
 764 02f3 69010000 		.4byte	.LASF57
 765 02f7 01       		.byte	0x1
 766 02f8 C1       		.byte	0xc1
 767 02f9 00000000 		.4byte	.LFB70
 768 02fd 74000000 		.4byte	.LFE70-.LFB70
 769 0301 01       		.uleb128 0x1
 770 0302 9C       		.byte	0x9c
 771 0303 40030000 		.4byte	0x340
 772 0307 11       		.uleb128 0x11
 773 0308 C6020000 		.4byte	.LASF51
 774 030c 01       		.byte	0x1
 775 030d C1       		.byte	0xc1
 776 030e A5000000 		.4byte	0xa5
 777 0312 02       		.uleb128 0x2
 778 0313 91       		.byte	0x91
 779 0314 64       		.sleb128 -28
 780 0315 12       		.uleb128 0x12
 781 0316 4B000000 		.4byte	.LASF58
 782 031a 01       		.byte	0x1
 783 031b C3       		.byte	0xc3
 784 031c B9000000 		.4byte	0xb9
 785 0320 02       		.uleb128 0x2
 786 0321 91       		.byte	0x91
 787 0322 6E       		.sleb128 -18
 788 0323 12       		.uleb128 0x12
 789 0324 2C010000 		.4byte	.LASF59
 790 0328 01       		.byte	0x1
 791 0329 C3       		.byte	0xc3
 792 032a B9000000 		.4byte	0xb9
 793 032e 02       		.uleb128 0x2
 794 032f 91       		.byte	0x91
 795 0330 76       		.sleb128 -10
 796 0331 12       		.uleb128 0x12
 797 0332 61000000 		.4byte	.LASF54
 798 0336 01       		.byte	0x1
 799 0337 C4       		.byte	0xc4
 800 0338 38020000 		.4byte	0x238
 801 033c 02       		.uleb128 0x2
 802 033d 91       		.byte	0x91
 803 033e 70       		.sleb128 -16
 804 033f 00       		.byte	0
 805 0340 14       		.uleb128 0x14
 806 0341 E6020000 		.4byte	.LASF72
 807 0345 01       		.byte	0x1
 808 0346 F0       		.byte	0xf0
 809 0347 38020000 		.4byte	0x238
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 20


 810 034b 00000000 		.4byte	.LFB71
 811 034f 40000000 		.4byte	.LFE71-.LFB71
 812 0353 01       		.uleb128 0x1
 813 0354 9C       		.byte	0x9c
 814 0355 68030000 		.4byte	0x368
 815 0359 12       		.uleb128 0x12
 816 035a B0030000 		.4byte	.LASF60
 817 035e 01       		.byte	0x1
 818 035f F2       		.byte	0xf2
 819 0360 38020000 		.4byte	0x238
 820 0364 02       		.uleb128 0x2
 821 0365 91       		.byte	0x91
 822 0366 74       		.sleb128 -12
 823 0367 00       		.byte	0
 824 0368 12       		.uleb128 0x12
 825 0369 1E000000 		.4byte	.LASF61
 826 036d 01       		.byte	0x1
 827 036e 7E       		.byte	0x7e
 828 036f 79030000 		.4byte	0x379
 829 0373 05       		.uleb128 0x5
 830 0374 03       		.byte	0x3
 831 0375 00000000 		.4byte	xPollingConsumerCount
 832 0379 15       		.uleb128 0x15
 833 037a 38020000 		.4byte	0x238
 834 037e 12       		.uleb128 0x12
 835 037f EF010000 		.4byte	.LASF62
 836 0383 01       		.byte	0x1
 837 0384 7E       		.byte	0x7e
 838 0385 79030000 		.4byte	0x379
 839 0389 05       		.uleb128 0x5
 840 038a 03       		.byte	0x3
 841 038b 04000000 		.4byte	xPollingProducerCount
 842 038f 16       		.uleb128 0x16
 843 0390 D1030000 		.4byte	.LASF63
 844 0394 09       		.byte	0x9
 845 0395 9606     		.2byte	0x696
 846 0397 9B030000 		.4byte	0x39b
 847 039b 15       		.uleb128 0x15
 848 039c C4000000 		.4byte	0xc4
 849 03a0 0A       		.uleb128 0xa
 850 03a1 AE000000 		.4byte	0xae
 851 03a5 B0030000 		.4byte	0x3b0
 852 03a9 0B       		.uleb128 0xb
 853 03aa 9E000000 		.4byte	0x9e
 854 03ae 0C       		.byte	0xc
 855 03af 00       		.byte	0
 856 03b0 17       		.uleb128 0x17
 857 03b1 B9010000 		.4byte	.LASF64
 858 03b5 04       		.byte	0x4
 859 03b6 12       		.byte	0x12
 860 03b7 A0030000 		.4byte	0x3a0
 861 03bb 05       		.uleb128 0x5
 862 03bc 03       		.byte	0x3
 863 03bd 00000000 		.4byte	sniffIDFilter
 864 03c1 17       		.uleb128 0x17
 865 03c2 34030000 		.4byte	.LASF65
 866 03c6 05       		.byte	0x5
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 21


 867 03c7 10       		.byte	0x10
 868 03c8 F3010000 		.4byte	0x1f3
 869 03cc 05       		.uleb128 0x5
 870 03cd 03       		.byte	0x3
 871 03ce 00000000 		.4byte	buffer
 872 03d2 0A       		.uleb128 0xa
 873 03d3 E8010000 		.4byte	0x1e8
 874 03d7 E2030000 		.4byte	0x3e2
 875 03db 0B       		.uleb128 0xb
 876 03dc 9E000000 		.4byte	0x9e
 877 03e0 05       		.byte	0x5
 878 03e1 00       		.byte	0
 879 03e2 17       		.uleb128 0x17
 880 03e3 7F030000 		.4byte	.LASF66
 881 03e7 0A       		.byte	0xa
 882 03e8 0D       		.byte	0xd
 883 03e9 D2030000 		.4byte	0x3d2
 884 03ed 05       		.uleb128 0x5
 885 03ee 03       		.byte	0x3
 886 03ef 00000000 		.4byte	objectList
 887 03f3 00       		.byte	0
 888              		.section	.debug_abbrev,"",%progbits
 889              	.Ldebug_abbrev0:
 890 0000 01       		.uleb128 0x1
 891 0001 11       		.uleb128 0x11
 892 0002 01       		.byte	0x1
 893 0003 25       		.uleb128 0x25
 894 0004 0E       		.uleb128 0xe
 895 0005 13       		.uleb128 0x13
 896 0006 0B       		.uleb128 0xb
 897 0007 03       		.uleb128 0x3
 898 0008 0E       		.uleb128 0xe
 899 0009 1B       		.uleb128 0x1b
 900 000a 0E       		.uleb128 0xe
 901 000b 55       		.uleb128 0x55
 902 000c 17       		.uleb128 0x17
 903 000d 11       		.uleb128 0x11
 904 000e 01       		.uleb128 0x1
 905 000f 10       		.uleb128 0x10
 906 0010 17       		.uleb128 0x17
 907 0011 00       		.byte	0
 908 0012 00       		.byte	0
 909 0013 02       		.uleb128 0x2
 910 0014 24       		.uleb128 0x24
 911 0015 00       		.byte	0
 912 0016 0B       		.uleb128 0xb
 913 0017 0B       		.uleb128 0xb
 914 0018 3E       		.uleb128 0x3e
 915 0019 0B       		.uleb128 0xb
 916 001a 03       		.uleb128 0x3
 917 001b 0E       		.uleb128 0xe
 918 001c 00       		.byte	0
 919 001d 00       		.byte	0
 920 001e 03       		.uleb128 0x3
 921 001f 24       		.uleb128 0x24
 922 0020 00       		.byte	0
 923 0021 0B       		.uleb128 0xb
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 22


 924 0022 0B       		.uleb128 0xb
 925 0023 3E       		.uleb128 0x3e
 926 0024 0B       		.uleb128 0xb
 927 0025 03       		.uleb128 0x3
 928 0026 08       		.uleb128 0x8
 929 0027 00       		.byte	0
 930 0028 00       		.byte	0
 931 0029 04       		.uleb128 0x4
 932 002a 16       		.uleb128 0x16
 933 002b 00       		.byte	0
 934 002c 03       		.uleb128 0x3
 935 002d 0E       		.uleb128 0xe
 936 002e 3A       		.uleb128 0x3a
 937 002f 0B       		.uleb128 0xb
 938 0030 3B       		.uleb128 0x3b
 939 0031 0B       		.uleb128 0xb
 940 0032 49       		.uleb128 0x49
 941 0033 13       		.uleb128 0x13
 942 0034 00       		.byte	0
 943 0035 00       		.byte	0
 944 0036 05       		.uleb128 0x5
 945 0037 0F       		.uleb128 0xf
 946 0038 00       		.byte	0
 947 0039 0B       		.uleb128 0xb
 948 003a 0B       		.uleb128 0xb
 949 003b 00       		.byte	0
 950 003c 00       		.byte	0
 951 003d 06       		.uleb128 0x6
 952 003e 04       		.uleb128 0x4
 953 003f 01       		.byte	0x1
 954 0040 0B       		.uleb128 0xb
 955 0041 0B       		.uleb128 0xb
 956 0042 49       		.uleb128 0x49
 957 0043 13       		.uleb128 0x13
 958 0044 3A       		.uleb128 0x3a
 959 0045 0B       		.uleb128 0xb
 960 0046 3B       		.uleb128 0x3b
 961 0047 0B       		.uleb128 0xb
 962 0048 01       		.uleb128 0x1
 963 0049 13       		.uleb128 0x13
 964 004a 00       		.byte	0
 965 004b 00       		.byte	0
 966 004c 07       		.uleb128 0x7
 967 004d 28       		.uleb128 0x28
 968 004e 00       		.byte	0
 969 004f 03       		.uleb128 0x3
 970 0050 0E       		.uleb128 0xe
 971 0051 1C       		.uleb128 0x1c
 972 0052 0B       		.uleb128 0xb
 973 0053 00       		.byte	0
 974 0054 00       		.byte	0
 975 0055 08       		.uleb128 0x8
 976 0056 13       		.uleb128 0x13
 977 0057 01       		.byte	0x1
 978 0058 0B       		.uleb128 0xb
 979 0059 0B       		.uleb128 0xb
 980 005a 3A       		.uleb128 0x3a
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 23


 981 005b 0B       		.uleb128 0xb
 982 005c 3B       		.uleb128 0x3b
 983 005d 0B       		.uleb128 0xb
 984 005e 01       		.uleb128 0x1
 985 005f 13       		.uleb128 0x13
 986 0060 00       		.byte	0
 987 0061 00       		.byte	0
 988 0062 09       		.uleb128 0x9
 989 0063 0D       		.uleb128 0xd
 990 0064 00       		.byte	0
 991 0065 03       		.uleb128 0x3
 992 0066 0E       		.uleb128 0xe
 993 0067 3A       		.uleb128 0x3a
 994 0068 0B       		.uleb128 0xb
 995 0069 3B       		.uleb128 0x3b
 996 006a 0B       		.uleb128 0xb
 997 006b 49       		.uleb128 0x49
 998 006c 13       		.uleb128 0x13
 999 006d 38       		.uleb128 0x38
 1000 006e 0B       		.uleb128 0xb
 1001 006f 00       		.byte	0
 1002 0070 00       		.byte	0
 1003 0071 0A       		.uleb128 0xa
 1004 0072 01       		.uleb128 0x1
 1005 0073 01       		.byte	0x1
 1006 0074 49       		.uleb128 0x49
 1007 0075 13       		.uleb128 0x13
 1008 0076 01       		.uleb128 0x1
 1009 0077 13       		.uleb128 0x13
 1010 0078 00       		.byte	0
 1011 0079 00       		.byte	0
 1012 007a 0B       		.uleb128 0xb
 1013 007b 21       		.uleb128 0x21
 1014 007c 00       		.byte	0
 1015 007d 49       		.uleb128 0x49
 1016 007e 13       		.uleb128 0x13
 1017 007f 2F       		.uleb128 0x2f
 1018 0080 0B       		.uleb128 0xb
 1019 0081 00       		.byte	0
 1020 0082 00       		.byte	0
 1021 0083 0C       		.uleb128 0xc
 1022 0084 13       		.uleb128 0x13
 1023 0085 01       		.byte	0x1
 1024 0086 0B       		.uleb128 0xb
 1025 0087 05       		.uleb128 0x5
 1026 0088 3A       		.uleb128 0x3a
 1027 0089 0B       		.uleb128 0xb
 1028 008a 3B       		.uleb128 0x3b
 1029 008b 0B       		.uleb128 0xb
 1030 008c 01       		.uleb128 0x1
 1031 008d 13       		.uleb128 0x13
 1032 008e 00       		.byte	0
 1033 008f 00       		.byte	0
 1034 0090 0D       		.uleb128 0xd
 1035 0091 13       		.uleb128 0x13
 1036 0092 01       		.byte	0x1
 1037 0093 03       		.uleb128 0x3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 24


 1038 0094 0E       		.uleb128 0xe
 1039 0095 0B       		.uleb128 0xb
 1040 0096 05       		.uleb128 0x5
 1041 0097 3A       		.uleb128 0x3a
 1042 0098 0B       		.uleb128 0xb
 1043 0099 3B       		.uleb128 0x3b
 1044 009a 0B       		.uleb128 0xb
 1045 009b 01       		.uleb128 0x1
 1046 009c 13       		.uleb128 0x13
 1047 009d 00       		.byte	0
 1048 009e 00       		.byte	0
 1049 009f 0E       		.uleb128 0xe
 1050 00a0 0D       		.uleb128 0xd
 1051 00a1 00       		.byte	0
 1052 00a2 03       		.uleb128 0x3
 1053 00a3 0E       		.uleb128 0xe
 1054 00a4 3A       		.uleb128 0x3a
 1055 00a5 0B       		.uleb128 0xb
 1056 00a6 3B       		.uleb128 0x3b
 1057 00a7 0B       		.uleb128 0xb
 1058 00a8 49       		.uleb128 0x49
 1059 00a9 13       		.uleb128 0x13
 1060 00aa 38       		.uleb128 0x38
 1061 00ab 05       		.uleb128 0x5
 1062 00ac 00       		.byte	0
 1063 00ad 00       		.byte	0
 1064 00ae 0F       		.uleb128 0xf
 1065 00af 21       		.uleb128 0x21
 1066 00b0 00       		.byte	0
 1067 00b1 49       		.uleb128 0x49
 1068 00b2 13       		.uleb128 0x13
 1069 00b3 2F       		.uleb128 0x2f
 1070 00b4 05       		.uleb128 0x5
 1071 00b5 00       		.byte	0
 1072 00b6 00       		.byte	0
 1073 00b7 10       		.uleb128 0x10
 1074 00b8 2E       		.uleb128 0x2e
 1075 00b9 01       		.byte	0x1
 1076 00ba 3F       		.uleb128 0x3f
 1077 00bb 19       		.uleb128 0x19
 1078 00bc 03       		.uleb128 0x3
 1079 00bd 0E       		.uleb128 0xe
 1080 00be 3A       		.uleb128 0x3a
 1081 00bf 0B       		.uleb128 0xb
 1082 00c0 3B       		.uleb128 0x3b
 1083 00c1 0B       		.uleb128 0xb
 1084 00c2 27       		.uleb128 0x27
 1085 00c3 19       		.uleb128 0x19
 1086 00c4 11       		.uleb128 0x11
 1087 00c5 01       		.uleb128 0x1
 1088 00c6 12       		.uleb128 0x12
 1089 00c7 06       		.uleb128 0x6
 1090 00c8 40       		.uleb128 0x40
 1091 00c9 18       		.uleb128 0x18
 1092 00ca 9642     		.uleb128 0x2116
 1093 00cc 19       		.uleb128 0x19
 1094 00cd 01       		.uleb128 0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 25


 1095 00ce 13       		.uleb128 0x13
 1096 00cf 00       		.byte	0
 1097 00d0 00       		.byte	0
 1098 00d1 11       		.uleb128 0x11
 1099 00d2 05       		.uleb128 0x5
 1100 00d3 00       		.byte	0
 1101 00d4 03       		.uleb128 0x3
 1102 00d5 0E       		.uleb128 0xe
 1103 00d6 3A       		.uleb128 0x3a
 1104 00d7 0B       		.uleb128 0xb
 1105 00d8 3B       		.uleb128 0x3b
 1106 00d9 0B       		.uleb128 0xb
 1107 00da 49       		.uleb128 0x49
 1108 00db 13       		.uleb128 0x13
 1109 00dc 02       		.uleb128 0x2
 1110 00dd 18       		.uleb128 0x18
 1111 00de 00       		.byte	0
 1112 00df 00       		.byte	0
 1113 00e0 12       		.uleb128 0x12
 1114 00e1 34       		.uleb128 0x34
 1115 00e2 00       		.byte	0
 1116 00e3 03       		.uleb128 0x3
 1117 00e4 0E       		.uleb128 0xe
 1118 00e5 3A       		.uleb128 0x3a
 1119 00e6 0B       		.uleb128 0xb
 1120 00e7 3B       		.uleb128 0x3b
 1121 00e8 0B       		.uleb128 0xb
 1122 00e9 49       		.uleb128 0x49
 1123 00ea 13       		.uleb128 0x13
 1124 00eb 02       		.uleb128 0x2
 1125 00ec 18       		.uleb128 0x18
 1126 00ed 00       		.byte	0
 1127 00ee 00       		.byte	0
 1128 00ef 13       		.uleb128 0x13
 1129 00f0 2E       		.uleb128 0x2e
 1130 00f1 01       		.byte	0x1
 1131 00f2 03       		.uleb128 0x3
 1132 00f3 0E       		.uleb128 0xe
 1133 00f4 3A       		.uleb128 0x3a
 1134 00f5 0B       		.uleb128 0xb
 1135 00f6 3B       		.uleb128 0x3b
 1136 00f7 0B       		.uleb128 0xb
 1137 00f8 27       		.uleb128 0x27
 1138 00f9 19       		.uleb128 0x19
 1139 00fa 11       		.uleb128 0x11
 1140 00fb 01       		.uleb128 0x1
 1141 00fc 12       		.uleb128 0x12
 1142 00fd 06       		.uleb128 0x6
 1143 00fe 40       		.uleb128 0x40
 1144 00ff 18       		.uleb128 0x18
 1145 0100 9642     		.uleb128 0x2116
 1146 0102 19       		.uleb128 0x19
 1147 0103 01       		.uleb128 0x1
 1148 0104 13       		.uleb128 0x13
 1149 0105 00       		.byte	0
 1150 0106 00       		.byte	0
 1151 0107 14       		.uleb128 0x14
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 26


 1152 0108 2E       		.uleb128 0x2e
 1153 0109 01       		.byte	0x1
 1154 010a 3F       		.uleb128 0x3f
 1155 010b 19       		.uleb128 0x19
 1156 010c 03       		.uleb128 0x3
 1157 010d 0E       		.uleb128 0xe
 1158 010e 3A       		.uleb128 0x3a
 1159 010f 0B       		.uleb128 0xb
 1160 0110 3B       		.uleb128 0x3b
 1161 0111 0B       		.uleb128 0xb
 1162 0112 27       		.uleb128 0x27
 1163 0113 19       		.uleb128 0x19
 1164 0114 49       		.uleb128 0x49
 1165 0115 13       		.uleb128 0x13
 1166 0116 11       		.uleb128 0x11
 1167 0117 01       		.uleb128 0x1
 1168 0118 12       		.uleb128 0x12
 1169 0119 06       		.uleb128 0x6
 1170 011a 40       		.uleb128 0x40
 1171 011b 18       		.uleb128 0x18
 1172 011c 9742     		.uleb128 0x2117
 1173 011e 19       		.uleb128 0x19
 1174 011f 01       		.uleb128 0x1
 1175 0120 13       		.uleb128 0x13
 1176 0121 00       		.byte	0
 1177 0122 00       		.byte	0
 1178 0123 15       		.uleb128 0x15
 1179 0124 35       		.uleb128 0x35
 1180 0125 00       		.byte	0
 1181 0126 49       		.uleb128 0x49
 1182 0127 13       		.uleb128 0x13
 1183 0128 00       		.byte	0
 1184 0129 00       		.byte	0
 1185 012a 16       		.uleb128 0x16
 1186 012b 34       		.uleb128 0x34
 1187 012c 00       		.byte	0
 1188 012d 03       		.uleb128 0x3
 1189 012e 0E       		.uleb128 0xe
 1190 012f 3A       		.uleb128 0x3a
 1191 0130 0B       		.uleb128 0xb
 1192 0131 3B       		.uleb128 0x3b
 1193 0132 05       		.uleb128 0x5
 1194 0133 49       		.uleb128 0x49
 1195 0134 13       		.uleb128 0x13
 1196 0135 3F       		.uleb128 0x3f
 1197 0136 19       		.uleb128 0x19
 1198 0137 3C       		.uleb128 0x3c
 1199 0138 19       		.uleb128 0x19
 1200 0139 00       		.byte	0
 1201 013a 00       		.byte	0
 1202 013b 17       		.uleb128 0x17
 1203 013c 34       		.uleb128 0x34
 1204 013d 00       		.byte	0
 1205 013e 03       		.uleb128 0x3
 1206 013f 0E       		.uleb128 0xe
 1207 0140 3A       		.uleb128 0x3a
 1208 0141 0B       		.uleb128 0xb
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 27


 1209 0142 3B       		.uleb128 0x3b
 1210 0143 0B       		.uleb128 0xb
 1211 0144 49       		.uleb128 0x49
 1212 0145 13       		.uleb128 0x13
 1213 0146 3F       		.uleb128 0x3f
 1214 0147 19       		.uleb128 0x19
 1215 0148 02       		.uleb128 0x2
 1216 0149 18       		.uleb128 0x18
 1217 014a 00       		.byte	0
 1218 014b 00       		.byte	0
 1219 014c 00       		.byte	0
 1220              		.section	.debug_aranges,"",%progbits
 1221 0000 34000000 		.4byte	0x34
 1222 0004 0200     		.2byte	0x2
 1223 0006 00000000 		.4byte	.Ldebug_info0
 1224 000a 04       		.byte	0x4
 1225 000b 00       		.byte	0
 1226 000c 0000     		.2byte	0
 1227 000e 0000     		.2byte	0
 1228 0010 00000000 		.4byte	.LFB68
 1229 0014 74000000 		.4byte	.LFE68-.LFB68
 1230 0018 00000000 		.4byte	.LFB69
 1231 001c 6C000000 		.4byte	.LFE69-.LFB69
 1232 0020 00000000 		.4byte	.LFB70
 1233 0024 74000000 		.4byte	.LFE70-.LFB70
 1234 0028 00000000 		.4byte	.LFB71
 1235 002c 40000000 		.4byte	.LFE71-.LFB71
 1236 0030 00000000 		.4byte	0
 1237 0034 00000000 		.4byte	0
 1238              		.section	.debug_ranges,"",%progbits
 1239              	.Ldebug_ranges0:
 1240 0000 00000000 		.4byte	.LFB68
 1241 0004 74000000 		.4byte	.LFE68
 1242 0008 00000000 		.4byte	.LFB69
 1243 000c 6C000000 		.4byte	.LFE69
 1244 0010 00000000 		.4byte	.LFB70
 1245 0014 74000000 		.4byte	.LFE70
 1246 0018 00000000 		.4byte	.LFB71
 1247 001c 40000000 		.4byte	.LFE71
 1248 0020 00000000 		.4byte	0
 1249 0024 00000000 		.4byte	0
 1250              		.section	.debug_line,"",%progbits
 1251              	.Ldebug_line0:
 1252 0000 6B020000 		.section	.debug_str,"MS",%progbits,1
 1252      0200DF01 
 1252      00000201 
 1252      FB0E0D00 
 1252      01010101 
 1253              	.LASF52:
 1254 0000 78506F6C 		.ascii	"xPolledQueue\000"
 1254      6C656451 
 1254      75657565 
 1254      00
 1255              	.LASF50:
 1256 000d 75785072 		.ascii	"uxPriority\000"
 1256      696F7269 
 1256      747900
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 28


 1257              	.LASF44:
 1258 0018 77726974 		.ascii	"write\000"
 1258      6500
 1259              	.LASF61:
 1260 001e 78506F6C 		.ascii	"xPollingConsumerCount\000"
 1260      6C696E67 
 1260      436F6E73 
 1260      756D6572 
 1260      436F756E 
 1261              	.LASF35:
 1262 0034 6F626A65 		.ascii	"objectNumber\000"
 1262      63744E75 
 1262      6D626572 
 1262      00
 1263              	.LASF5:
 1264 0041 73686F72 		.ascii	"short int\000"
 1264      7420696E 
 1264      7400
 1265              	.LASF58:
 1266 004b 75734461 		.ascii	"usData\000"
 1266      746100
 1267              	.LASF14:
 1268 0052 73697A65 		.ascii	"sizetype\000"
 1268      74797065 
 1268      00
 1269              	.LASF23:
 1270 005b 4D555445 		.ascii	"MUTEX\000"
 1270      5800
 1271              	.LASF54:
 1272 0061 78457272 		.ascii	"xError\000"
 1272      6F7200
 1273              	.LASF53:
 1274 0068 75735661 		.ascii	"usValue\000"
 1274      6C756500 
 1275              	.LASF32:
 1276 0070 6F626A65 		.ascii	"objectType\000"
 1276      63745479 
 1276      706500
 1277              	.LASF67:
 1278 007b 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1278      43313120 
 1278      352E342E 
 1278      31203230 
 1278      31363036 
 1279 00ae 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1279      20726576 
 1279      6973696F 
 1279      6E203233 
 1279      37373135 
 1280 00e1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1280      66756E63 
 1280      74696F6E 
 1280      2D736563 
 1280      74696F6E 
 1281              	.LASF11:
 1282 0109 5F5F7569 		.ascii	"__uint32_t\000"
 1282      6E743332 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 29


 1282      5F7400
 1283              	.LASF39:
 1284 0114 6F626A65 		.ascii	"objectHeader\000"
 1284      63744865 
 1284      61646572 
 1284      00
 1285              	.LASF7:
 1286 0121 5F5F7569 		.ascii	"__uint16_t\000"
 1286      6E743136 
 1286      5F7400
 1287              	.LASF59:
 1288 012c 75734578 		.ascii	"usExpectedValue\000"
 1288      70656374 
 1288      65645661 
 1288      6C756500 
 1289              	.LASF16:
 1290 013c 75696E74 		.ascii	"uint8_t\000"
 1290      385F7400 
 1291              	.LASF40:
 1292 0144 6F626A65 		.ascii	"objectArray\000"
 1292      63744172 
 1292      72617900 
 1293              	.LASF36:
 1294 0150 6C656E4F 		.ascii	"lenObjectName\000"
 1294      626A6563 
 1294      744E616D 
 1294      6500
 1295              	.LASF29:
 1296 015e 4F626A65 		.ascii	"ObjectType\000"
 1296      63745479 
 1296      706500
 1297              	.LASF57:
 1298 0169 76506F6C 		.ascii	"vPolledQueueConsumer\000"
 1298      6C656451 
 1298      75657565 
 1298      436F6E73 
 1298      756D6572 
 1299              	.LASF33:
 1300 017e 6C656E67 		.ascii	"length\000"
 1300      746800
 1301              	.LASF20:
 1302 0185 666C6F61 		.ascii	"float\000"
 1302      7400
 1303              	.LASF38:
 1304 018b 4F626A65 		.ascii	"Object\000"
 1304      637400
 1305              	.LASF43:
 1306 0192 72656164 		.ascii	"read\000"
 1306      00
 1307              	.LASF1:
 1308 0197 6C6F6E67 		.ascii	"long long int\000"
 1308      206C6F6E 
 1308      6720696E 
 1308      7400
 1309              	.LASF47:
 1310 01a5 5469636B 		.ascii	"TickType_t\000"
 1310      54797065 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 30


 1310      5F7400
 1311              	.LASF10:
 1312 01b0 6C6F6E67 		.ascii	"long int\000"
 1312      20696E74 
 1312      00
 1313              	.LASF64:
 1314 01b9 736E6966 		.ascii	"sniffIDFilter\000"
 1314      66494446 
 1314      696C7465 
 1314      7200
 1315              	.LASF26:
 1316 01c7 52454355 		.ascii	"RECURSIVE_MUTEX\000"
 1316      52534956 
 1316      455F4D55 
 1316      54455800 
 1317              	.LASF6:
 1318 01d7 5F5F7569 		.ascii	"__uint8_t\000"
 1318      6E74385F 
 1318      7400
 1319              	.LASF49:
 1320 01e1 51756575 		.ascii	"QueueHandle_t\000"
 1320      6548616E 
 1320      646C655F 
 1320      7400
 1321              	.LASF62:
 1322 01ef 78506F6C 		.ascii	"xPollingProducerCount\000"
 1322      6C696E67 
 1322      50726F64 
 1322      75636572 
 1322      436F756E 
 1323              	.LASF70:
 1324 0205 42756666 		.ascii	"Buffer\000"
 1324      657200
 1325              	.LASF22:
 1326 020c 51554555 		.ascii	"QUEUE\000"
 1326      4500
 1327              	.LASF24:
 1328 0212 434F554E 		.ascii	"COUNTING_SEMAPHORE\000"
 1328      54494E47 
 1328      5F53454D 
 1328      4150484F 
 1328      524500
 1329              	.LASF37:
 1330 0225 6F626A65 		.ascii	"objectName\000"
 1330      63744E61 
 1330      6D6500
 1331              	.LASF2:
 1332 0230 6C6F6E67 		.ascii	"long double\000"
 1332      20646F75 
 1332      626C6500 
 1333              	.LASF4:
 1334 023c 756E7369 		.ascii	"unsigned char\000"
 1334      676E6564 
 1334      20636861 
 1334      7200
 1335              	.LASF68:
 1336 024a 2E2E5C43 		.ascii	"..\\Common\\Minimal\\PollQ.c\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 31


 1336      6F6D6D6F 
 1336      6E5C4D69 
 1336      6E696D61 
 1336      6C5C506F 
 1337              	.LASF3:
 1338 0264 7369676E 		.ascii	"signed char\000"
 1338      65642063 
 1338      68617200 
 1339              	.LASF13:
 1340 0270 6C6F6E67 		.ascii	"long long unsigned int\000"
 1340      206C6F6E 
 1340      6720756E 
 1340      7369676E 
 1340      65642069 
 1341              	.LASF19:
 1342 0287 75696E74 		.ascii	"uint32_t\000"
 1342      33325F74 
 1342      00
 1343              	.LASF48:
 1344 0290 5461736B 		.ascii	"TaskHandle_t\000"
 1344      48616E64 
 1344      6C655F74 
 1344      00
 1345              	.LASF0:
 1346 029d 756E7369 		.ascii	"unsigned int\000"
 1346      676E6564 
 1346      20696E74 
 1346      00
 1347              	.LASF34:
 1348 02aa 4F626A65 		.ascii	"ObjectListHeader\000"
 1348      63744C69 
 1348      73744865 
 1348      61646572 
 1348      00
 1349              	.LASF45:
 1350 02bb 42617365 		.ascii	"BaseType_t\000"
 1350      54797065 
 1350      5F7400
 1351              	.LASF51:
 1352 02c6 70765061 		.ascii	"pvParameters\000"
 1352      72616D65 
 1352      74657273 
 1352      00
 1353              	.LASF8:
 1354 02d3 73686F72 		.ascii	"short unsigned int\000"
 1354      7420756E 
 1354      7369676E 
 1354      65642069 
 1354      6E7400
 1355              	.LASF72:
 1356 02e6 78417265 		.ascii	"xArePollingQueuesStillRunning\000"
 1356      506F6C6C 
 1356      696E6751 
 1356      75657565 
 1356      73537469 
 1357              	.LASF15:
 1358 0304 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 32


 1358      00
 1359              	.LASF17:
 1360 0309 75696E74 		.ascii	"uint16_t\000"
 1360      31365F74 
 1360      00
 1361              	.LASF30:
 1362 0312 7061636B 		.ascii	"packetID\000"
 1362      65744944 
 1362      00
 1363              	.LASF18:
 1364 031b 696E7433 		.ascii	"int32_t\000"
 1364      325F7400 
 1365              	.LASF46:
 1366 0323 55426173 		.ascii	"UBaseType_t\000"
 1366      65547970 
 1366      655F7400 
 1367              	.LASF42:
 1368 032f 64617461 		.ascii	"data\000"
 1368      00
 1369              	.LASF65:
 1370 0334 62756666 		.ascii	"buffer\000"
 1370      657200
 1371              	.LASF28:
 1372 033b 4E554D42 		.ascii	"NUMBER_OF_OBJECTTYPES\000"
 1372      45525F4F 
 1372      465F4F42 
 1372      4A454354 
 1372      54595045 
 1373              	.LASF12:
 1374 0351 6C6F6E67 		.ascii	"long unsigned int\000"
 1374      20756E73 
 1374      69676E65 
 1374      6420696E 
 1374      7400
 1375              	.LASF21:
 1376 0363 646F7562 		.ascii	"double\000"
 1376      6C6500
 1377              	.LASF56:
 1378 036a 76506F6C 		.ascii	"vPolledQueueProducer\000"
 1378      6C656451 
 1378      75657565 
 1378      50726F64 
 1378      75636572 
 1379              	.LASF66:
 1380 037f 6F626A65 		.ascii	"objectList\000"
 1380      63744C69 
 1380      737400
 1381              	.LASF25:
 1382 038a 42494E41 		.ascii	"BINARY_SEMAPHORE\000"
 1382      52595F53 
 1382      454D4150 
 1382      484F5245 
 1382      00
 1383              	.LASF27:
 1384 039b 5441534B 		.ascii	"TASK\000"
 1384      00
 1385              	.LASF9:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccZHn51C.s 			page 33


 1386 03a0 5F5F696E 		.ascii	"__int32_t\000"
 1386      7433325F 
 1386      7400
 1387              	.LASF55:
 1388 03aa 784C6F6F 		.ascii	"xLoop\000"
 1388      7000
 1389              	.LASF60:
 1390 03b0 78526574 		.ascii	"xReturn\000"
 1390      75726E00 
 1391              	.LASF31:
 1392 03b8 696E666F 		.ascii	"informationID\000"
 1392      726D6174 
 1392      696F6E49 
 1392      4400
 1393              	.LASF41:
 1394 03c6 4F626A65 		.ascii	"ObjectList\000"
 1394      63744C69 
 1394      737400
 1395              	.LASF63:
 1396 03d1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1396      52784275 
 1396      66666572 
 1396      00
 1397              	.LASF71:
 1398 03de 76537461 		.ascii	"vStartPolledQueueTasks\000"
 1398      7274506F 
 1398      6C6C6564 
 1398      51756575 
 1398      65546173 
 1399              	.LASF69:
 1400 03f5 463A5C50 		.ascii	"F:\\Programme_Scripts\\PSOC Creator\\FreeRTOS\\Free"
 1400      726F6772 
 1400      616D6D65 
 1400      5F536372 
 1400      69707473 
 1401 0424 52544F53 		.ascii	"RTOS_CY8CKIT_059-master\\FreeRTOS_Demo.cydsn\000"
 1401      5F435938 
 1401      434B4954 
 1401      5F303539 
 1401      2D6D6173 
 1402              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran

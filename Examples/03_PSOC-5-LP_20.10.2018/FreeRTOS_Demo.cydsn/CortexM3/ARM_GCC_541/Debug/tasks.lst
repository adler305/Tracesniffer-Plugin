ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sniffIDFilter,13,4
  20              		.comm	buffer,4098,4
  21              		.comm	objectList,1704,4
  22              		.global	pxCurrentTCB
  23              		.bss
  24              		.align	2
  25              		.type	pxCurrentTCB, %object
  26              		.size	pxCurrentTCB, 4
  27              	pxCurrentTCB:
  28 0000 00000000 		.space	4
  29              		.align	2
  30              	pxReadyTasksLists:
  31 0004 00000000 		.space	100
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.align	2
  33              	xDelayedTaskList1:
  34 0068 00000000 		.space	20
  34      00000000 
  34      00000000 
  34      00000000 
  34      00000000 
  35              		.align	2
  36              	xDelayedTaskList2:
  37 007c 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.align	2
  39              	pxDelayedTaskList:
  40 0090 00000000 		.space	4
  41              		.align	2
  42              	pxOverflowDelayedTaskList:
  43 0094 00000000 		.space	4
  44              		.align	2
  45              	xPendingReadyList:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 2


  46 0098 00000000 		.space	20
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.align	2
  48              	xTasksWaitingTermination:
  49 00ac 00000000 		.space	20
  49      00000000 
  49      00000000 
  49      00000000 
  49      00000000 
  50              		.align	2
  51              	uxDeletedTasksWaitingCleanUp:
  52 00c0 00000000 		.space	4
  53              		.align	2
  54              	xSuspendedTaskList:
  55 00c4 00000000 		.space	20
  55      00000000 
  55      00000000 
  55      00000000 
  55      00000000 
  56              		.align	2
  57              	uxCurrentNumberOfTasks:
  58 00d8 00000000 		.space	4
  59              		.align	2
  60              	xTickCount:
  61 00dc 00000000 		.space	4
  62              		.align	2
  63              	uxTopReadyPriority:
  64 00e0 00000000 		.space	4
  65              		.align	2
  66              	xSchedulerRunning:
  67 00e4 00000000 		.space	4
  68              		.align	2
  69              	uxPendedTicks:
  70 00e8 00000000 		.space	4
  71              		.align	2
  72              	xYieldPending:
  73 00ec 00000000 		.space	4
  74              		.align	2
  75              	xNumOfOverflows:
  76 00f0 00000000 		.space	4
  77              		.align	2
  78              	uxTaskNumber:
  79 00f4 00000000 		.space	4
  80              		.align	2
  81              	xNextTaskUnblockTime:
  82 00f8 00000000 		.space	4
  83              		.align	2
  84              	xIdleTaskHandle:
  85 00fc 00000000 		.space	4
  86              		.align	2
  87              	uxSchedulerSuspended:
  88 0100 00000000 		.space	4
  89              		.section	.text.xTaskCreate,"ax",%progbits
  90              		.align	2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 3


  91              		.global	xTaskCreate
  92              		.thumb
  93              		.thumb_func
  94              		.type	xTaskCreate, %function
  95              	xTaskCreate:
  96              	.LFB68:
  97              		.file 1 "..\\Source\\tasks.c"
   1:..\Source/tasks.c **** /*
   2:..\Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Source/tasks.c ****     All rights reserved
   4:..\Source/tasks.c **** 
   5:..\Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Source/tasks.c **** 
   7:..\Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:..\Source/tasks.c **** 
   9:..\Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Source/tasks.c **** 
  13:..\Source/tasks.c ****     ***************************************************************************
  14:..\Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Source/tasks.c ****     ***************************************************************************
  19:..\Source/tasks.c **** 
  20:..\Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:..\Source/tasks.c **** 
  25:..\Source/tasks.c ****     ***************************************************************************
  26:..\Source/tasks.c ****      *                                                                       *
  27:..\Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:..\Source/tasks.c ****      *                                                                       *
  32:..\Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Source/tasks.c ****      *                                                                       *
  37:..\Source/tasks.c ****     ***************************************************************************
  38:..\Source/tasks.c **** 
  39:..\Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Source/tasks.c ****     defined configASSERT()?
  42:..\Source/tasks.c **** 
  43:..\Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:..\Source/tasks.c ****     participating in the support forum.
  46:..\Source/tasks.c **** 
  47:..\Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 4


  51:..\Source/tasks.c **** 
  52:..\Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Source/tasks.c **** 
  56:..\Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Source/tasks.c **** 
  59:..\Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Source/tasks.c **** 
  63:..\Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Source/tasks.c ****     mission critical applications that require provable dependability.
  66:..\Source/tasks.c **** 
  67:..\Source/tasks.c ****     1 tab == 4 spaces!
  68:..\Source/tasks.c **** */
  69:..\Source/tasks.c **** 
  70:..\Source/tasks.c **** /* Standard includes. */
  71:..\Source/tasks.c **** #include <stdlib.h>
  72:..\Source/tasks.c **** #include <string.h>
  73:..\Source/tasks.c **** 
  74:..\Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:..\Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:..\Source/tasks.c **** task.h is included from an application file. */
  77:..\Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:..\Source/tasks.c **** 
  79:..\Source/tasks.c **** /* FreeRTOS includes. */
  80:..\Source/tasks.c **** #include "FreeRTOS.h"
  81:..\Source/tasks.c **** #include "task.h"
  82:..\Source/tasks.c **** #include "timers.h"
  83:..\Source/tasks.c **** #include "StackMacros.h"
  84:..\Source/tasks.c **** 
  85:..\Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:..\Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:..\Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:..\Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:..\Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:..\Source/tasks.c **** 
  91:..\Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:..\Source/tasks.c **** functions but without including stdio.h here. */
  93:..\Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:..\Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:..\Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:..\Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:..\Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:..\Source/tasks.c **** 	#include <stdio.h>
  99:..\Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:..\Source/tasks.c **** 
 101:..\Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:..\Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:..\Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:..\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:..\Source/tasks.c **** #else
 106:..\Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:..\Source/tasks.c **** #endif
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 5


 108:..\Source/tasks.c **** 
 109:..\Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:..\Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:..\Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:..\Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:..\Source/tasks.c **** 
 114:..\Source/tasks.c **** /*
 115:..\Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:..\Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:..\Source/tasks.c ****  */
 118:..\Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:..\Source/tasks.c **** 
 120:..\Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:..\Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:..\Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:..\Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:..\Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:..\Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:..\Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:..\Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:..\Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:..\Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:..\Source/tasks.c **** made to free the RAM that was allocated statically.
 131:..\Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:..\Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:..\Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:..\Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:..\Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:..\Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:..\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:..\Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:..\Source/tasks.c **** 
 140:..\Source/tasks.c **** /*
 141:..\Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:..\Source/tasks.c ****  */
 143:..\Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:..\Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:..\Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:..\Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:..\Source/tasks.c **** 
 148:..\Source/tasks.c **** /*
 149:..\Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:..\Source/tasks.c ****  * global, rather than file scope.
 151:..\Source/tasks.c ****  */
 152:..\Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:..\Source/tasks.c **** 	#define static
 154:..\Source/tasks.c **** #endif
 155:..\Source/tasks.c **** 
 156:..\Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:..\Source/tasks.c **** 
 158:..\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:..\Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:..\Source/tasks.c **** 	microcontroller architecture. */
 161:..\Source/tasks.c **** 
 162:..\Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:..\Source/tasks.c **** 	state task. */
 164:..\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 6


 165:..\Source/tasks.c **** 	{																									\
 166:..\Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:..\Source/tasks.c **** 		{																								\
 168:..\Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:..\Source/tasks.c **** 		}																								\
 170:..\Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:..\Source/tasks.c **** 
 172:..\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:..\Source/tasks.c **** 
 174:..\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:..\Source/tasks.c **** 	{																									\
 176:..\Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:..\Source/tasks.c **** 																										\
 178:..\Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:..\Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:..\Source/tasks.c **** 		{																								\
 181:..\Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:..\Source/tasks.c **** 			--uxTopPriority;																			\
 183:..\Source/tasks.c **** 		}																								\
 184:..\Source/tasks.c **** 																										\
 185:..\Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:..\Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:..\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:..\Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:..\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:..\Source/tasks.c **** 
 191:..\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:..\Source/tasks.c **** 
 193:..\Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:..\Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:..\Source/tasks.c **** 	being used. */
 196:..\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:..\Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:..\Source/tasks.c **** 
 199:..\Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:..\Source/tasks.c **** 
 201:..\Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:..\Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:..\Source/tasks.c **** 	architecture being used. */
 204:..\Source/tasks.c **** 
 205:..\Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:..\Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:..\Source/tasks.c **** 
 208:..\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:..\Source/tasks.c **** 
 210:..\Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:..\Source/tasks.c **** 	{																								\
 212:..\Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:..\Source/tasks.c **** 																									\
 214:..\Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:..\Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:..\Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:..\Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:..\Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:..\Source/tasks.c **** 
 220:..\Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 7


 222:..\Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:..\Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:..\Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:..\Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:..\Source/tasks.c **** 	{																									\
 227:..\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:..\Source/tasks.c **** 		{																								\
 229:..\Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:..\Source/tasks.c **** 		}																								\
 231:..\Source/tasks.c **** 	}
 232:..\Source/tasks.c **** 
 233:..\Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:..\Source/tasks.c **** 
 235:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 236:..\Source/tasks.c **** 
 237:..\Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:..\Source/tasks.c **** count overflows. */
 239:..\Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:..\Source/tasks.c **** {																									\
 241:..\Source/tasks.c **** 	List_t *pxTemp;																					\
 242:..\Source/tasks.c **** 																									\
 243:..\Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:..\Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:..\Source/tasks.c **** 																									\
 246:..\Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:..\Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:..\Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:..\Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:..\Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:..\Source/tasks.c **** }
 252:..\Source/tasks.c **** 
 253:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 254:..\Source/tasks.c **** 
 255:..\Source/tasks.c **** /*
 256:..\Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:..\Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:..\Source/tasks.c ****  */
 259:..\Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:..\Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:..\Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:..\Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:..\Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 265:..\Source/tasks.c **** 
 266:..\Source/tasks.c **** /*
 267:..\Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:..\Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:..\Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:..\Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:..\Source/tasks.c ****  */
 272:..\Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:..\Source/tasks.c **** 
 274:..\Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:..\Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:..\Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:..\Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:..\Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 8


 279:..\Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:..\Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:..\Source/tasks.c **** to its original value when it is released. */
 282:..\Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:..\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:..\Source/tasks.c **** #else
 285:..\Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:..\Source/tasks.c **** #endif
 287:..\Source/tasks.c **** 
 288:..\Source/tasks.c **** /*
 289:..\Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:..\Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:..\Source/tasks.c ****  * (the task's run time environment, including register values)
 292:..\Source/tasks.c ****  */
 293:..\Source/tasks.c **** typedef struct tskTaskControlBlock
 294:..\Source/tasks.c **** {
 295:..\Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:..\Source/tasks.c **** 
 297:..\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:..\Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:..\Source/tasks.c **** 	#endif
 300:..\Source/tasks.c **** 
 301:..\Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:..\Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:..\Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:..\Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:..\Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:..\Source/tasks.c **** 
 307:..\Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:..\Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:..\Source/tasks.c **** 	#endif
 310:..\Source/tasks.c **** 
 311:..\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:..\Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:..\Source/tasks.c **** 	#endif
 314:..\Source/tasks.c **** 
 315:..\Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:..\Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:..\Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:..\Source/tasks.c **** 	#endif
 319:..\Source/tasks.c **** 
 320:..\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:..\Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:..\Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:..\Source/tasks.c **** 	#endif
 324:..\Source/tasks.c **** 
 325:..\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:..\Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:..\Source/tasks.c **** 	#endif
 328:..\Source/tasks.c **** 
 329:..\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:..\Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:..\Source/tasks.c **** 	#endif
 332:..\Source/tasks.c **** 
 333:..\Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:..\Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:..\Source/tasks.c **** 	#endif
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 9


 336:..\Source/tasks.c **** 
 337:..\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:..\Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:..\Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:..\Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:..\Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:..\Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:..\Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:..\Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:..\Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:..\Source/tasks.c **** 	#endif
 347:..\Source/tasks.c **** 
 348:..\Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:..\Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:..\Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:..\Source/tasks.c **** 	#endif
 352:..\Source/tasks.c **** 
 353:..\Source/tasks.c **** 	/* See the comments above the definition of
 354:..\Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:..\Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:..\Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:..\Source/tasks.c **** 	#endif
 358:..\Source/tasks.c **** 
 359:..\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:..\Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:..\Source/tasks.c **** 	#endif
 362:..\Source/tasks.c **** 
 363:..\Source/tasks.c **** } tskTCB;
 364:..\Source/tasks.c **** 
 365:..\Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:..\Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:..\Source/tasks.c **** typedef tskTCB TCB_t;
 368:..\Source/tasks.c **** 
 369:..\Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:..\Source/tasks.c **** static variables must be declared volatile. */
 371:..\Source/tasks.c **** 
 372:..\Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:..\Source/tasks.c **** 
 374:..\Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:..\Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:..\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:..\Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:..\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:..\Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:..\Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:..\Source/tasks.c **** 
 382:..\Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:..\Source/tasks.c **** 
 384:..\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:..\Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:..\Source/tasks.c **** 
 387:..\Source/tasks.c **** #endif
 388:..\Source/tasks.c **** 
 389:..\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:..\Source/tasks.c **** 
 391:..\Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 10


 393:..\Source/tasks.c **** #endif
 394:..\Source/tasks.c **** 
 395:..\Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:..\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:..\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:..\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:..\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:..\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:..\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:..\Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:..\Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:..\Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:..\Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:..\Source/tasks.c **** 
 407:..\Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:..\Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:..\Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:..\Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:..\Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:..\Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:..\Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:..\Source/tasks.c **** accessed from a critical section. */
 415:..\Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:..\Source/tasks.c **** 
 417:..\Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:..\Source/tasks.c **** 
 419:..\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:..\Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:..\Source/tasks.c **** 
 422:..\Source/tasks.c **** #endif
 423:..\Source/tasks.c **** 
 424:..\Source/tasks.c **** /*lint +e956 */
 425:..\Source/tasks.c **** 
 426:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 427:..\Source/tasks.c **** 
 428:..\Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:..\Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:..\Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:..\Source/tasks.c **** #endif
 432:..\Source/tasks.c **** 
 433:..\Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:..\Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:..\Source/tasks.c **** #endif
 436:..\Source/tasks.c **** 
 437:..\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:..\Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:..\Source/tasks.c **** #endif
 440:..\Source/tasks.c **** 
 441:..\Source/tasks.c **** /* File private functions. --------------------------------*/
 442:..\Source/tasks.c **** 
 443:..\Source/tasks.c **** /**
 444:..\Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:..\Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:..\Source/tasks.c ****  * is in any other state.
 447:..\Source/tasks.c ****  */
 448:..\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:..\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 11


 450:..\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:..\Source/tasks.c **** 
 452:..\Source/tasks.c **** /*
 453:..\Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:..\Source/tasks.c ****  * automatically upon the creation of the first task.
 455:..\Source/tasks.c ****  */
 456:..\Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:..\Source/tasks.c **** 
 458:..\Source/tasks.c **** /*
 459:..\Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:..\Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:..\Source/tasks.c ****  * creation of the first user task.
 462:..\Source/tasks.c ****  *
 463:..\Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:..\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:..\Source/tasks.c ****  *
 466:..\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:..\Source/tasks.c ****  *
 468:..\Source/tasks.c ****  */
 469:..\Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:..\Source/tasks.c **** 
 471:..\Source/tasks.c **** /*
 472:..\Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:..\Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:..\Source/tasks.c ****  *
 475:..\Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:..\Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:..\Source/tasks.c ****  */
 478:..\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:..\Source/tasks.c **** 
 480:..\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:..\Source/tasks.c **** 
 482:..\Source/tasks.c **** #endif
 483:..\Source/tasks.c **** 
 484:..\Source/tasks.c **** /*
 485:..\Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:..\Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:..\Source/tasks.c ****  * and its TCB deleted.
 488:..\Source/tasks.c ****  */
 489:..\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:..\Source/tasks.c **** 
 491:..\Source/tasks.c **** /*
 492:..\Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:..\Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:..\Source/tasks.c ****  */
 495:..\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:..\Source/tasks.c **** 
 497:..\Source/tasks.c **** /*
 498:..\Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:..\Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:..\Source/tasks.c ****  * a suspended list, etc.).
 501:..\Source/tasks.c ****  *
 502:..\Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:..\Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:..\Source/tasks.c ****  */
 505:..\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 12


 507:..\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:..\Source/tasks.c **** 
 509:..\Source/tasks.c **** #endif
 510:..\Source/tasks.c **** 
 511:..\Source/tasks.c **** /*
 512:..\Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:..\Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:..\Source/tasks.c ****  */
 515:..\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:..\Source/tasks.c **** 
 517:..\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:..\Source/tasks.c **** 
 519:..\Source/tasks.c **** #endif
 520:..\Source/tasks.c **** 
 521:..\Source/tasks.c **** /*
 522:..\Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:..\Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:..\Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:..\Source/tasks.c ****  */
 526:..\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:..\Source/tasks.c **** 
 528:..\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:..\Source/tasks.c **** 
 530:..\Source/tasks.c **** #endif
 531:..\Source/tasks.c **** 
 532:..\Source/tasks.c **** /*
 533:..\Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:..\Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:..\Source/tasks.c ****  *
 536:..\Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:..\Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:..\Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:..\Source/tasks.c ****  * set to a value other than 1.
 540:..\Source/tasks.c ****  */
 541:..\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:..\Source/tasks.c **** 
 543:..\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:..\Source/tasks.c **** 
 545:..\Source/tasks.c **** #endif
 546:..\Source/tasks.c **** 
 547:..\Source/tasks.c **** /*
 548:..\Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:..\Source/tasks.c ****  * will exit the Blocked state.
 550:..\Source/tasks.c ****  */
 551:..\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:..\Source/tasks.c **** 
 553:..\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:..\Source/tasks.c **** 
 555:..\Source/tasks.c **** 	/*
 556:..\Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:..\Source/tasks.c **** 	 * human readable tables of task information.
 558:..\Source/tasks.c **** 	 */
 559:..\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:..\Source/tasks.c **** 
 561:..\Source/tasks.c **** #endif
 562:..\Source/tasks.c **** 
 563:..\Source/tasks.c **** /*
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 13


 564:..\Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:..\Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:..\Source/tasks.c ****  */
 567:..\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:..\Source/tasks.c **** 									const char * const pcName,
 569:..\Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:..\Source/tasks.c **** 									void * const pvParameters,
 571:..\Source/tasks.c **** 									UBaseType_t uxPriority,
 572:..\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:..\Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:..\Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:..\Source/tasks.c **** 
 576:..\Source/tasks.c **** /*
 577:..\Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:..\Source/tasks.c ****  * under the control of the scheduler.
 579:..\Source/tasks.c ****  */
 580:..\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:..\Source/tasks.c **** 
 582:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 583:..\Source/tasks.c **** 
 584:..\Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:..\Source/tasks.c **** 
 586:..\Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:..\Source/tasks.c **** 									const char * const pcName,
 588:..\Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:..\Source/tasks.c **** 									void * const pvParameters,
 590:..\Source/tasks.c **** 									UBaseType_t uxPriority,
 591:..\Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:..\Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:..\Source/tasks.c **** 	{
 594:..\Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:..\Source/tasks.c **** 	TaskHandle_t xReturn;
 596:..\Source/tasks.c **** 
 597:..\Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:..\Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:..\Source/tasks.c **** 
 600:..\Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:..\Source/tasks.c **** 		{
 602:..\Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:..\Source/tasks.c **** 			function - use them. */
 604:..\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:..\Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:..\Source/tasks.c **** 
 607:..\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:..\Source/tasks.c **** 			{
 609:..\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:..\Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:..\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:..\Source/tasks.c **** 			}
 613:..\Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:..\Source/tasks.c **** 
 615:..\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:..\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:..\Source/tasks.c **** 		}
 618:..\Source/tasks.c **** 		else
 619:..\Source/tasks.c **** 		{
 620:..\Source/tasks.c **** 			xReturn = NULL;
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 14


 621:..\Source/tasks.c **** 		}
 622:..\Source/tasks.c **** 
 623:..\Source/tasks.c **** 		return xReturn;
 624:..\Source/tasks.c **** 	}
 625:..\Source/tasks.c **** 
 626:..\Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 628:..\Source/tasks.c **** 
 629:..\Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:..\Source/tasks.c **** 
 631:..\Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:..\Source/tasks.c **** 	{
 633:..\Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:..\Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:..\Source/tasks.c **** 
 636:..\Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:..\Source/tasks.c **** 
 638:..\Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:..\Source/tasks.c **** 		{
 640:..\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:..\Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:..\Source/tasks.c **** 			not static allocation is being used. */
 643:..\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:..\Source/tasks.c **** 
 645:..\Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:..\Source/tasks.c **** 			{
 647:..\Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:..\Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:..\Source/tasks.c **** 
 650:..\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:..\Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:..\Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:..\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:..\Source/tasks.c **** 
 655:..\Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:..\Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:..\Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:..\Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:..\Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:..\Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:..\Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:..\Source/tasks.c **** 
 663:..\Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:..\Source/tasks.c **** 				xReturn = pdPASS;
 665:..\Source/tasks.c **** 			}
 666:..\Source/tasks.c **** 		}
 667:..\Source/tasks.c **** 
 668:..\Source/tasks.c **** 		return xReturn;
 669:..\Source/tasks.c **** 	}
 670:..\Source/tasks.c **** 
 671:..\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 673:..\Source/tasks.c **** 
 674:..\Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:..\Source/tasks.c **** 
 676:..\Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:..\Source/tasks.c **** 							const char * const pcName,
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 15


 678:..\Source/tasks.c **** 							const uint16_t usStackDepth,
 679:..\Source/tasks.c **** 							void * const pvParameters,
 680:..\Source/tasks.c **** 							UBaseType_t uxPriority,
 681:..\Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:..\Source/tasks.c **** 	{
  98              		.loc 1 682 0
  99              		.cfi_startproc
 100              		@ args = 8, pretend = 0, frame = 32
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102 0000 80B5     		push	{r7, lr}
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 7, -8
 105              		.cfi_offset 14, -4
 106 0002 8CB0     		sub	sp, sp, #48
 107              		.cfi_def_cfa_offset 56
 108 0004 04AF     		add	r7, sp, #16
 109              		.cfi_def_cfa 7, 40
 110 0006 F860     		str	r0, [r7, #12]
 111 0008 B960     		str	r1, [r7, #8]
 112 000a 3B60     		str	r3, [r7]
 113 000c 1346     		mov	r3, r2	@ movhi
 114 000e FB80     		strh	r3, [r7, #6]	@ movhi
 115              	.LBB27:
 683:..\Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:..\Source/tasks.c **** 	BaseType_t xReturn;
 685:..\Source/tasks.c **** 
 686:..\Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:..\Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:..\Source/tasks.c **** 		the TCB then the stack. */
 689:..\Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:..\Source/tasks.c **** 		{
 691:..\Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:..\Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:..\Source/tasks.c **** 			allocation is being used. */
 694:..\Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:..\Source/tasks.c **** 
 696:..\Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:..\Source/tasks.c **** 			{
 698:..\Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:..\Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:..\Source/tasks.c **** 				be deleted later if required. */
 701:..\Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:..\Source/tasks.c **** 
 703:..\Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:..\Source/tasks.c **** 				{
 705:..\Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:..\Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:..\Source/tasks.c **** 					pxNewTCB = NULL;
 708:..\Source/tasks.c **** 				}
 709:..\Source/tasks.c **** 			}
 710:..\Source/tasks.c **** 		}
 711:..\Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:..\Source/tasks.c **** 		{
 713:..\Source/tasks.c **** 		StackType_t *pxStack;
 714:..\Source/tasks.c **** 
 715:..\Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:..\Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 16


 116              		.loc 1 716 0
 117 0010 FB88     		ldrh	r3, [r7, #6]
 118 0012 9B00     		lsls	r3, r3, #2
 119 0014 1846     		mov	r0, r3
 120 0016 FFF7FEFF 		bl	pvPortMalloc
 121 001a 7861     		str	r0, [r7, #20]
 717:..\Source/tasks.c **** 
 718:..\Source/tasks.c **** 			if( pxStack != NULL )
 122              		.loc 1 718 0
 123 001c 7B69     		ldr	r3, [r7, #20]
 124 001e 002B     		cmp	r3, #0
 125 0020 0ED0     		beq	.L2
 719:..\Source/tasks.c **** 			{
 720:..\Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:..\Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 126              		.loc 1 721 0
 127 0022 5820     		movs	r0, #88
 128 0024 FFF7FEFF 		bl	pvPortMalloc
 129 0028 F861     		str	r0, [r7, #28]
 722:..\Source/tasks.c **** 
 723:..\Source/tasks.c **** 				if( pxNewTCB != NULL )
 130              		.loc 1 723 0
 131 002a FB69     		ldr	r3, [r7, #28]
 132 002c 002B     		cmp	r3, #0
 133 002e 03D0     		beq	.L3
 724:..\Source/tasks.c **** 				{
 725:..\Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:..\Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 134              		.loc 1 726 0
 135 0030 FB69     		ldr	r3, [r7, #28]
 136 0032 7A69     		ldr	r2, [r7, #20]
 137 0034 1A63     		str	r2, [r3, #48]
 138 0036 05E0     		b	.L5
 139              	.L3:
 727:..\Source/tasks.c **** 				}
 728:..\Source/tasks.c **** 				else
 729:..\Source/tasks.c **** 				{
 730:..\Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:..\Source/tasks.c **** 					it again. */
 732:..\Source/tasks.c **** 					vPortFree( pxStack );
 140              		.loc 1 732 0
 141 0038 7869     		ldr	r0, [r7, #20]
 142 003a FFF7FEFF 		bl	vPortFree
 143 003e 01E0     		b	.L5
 144              	.L2:
 733:..\Source/tasks.c **** 				}
 734:..\Source/tasks.c **** 			}
 735:..\Source/tasks.c **** 			else
 736:..\Source/tasks.c **** 			{
 737:..\Source/tasks.c **** 				pxNewTCB = NULL;
 145              		.loc 1 737 0
 146 0040 0023     		movs	r3, #0
 147 0042 FB61     		str	r3, [r7, #28]
 148              	.L5:
 149              	.LBE27:
 738:..\Source/tasks.c **** 			}
 739:..\Source/tasks.c **** 		}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 17


 740:..\Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:..\Source/tasks.c **** 
 742:..\Source/tasks.c **** 		if( pxNewTCB != NULL )
 150              		.loc 1 742 0
 151 0044 FB69     		ldr	r3, [r7, #28]
 152 0046 002B     		cmp	r3, #0
 153 0048 13D0     		beq	.L6
 743:..\Source/tasks.c **** 		{
 744:..\Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:..\Source/tasks.c **** 			{
 746:..\Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:..\Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:..\Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:..\Source/tasks.c **** 			}
 750:..\Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:..\Source/tasks.c **** 
 752:..\Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 154              		.loc 1 752 0
 155 004a FA88     		ldrh	r2, [r7, #6]
 156 004c 0023     		movs	r3, #0
 157 004e 0393     		str	r3, [sp, #12]
 158 0050 FB69     		ldr	r3, [r7, #28]
 159 0052 0293     		str	r3, [sp, #8]
 160 0054 FB6A     		ldr	r3, [r7, #44]
 161 0056 0193     		str	r3, [sp, #4]
 162 0058 BB6A     		ldr	r3, [r7, #40]
 163 005a 0093     		str	r3, [sp]
 164 005c 3B68     		ldr	r3, [r7]
 165 005e B968     		ldr	r1, [r7, #8]
 166 0060 F868     		ldr	r0, [r7, #12]
 167 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 753:..\Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 168              		.loc 1 753 0
 169 0066 F869     		ldr	r0, [r7, #28]
 170 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 754:..\Source/tasks.c **** 			xReturn = pdPASS;
 171              		.loc 1 754 0
 172 006c 0123     		movs	r3, #1
 173 006e BB61     		str	r3, [r7, #24]
 174 0070 02E0     		b	.L7
 175              	.L6:
 755:..\Source/tasks.c **** 		}
 756:..\Source/tasks.c **** 		else
 757:..\Source/tasks.c **** 		{
 758:..\Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 176              		.loc 1 758 0
 177 0072 4FF0FF33 		mov	r3, #-1
 178 0076 BB61     		str	r3, [r7, #24]
 179              	.L7:
 759:..\Source/tasks.c **** 		}
 760:..\Source/tasks.c **** 
 761:..\Source/tasks.c **** 		return xReturn;
 180              		.loc 1 761 0
 181 0078 BB69     		ldr	r3, [r7, #24]
 762:..\Source/tasks.c **** 	}
 182              		.loc 1 762 0
 183 007a 1846     		mov	r0, r3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 18


 184 007c 2037     		adds	r7, r7, #32
 185              		.cfi_def_cfa_offset 8
 186 007e BD46     		mov	sp, r7
 187              		.cfi_def_cfa_register 13
 188              		@ sp needed
 189 0080 80BD     		pop	{r7, pc}
 190              		.cfi_endproc
 191              	.LFE68:
 192              		.size	xTaskCreate, .-xTaskCreate
 193 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 194              		.align	2
 195              		.thumb
 196              		.thumb_func
 197              		.type	prvInitialiseNewTask, %function
 198              	prvInitialiseNewTask:
 199              	.LFB69:
 763:..\Source/tasks.c **** 
 764:..\Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 766:..\Source/tasks.c **** 
 767:..\Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:..\Source/tasks.c **** 									const char * const pcName,
 769:..\Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:..\Source/tasks.c **** 									void * const pvParameters,
 771:..\Source/tasks.c **** 									UBaseType_t uxPriority,
 772:..\Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:..\Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:..\Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:..\Source/tasks.c **** {
 200              		.loc 1 775 0
 201              		.cfi_startproc
 202              		@ args = 16, pretend = 0, frame = 24
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204 0000 80B5     		push	{r7, lr}
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 7, -8
 207              		.cfi_offset 14, -4
 208 0002 86B0     		sub	sp, sp, #24
 209              		.cfi_def_cfa_offset 32
 210 0004 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
 212 0006 F860     		str	r0, [r7, #12]
 213 0008 B960     		str	r1, [r7, #8]
 214 000a 7A60     		str	r2, [r7, #4]
 215 000c 3B60     		str	r3, [r7]
 776:..\Source/tasks.c **** StackType_t *pxTopOfStack;
 777:..\Source/tasks.c **** UBaseType_t x;
 778:..\Source/tasks.c **** 
 779:..\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:..\Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:..\Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:..\Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:..\Source/tasks.c **** 		{
 784:..\Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:..\Source/tasks.c **** 		}
 786:..\Source/tasks.c **** 		else
 787:..\Source/tasks.c **** 		{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 19


 788:..\Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:..\Source/tasks.c **** 		}
 790:..\Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:..\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:..\Source/tasks.c **** 
 793:..\Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:..\Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:..\Source/tasks.c **** 	{
 796:..\Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:..\Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 216              		.loc 1 797 0
 217 000e BB6A     		ldr	r3, [r7, #40]
 218 0010 186B     		ldr	r0, [r3, #48]
 219 0012 7B68     		ldr	r3, [r7, #4]
 220 0014 9B00     		lsls	r3, r3, #2
 221 0016 1A46     		mov	r2, r3
 222 0018 A521     		movs	r1, #165
 223 001a FFF7FEFF 		bl	memset
 798:..\Source/tasks.c **** 	}
 799:..\Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:..\Source/tasks.c **** 
 801:..\Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:..\Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:..\Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:..\Source/tasks.c **** 	by the port. */
 805:..\Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:..\Source/tasks.c **** 	{
 807:..\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 224              		.loc 1 807 0
 225 001e BB6A     		ldr	r3, [r7, #40]
 226 0020 1A6B     		ldr	r2, [r3, #48]
 227 0022 7B68     		ldr	r3, [r7, #4]
 228 0024 03F18043 		add	r3, r3, #1073741824
 229 0028 013B     		subs	r3, r3, #1
 230 002a 9B00     		lsls	r3, r3, #2
 231 002c 1344     		add	r3, r3, r2
 232 002e 3B61     		str	r3, [r7, #16]
 808:..\Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 233              		.loc 1 808 0
 234 0030 3B69     		ldr	r3, [r7, #16]
 235 0032 23F00703 		bic	r3, r3, #7
 236 0036 3B61     		str	r3, [r7, #16]
 809:..\Source/tasks.c **** 
 810:..\Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:..\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:..\Source/tasks.c **** 	}
 813:..\Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:..\Source/tasks.c **** 	{
 815:..\Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:..\Source/tasks.c **** 
 817:..\Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:..\Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:..\Source/tasks.c **** 
 820:..\Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:..\Source/tasks.c **** 		performed. */
 822:..\Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:..\Source/tasks.c **** 	}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 20


 824:..\Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:..\Source/tasks.c **** 
 826:..\Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:..\Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 237              		.loc 1 827 0
 238 0038 0023     		movs	r3, #0
 239 003a 7B61     		str	r3, [r7, #20]
 240 003c 12E0     		b	.L10
 241              	.L13:
 828:..\Source/tasks.c **** 	{
 829:..\Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 242              		.loc 1 829 0
 243 003e BA68     		ldr	r2, [r7, #8]
 244 0040 7B69     		ldr	r3, [r7, #20]
 245 0042 1344     		add	r3, r3, r2
 246 0044 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 247 0046 BA6A     		ldr	r2, [r7, #40]
 248 0048 7B69     		ldr	r3, [r7, #20]
 249 004a 1344     		add	r3, r3, r2
 250 004c 3433     		adds	r3, r3, #52
 251 004e 0A46     		mov	r2, r1
 252 0050 1A70     		strb	r2, [r3]
 830:..\Source/tasks.c **** 
 831:..\Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:..\Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:..\Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:..\Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 253              		.loc 1 834 0
 254 0052 BA68     		ldr	r2, [r7, #8]
 255 0054 7B69     		ldr	r3, [r7, #20]
 256 0056 1344     		add	r3, r3, r2
 257 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 258 005a 002B     		cmp	r3, #0
 259 005c 06D0     		beq	.L16
 827:..\Source/tasks.c **** 	{
 260              		.loc 1 827 0 discriminator 2
 261 005e 7B69     		ldr	r3, [r7, #20]
 262 0060 0133     		adds	r3, r3, #1
 263 0062 7B61     		str	r3, [r7, #20]
 264              	.L10:
 827:..\Source/tasks.c **** 	{
 265              		.loc 1 827 0 is_stmt 0 discriminator 1
 266 0064 7B69     		ldr	r3, [r7, #20]
 267 0066 0B2B     		cmp	r3, #11
 268 0068 E9D9     		bls	.L13
 269 006a 00E0     		b	.L12
 270              	.L16:
 835:..\Source/tasks.c **** 		{
 836:..\Source/tasks.c **** 			break;
 271              		.loc 1 836 0 is_stmt 1
 272 006c 00BF     		nop
 273              	.L12:
 837:..\Source/tasks.c **** 		}
 838:..\Source/tasks.c **** 		else
 839:..\Source/tasks.c **** 		{
 840:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:..\Source/tasks.c **** 		}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 21


 842:..\Source/tasks.c **** 	}
 843:..\Source/tasks.c **** 
 844:..\Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:..\Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:..\Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 274              		.loc 1 846 0
 275 006e BB6A     		ldr	r3, [r7, #40]
 276 0070 0022     		movs	r2, #0
 277 0072 83F83F20 		strb	r2, [r3, #63]
 847:..\Source/tasks.c **** 
 848:..\Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:..\Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:..\Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 278              		.loc 1 850 0
 279 0076 3B6A     		ldr	r3, [r7, #32]
 280 0078 042B     		cmp	r3, #4
 281 007a 01D9     		bls	.L14
 851:..\Source/tasks.c **** 	{
 852:..\Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 282              		.loc 1 852 0
 283 007c 0423     		movs	r3, #4
 284 007e 3B62     		str	r3, [r7, #32]
 285              	.L14:
 853:..\Source/tasks.c **** 	}
 854:..\Source/tasks.c **** 	else
 855:..\Source/tasks.c **** 	{
 856:..\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:..\Source/tasks.c **** 	}
 858:..\Source/tasks.c **** 
 859:..\Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 286              		.loc 1 859 0
 287 0080 BB6A     		ldr	r3, [r7, #40]
 288 0082 3A6A     		ldr	r2, [r7, #32]
 289 0084 DA62     		str	r2, [r3, #44]
 860:..\Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:..\Source/tasks.c **** 	{
 862:..\Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 290              		.loc 1 862 0
 291 0086 BB6A     		ldr	r3, [r7, #40]
 292 0088 3A6A     		ldr	r2, [r7, #32]
 293 008a 9A64     		str	r2, [r3, #72]
 863:..\Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 294              		.loc 1 863 0
 295 008c BB6A     		ldr	r3, [r7, #40]
 296 008e 0022     		movs	r2, #0
 297 0090 DA64     		str	r2, [r3, #76]
 864:..\Source/tasks.c **** 	}
 865:..\Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:..\Source/tasks.c **** 
 867:..\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 298              		.loc 1 867 0
 299 0092 BB6A     		ldr	r3, [r7, #40]
 300 0094 0433     		adds	r3, r3, #4
 301 0096 1846     		mov	r0, r3
 302 0098 FFF7FEFF 		bl	vListInitialiseItem
 868:..\Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 303              		.loc 1 868 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 22


 304 009c BB6A     		ldr	r3, [r7, #40]
 305 009e 1833     		adds	r3, r3, #24
 306 00a0 1846     		mov	r0, r3
 307 00a2 FFF7FEFF 		bl	vListInitialiseItem
 869:..\Source/tasks.c **** 
 870:..\Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:..\Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:..\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 308              		.loc 1 872 0
 309 00a6 BB6A     		ldr	r3, [r7, #40]
 310 00a8 BA6A     		ldr	r2, [r7, #40]
 311 00aa 1A61     		str	r2, [r3, #16]
 873:..\Source/tasks.c **** 
 874:..\Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:..\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 312              		.loc 1 875 0
 313 00ac 3B6A     		ldr	r3, [r7, #32]
 314 00ae C3F10502 		rsb	r2, r3, #5
 315 00b2 BB6A     		ldr	r3, [r7, #40]
 316 00b4 9A61     		str	r2, [r3, #24]
 876:..\Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 317              		.loc 1 876 0
 318 00b6 BB6A     		ldr	r3, [r7, #40]
 319 00b8 BA6A     		ldr	r2, [r7, #40]
 320 00ba 5A62     		str	r2, [r3, #36]
 877:..\Source/tasks.c **** 
 878:..\Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:..\Source/tasks.c **** 	{
 880:..\Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:..\Source/tasks.c **** 	}
 882:..\Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:..\Source/tasks.c **** 
 884:..\Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:..\Source/tasks.c **** 	{
 886:..\Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:..\Source/tasks.c **** 	}
 888:..\Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:..\Source/tasks.c **** 
 890:..\Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:..\Source/tasks.c **** 	{
 892:..\Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:..\Source/tasks.c **** 	}
 894:..\Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:..\Source/tasks.c **** 
 896:..\Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:..\Source/tasks.c **** 	{
 898:..\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:..\Source/tasks.c **** 	}
 900:..\Source/tasks.c **** 	#else
 901:..\Source/tasks.c **** 	{
 902:..\Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:..\Source/tasks.c **** 		( void ) xRegions;
 904:..\Source/tasks.c **** 	}
 905:..\Source/tasks.c **** 	#endif
 906:..\Source/tasks.c **** 
 907:..\Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:..\Source/tasks.c **** 	{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 23


 909:..\Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:..\Source/tasks.c **** 		{
 911:..\Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:..\Source/tasks.c **** 		}
 913:..\Source/tasks.c **** 	}
 914:..\Source/tasks.c **** 	#endif
 915:..\Source/tasks.c **** 
 916:..\Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:..\Source/tasks.c **** 	{
 918:..\Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 321              		.loc 1 918 0
 322 00bc BB6A     		ldr	r3, [r7, #40]
 323 00be 0022     		movs	r2, #0
 324 00c0 1A65     		str	r2, [r3, #80]
 919:..\Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 325              		.loc 1 919 0
 326 00c2 BB6A     		ldr	r3, [r7, #40]
 327 00c4 0022     		movs	r2, #0
 328 00c6 83F85420 		strb	r2, [r3, #84]
 920:..\Source/tasks.c **** 	}
 921:..\Source/tasks.c **** 	#endif
 922:..\Source/tasks.c **** 
 923:..\Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:..\Source/tasks.c **** 	{
 925:..\Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:..\Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:..\Source/tasks.c **** 	}
 928:..\Source/tasks.c **** 	#endif
 929:..\Source/tasks.c **** 
 930:..\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:..\Source/tasks.c **** 	{
 932:..\Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:..\Source/tasks.c **** 	}
 934:..\Source/tasks.c **** 	#endif
 935:..\Source/tasks.c **** 
 936:..\Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:..\Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:..\Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:..\Source/tasks.c **** 	the	top of stack variable is updated. */
 940:..\Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:..\Source/tasks.c **** 	{
 942:..\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:..\Source/tasks.c **** 	}
 944:..\Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:..\Source/tasks.c **** 	{
 946:..\Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 329              		.loc 1 946 0
 330 00ca 3A68     		ldr	r2, [r7]
 331 00cc F968     		ldr	r1, [r7, #12]
 332 00ce 3869     		ldr	r0, [r7, #16]
 333 00d0 FFF7FEFF 		bl	pxPortInitialiseStack
 334 00d4 0246     		mov	r2, r0
 335 00d6 BB6A     		ldr	r3, [r7, #40]
 336 00d8 1A60     		str	r2, [r3]
 947:..\Source/tasks.c **** 	}
 948:..\Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 24


 950:..\Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 337              		.loc 1 950 0
 338 00da 7B6A     		ldr	r3, [r7, #36]
 339 00dc 002B     		cmp	r3, #0
 340 00de 02D0     		beq	.L17
 951:..\Source/tasks.c **** 	{
 952:..\Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:..\Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:..\Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 341              		.loc 1 954 0
 342 00e0 7B6A     		ldr	r3, [r7, #36]
 343 00e2 BA6A     		ldr	r2, [r7, #40]
 344 00e4 1A60     		str	r2, [r3]
 345              	.L17:
 955:..\Source/tasks.c **** 	}
 956:..\Source/tasks.c **** 	else
 957:..\Source/tasks.c **** 	{
 958:..\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:..\Source/tasks.c **** 	}
 960:..\Source/tasks.c **** }
 346              		.loc 1 960 0
 347 00e6 00BF     		nop
 348 00e8 1837     		adds	r7, r7, #24
 349              		.cfi_def_cfa_offset 8
 350 00ea BD46     		mov	sp, r7
 351              		.cfi_def_cfa_register 13
 352              		@ sp needed
 353 00ec 80BD     		pop	{r7, pc}
 354              		.cfi_endproc
 355              	.LFE69:
 356              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 357 00ee 00BF     		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 358              		.align	2
 359              		.thumb
 360              		.thumb_func
 361              		.type	prvAddNewTaskToReadyList, %function
 362              	prvAddNewTaskToReadyList:
 363              	.LFB70:
 961:..\Source/tasks.c **** /*-----------------------------------------------------------*/
 962:..\Source/tasks.c **** 
 963:..\Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:..\Source/tasks.c **** {
 364              		.loc 1 964 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 8
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368 0000 80B5     		push	{r7, lr}
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 7, -8
 371              		.cfi_offset 14, -4
 372 0002 82B0     		sub	sp, sp, #8
 373              		.cfi_def_cfa_offset 16
 374 0004 00AF     		add	r7, sp, #0
 375              		.cfi_def_cfa_register 7
 376 0006 7860     		str	r0, [r7, #4]
 965:..\Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:..\Source/tasks.c **** 	updated. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 25


 967:..\Source/tasks.c **** 	taskENTER_CRITICAL();
 377              		.loc 1 967 0
 378 0008 FFF7FEFF 		bl	vPortEnterCritical
 968:..\Source/tasks.c **** 	{
 969:..\Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 379              		.loc 1 969 0
 380 000c 3B4B     		ldr	r3, .L23
 381 000e 1B68     		ldr	r3, [r3]
 382 0010 0133     		adds	r3, r3, #1
 383 0012 3A4A     		ldr	r2, .L23
 384 0014 1360     		str	r3, [r2]
 970:..\Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 385              		.loc 1 970 0
 386 0016 3A4B     		ldr	r3, .L23+4
 387 0018 1B68     		ldr	r3, [r3]
 388 001a 002B     		cmp	r3, #0
 389 001c 09D1     		bne	.L19
 971:..\Source/tasks.c **** 		{
 972:..\Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:..\Source/tasks.c **** 			the suspended state - make this the current task. */
 974:..\Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 390              		.loc 1 974 0
 391 001e 384A     		ldr	r2, .L23+4
 392 0020 7B68     		ldr	r3, [r7, #4]
 393 0022 1360     		str	r3, [r2]
 975:..\Source/tasks.c **** 
 976:..\Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 394              		.loc 1 976 0
 395 0024 354B     		ldr	r3, .L23
 396 0026 1B68     		ldr	r3, [r3]
 397 0028 012B     		cmp	r3, #1
 398 002a 10D1     		bne	.L20
 977:..\Source/tasks.c **** 			{
 978:..\Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:..\Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:..\Source/tasks.c **** 				fails, but we will report the failure. */
 981:..\Source/tasks.c **** 				prvInitialiseTaskLists();
 399              		.loc 1 981 0
 400 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 401 0030 0DE0     		b	.L20
 402              	.L19:
 982:..\Source/tasks.c **** 			}
 983:..\Source/tasks.c **** 			else
 984:..\Source/tasks.c **** 			{
 985:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:..\Source/tasks.c **** 			}
 987:..\Source/tasks.c **** 		}
 988:..\Source/tasks.c **** 		else
 989:..\Source/tasks.c **** 		{
 990:..\Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:..\Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:..\Source/tasks.c **** 			so far. */
 993:..\Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 403              		.loc 1 993 0
 404 0032 344B     		ldr	r3, .L23+8
 405 0034 1B68     		ldr	r3, [r3]
 406 0036 002B     		cmp	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 26


 407 0038 09D1     		bne	.L20
 994:..\Source/tasks.c **** 			{
 995:..\Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 408              		.loc 1 995 0
 409 003a 314B     		ldr	r3, .L23+4
 410 003c 1B68     		ldr	r3, [r3]
 411 003e DA6A     		ldr	r2, [r3, #44]
 412 0040 7B68     		ldr	r3, [r7, #4]
 413 0042 DB6A     		ldr	r3, [r3, #44]
 414 0044 9A42     		cmp	r2, r3
 415 0046 02D8     		bhi	.L20
 996:..\Source/tasks.c **** 				{
 997:..\Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 416              		.loc 1 997 0
 417 0048 2D4A     		ldr	r2, .L23+4
 418 004a 7B68     		ldr	r3, [r7, #4]
 419 004c 1360     		str	r3, [r2]
 420              	.L20:
 998:..\Source/tasks.c **** 				}
 999:..\Source/tasks.c **** 				else
1000:..\Source/tasks.c **** 				{
1001:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:..\Source/tasks.c **** 				}
1003:..\Source/tasks.c **** 			}
1004:..\Source/tasks.c **** 			else
1005:..\Source/tasks.c **** 			{
1006:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:..\Source/tasks.c **** 			}
1008:..\Source/tasks.c **** 		}
1009:..\Source/tasks.c **** 
1010:..\Source/tasks.c **** 		uxTaskNumber++;
 421              		.loc 1 1010 0
 422 004e 2E4B     		ldr	r3, .L23+12
 423 0050 1B68     		ldr	r3, [r3]
 424 0052 0133     		adds	r3, r3, #1
 425 0054 2C4A     		ldr	r2, .L23+12
 426 0056 1360     		str	r3, [r2]
1011:..\Source/tasks.c **** 
1012:..\Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:..\Source/tasks.c **** 		{
1014:..\Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:..\Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 427              		.loc 1 1015 0
 428 0058 2B4B     		ldr	r3, .L23+12
 429 005a 1A68     		ldr	r2, [r3]
 430 005c 7B68     		ldr	r3, [r7, #4]
 431 005e 1A64     		str	r2, [r3, #64]
1016:..\Source/tasks.c **** 		}
1017:..\Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:..\Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
 432              		.loc 1 1018 0
 433 0060 7B68     		ldr	r3, [r7, #4]
 434 0062 3433     		adds	r3, r3, #52
 435 0064 1946     		mov	r1, r3
 436 0066 0520     		movs	r0, #5
 437 0068 FFF7FEFF 		bl	updateObjectList
 438 006c 0246     		mov	r2, r0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 27


 439 006e 7B68     		ldr	r3, [r7, #4]
 440 0070 5A64     		str	r2, [r3, #68]
 441 0072 7B68     		ldr	r3, [r7, #4]
 442 0074 5B6C     		ldr	r3, [r3, #68]
 443 0076 DBB2     		uxtb	r3, r3
 444 0078 1946     		mov	r1, r3
 445 007a 2320     		movs	r0, #35
 446 007c FFF7FEFF 		bl	packPayload1
1019:..\Source/tasks.c **** 
1020:..\Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 447              		.loc 1 1020 0
 448 0080 7B68     		ldr	r3, [r7, #4]
 449 0082 5B6C     		ldr	r3, [r3, #68]
 450 0084 DBB2     		uxtb	r3, r3
 451 0086 1946     		mov	r1, r3
 452 0088 0B20     		movs	r0, #11
 453 008a FFF7FEFF 		bl	packPayload1
 454 008e 7B68     		ldr	r3, [r7, #4]
 455 0090 DB6A     		ldr	r3, [r3, #44]
 456 0092 0122     		movs	r2, #1
 457 0094 9A40     		lsls	r2, r2, r3
 458 0096 1D4B     		ldr	r3, .L23+16
 459 0098 1B68     		ldr	r3, [r3]
 460 009a 1343     		orrs	r3, r3, r2
 461 009c 1B4A     		ldr	r2, .L23+16
 462 009e 1360     		str	r3, [r2]
 463 00a0 7B68     		ldr	r3, [r7, #4]
 464 00a2 DA6A     		ldr	r2, [r3, #44]
 465 00a4 1346     		mov	r3, r2
 466 00a6 9B00     		lsls	r3, r3, #2
 467 00a8 1344     		add	r3, r3, r2
 468 00aa 9B00     		lsls	r3, r3, #2
 469 00ac 184A     		ldr	r2, .L23+20
 470 00ae 1A44     		add	r2, r2, r3
 471 00b0 7B68     		ldr	r3, [r7, #4]
 472 00b2 0433     		adds	r3, r3, #4
 473 00b4 1946     		mov	r1, r3
 474 00b6 1046     		mov	r0, r2
 475 00b8 FFF7FEFF 		bl	vListInsertEnd
 476 00bc 7B68     		ldr	r3, [r7, #4]
 477 00be 5B6C     		ldr	r3, [r3, #68]
 478 00c0 DBB2     		uxtb	r3, r3
 479 00c2 1946     		mov	r1, r3
 480 00c4 0C20     		movs	r0, #12
 481 00c6 FFF7FEFF 		bl	packPayload1
1021:..\Source/tasks.c **** 
1022:..\Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:..\Source/tasks.c **** 	}
1024:..\Source/tasks.c **** 	taskEXIT_CRITICAL();
 482              		.loc 1 1024 0
 483 00ca FFF7FEFF 		bl	vPortExitCritical
1025:..\Source/tasks.c **** 
1026:..\Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 484              		.loc 1 1026 0
 485 00ce 0D4B     		ldr	r3, .L23+8
 486 00d0 1B68     		ldr	r3, [r3]
 487 00d2 002B     		cmp	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 28


 488 00d4 0ED0     		beq	.L22
1027:..\Source/tasks.c **** 	{
1028:..\Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:..\Source/tasks.c **** 		then it should run now. */
1030:..\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 489              		.loc 1 1030 0
 490 00d6 0A4B     		ldr	r3, .L23+4
 491 00d8 1B68     		ldr	r3, [r3]
 492 00da DA6A     		ldr	r2, [r3, #44]
 493 00dc 7B68     		ldr	r3, [r7, #4]
 494 00de DB6A     		ldr	r3, [r3, #44]
 495 00e0 9A42     		cmp	r2, r3
 496 00e2 07D2     		bcs	.L22
1031:..\Source/tasks.c **** 		{
1032:..\Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 497              		.loc 1 1032 0
 498 00e4 0B4B     		ldr	r3, .L23+24
 499 00e6 4FF08052 		mov	r2, #268435456
 500 00ea 1A60     		str	r2, [r3]
 501              		.syntax unified
 502              	@ 1032 "..\Source\tasks.c" 1
 503 00ec BFF34F8F 		dsb
 504              	@ 0 "" 2
 505              	@ 1032 "..\Source\tasks.c" 1
 506 00f0 BFF36F8F 		isb
 507              	@ 0 "" 2
 508              		.thumb
 509              		.syntax unified
 510              	.L22:
1033:..\Source/tasks.c **** 		}
1034:..\Source/tasks.c **** 		else
1035:..\Source/tasks.c **** 		{
1036:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:..\Source/tasks.c **** 		}
1038:..\Source/tasks.c **** 	}
1039:..\Source/tasks.c **** 	else
1040:..\Source/tasks.c **** 	{
1041:..\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:..\Source/tasks.c **** 	}
1043:..\Source/tasks.c **** }
 511              		.loc 1 1043 0
 512 00f4 00BF     		nop
 513 00f6 0837     		adds	r7, r7, #8
 514              		.cfi_def_cfa_offset 8
 515 00f8 BD46     		mov	sp, r7
 516              		.cfi_def_cfa_register 13
 517              		@ sp needed
 518 00fa 80BD     		pop	{r7, pc}
 519              	.L24:
 520              		.align	2
 521              	.L23:
 522 00fc D8000000 		.word	uxCurrentNumberOfTasks
 523 0100 00000000 		.word	pxCurrentTCB
 524 0104 E4000000 		.word	xSchedulerRunning
 525 0108 F4000000 		.word	uxTaskNumber
 526 010c E0000000 		.word	uxTopReadyPriority
 527 0110 04000000 		.word	pxReadyTasksLists
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 29


 528 0114 04ED00E0 		.word	-536810236
 529              		.cfi_endproc
 530              	.LFE70:
 531              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 532              		.section	.text.vTaskDelete,"ax",%progbits
 533              		.align	2
 534              		.global	vTaskDelete
 535              		.thumb
 536              		.thumb_func
 537              		.type	vTaskDelete, %function
 538              	vTaskDelete:
 539              	.LFB71:
1044:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1045:..\Source/tasks.c **** 
1046:..\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:..\Source/tasks.c **** 
1048:..\Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:..\Source/tasks.c **** 	{
 540              		.loc 1 1049 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 16
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544 0000 80B5     		push	{r7, lr}
 545              		.cfi_def_cfa_offset 8
 546              		.cfi_offset 7, -8
 547              		.cfi_offset 14, -4
 548 0002 84B0     		sub	sp, sp, #16
 549              		.cfi_def_cfa_offset 24
 550 0004 00AF     		add	r7, sp, #0
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
1050:..\Source/tasks.c **** 	TCB_t *pxTCB;
1051:..\Source/tasks.c **** 
1052:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 553              		.loc 1 1052 0
 554 0008 FFF7FEFF 		bl	vPortEnterCritical
1053:..\Source/tasks.c **** 		{
1054:..\Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:..\Source/tasks.c **** 			being deleted. */
1056:..\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 555              		.loc 1 1056 0
 556 000c 7B68     		ldr	r3, [r7, #4]
 557 000e 002B     		cmp	r3, #0
 558 0010 02D1     		bne	.L26
 559              		.loc 1 1056 0 is_stmt 0 discriminator 1
 560 0012 3B4B     		ldr	r3, .L35
 561 0014 1B68     		ldr	r3, [r3]
 562 0016 00E0     		b	.L27
 563              	.L26:
 564              		.loc 1 1056 0 discriminator 2
 565 0018 7B68     		ldr	r3, [r7, #4]
 566              	.L27:
 567              		.loc 1 1056 0 discriminator 4
 568 001a FB60     		str	r3, [r7, #12]
1057:..\Source/tasks.c **** 
1058:..\Source/tasks.c **** 			/* Remove task from the ready list. */
1059:..\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 30


 569              		.loc 1 1059 0 is_stmt 1 discriminator 4
 570 001c FB68     		ldr	r3, [r7, #12]
 571 001e 0433     		adds	r3, r3, #4
 572 0020 1846     		mov	r0, r3
 573 0022 FFF7FEFF 		bl	uxListRemove
 574 0026 0346     		mov	r3, r0
 575 0028 002B     		cmp	r3, #0
 576 002a 15D1     		bne	.L28
1060:..\Source/tasks.c **** 			{
1061:..\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 577              		.loc 1 1061 0
 578 002c FB68     		ldr	r3, [r7, #12]
 579 002e DA6A     		ldr	r2, [r3, #44]
 580 0030 3449     		ldr	r1, .L35+4
 581 0032 1346     		mov	r3, r2
 582 0034 9B00     		lsls	r3, r3, #2
 583 0036 1344     		add	r3, r3, r2
 584 0038 9B00     		lsls	r3, r3, #2
 585 003a 0B44     		add	r3, r3, r1
 586 003c 1B68     		ldr	r3, [r3]
 587 003e 002B     		cmp	r3, #0
 588 0040 0AD1     		bne	.L28
 589              		.loc 1 1061 0 is_stmt 0 discriminator 1
 590 0042 FB68     		ldr	r3, [r7, #12]
 591 0044 DB6A     		ldr	r3, [r3, #44]
 592 0046 0122     		movs	r2, #1
 593 0048 02FA03F3 		lsl	r3, r2, r3
 594 004c DA43     		mvns	r2, r3
 595 004e 2E4B     		ldr	r3, .L35+8
 596 0050 1B68     		ldr	r3, [r3]
 597 0052 1340     		ands	r3, r3, r2
 598 0054 2C4A     		ldr	r2, .L35+8
 599 0056 1360     		str	r3, [r2]
 600              	.L28:
1062:..\Source/tasks.c **** 			}
1063:..\Source/tasks.c **** 			else
1064:..\Source/tasks.c **** 			{
1065:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:..\Source/tasks.c **** 			}
1067:..\Source/tasks.c **** 
1068:..\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:..\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 601              		.loc 1 1069 0 is_stmt 1
 602 0058 FB68     		ldr	r3, [r7, #12]
 603 005a 9B6A     		ldr	r3, [r3, #40]
 604 005c 002B     		cmp	r3, #0
 605 005e 04D0     		beq	.L30
1070:..\Source/tasks.c **** 			{
1071:..\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 606              		.loc 1 1071 0
 607 0060 FB68     		ldr	r3, [r7, #12]
 608 0062 1833     		adds	r3, r3, #24
 609 0064 1846     		mov	r0, r3
 610 0066 FFF7FEFF 		bl	uxListRemove
 611              	.L30:
1072:..\Source/tasks.c **** 			}
1073:..\Source/tasks.c **** 			else
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 31


1074:..\Source/tasks.c **** 			{
1075:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:..\Source/tasks.c **** 			}
1077:..\Source/tasks.c **** 
1078:..\Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:..\Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:..\Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:..\Source/tasks.c **** 			not return. */
1082:..\Source/tasks.c **** 			uxTaskNumber++;
 612              		.loc 1 1082 0
 613 006a 284B     		ldr	r3, .L35+12
 614 006c 1B68     		ldr	r3, [r3]
 615 006e 0133     		adds	r3, r3, #1
 616 0070 264A     		ldr	r2, .L35+12
 617 0072 1360     		str	r3, [r2]
1083:..\Source/tasks.c **** 
1084:..\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 618              		.loc 1 1084 0
 619 0074 224B     		ldr	r3, .L35
 620 0076 1B68     		ldr	r3, [r3]
 621 0078 FA68     		ldr	r2, [r7, #12]
 622 007a 9A42     		cmp	r2, r3
 623 007c 0BD1     		bne	.L31
1085:..\Source/tasks.c **** 			{
1086:..\Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:..\Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:..\Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:..\Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:..\Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:..\Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 624              		.loc 1 1091 0
 625 007e FB68     		ldr	r3, [r7, #12]
 626 0080 0433     		adds	r3, r3, #4
 627 0082 1946     		mov	r1, r3
 628 0084 2248     		ldr	r0, .L35+16
 629 0086 FFF7FEFF 		bl	vListInsertEnd
1092:..\Source/tasks.c **** 
1093:..\Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:..\Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:..\Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:..\Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 630              		.loc 1 1096 0
 631 008a 224B     		ldr	r3, .L35+20
 632 008c 1B68     		ldr	r3, [r3]
 633 008e 0133     		adds	r3, r3, #1
 634 0090 204A     		ldr	r2, .L35+20
 635 0092 1360     		str	r3, [r2]
 636 0094 09E0     		b	.L32
 637              	.L31:
1097:..\Source/tasks.c **** 
1098:..\Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:..\Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:..\Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:..\Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:..\Source/tasks.c **** 				required. */
1103:..\Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:..\Source/tasks.c **** 			}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 32


1105:..\Source/tasks.c **** 			else
1106:..\Source/tasks.c **** 			{
1107:..\Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 638              		.loc 1 1107 0
 639 0096 204B     		ldr	r3, .L35+24
 640 0098 1B68     		ldr	r3, [r3]
 641 009a 013B     		subs	r3, r3, #1
 642 009c 1E4A     		ldr	r2, .L35+24
 643 009e 1360     		str	r3, [r2]
1108:..\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 644              		.loc 1 1108 0
 645 00a0 F868     		ldr	r0, [r7, #12]
 646 00a2 FFF7FEFF 		bl	prvDeleteTCB
1109:..\Source/tasks.c **** 
1110:..\Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:..\Source/tasks.c **** 				the task that has just been deleted. */
1112:..\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 647              		.loc 1 1112 0
 648 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 649              	.L32:
1113:..\Source/tasks.c **** 			}
1114:..\Source/tasks.c **** 
1115:..\Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 650              		.loc 1 1115 0
 651 00aa FB68     		ldr	r3, [r7, #12]
 652 00ac 5A6C     		ldr	r2, [r3, #68]
 653 00ae 1B49     		ldr	r1, .L35+28
 654 00b0 1346     		mov	r3, r2
 655 00b2 DB00     		lsls	r3, r3, #3
 656 00b4 9B1A     		subs	r3, r3, r2
 657 00b6 5B00     		lsls	r3, r3, #1
 658 00b8 0B44     		add	r3, r3, r1
 659 00ba 03F5B263 		add	r3, r3, #1424
 660 00be 0022     		movs	r2, #0
 661 00c0 1A70     		strb	r2, [r3]
 662 00c2 FB68     		ldr	r3, [r7, #12]
 663 00c4 5B6C     		ldr	r3, [r3, #68]
 664 00c6 DBB2     		uxtb	r3, r3
 665 00c8 1946     		mov	r1, r3
 666 00ca 2520     		movs	r0, #37
 667 00cc FFF7FEFF 		bl	packPayload1
1116:..\Source/tasks.c **** 		}
1117:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 668              		.loc 1 1117 0
 669 00d0 FFF7FEFF 		bl	vPortExitCritical
1118:..\Source/tasks.c **** 
1119:..\Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:..\Source/tasks.c **** 		been deleted. */
1121:..\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 670              		.loc 1 1121 0
 671 00d4 124B     		ldr	r3, .L35+32
 672 00d6 1B68     		ldr	r3, [r3]
 673 00d8 002B     		cmp	r3, #0
 674 00da 0CD0     		beq	.L34
1122:..\Source/tasks.c **** 		{
1123:..\Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 675              		.loc 1 1123 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 33


 676 00dc 084B     		ldr	r3, .L35
 677 00de 1B68     		ldr	r3, [r3]
 678 00e0 FA68     		ldr	r2, [r7, #12]
 679 00e2 9A42     		cmp	r2, r3
 680 00e4 07D1     		bne	.L34
1124:..\Source/tasks.c **** 			{
1125:..\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:..\Source/tasks.c **** 				portYIELD_WITHIN_API();
 681              		.loc 1 1126 0
 682 00e6 0F4B     		ldr	r3, .L35+36
 683 00e8 4FF08052 		mov	r2, #268435456
 684 00ec 1A60     		str	r2, [r3]
 685              		.syntax unified
 686              	@ 1126 "..\Source\tasks.c" 1
 687 00ee BFF34F8F 		dsb
 688              	@ 0 "" 2
 689              	@ 1126 "..\Source\tasks.c" 1
 690 00f2 BFF36F8F 		isb
 691              	@ 0 "" 2
 692              		.thumb
 693              		.syntax unified
 694              	.L34:
1127:..\Source/tasks.c **** 			}
1128:..\Source/tasks.c **** 			else
1129:..\Source/tasks.c **** 			{
1130:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:..\Source/tasks.c **** 			}
1132:..\Source/tasks.c **** 		}
1133:..\Source/tasks.c **** 	}
 695              		.loc 1 1133 0
 696 00f6 00BF     		nop
 697 00f8 1037     		adds	r7, r7, #16
 698              		.cfi_def_cfa_offset 8
 699 00fa BD46     		mov	sp, r7
 700              		.cfi_def_cfa_register 13
 701              		@ sp needed
 702 00fc 80BD     		pop	{r7, pc}
 703              	.L36:
 704 00fe 00BF     		.align	2
 705              	.L35:
 706 0100 00000000 		.word	pxCurrentTCB
 707 0104 04000000 		.word	pxReadyTasksLists
 708 0108 E0000000 		.word	uxTopReadyPriority
 709 010c F4000000 		.word	uxTaskNumber
 710 0110 AC000000 		.word	xTasksWaitingTermination
 711 0114 C0000000 		.word	uxDeletedTasksWaitingCleanUp
 712 0118 D8000000 		.word	uxCurrentNumberOfTasks
 713 011c 00000000 		.word	objectList
 714 0120 E4000000 		.word	xSchedulerRunning
 715 0124 04ED00E0 		.word	-536810236
 716              		.cfi_endproc
 717              	.LFE71:
 718              		.size	vTaskDelete, .-vTaskDelete
 719              		.section	.text.vTaskDelayUntil,"ax",%progbits
 720              		.align	2
 721              		.global	vTaskDelayUntil
 722              		.thumb
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 34


 723              		.thumb_func
 724              		.type	vTaskDelayUntil, %function
 725              	vTaskDelayUntil:
 726              	.LFB72:
1134:..\Source/tasks.c **** 
1135:..\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1137:..\Source/tasks.c **** 
1138:..\Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:..\Source/tasks.c **** 
1140:..\Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:..\Source/tasks.c **** 	{
 727              		.loc 1 1141 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 24
 730              		@ frame_needed = 1, uses_anonymous_args = 0
 731 0000 80B5     		push	{r7, lr}
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 7, -8
 734              		.cfi_offset 14, -4
 735 0002 86B0     		sub	sp, sp, #24
 736              		.cfi_def_cfa_offset 32
 737 0004 00AF     		add	r7, sp, #0
 738              		.cfi_def_cfa_register 7
 739 0006 7860     		str	r0, [r7, #4]
 740 0008 3960     		str	r1, [r7]
1142:..\Source/tasks.c **** 	TickType_t xTimeToWake;
1143:..\Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 741              		.loc 1 1143 0
 742 000a 0023     		movs	r3, #0
 743 000c 7B61     		str	r3, [r7, #20]
1144:..\Source/tasks.c **** 
1145:..\Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:..\Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:..\Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:..\Source/tasks.c **** 
1149:..\Source/tasks.c **** 		vTaskSuspendAll();
 744              		.loc 1 1149 0
 745 000e FFF7FEFF 		bl	vTaskSuspendAll
 746              	.LBB28:
1150:..\Source/tasks.c **** 		{
1151:..\Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:..\Source/tasks.c **** 			block. */
1153:..\Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 747              		.loc 1 1153 0
 748 0012 274B     		ldr	r3, .L44
 749 0014 1B68     		ldr	r3, [r3]
 750 0016 3B61     		str	r3, [r7, #16]
1154:..\Source/tasks.c **** 
1155:..\Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:..\Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 751              		.loc 1 1156 0
 752 0018 7B68     		ldr	r3, [r7, #4]
 753 001a 1A68     		ldr	r2, [r3]
 754 001c 3B68     		ldr	r3, [r7]
 755 001e 1344     		add	r3, r3, r2
 756 0020 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 35


1157:..\Source/tasks.c **** 
1158:..\Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 757              		.loc 1 1158 0
 758 0022 7B68     		ldr	r3, [r7, #4]
 759 0024 1A68     		ldr	r2, [r3]
 760 0026 3B69     		ldr	r3, [r7, #16]
 761 0028 9A42     		cmp	r2, r3
 762 002a 0BD9     		bls	.L38
1159:..\Source/tasks.c **** 			{
1160:..\Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:..\Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:..\Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:..\Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:..\Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:..\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 763              		.loc 1 1165 0
 764 002c 7B68     		ldr	r3, [r7, #4]
 765 002e 1A68     		ldr	r2, [r3]
 766 0030 FB68     		ldr	r3, [r7, #12]
 767 0032 9A42     		cmp	r2, r3
 768 0034 11D9     		bls	.L39
 769              		.loc 1 1165 0 is_stmt 0 discriminator 1
 770 0036 FA68     		ldr	r2, [r7, #12]
 771 0038 3B69     		ldr	r3, [r7, #16]
 772 003a 9A42     		cmp	r2, r3
 773 003c 0DD9     		bls	.L39
1166:..\Source/tasks.c **** 				{
1167:..\Source/tasks.c **** 					xShouldDelay = pdTRUE;
 774              		.loc 1 1167 0 is_stmt 1
 775 003e 0123     		movs	r3, #1
 776 0040 7B61     		str	r3, [r7, #20]
 777 0042 0AE0     		b	.L39
 778              	.L38:
1168:..\Source/tasks.c **** 				}
1169:..\Source/tasks.c **** 				else
1170:..\Source/tasks.c **** 				{
1171:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:..\Source/tasks.c **** 				}
1173:..\Source/tasks.c **** 			}
1174:..\Source/tasks.c **** 			else
1175:..\Source/tasks.c **** 			{
1176:..\Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:..\Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:..\Source/tasks.c **** 				tick time is less than the wake time. */
1179:..\Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 779              		.loc 1 1179 0
 780 0044 7B68     		ldr	r3, [r7, #4]
 781 0046 1A68     		ldr	r2, [r3]
 782 0048 FB68     		ldr	r3, [r7, #12]
 783 004a 9A42     		cmp	r2, r3
 784 004c 03D8     		bhi	.L40
 785              		.loc 1 1179 0 is_stmt 0 discriminator 1
 786 004e FA68     		ldr	r2, [r7, #12]
 787 0050 3B69     		ldr	r3, [r7, #16]
 788 0052 9A42     		cmp	r2, r3
 789 0054 01D9     		bls	.L39
 790              	.L40:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 36


1180:..\Source/tasks.c **** 				{
1181:..\Source/tasks.c **** 					xShouldDelay = pdTRUE;
 791              		.loc 1 1181 0 is_stmt 1
 792 0056 0123     		movs	r3, #1
 793 0058 7B61     		str	r3, [r7, #20]
 794              	.L39:
1182:..\Source/tasks.c **** 				}
1183:..\Source/tasks.c **** 				else
1184:..\Source/tasks.c **** 				{
1185:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:..\Source/tasks.c **** 				}
1187:..\Source/tasks.c **** 			}
1188:..\Source/tasks.c **** 
1189:..\Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:..\Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 795              		.loc 1 1190 0
 796 005a 7B68     		ldr	r3, [r7, #4]
 797 005c FA68     		ldr	r2, [r7, #12]
 798 005e 1A60     		str	r2, [r3]
1191:..\Source/tasks.c **** 
1192:..\Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 799              		.loc 1 1192 0
 800 0060 7B69     		ldr	r3, [r7, #20]
 801 0062 002B     		cmp	r3, #0
 802 0064 12D0     		beq	.L41
1193:..\Source/tasks.c **** 			{
1194:..\Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
 803              		.loc 1 1194 0
 804 0066 134B     		ldr	r3, .L44+4
 805 0068 1B68     		ldr	r3, [r3]
 806 006a 5B6C     		ldr	r3, [r3, #68]
 807 006c D9B2     		uxtb	r1, r3
 808 006e 3B68     		ldr	r3, [r7]
 809 0070 1B0A     		lsrs	r3, r3, #8
 810 0072 DAB2     		uxtb	r2, r3
 811 0074 3B68     		ldr	r3, [r7]
 812 0076 DBB2     		uxtb	r3, r3
 813 0078 2620     		movs	r0, #38
 814 007a FFF7FEFF 		bl	packPayload3
1195:..\Source/tasks.c **** 
1196:..\Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:..\Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:..\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 815              		.loc 1 1198 0
 816 007e FA68     		ldr	r2, [r7, #12]
 817 0080 3B69     		ldr	r3, [r7, #16]
 818 0082 D31A     		subs	r3, r2, r3
 819 0084 0021     		movs	r1, #0
 820 0086 1846     		mov	r0, r3
 821 0088 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 822              	.L41:
 823              	.LBE28:
1199:..\Source/tasks.c **** 			}
1200:..\Source/tasks.c **** 			else
1201:..\Source/tasks.c **** 			{
1202:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:..\Source/tasks.c **** 			}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 37


1204:..\Source/tasks.c **** 		}
1205:..\Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 824              		.loc 1 1205 0
 825 008c FFF7FEFF 		bl	xTaskResumeAll
 826 0090 B860     		str	r0, [r7, #8]
1206:..\Source/tasks.c **** 
1207:..\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:..\Source/tasks.c **** 		have put ourselves to sleep. */
1209:..\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 827              		.loc 1 1209 0
 828 0092 BB68     		ldr	r3, [r7, #8]
 829 0094 002B     		cmp	r3, #0
 830 0096 07D1     		bne	.L43
1210:..\Source/tasks.c **** 		{
1211:..\Source/tasks.c **** 			portYIELD_WITHIN_API();
 831              		.loc 1 1211 0
 832 0098 074B     		ldr	r3, .L44+8
 833 009a 4FF08052 		mov	r2, #268435456
 834 009e 1A60     		str	r2, [r3]
 835              		.syntax unified
 836              	@ 1211 "..\Source\tasks.c" 1
 837 00a0 BFF34F8F 		dsb
 838              	@ 0 "" 2
 839              	@ 1211 "..\Source\tasks.c" 1
 840 00a4 BFF36F8F 		isb
 841              	@ 0 "" 2
 842              		.thumb
 843              		.syntax unified
 844              	.L43:
1212:..\Source/tasks.c **** 		}
1213:..\Source/tasks.c **** 		else
1214:..\Source/tasks.c **** 		{
1215:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:..\Source/tasks.c **** 		}
1217:..\Source/tasks.c **** 	}
 845              		.loc 1 1217 0
 846 00a8 00BF     		nop
 847 00aa 1837     		adds	r7, r7, #24
 848              		.cfi_def_cfa_offset 8
 849 00ac BD46     		mov	sp, r7
 850              		.cfi_def_cfa_register 13
 851              		@ sp needed
 852 00ae 80BD     		pop	{r7, pc}
 853              	.L45:
 854              		.align	2
 855              	.L44:
 856 00b0 DC000000 		.word	xTickCount
 857 00b4 00000000 		.word	pxCurrentTCB
 858 00b8 04ED00E0 		.word	-536810236
 859              		.cfi_endproc
 860              	.LFE72:
 861              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 862              		.section	.text.vTaskDelay,"ax",%progbits
 863              		.align	2
 864              		.global	vTaskDelay
 865              		.thumb
 866              		.thumb_func
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 38


 867              		.type	vTaskDelay, %function
 868              	vTaskDelay:
 869              	.LFB73:
1218:..\Source/tasks.c **** 
1219:..\Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1221:..\Source/tasks.c **** 
1222:..\Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:..\Source/tasks.c **** 
1224:..\Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:..\Source/tasks.c **** 	{
 870              		.loc 1 1225 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 16
 873              		@ frame_needed = 1, uses_anonymous_args = 0
 874 0000 80B5     		push	{r7, lr}
 875              		.cfi_def_cfa_offset 8
 876              		.cfi_offset 7, -8
 877              		.cfi_offset 14, -4
 878 0002 84B0     		sub	sp, sp, #16
 879              		.cfi_def_cfa_offset 24
 880 0004 00AF     		add	r7, sp, #0
 881              		.cfi_def_cfa_register 7
 882 0006 7860     		str	r0, [r7, #4]
1226:..\Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 883              		.loc 1 1226 0
 884 0008 0023     		movs	r3, #0
 885 000a FB60     		str	r3, [r7, #12]
1227:..\Source/tasks.c **** 
1228:..\Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:..\Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 886              		.loc 1 1229 0
 887 000c 7B68     		ldr	r3, [r7, #4]
 888 000e 002B     		cmp	r3, #0
 889 0010 14D0     		beq	.L47
1230:..\Source/tasks.c **** 		{
1231:..\Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:..\Source/tasks.c **** 			vTaskSuspendAll();
 890              		.loc 1 1232 0
 891 0012 FFF7FEFF 		bl	vTaskSuspendAll
1233:..\Source/tasks.c **** 			{
1234:..\Source/tasks.c **** 				traceTASK_DELAY();
 892              		.loc 1 1234 0
 893 0016 114B     		ldr	r3, .L50
 894 0018 1B68     		ldr	r3, [r3]
 895 001a 5B6C     		ldr	r3, [r3, #68]
 896 001c D9B2     		uxtb	r1, r3
 897 001e 7B68     		ldr	r3, [r7, #4]
 898 0020 1B0A     		lsrs	r3, r3, #8
 899 0022 DAB2     		uxtb	r2, r3
 900 0024 7B68     		ldr	r3, [r7, #4]
 901 0026 DBB2     		uxtb	r3, r3
 902 0028 2720     		movs	r0, #39
 903 002a FFF7FEFF 		bl	packPayload3
1235:..\Source/tasks.c **** 
1236:..\Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:..\Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 39


1238:..\Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:..\Source/tasks.c **** 				is resumed.
1240:..\Source/tasks.c **** 
1241:..\Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:..\Source/tasks.c **** 				executing task. */
1243:..\Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 904              		.loc 1 1243 0
 905 002e 0021     		movs	r1, #0
 906 0030 7868     		ldr	r0, [r7, #4]
 907 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1244:..\Source/tasks.c **** 			}
1245:..\Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 908              		.loc 1 1245 0
 909 0036 FFF7FEFF 		bl	xTaskResumeAll
 910 003a F860     		str	r0, [r7, #12]
 911              	.L47:
1246:..\Source/tasks.c **** 		}
1247:..\Source/tasks.c **** 		else
1248:..\Source/tasks.c **** 		{
1249:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:..\Source/tasks.c **** 		}
1251:..\Source/tasks.c **** 
1252:..\Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:..\Source/tasks.c **** 		have put ourselves to sleep. */
1254:..\Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 912              		.loc 1 1254 0
 913 003c FB68     		ldr	r3, [r7, #12]
 914 003e 002B     		cmp	r3, #0
 915 0040 07D1     		bne	.L49
1255:..\Source/tasks.c **** 		{
1256:..\Source/tasks.c **** 			portYIELD_WITHIN_API();
 916              		.loc 1 1256 0
 917 0042 074B     		ldr	r3, .L50+4
 918 0044 4FF08052 		mov	r2, #268435456
 919 0048 1A60     		str	r2, [r3]
 920              		.syntax unified
 921              	@ 1256 "..\Source\tasks.c" 1
 922 004a BFF34F8F 		dsb
 923              	@ 0 "" 2
 924              	@ 1256 "..\Source\tasks.c" 1
 925 004e BFF36F8F 		isb
 926              	@ 0 "" 2
 927              		.thumb
 928              		.syntax unified
 929              	.L49:
1257:..\Source/tasks.c **** 		}
1258:..\Source/tasks.c **** 		else
1259:..\Source/tasks.c **** 		{
1260:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:..\Source/tasks.c **** 		}
1262:..\Source/tasks.c **** 	}
 930              		.loc 1 1262 0
 931 0052 00BF     		nop
 932 0054 1037     		adds	r7, r7, #16
 933              		.cfi_def_cfa_offset 8
 934 0056 BD46     		mov	sp, r7
 935              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 40


 936              		@ sp needed
 937 0058 80BD     		pop	{r7, pc}
 938              	.L51:
 939 005a 00BF     		.align	2
 940              	.L50:
 941 005c 00000000 		.word	pxCurrentTCB
 942 0060 04ED00E0 		.word	-536810236
 943              		.cfi_endproc
 944              	.LFE73:
 945              		.size	vTaskDelay, .-vTaskDelay
 946              		.section	.text.eTaskGetState,"ax",%progbits
 947              		.align	2
 948              		.global	eTaskGetState
 949              		.thumb
 950              		.thumb_func
 951              		.type	eTaskGetState, %function
 952              	eTaskGetState:
 953              	.LFB74:
1263:..\Source/tasks.c **** 
1264:..\Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1266:..\Source/tasks.c **** 
1267:..\Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:..\Source/tasks.c **** 
1269:..\Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:..\Source/tasks.c **** 	{
 954              		.loc 1 1270 0
 955              		.cfi_startproc
 956              		@ args = 0, pretend = 0, frame = 24
 957              		@ frame_needed = 1, uses_anonymous_args = 0
 958 0000 80B5     		push	{r7, lr}
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 7, -8
 961              		.cfi_offset 14, -4
 962 0002 86B0     		sub	sp, sp, #24
 963              		.cfi_def_cfa_offset 32
 964 0004 00AF     		add	r7, sp, #0
 965              		.cfi_def_cfa_register 7
 966 0006 7860     		str	r0, [r7, #4]
1271:..\Source/tasks.c **** 	eTaskState eReturn;
1272:..\Source/tasks.c **** 	List_t *pxStateList;
1273:..\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 967              		.loc 1 1273 0
 968 0008 7B68     		ldr	r3, [r7, #4]
 969 000a 3B61     		str	r3, [r7, #16]
1274:..\Source/tasks.c **** 
1275:..\Source/tasks.c **** 		configASSERT( pxTCB );
1276:..\Source/tasks.c **** 
1277:..\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 970              		.loc 1 1277 0
 971 000c 1D4B     		ldr	r3, .L63
 972 000e 1B68     		ldr	r3, [r3]
 973 0010 3A69     		ldr	r2, [r7, #16]
 974 0012 9A42     		cmp	r2, r3
 975 0014 02D1     		bne	.L53
1278:..\Source/tasks.c **** 		{
1279:..\Source/tasks.c **** 			/* The task calling this function is querying its own state. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 41


1280:..\Source/tasks.c **** 			eReturn = eRunning;
 976              		.loc 1 1280 0
 977 0016 0023     		movs	r3, #0
 978 0018 FB75     		strb	r3, [r7, #23]
 979 001a 2DE0     		b	.L54
 980              	.L53:
1281:..\Source/tasks.c **** 		}
1282:..\Source/tasks.c **** 		else
1283:..\Source/tasks.c **** 		{
1284:..\Source/tasks.c **** 			taskENTER_CRITICAL();
 981              		.loc 1 1284 0
 982 001c FFF7FEFF 		bl	vPortEnterCritical
1285:..\Source/tasks.c **** 			{
1286:..\Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 983              		.loc 1 1286 0
 984 0020 3B69     		ldr	r3, [r7, #16]
 985 0022 5B69     		ldr	r3, [r3, #20]
 986 0024 FB60     		str	r3, [r7, #12]
1287:..\Source/tasks.c **** 			}
1288:..\Source/tasks.c **** 			taskEXIT_CRITICAL();
 987              		.loc 1 1288 0
 988 0026 FFF7FEFF 		bl	vPortExitCritical
1289:..\Source/tasks.c **** 
1290:..\Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 989              		.loc 1 1290 0
 990 002a 174B     		ldr	r3, .L63+4
 991 002c 1B68     		ldr	r3, [r3]
 992 002e FA68     		ldr	r2, [r7, #12]
 993 0030 9A42     		cmp	r2, r3
 994 0032 04D0     		beq	.L55
 995              		.loc 1 1290 0 is_stmt 0 discriminator 1
 996 0034 154B     		ldr	r3, .L63+8
 997 0036 1B68     		ldr	r3, [r3]
 998 0038 FA68     		ldr	r2, [r7, #12]
 999 003a 9A42     		cmp	r2, r3
 1000 003c 02D1     		bne	.L56
 1001              	.L55:
1291:..\Source/tasks.c **** 			{
1292:..\Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:..\Source/tasks.c **** 				lists. */
1294:..\Source/tasks.c **** 				eReturn = eBlocked;
 1002              		.loc 1 1294 0 is_stmt 1
 1003 003e 0223     		movs	r3, #2
 1004 0040 FB75     		strb	r3, [r7, #23]
 1005 0042 19E0     		b	.L54
 1006              	.L56:
1295:..\Source/tasks.c **** 			}
1296:..\Source/tasks.c **** 
1297:..\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:..\Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1007              		.loc 1 1298 0
 1008 0044 FB68     		ldr	r3, [r7, #12]
 1009 0046 124A     		ldr	r2, .L63+12
 1010 0048 9342     		cmp	r3, r2
 1011 004a 09D1     		bne	.L57
1299:..\Source/tasks.c **** 				{
1300:..\Source/tasks.c **** 					/* The task being queried is referenced from the suspended
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 42


1301:..\Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:..\Source/tasks.c **** 					indefinitely? */
1303:..\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1012              		.loc 1 1303 0
 1013 004c 3B69     		ldr	r3, [r7, #16]
 1014 004e 9B6A     		ldr	r3, [r3, #40]
 1015 0050 002B     		cmp	r3, #0
 1016 0052 02D1     		bne	.L58
1304:..\Source/tasks.c **** 					{
1305:..\Source/tasks.c **** 						eReturn = eSuspended;
 1017              		.loc 1 1305 0
 1018 0054 0323     		movs	r3, #3
 1019 0056 FB75     		strb	r3, [r7, #23]
 1020 0058 0EE0     		b	.L54
 1021              	.L58:
1306:..\Source/tasks.c **** 					}
1307:..\Source/tasks.c **** 					else
1308:..\Source/tasks.c **** 					{
1309:..\Source/tasks.c **** 						eReturn = eBlocked;
 1022              		.loc 1 1309 0
 1023 005a 0223     		movs	r3, #2
 1024 005c FB75     		strb	r3, [r7, #23]
 1025 005e 0BE0     		b	.L54
 1026              	.L57:
1310:..\Source/tasks.c **** 					}
1311:..\Source/tasks.c **** 				}
1312:..\Source/tasks.c **** 			#endif
1313:..\Source/tasks.c **** 
1314:..\Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:..\Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1027              		.loc 1 1315 0
 1028 0060 FB68     		ldr	r3, [r7, #12]
 1029 0062 0C4A     		ldr	r2, .L63+16
 1030 0064 9342     		cmp	r3, r2
 1031 0066 02D0     		beq	.L60
 1032              		.loc 1 1315 0 is_stmt 0 discriminator 1
 1033 0068 FB68     		ldr	r3, [r7, #12]
 1034 006a 002B     		cmp	r3, #0
 1035 006c 02D1     		bne	.L61
 1036              	.L60:
1316:..\Source/tasks.c **** 				{
1317:..\Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:..\Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:..\Source/tasks.c **** 					all. */
1320:..\Source/tasks.c **** 					eReturn = eDeleted;
 1037              		.loc 1 1320 0 is_stmt 1
 1038 006e 0423     		movs	r3, #4
 1039 0070 FB75     		strb	r3, [r7, #23]
 1040 0072 01E0     		b	.L54
 1041              	.L61:
1321:..\Source/tasks.c **** 				}
1322:..\Source/tasks.c **** 			#endif
1323:..\Source/tasks.c **** 
1324:..\Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:..\Source/tasks.c **** 			{
1326:..\Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:..\Source/tasks.c **** 				Ready (including pending ready) state. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 43


1328:..\Source/tasks.c **** 				eReturn = eReady;
 1042              		.loc 1 1328 0
 1043 0074 0123     		movs	r3, #1
 1044 0076 FB75     		strb	r3, [r7, #23]
 1045              	.L54:
1329:..\Source/tasks.c **** 			}
1330:..\Source/tasks.c **** 		}
1331:..\Source/tasks.c **** 
1332:..\Source/tasks.c **** 		return eReturn;
 1046              		.loc 1 1332 0
 1047 0078 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1333:..\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1048              		.loc 1 1333 0
 1049 007a 1846     		mov	r0, r3
 1050 007c 1837     		adds	r7, r7, #24
 1051              		.cfi_def_cfa_offset 8
 1052 007e BD46     		mov	sp, r7
 1053              		.cfi_def_cfa_register 13
 1054              		@ sp needed
 1055 0080 80BD     		pop	{r7, pc}
 1056              	.L64:
 1057 0082 00BF     		.align	2
 1058              	.L63:
 1059 0084 00000000 		.word	pxCurrentTCB
 1060 0088 90000000 		.word	pxDelayedTaskList
 1061 008c 94000000 		.word	pxOverflowDelayedTaskList
 1062 0090 C4000000 		.word	xSuspendedTaskList
 1063 0094 AC000000 		.word	xTasksWaitingTermination
 1064              		.cfi_endproc
 1065              	.LFE74:
 1066              		.size	eTaskGetState, .-eTaskGetState
 1067              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1068              		.align	2
 1069              		.global	uxTaskPriorityGet
 1070              		.thumb
 1071              		.thumb_func
 1072              		.type	uxTaskPriorityGet, %function
 1073              	uxTaskPriorityGet:
 1074              	.LFB75:
1334:..\Source/tasks.c **** 
1335:..\Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1337:..\Source/tasks.c **** 
1338:..\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:..\Source/tasks.c **** 
1340:..\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:..\Source/tasks.c **** 	{
 1075              		.loc 1 1341 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 16
 1078              		@ frame_needed = 1, uses_anonymous_args = 0
 1079 0000 80B5     		push	{r7, lr}
 1080              		.cfi_def_cfa_offset 8
 1081              		.cfi_offset 7, -8
 1082              		.cfi_offset 14, -4
 1083 0002 84B0     		sub	sp, sp, #16
 1084              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 44


 1085 0004 00AF     		add	r7, sp, #0
 1086              		.cfi_def_cfa_register 7
 1087 0006 7860     		str	r0, [r7, #4]
1342:..\Source/tasks.c **** 	TCB_t *pxTCB;
1343:..\Source/tasks.c **** 	UBaseType_t uxReturn;
1344:..\Source/tasks.c **** 
1345:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 1088              		.loc 1 1345 0
 1089 0008 FFF7FEFF 		bl	vPortEnterCritical
1346:..\Source/tasks.c **** 		{
1347:..\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:..\Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:..\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1090              		.loc 1 1349 0
 1091 000c 7B68     		ldr	r3, [r7, #4]
 1092 000e 002B     		cmp	r3, #0
 1093 0010 02D1     		bne	.L66
 1094              		.loc 1 1349 0 is_stmt 0 discriminator 1
 1095 0012 074B     		ldr	r3, .L69
 1096 0014 1B68     		ldr	r3, [r3]
 1097 0016 00E0     		b	.L67
 1098              	.L66:
 1099              		.loc 1 1349 0 discriminator 2
 1100 0018 7B68     		ldr	r3, [r7, #4]
 1101              	.L67:
 1102              		.loc 1 1349 0 discriminator 4
 1103 001a FB60     		str	r3, [r7, #12]
1350:..\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1104              		.loc 1 1350 0 is_stmt 1 discriminator 4
 1105 001c FB68     		ldr	r3, [r7, #12]
 1106 001e DB6A     		ldr	r3, [r3, #44]
 1107 0020 BB60     		str	r3, [r7, #8]
1351:..\Source/tasks.c **** 		}
1352:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 1108              		.loc 1 1352 0 discriminator 4
 1109 0022 FFF7FEFF 		bl	vPortExitCritical
1353:..\Source/tasks.c **** 
1354:..\Source/tasks.c **** 		return uxReturn;
 1110              		.loc 1 1354 0 discriminator 4
 1111 0026 BB68     		ldr	r3, [r7, #8]
1355:..\Source/tasks.c **** 	}
 1112              		.loc 1 1355 0 discriminator 4
 1113 0028 1846     		mov	r0, r3
 1114 002a 1037     		adds	r7, r7, #16
 1115              		.cfi_def_cfa_offset 8
 1116 002c BD46     		mov	sp, r7
 1117              		.cfi_def_cfa_register 13
 1118              		@ sp needed
 1119 002e 80BD     		pop	{r7, pc}
 1120              	.L70:
 1121              		.align	2
 1122              	.L69:
 1123 0030 00000000 		.word	pxCurrentTCB
 1124              		.cfi_endproc
 1125              	.LFE75:
 1126              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1127              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 45


 1128              		.align	2
 1129              		.global	uxTaskPriorityGetFromISR
 1130              		.thumb
 1131              		.thumb_func
 1132              		.type	uxTaskPriorityGetFromISR, %function
 1133              	uxTaskPriorityGetFromISR:
 1134              	.LFB76:
1356:..\Source/tasks.c **** 
1357:..\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1359:..\Source/tasks.c **** 
1360:..\Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:..\Source/tasks.c **** 
1362:..\Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:..\Source/tasks.c **** 	{
 1135              		.loc 1 1363 0
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 32
 1138              		@ frame_needed = 1, uses_anonymous_args = 0
 1139              		@ link register save eliminated.
 1140 0000 80B4     		push	{r7}
 1141              		.cfi_def_cfa_offset 4
 1142              		.cfi_offset 7, -4
 1143 0002 89B0     		sub	sp, sp, #36
 1144              		.cfi_def_cfa_offset 40
 1145 0004 00AF     		add	r7, sp, #0
 1146              		.cfi_def_cfa_register 7
 1147 0006 7860     		str	r0, [r7, #4]
 1148              	.LBB29:
 1149              	.LBB30:
 1150              		.file 2 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     All rights reserved
   4:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   5:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   7:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   9:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  13:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  14:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  19:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  20:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  25:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  26:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 46


  27:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
  32:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
  37:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  38:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  39:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  43:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     participating in the support forum.
  46:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  47:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  52:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  56:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  63:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  67:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:..\Source\portable\GCC\ARM_CM3/portmacro.h **** */
  69:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  70:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  71:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  74:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  76:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  77:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  81:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 47


  84:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  87:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  88:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  89:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  90:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  93:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  94:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  97:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 101:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
 105:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 112:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 114:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 120:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
 123:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
 126:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 131:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 132:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
 139:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 48


 141:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 148:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 150:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:..\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:..\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 157:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 162:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 164:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 171:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 174:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 178:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 179:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 180:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 184:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 185:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 193:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 197:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 49


 198:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 201:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 202:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 204:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 210:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 213:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:..\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 216:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 219:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 221:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 223:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 224:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 225:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 227:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 228:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 229:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 230:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 231:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 233:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 235:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 237:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 238:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 239:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 245:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 246:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 247:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 249:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 251:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 253:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1151              		.loc 2 253 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 50


 1152              		.syntax unified
 1153              	@ 253 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1154 0008 EFF31182 			mrs r2, basepri											
 1155 000c 4FF0A003 		mov r3, #160												
 1156 0010 83F31188 		msr basepri, r3											
 1157 0014 BFF36F8F 		isb														
 1158 0018 BFF34F8F 		dsb														
 1159              	
 1160              	@ 0 "" 2
 1161              		.thumb
 1162              		.syntax unified
 1163 001c FA60     		str	r2, [r7, #12]
 1164 001e BB60     		str	r3, [r7, #8]
 254:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 255:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 262:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 263:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 265:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1165              		.loc 2 265 0
 1166 0020 FB68     		ldr	r3, [r7, #12]
 1167              	.LBE30:
 1168              	.LBE29:
1364:..\Source/tasks.c **** 	TCB_t *pxTCB;
1365:..\Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:..\Source/tasks.c **** 
1367:..\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:..\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:..\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:..\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:..\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:..\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:..\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:..\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:..\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:..\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:..\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:..\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:..\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:..\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:..\Source/tasks.c **** 		provided on the following link:
1382:..\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:..\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:..\Source/tasks.c **** 
1385:..\Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1169              		.loc 1 1385 0
 1170 0022 BB61     		str	r3, [r7, #24]
1386:..\Source/tasks.c **** 		{
1387:..\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:..\Source/tasks.c **** 			task that is being queried. */
1389:..\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 51


 1171              		.loc 1 1389 0
 1172 0024 7B68     		ldr	r3, [r7, #4]
 1173 0026 002B     		cmp	r3, #0
 1174 0028 02D1     		bne	.L73
 1175              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1176 002a 094B     		ldr	r3, .L76
 1177 002c 1B68     		ldr	r3, [r3]
 1178 002e 00E0     		b	.L74
 1179              	.L73:
 1180              		.loc 1 1389 0 discriminator 2
 1181 0030 7B68     		ldr	r3, [r7, #4]
 1182              	.L74:
 1183              		.loc 1 1389 0 discriminator 4
 1184 0032 7B61     		str	r3, [r7, #20]
1390:..\Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1185              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1186 0034 7B69     		ldr	r3, [r7, #20]
 1187 0036 DB6A     		ldr	r3, [r3, #44]
 1188 0038 3B61     		str	r3, [r7, #16]
 1189 003a BB69     		ldr	r3, [r7, #24]
 1190 003c FB61     		str	r3, [r7, #28]
 1191              	.LBB31:
 1192              	.LBB32:
 266:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 267:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 269:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 271:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1193              		.loc 2 271 0 discriminator 4
 1194 003e FB69     		ldr	r3, [r7, #28]
 1195              		.syntax unified
 1196              	@ 271 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1197 0040 83F31188 			msr basepri, r3	
 1198              	@ 0 "" 2
 1199              		.thumb
 1200              		.syntax unified
 1201              	.LBE32:
 1202              	.LBE31:
1391:..\Source/tasks.c **** 		}
1392:..\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:..\Source/tasks.c **** 
1394:..\Source/tasks.c **** 		return uxReturn;
 1203              		.loc 1 1394 0 discriminator 4
 1204 0044 3B69     		ldr	r3, [r7, #16]
1395:..\Source/tasks.c **** 	}
 1205              		.loc 1 1395 0 discriminator 4
 1206 0046 1846     		mov	r0, r3
 1207 0048 2437     		adds	r7, r7, #36
 1208              		.cfi_def_cfa_offset 4
 1209 004a BD46     		mov	sp, r7
 1210              		.cfi_def_cfa_register 13
 1211              		@ sp needed
 1212 004c 80BC     		pop	{r7}
 1213              		.cfi_restore 7
 1214              		.cfi_def_cfa_offset 0
 1215 004e 7047     		bx	lr
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 52


 1216              	.L77:
 1217              		.align	2
 1218              	.L76:
 1219 0050 00000000 		.word	pxCurrentTCB
 1220              		.cfi_endproc
 1221              	.LFE76:
 1222              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1223              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1224              		.align	2
 1225              		.global	vTaskPrioritySet
 1226              		.thumb
 1227              		.thumb_func
 1228              		.type	vTaskPrioritySet, %function
 1229              	vTaskPrioritySet:
 1230              	.LFB77:
1396:..\Source/tasks.c **** 
1397:..\Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1399:..\Source/tasks.c **** 
1400:..\Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:..\Source/tasks.c **** 
1402:..\Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:..\Source/tasks.c **** 	{
 1231              		.loc 1 1403 0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 24
 1234              		@ frame_needed = 1, uses_anonymous_args = 0
 1235 0000 80B5     		push	{r7, lr}
 1236              		.cfi_def_cfa_offset 8
 1237              		.cfi_offset 7, -8
 1238              		.cfi_offset 14, -4
 1239 0002 86B0     		sub	sp, sp, #24
 1240              		.cfi_def_cfa_offset 32
 1241 0004 00AF     		add	r7, sp, #0
 1242              		.cfi_def_cfa_register 7
 1243 0006 7860     		str	r0, [r7, #4]
 1244 0008 3960     		str	r1, [r7]
1404:..\Source/tasks.c **** 	TCB_t *pxTCB;
1405:..\Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:..\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1245              		.loc 1 1406 0
 1246 000a 0023     		movs	r3, #0
 1247 000c 7B61     		str	r3, [r7, #20]
1407:..\Source/tasks.c **** 
1408:..\Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:..\Source/tasks.c **** 
1410:..\Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:..\Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1248              		.loc 1 1411 0
 1249 000e 3B68     		ldr	r3, [r7]
 1250 0010 042B     		cmp	r3, #4
 1251 0012 01D9     		bls	.L79
1412:..\Source/tasks.c **** 		{
1413:..\Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1252              		.loc 1 1413 0
 1253 0014 0423     		movs	r3, #4
 1254 0016 3B60     		str	r3, [r7]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 53


 1255              	.L79:
1414:..\Source/tasks.c **** 		}
1415:..\Source/tasks.c **** 		else
1416:..\Source/tasks.c **** 		{
1417:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:..\Source/tasks.c **** 		}
1419:..\Source/tasks.c **** 
1420:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 1256              		.loc 1 1420 0
 1257 0018 FFF7FEFF 		bl	vPortEnterCritical
1421:..\Source/tasks.c **** 		{
1422:..\Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:..\Source/tasks.c **** 			task that is being changed. */
1424:..\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1258              		.loc 1 1424 0
 1259 001c 7B68     		ldr	r3, [r7, #4]
 1260 001e 002B     		cmp	r3, #0
 1261 0020 02D1     		bne	.L80
 1262              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1263 0022 4F4B     		ldr	r3, .L91
 1264 0024 1B68     		ldr	r3, [r3]
 1265 0026 00E0     		b	.L81
 1266              	.L80:
 1267              		.loc 1 1424 0 discriminator 2
 1268 0028 7B68     		ldr	r3, [r7, #4]
 1269              	.L81:
 1270              		.loc 1 1424 0 discriminator 4
 1271 002a 3B61     		str	r3, [r7, #16]
1425:..\Source/tasks.c **** 
1426:..\Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 1272              		.loc 1 1426 0 is_stmt 1 discriminator 4
 1273 002c 3B69     		ldr	r3, [r7, #16]
 1274 002e 5B6C     		ldr	r3, [r3, #68]
 1275 0030 DBB2     		uxtb	r3, r3
 1276 0032 3A68     		ldr	r2, [r7]
 1277 0034 D2B2     		uxtb	r2, r2
 1278 0036 1946     		mov	r1, r3
 1279 0038 2820     		movs	r0, #40
 1280 003a FFF7FEFF 		bl	packPayload2
1427:..\Source/tasks.c **** 
1428:..\Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:..\Source/tasks.c **** 			{
1430:..\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1281              		.loc 1 1430 0 discriminator 4
 1282 003e 3B69     		ldr	r3, [r7, #16]
 1283 0040 9B6C     		ldr	r3, [r3, #72]
 1284 0042 FB60     		str	r3, [r7, #12]
1431:..\Source/tasks.c **** 			}
1432:..\Source/tasks.c **** 			#else
1433:..\Source/tasks.c **** 			{
1434:..\Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:..\Source/tasks.c **** 			}
1436:..\Source/tasks.c **** 			#endif
1437:..\Source/tasks.c **** 
1438:..\Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1285              		.loc 1 1438 0 discriminator 4
 1286 0044 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 54


 1287 0046 3B68     		ldr	r3, [r7]
 1288 0048 9A42     		cmp	r2, r3
 1289 004a 00F08380 		beq	.L82
1439:..\Source/tasks.c **** 			{
1440:..\Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:..\Source/tasks.c **** 				priority than the calling task. */
1442:..\Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1290              		.loc 1 1442 0
 1291 004e 3A68     		ldr	r2, [r7]
 1292 0050 FB68     		ldr	r3, [r7, #12]
 1293 0052 9A42     		cmp	r2, r3
 1294 0054 0DD9     		bls	.L83
1443:..\Source/tasks.c **** 				{
1444:..\Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1295              		.loc 1 1444 0
 1296 0056 424B     		ldr	r3, .L91
 1297 0058 1B68     		ldr	r3, [r3]
 1298 005a 3A69     		ldr	r2, [r7, #16]
 1299 005c 9A42     		cmp	r2, r3
 1300 005e 0FD0     		beq	.L84
1445:..\Source/tasks.c **** 					{
1446:..\Source/tasks.c **** 						/* The priority of a task other than the currently
1447:..\Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:..\Source/tasks.c **** 						raised above that of the running task? */
1449:..\Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1301              		.loc 1 1449 0
 1302 0060 3F4B     		ldr	r3, .L91
 1303 0062 1B68     		ldr	r3, [r3]
 1304 0064 DA6A     		ldr	r2, [r3, #44]
 1305 0066 3B68     		ldr	r3, [r7]
 1306 0068 9A42     		cmp	r2, r3
 1307 006a 09D8     		bhi	.L84
1450:..\Source/tasks.c **** 						{
1451:..\Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1308              		.loc 1 1451 0
 1309 006c 0123     		movs	r3, #1
 1310 006e 7B61     		str	r3, [r7, #20]
 1311 0070 06E0     		b	.L84
 1312              	.L83:
1452:..\Source/tasks.c **** 						}
1453:..\Source/tasks.c **** 						else
1454:..\Source/tasks.c **** 						{
1455:..\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:..\Source/tasks.c **** 						}
1457:..\Source/tasks.c **** 					}
1458:..\Source/tasks.c **** 					else
1459:..\Source/tasks.c **** 					{
1460:..\Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:..\Source/tasks.c **** 						but the running task must already be the highest
1462:..\Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:..\Source/tasks.c **** 					}
1464:..\Source/tasks.c **** 				}
1465:..\Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1313              		.loc 1 1465 0
 1314 0072 3B4B     		ldr	r3, .L91
 1315 0074 1B68     		ldr	r3, [r3]
 1316 0076 3A69     		ldr	r2, [r7, #16]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 55


 1317 0078 9A42     		cmp	r2, r3
 1318 007a 01D1     		bne	.L84
1466:..\Source/tasks.c **** 				{
1467:..\Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:..\Source/tasks.c **** 					there may now be another task of higher priority that
1469:..\Source/tasks.c **** 					is ready to execute. */
1470:..\Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1319              		.loc 1 1470 0
 1320 007c 0123     		movs	r3, #1
 1321 007e 7B61     		str	r3, [r7, #20]
 1322              	.L84:
1471:..\Source/tasks.c **** 				}
1472:..\Source/tasks.c **** 				else
1473:..\Source/tasks.c **** 				{
1474:..\Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:..\Source/tasks.c **** 					require a yield as the running task must be above the
1476:..\Source/tasks.c **** 					new priority of the task being modified. */
1477:..\Source/tasks.c **** 				}
1478:..\Source/tasks.c **** 
1479:..\Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:..\Source/tasks.c **** 				before its uxPriority member is changed so the
1481:..\Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:..\Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1323              		.loc 1 1482 0
 1324 0080 3B69     		ldr	r3, [r7, #16]
 1325 0082 DB6A     		ldr	r3, [r3, #44]
 1326 0084 BB60     		str	r3, [r7, #8]
1483:..\Source/tasks.c **** 
1484:..\Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:..\Source/tasks.c **** 				{
1486:..\Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:..\Source/tasks.c **** 					currently using an inherited priority. */
1488:..\Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1327              		.loc 1 1488 0
 1328 0086 3B69     		ldr	r3, [r7, #16]
 1329 0088 9A6C     		ldr	r2, [r3, #72]
 1330 008a 3B69     		ldr	r3, [r7, #16]
 1331 008c DB6A     		ldr	r3, [r3, #44]
 1332 008e 9A42     		cmp	r2, r3
 1333 0090 02D1     		bne	.L85
1489:..\Source/tasks.c **** 					{
1490:..\Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1334              		.loc 1 1490 0
 1335 0092 3B69     		ldr	r3, [r7, #16]
 1336 0094 3A68     		ldr	r2, [r7]
 1337 0096 DA62     		str	r2, [r3, #44]
 1338              	.L85:
1491:..\Source/tasks.c **** 					}
1492:..\Source/tasks.c **** 					else
1493:..\Source/tasks.c **** 					{
1494:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:..\Source/tasks.c **** 					}
1496:..\Source/tasks.c **** 
1497:..\Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:..\Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1339              		.loc 1 1498 0
 1340 0098 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 56


 1341 009a 3A68     		ldr	r2, [r7]
 1342 009c 9A64     		str	r2, [r3, #72]
1499:..\Source/tasks.c **** 				}
1500:..\Source/tasks.c **** 				#else
1501:..\Source/tasks.c **** 				{
1502:..\Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:..\Source/tasks.c **** 				}
1504:..\Source/tasks.c **** 				#endif
1505:..\Source/tasks.c **** 
1506:..\Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:..\Source/tasks.c **** 				being used for anything else. */
1508:..\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1343              		.loc 1 1508 0
 1344 009e 3B69     		ldr	r3, [r7, #16]
 1345 00a0 9B69     		ldr	r3, [r3, #24]
 1346 00a2 002B     		cmp	r3, #0
 1347 00a4 04DB     		blt	.L86
1509:..\Source/tasks.c **** 				{
1510:..\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1348              		.loc 1 1510 0
 1349 00a6 3B68     		ldr	r3, [r7]
 1350 00a8 C3F10502 		rsb	r2, r3, #5
 1351 00ac 3B69     		ldr	r3, [r7, #16]
 1352 00ae 9A61     		str	r2, [r3, #24]
 1353              	.L86:
1511:..\Source/tasks.c **** 				}
1512:..\Source/tasks.c **** 				else
1513:..\Source/tasks.c **** 				{
1514:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:..\Source/tasks.c **** 				}
1516:..\Source/tasks.c **** 
1517:..\Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:..\Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:..\Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:..\Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:..\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1354              		.loc 1 1521 0
 1355 00b0 3B69     		ldr	r3, [r7, #16]
 1356 00b2 5969     		ldr	r1, [r3, #20]
 1357 00b4 BA68     		ldr	r2, [r7, #8]
 1358 00b6 1346     		mov	r3, r2
 1359 00b8 9B00     		lsls	r3, r3, #2
 1360 00ba 1344     		add	r3, r3, r2
 1361 00bc 9B00     		lsls	r3, r3, #2
 1362 00be 294A     		ldr	r2, .L91+4
 1363 00c0 1344     		add	r3, r3, r2
 1364 00c2 9942     		cmp	r1, r3
 1365 00c4 01D1     		bne	.L87
 1366              		.loc 1 1521 0 is_stmt 0 discriminator 1
 1367 00c6 0123     		movs	r3, #1
 1368 00c8 00E0     		b	.L88
 1369              	.L87:
 1370              		.loc 1 1521 0 discriminator 2
 1371 00ca 0023     		movs	r3, #0
 1372              	.L88:
 1373              		.loc 1 1521 0 discriminator 4
 1374 00cc 002B     		cmp	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 57


 1375 00ce 36D0     		beq	.L89
1522:..\Source/tasks.c **** 				{
1523:..\Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:..\Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:..\Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:..\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1376              		.loc 1 1526 0 is_stmt 1
 1377 00d0 3B69     		ldr	r3, [r7, #16]
 1378 00d2 0433     		adds	r3, r3, #4
 1379 00d4 1846     		mov	r0, r3
 1380 00d6 FFF7FEFF 		bl	uxListRemove
 1381 00da 0346     		mov	r3, r0
 1382 00dc 002B     		cmp	r3, #0
 1383 00de 09D1     		bne	.L90
1527:..\Source/tasks.c **** 					{
1528:..\Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:..\Source/tasks.c **** 						there is no need to check again and the port level
1530:..\Source/tasks.c **** 						reset macro can be called directly. */
1531:..\Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1384              		.loc 1 1531 0
 1385 00e0 0122     		movs	r2, #1
 1386 00e2 BB68     		ldr	r3, [r7, #8]
 1387 00e4 02FA03F3 		lsl	r3, r2, r3
 1388 00e8 DA43     		mvns	r2, r3
 1389 00ea 1F4B     		ldr	r3, .L91+8
 1390 00ec 1B68     		ldr	r3, [r3]
 1391 00ee 1340     		ands	r3, r3, r2
 1392 00f0 1D4A     		ldr	r2, .L91+8
 1393 00f2 1360     		str	r3, [r2]
 1394              	.L90:
1532:..\Source/tasks.c **** 					}
1533:..\Source/tasks.c **** 					else
1534:..\Source/tasks.c **** 					{
1535:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:..\Source/tasks.c **** 					}
1537:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1395              		.loc 1 1537 0
 1396 00f4 3B69     		ldr	r3, [r7, #16]
 1397 00f6 5B6C     		ldr	r3, [r3, #68]
 1398 00f8 DBB2     		uxtb	r3, r3
 1399 00fa 1946     		mov	r1, r3
 1400 00fc 0B20     		movs	r0, #11
 1401 00fe FFF7FEFF 		bl	packPayload1
 1402 0102 3B69     		ldr	r3, [r7, #16]
 1403 0104 DB6A     		ldr	r3, [r3, #44]
 1404 0106 0122     		movs	r2, #1
 1405 0108 9A40     		lsls	r2, r2, r3
 1406 010a 174B     		ldr	r3, .L91+8
 1407 010c 1B68     		ldr	r3, [r3]
 1408 010e 1343     		orrs	r3, r3, r2
 1409 0110 154A     		ldr	r2, .L91+8
 1410 0112 1360     		str	r3, [r2]
 1411 0114 3B69     		ldr	r3, [r7, #16]
 1412 0116 DA6A     		ldr	r2, [r3, #44]
 1413 0118 1346     		mov	r3, r2
 1414 011a 9B00     		lsls	r3, r3, #2
 1415 011c 1344     		add	r3, r3, r2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 58


 1416 011e 9B00     		lsls	r3, r3, #2
 1417 0120 104A     		ldr	r2, .L91+4
 1418 0122 1A44     		add	r2, r2, r3
 1419 0124 3B69     		ldr	r3, [r7, #16]
 1420 0126 0433     		adds	r3, r3, #4
 1421 0128 1946     		mov	r1, r3
 1422 012a 1046     		mov	r0, r2
 1423 012c FFF7FEFF 		bl	vListInsertEnd
 1424 0130 3B69     		ldr	r3, [r7, #16]
 1425 0132 5B6C     		ldr	r3, [r3, #68]
 1426 0134 DBB2     		uxtb	r3, r3
 1427 0136 1946     		mov	r1, r3
 1428 0138 0C20     		movs	r0, #12
 1429 013a FFF7FEFF 		bl	packPayload1
 1430              	.L89:
1538:..\Source/tasks.c **** 				}
1539:..\Source/tasks.c **** 				else
1540:..\Source/tasks.c **** 				{
1541:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:..\Source/tasks.c **** 				}
1543:..\Source/tasks.c **** 
1544:..\Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1431              		.loc 1 1544 0
 1432 013e 7B69     		ldr	r3, [r7, #20]
 1433 0140 002B     		cmp	r3, #0
 1434 0142 07D0     		beq	.L82
1545:..\Source/tasks.c **** 				{
1546:..\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1435              		.loc 1 1546 0
 1436 0144 094B     		ldr	r3, .L91+12
 1437 0146 4FF08052 		mov	r2, #268435456
 1438 014a 1A60     		str	r2, [r3]
 1439              		.syntax unified
 1440              	@ 1546 "..\Source\tasks.c" 1
 1441 014c BFF34F8F 		dsb
 1442              	@ 0 "" 2
 1443              	@ 1546 "..\Source\tasks.c" 1
 1444 0150 BFF36F8F 		isb
 1445              	@ 0 "" 2
 1446              		.thumb
 1447              		.syntax unified
 1448              	.L82:
1547:..\Source/tasks.c **** 				}
1548:..\Source/tasks.c **** 				else
1549:..\Source/tasks.c **** 				{
1550:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:..\Source/tasks.c **** 				}
1552:..\Source/tasks.c **** 
1553:..\Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:..\Source/tasks.c **** 				optimised task selection is not being used. */
1555:..\Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:..\Source/tasks.c **** 			}
1557:..\Source/tasks.c **** 		}
1558:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 1449              		.loc 1 1558 0
 1450 0154 FFF7FEFF 		bl	vPortExitCritical
1559:..\Source/tasks.c **** 	}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 59


 1451              		.loc 1 1559 0
 1452 0158 00BF     		nop
 1453 015a 1837     		adds	r7, r7, #24
 1454              		.cfi_def_cfa_offset 8
 1455 015c BD46     		mov	sp, r7
 1456              		.cfi_def_cfa_register 13
 1457              		@ sp needed
 1458 015e 80BD     		pop	{r7, pc}
 1459              	.L92:
 1460              		.align	2
 1461              	.L91:
 1462 0160 00000000 		.word	pxCurrentTCB
 1463 0164 04000000 		.word	pxReadyTasksLists
 1464 0168 E0000000 		.word	uxTopReadyPriority
 1465 016c 04ED00E0 		.word	-536810236
 1466              		.cfi_endproc
 1467              	.LFE77:
 1468              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1469              		.section	.text.vTaskSuspend,"ax",%progbits
 1470              		.align	2
 1471              		.global	vTaskSuspend
 1472              		.thumb
 1473              		.thumb_func
 1474              		.type	vTaskSuspend, %function
 1475              	vTaskSuspend:
 1476              	.LFB78:
1560:..\Source/tasks.c **** 
1561:..\Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1563:..\Source/tasks.c **** 
1564:..\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:..\Source/tasks.c **** 
1566:..\Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:..\Source/tasks.c **** 	{
 1477              		.loc 1 1567 0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 16
 1480              		@ frame_needed = 1, uses_anonymous_args = 0
 1481 0000 80B5     		push	{r7, lr}
 1482              		.cfi_def_cfa_offset 8
 1483              		.cfi_offset 7, -8
 1484              		.cfi_offset 14, -4
 1485 0002 84B0     		sub	sp, sp, #16
 1486              		.cfi_def_cfa_offset 24
 1487 0004 00AF     		add	r7, sp, #0
 1488              		.cfi_def_cfa_register 7
 1489 0006 7860     		str	r0, [r7, #4]
1568:..\Source/tasks.c **** 	TCB_t *pxTCB;
1569:..\Source/tasks.c **** 
1570:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 1490              		.loc 1 1570 0
 1491 0008 FFF7FEFF 		bl	vPortEnterCritical
1571:..\Source/tasks.c **** 		{
1572:..\Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:..\Source/tasks.c **** 			being suspended. */
1574:..\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1492              		.loc 1 1574 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 60


 1493 000c 7B68     		ldr	r3, [r7, #4]
 1494 000e 002B     		cmp	r3, #0
 1495 0010 02D1     		bne	.L94
 1496              		.loc 1 1574 0 is_stmt 0 discriminator 1
 1497 0012 334B     		ldr	r3, .L105
 1498 0014 1B68     		ldr	r3, [r3]
 1499 0016 00E0     		b	.L95
 1500              	.L94:
 1501              		.loc 1 1574 0 discriminator 2
 1502 0018 7B68     		ldr	r3, [r7, #4]
 1503              	.L95:
 1504              		.loc 1 1574 0 discriminator 4
 1505 001a FB60     		str	r3, [r7, #12]
1575:..\Source/tasks.c **** 
1576:..\Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 1506              		.loc 1 1576 0 is_stmt 1 discriminator 4
 1507 001c FB68     		ldr	r3, [r7, #12]
 1508 001e 5B6C     		ldr	r3, [r3, #68]
 1509 0020 DBB2     		uxtb	r3, r3
 1510 0022 1946     		mov	r1, r3
 1511 0024 2920     		movs	r0, #41
 1512 0026 FFF7FEFF 		bl	packPayload1
1577:..\Source/tasks.c **** 
1578:..\Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:..\Source/tasks.c **** 			suspended list. */
1580:..\Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1513              		.loc 1 1580 0 discriminator 4
 1514 002a FB68     		ldr	r3, [r7, #12]
 1515 002c 0433     		adds	r3, r3, #4
 1516 002e 1846     		mov	r0, r3
 1517 0030 FFF7FEFF 		bl	uxListRemove
 1518 0034 0346     		mov	r3, r0
 1519 0036 002B     		cmp	r3, #0
 1520 0038 15D1     		bne	.L96
1581:..\Source/tasks.c **** 			{
1582:..\Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1521              		.loc 1 1582 0
 1522 003a FB68     		ldr	r3, [r7, #12]
 1523 003c DA6A     		ldr	r2, [r3, #44]
 1524 003e 2949     		ldr	r1, .L105+4
 1525 0040 1346     		mov	r3, r2
 1526 0042 9B00     		lsls	r3, r3, #2
 1527 0044 1344     		add	r3, r3, r2
 1528 0046 9B00     		lsls	r3, r3, #2
 1529 0048 0B44     		add	r3, r3, r1
 1530 004a 1B68     		ldr	r3, [r3]
 1531 004c 002B     		cmp	r3, #0
 1532 004e 0AD1     		bne	.L96
 1533              		.loc 1 1582 0 is_stmt 0 discriminator 1
 1534 0050 FB68     		ldr	r3, [r7, #12]
 1535 0052 DB6A     		ldr	r3, [r3, #44]
 1536 0054 0122     		movs	r2, #1
 1537 0056 02FA03F3 		lsl	r3, r2, r3
 1538 005a DA43     		mvns	r2, r3
 1539 005c 224B     		ldr	r3, .L105+8
 1540 005e 1B68     		ldr	r3, [r3]
 1541 0060 1340     		ands	r3, r3, r2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 61


 1542 0062 214A     		ldr	r2, .L105+8
 1543 0064 1360     		str	r3, [r2]
 1544              	.L96:
1583:..\Source/tasks.c **** 			}
1584:..\Source/tasks.c **** 			else
1585:..\Source/tasks.c **** 			{
1586:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:..\Source/tasks.c **** 			}
1588:..\Source/tasks.c **** 
1589:..\Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:..\Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1545              		.loc 1 1590 0 is_stmt 1
 1546 0066 FB68     		ldr	r3, [r7, #12]
 1547 0068 9B6A     		ldr	r3, [r3, #40]
 1548 006a 002B     		cmp	r3, #0
 1549 006c 04D0     		beq	.L98
1591:..\Source/tasks.c **** 			{
1592:..\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1550              		.loc 1 1592 0
 1551 006e FB68     		ldr	r3, [r7, #12]
 1552 0070 1833     		adds	r3, r3, #24
 1553 0072 1846     		mov	r0, r3
 1554 0074 FFF7FEFF 		bl	uxListRemove
 1555              	.L98:
1593:..\Source/tasks.c **** 			}
1594:..\Source/tasks.c **** 			else
1595:..\Source/tasks.c **** 			{
1596:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:..\Source/tasks.c **** 			}
1598:..\Source/tasks.c **** 
1599:..\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1556              		.loc 1 1599 0
 1557 0078 FB68     		ldr	r3, [r7, #12]
 1558 007a 0433     		adds	r3, r3, #4
 1559 007c 1946     		mov	r1, r3
 1560 007e 1B48     		ldr	r0, .L105+12
 1561 0080 FFF7FEFF 		bl	vListInsertEnd
1600:..\Source/tasks.c **** 		}
1601:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 1562              		.loc 1 1601 0
 1563 0084 FFF7FEFF 		bl	vPortExitCritical
1602:..\Source/tasks.c **** 
1603:..\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1564              		.loc 1 1603 0
 1565 0088 194B     		ldr	r3, .L105+16
 1566 008a 1B68     		ldr	r3, [r3]
 1567 008c 002B     		cmp	r3, #0
 1568 008e 05D0     		beq	.L99
1604:..\Source/tasks.c **** 		{
1605:..\Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:..\Source/tasks.c **** 			task that is now in the Suspended state. */
1607:..\Source/tasks.c **** 			taskENTER_CRITICAL();
 1569              		.loc 1 1607 0
 1570 0090 FFF7FEFF 		bl	vPortEnterCritical
1608:..\Source/tasks.c **** 			{
1609:..\Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1571              		.loc 1 1609 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 62


 1572 0094 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1610:..\Source/tasks.c **** 			}
1611:..\Source/tasks.c **** 			taskEXIT_CRITICAL();
 1573              		.loc 1 1611 0
 1574 0098 FFF7FEFF 		bl	vPortExitCritical
 1575              	.L99:
1612:..\Source/tasks.c **** 		}
1613:..\Source/tasks.c **** 		else
1614:..\Source/tasks.c **** 		{
1615:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:..\Source/tasks.c **** 		}
1617:..\Source/tasks.c **** 
1618:..\Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1576              		.loc 1 1618 0
 1577 009c 104B     		ldr	r3, .L105
 1578 009e 1B68     		ldr	r3, [r3]
 1579 00a0 FA68     		ldr	r2, [r7, #12]
 1580 00a2 9A42     		cmp	r2, r3
 1581 00a4 18D1     		bne	.L104
1619:..\Source/tasks.c **** 		{
1620:..\Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1582              		.loc 1 1620 0
 1583 00a6 124B     		ldr	r3, .L105+16
 1584 00a8 1B68     		ldr	r3, [r3]
 1585 00aa 002B     		cmp	r3, #0
 1586 00ac 08D0     		beq	.L101
1621:..\Source/tasks.c **** 			{
1622:..\Source/tasks.c **** 				/* The current task has just been suspended. */
1623:..\Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:..\Source/tasks.c **** 				portYIELD_WITHIN_API();
 1587              		.loc 1 1624 0
 1588 00ae 114B     		ldr	r3, .L105+20
 1589 00b0 4FF08052 		mov	r2, #268435456
 1590 00b4 1A60     		str	r2, [r3]
 1591              		.syntax unified
 1592              	@ 1624 "..\Source\tasks.c" 1
 1593 00b6 BFF34F8F 		dsb
 1594              	@ 0 "" 2
 1595              	@ 1624 "..\Source\tasks.c" 1
 1596 00ba BFF36F8F 		isb
 1597              	@ 0 "" 2
1625:..\Source/tasks.c **** 			}
1626:..\Source/tasks.c **** 			else
1627:..\Source/tasks.c **** 			{
1628:..\Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:..\Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:..\Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:..\Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:..\Source/tasks.c **** 				{
1633:..\Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:..\Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:..\Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:..\Source/tasks.c **** 					is. */
1637:..\Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:..\Source/tasks.c **** 				}
1639:..\Source/tasks.c **** 				else
1640:..\Source/tasks.c **** 				{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 63


1641:..\Source/tasks.c **** 					vTaskSwitchContext();
1642:..\Source/tasks.c **** 				}
1643:..\Source/tasks.c **** 			}
1644:..\Source/tasks.c **** 		}
1645:..\Source/tasks.c **** 		else
1646:..\Source/tasks.c **** 		{
1647:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:..\Source/tasks.c **** 		}
1649:..\Source/tasks.c **** 	}
 1598              		.loc 1 1649 0
 1599              		.thumb
 1600              		.syntax unified
 1601 00be 0BE0     		b	.L104
 1602              	.L101:
1631:..\Source/tasks.c **** 				{
 1603              		.loc 1 1631 0
 1604 00c0 0A4B     		ldr	r3, .L105+12
 1605 00c2 1A68     		ldr	r2, [r3]
 1606 00c4 0C4B     		ldr	r3, .L105+24
 1607 00c6 1B68     		ldr	r3, [r3]
 1608 00c8 9A42     		cmp	r2, r3
 1609 00ca 03D1     		bne	.L103
1637:..\Source/tasks.c **** 				}
 1610              		.loc 1 1637 0
 1611 00cc 044B     		ldr	r3, .L105
 1612 00ce 0022     		movs	r2, #0
 1613 00d0 1A60     		str	r2, [r3]
 1614              		.loc 1 1649 0
 1615 00d2 01E0     		b	.L104
 1616              	.L103:
1641:..\Source/tasks.c **** 				}
 1617              		.loc 1 1641 0
 1618 00d4 FFF7FEFF 		bl	vTaskSwitchContext
 1619              	.L104:
 1620              		.loc 1 1649 0
 1621 00d8 00BF     		nop
 1622 00da 1037     		adds	r7, r7, #16
 1623              		.cfi_def_cfa_offset 8
 1624 00dc BD46     		mov	sp, r7
 1625              		.cfi_def_cfa_register 13
 1626              		@ sp needed
 1627 00de 80BD     		pop	{r7, pc}
 1628              	.L106:
 1629              		.align	2
 1630              	.L105:
 1631 00e0 00000000 		.word	pxCurrentTCB
 1632 00e4 04000000 		.word	pxReadyTasksLists
 1633 00e8 E0000000 		.word	uxTopReadyPriority
 1634 00ec C4000000 		.word	xSuspendedTaskList
 1635 00f0 E4000000 		.word	xSchedulerRunning
 1636 00f4 04ED00E0 		.word	-536810236
 1637 00f8 D8000000 		.word	uxCurrentNumberOfTasks
 1638              		.cfi_endproc
 1639              	.LFE78:
 1640              		.size	vTaskSuspend, .-vTaskSuspend
 1641              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1642              		.align	2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 64


 1643              		.thumb
 1644              		.thumb_func
 1645              		.type	prvTaskIsTaskSuspended, %function
 1646              	prvTaskIsTaskSuspended:
 1647              	.LFB79:
1650:..\Source/tasks.c **** 
1651:..\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1653:..\Source/tasks.c **** 
1654:..\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:..\Source/tasks.c **** 
1656:..\Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:..\Source/tasks.c **** 	{
 1648              		.loc 1 1657 0
 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 16
 1651              		@ frame_needed = 1, uses_anonymous_args = 0
 1652              		@ link register save eliminated.
 1653 0000 80B4     		push	{r7}
 1654              		.cfi_def_cfa_offset 4
 1655              		.cfi_offset 7, -4
 1656 0002 85B0     		sub	sp, sp, #20
 1657              		.cfi_def_cfa_offset 24
 1658 0004 00AF     		add	r7, sp, #0
 1659              		.cfi_def_cfa_register 7
 1660 0006 7860     		str	r0, [r7, #4]
1658:..\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1661              		.loc 1 1658 0
 1662 0008 0023     		movs	r3, #0
 1663 000a FB60     		str	r3, [r7, #12]
1659:..\Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1664              		.loc 1 1659 0
 1665 000c 7B68     		ldr	r3, [r7, #4]
 1666 000e BB60     		str	r3, [r7, #8]
1660:..\Source/tasks.c **** 
1661:..\Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:..\Source/tasks.c **** 		section. */
1663:..\Source/tasks.c **** 
1664:..\Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:..\Source/tasks.c **** 		configASSERT( xTask );
1666:..\Source/tasks.c **** 
1667:..\Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:..\Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1667              		.loc 1 1668 0
 1668 0010 BB68     		ldr	r3, [r7, #8]
 1669 0012 5B69     		ldr	r3, [r3, #20]
 1670 0014 0E4A     		ldr	r2, .L114
 1671 0016 9342     		cmp	r3, r2
 1672 0018 01D1     		bne	.L108
 1673              		.loc 1 1668 0 is_stmt 0 discriminator 1
 1674 001a 0123     		movs	r3, #1
 1675 001c 00E0     		b	.L109
 1676              	.L108:
 1677              		.loc 1 1668 0 discriminator 2
 1678 001e 0023     		movs	r3, #0
 1679              	.L109:
 1680              		.loc 1 1668 0 discriminator 4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 65


 1681 0020 002B     		cmp	r3, #0
 1682 0022 0FD0     		beq	.L110
1669:..\Source/tasks.c **** 		{
1670:..\Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:..\Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1683              		.loc 1 1671 0 is_stmt 1
 1684 0024 BB68     		ldr	r3, [r7, #8]
 1685 0026 9B6A     		ldr	r3, [r3, #40]
 1686 0028 0A4A     		ldr	r2, .L114+4
 1687 002a 9342     		cmp	r3, r2
 1688 002c 0AD0     		beq	.L110
1672:..\Source/tasks.c **** 			{
1673:..\Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:..\Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:..\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1689              		.loc 1 1675 0
 1690 002e BB68     		ldr	r3, [r7, #8]
 1691 0030 9B6A     		ldr	r3, [r3, #40]
 1692 0032 002B     		cmp	r3, #0
 1693 0034 01D1     		bne	.L111
 1694              		.loc 1 1675 0 is_stmt 0 discriminator 1
 1695 0036 0123     		movs	r3, #1
 1696 0038 00E0     		b	.L112
 1697              	.L111:
 1698              		.loc 1 1675 0 discriminator 2
 1699 003a 0023     		movs	r3, #0
 1700              	.L112:
 1701              		.loc 1 1675 0 discriminator 4
 1702 003c 002B     		cmp	r3, #0
 1703 003e 01D0     		beq	.L110
1676:..\Source/tasks.c **** 				{
1677:..\Source/tasks.c **** 					xReturn = pdTRUE;
 1704              		.loc 1 1677 0 is_stmt 1
 1705 0040 0123     		movs	r3, #1
 1706 0042 FB60     		str	r3, [r7, #12]
 1707              	.L110:
1678:..\Source/tasks.c **** 				}
1679:..\Source/tasks.c **** 				else
1680:..\Source/tasks.c **** 				{
1681:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:..\Source/tasks.c **** 				}
1683:..\Source/tasks.c **** 			}
1684:..\Source/tasks.c **** 			else
1685:..\Source/tasks.c **** 			{
1686:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:..\Source/tasks.c **** 			}
1688:..\Source/tasks.c **** 		}
1689:..\Source/tasks.c **** 		else
1690:..\Source/tasks.c **** 		{
1691:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:..\Source/tasks.c **** 		}
1693:..\Source/tasks.c **** 
1694:..\Source/tasks.c **** 		return xReturn;
 1708              		.loc 1 1694 0
 1709 0044 FB68     		ldr	r3, [r7, #12]
1695:..\Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1710              		.loc 1 1695 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 66


 1711 0046 1846     		mov	r0, r3
 1712 0048 1437     		adds	r7, r7, #20
 1713              		.cfi_def_cfa_offset 4
 1714 004a BD46     		mov	sp, r7
 1715              		.cfi_def_cfa_register 13
 1716              		@ sp needed
 1717 004c 80BC     		pop	{r7}
 1718              		.cfi_restore 7
 1719              		.cfi_def_cfa_offset 0
 1720 004e 7047     		bx	lr
 1721              	.L115:
 1722              		.align	2
 1723              	.L114:
 1724 0050 C4000000 		.word	xSuspendedTaskList
 1725 0054 98000000 		.word	xPendingReadyList
 1726              		.cfi_endproc
 1727              	.LFE79:
 1728              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1729              		.section	.text.vTaskResume,"ax",%progbits
 1730              		.align	2
 1731              		.global	vTaskResume
 1732              		.thumb
 1733              		.thumb_func
 1734              		.type	vTaskResume, %function
 1735              	vTaskResume:
 1736              	.LFB80:
1696:..\Source/tasks.c **** 
1697:..\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1699:..\Source/tasks.c **** 
1700:..\Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:..\Source/tasks.c **** 
1702:..\Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:..\Source/tasks.c **** 	{
 1737              		.loc 1 1703 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 16
 1740              		@ frame_needed = 1, uses_anonymous_args = 0
 1741 0000 80B5     		push	{r7, lr}
 1742              		.cfi_def_cfa_offset 8
 1743              		.cfi_offset 7, -8
 1744              		.cfi_offset 14, -4
 1745 0002 84B0     		sub	sp, sp, #16
 1746              		.cfi_def_cfa_offset 24
 1747 0004 00AF     		add	r7, sp, #0
 1748              		.cfi_def_cfa_register 7
 1749 0006 7860     		str	r0, [r7, #4]
1704:..\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1750              		.loc 1 1704 0
 1751 0008 7B68     		ldr	r3, [r7, #4]
 1752 000a FB60     		str	r3, [r7, #12]
1705:..\Source/tasks.c **** 
1706:..\Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:..\Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:..\Source/tasks.c **** 
1709:..\Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:..\Source/tasks.c **** 		currently executing task. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 67


1711:..\Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1753              		.loc 1 1711 0
 1754 000c FB68     		ldr	r3, [r7, #12]
 1755 000e 002B     		cmp	r3, #0
 1756 0010 4ED0     		beq	.L119
 1757              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1758 0012 294B     		ldr	r3, .L120
 1759 0014 1B68     		ldr	r3, [r3]
 1760 0016 FA68     		ldr	r2, [r7, #12]
 1761 0018 9A42     		cmp	r2, r3
 1762 001a 49D0     		beq	.L119
1712:..\Source/tasks.c **** 		{
1713:..\Source/tasks.c **** 			taskENTER_CRITICAL();
 1763              		.loc 1 1713 0 is_stmt 1
 1764 001c FFF7FEFF 		bl	vPortEnterCritical
1714:..\Source/tasks.c **** 			{
1715:..\Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1765              		.loc 1 1715 0
 1766 0020 F868     		ldr	r0, [r7, #12]
 1767 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1768 0026 0346     		mov	r3, r0
 1769 0028 002B     		cmp	r3, #0
 1770 002a 3FD0     		beq	.L118
1716:..\Source/tasks.c **** 				{
1717:..\Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
 1771              		.loc 1 1717 0
 1772 002c FB68     		ldr	r3, [r7, #12]
 1773 002e 5B6C     		ldr	r3, [r3, #68]
 1774 0030 DBB2     		uxtb	r3, r3
 1775 0032 1946     		mov	r1, r3
 1776 0034 2A20     		movs	r0, #42
 1777 0036 FFF7FEFF 		bl	packPayload1
1718:..\Source/tasks.c **** 
1719:..\Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:..\Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:..\Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1778              		.loc 1 1721 0
 1779 003a FB68     		ldr	r3, [r7, #12]
 1780 003c 0433     		adds	r3, r3, #4
 1781 003e 1846     		mov	r0, r3
 1782 0040 FFF7FEFF 		bl	uxListRemove
1722:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1783              		.loc 1 1722 0
 1784 0044 FB68     		ldr	r3, [r7, #12]
 1785 0046 5B6C     		ldr	r3, [r3, #68]
 1786 0048 DBB2     		uxtb	r3, r3
 1787 004a 1946     		mov	r1, r3
 1788 004c 0B20     		movs	r0, #11
 1789 004e FFF7FEFF 		bl	packPayload1
 1790 0052 FB68     		ldr	r3, [r7, #12]
 1791 0054 DB6A     		ldr	r3, [r3, #44]
 1792 0056 0122     		movs	r2, #1
 1793 0058 9A40     		lsls	r2, r2, r3
 1794 005a 184B     		ldr	r3, .L120+4
 1795 005c 1B68     		ldr	r3, [r3]
 1796 005e 1343     		orrs	r3, r3, r2
 1797 0060 164A     		ldr	r2, .L120+4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 68


 1798 0062 1360     		str	r3, [r2]
 1799 0064 FB68     		ldr	r3, [r7, #12]
 1800 0066 DA6A     		ldr	r2, [r3, #44]
 1801 0068 1346     		mov	r3, r2
 1802 006a 9B00     		lsls	r3, r3, #2
 1803 006c 1344     		add	r3, r3, r2
 1804 006e 9B00     		lsls	r3, r3, #2
 1805 0070 134A     		ldr	r2, .L120+8
 1806 0072 1A44     		add	r2, r2, r3
 1807 0074 FB68     		ldr	r3, [r7, #12]
 1808 0076 0433     		adds	r3, r3, #4
 1809 0078 1946     		mov	r1, r3
 1810 007a 1046     		mov	r0, r2
 1811 007c FFF7FEFF 		bl	vListInsertEnd
 1812 0080 FB68     		ldr	r3, [r7, #12]
 1813 0082 5B6C     		ldr	r3, [r3, #68]
 1814 0084 DBB2     		uxtb	r3, r3
 1815 0086 1946     		mov	r1, r3
 1816 0088 0C20     		movs	r0, #12
 1817 008a FFF7FEFF 		bl	packPayload1
1723:..\Source/tasks.c **** 
1724:..\Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:..\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1818              		.loc 1 1725 0
 1819 008e FB68     		ldr	r3, [r7, #12]
 1820 0090 DA6A     		ldr	r2, [r3, #44]
 1821 0092 094B     		ldr	r3, .L120
 1822 0094 1B68     		ldr	r3, [r3]
 1823 0096 DB6A     		ldr	r3, [r3, #44]
 1824 0098 9A42     		cmp	r2, r3
 1825 009a 07D3     		bcc	.L118
1726:..\Source/tasks.c **** 					{
1727:..\Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:..\Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:..\Source/tasks.c **** 						next yield. */
1730:..\Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1826              		.loc 1 1730 0
 1827 009c 094B     		ldr	r3, .L120+12
 1828 009e 4FF08052 		mov	r2, #268435456
 1829 00a2 1A60     		str	r2, [r3]
 1830              		.syntax unified
 1831              	@ 1730 "..\Source\tasks.c" 1
 1832 00a4 BFF34F8F 		dsb
 1833              	@ 0 "" 2
 1834              	@ 1730 "..\Source\tasks.c" 1
 1835 00a8 BFF36F8F 		isb
 1836              	@ 0 "" 2
 1837              		.thumb
 1838              		.syntax unified
 1839              	.L118:
1731:..\Source/tasks.c **** 					}
1732:..\Source/tasks.c **** 					else
1733:..\Source/tasks.c **** 					{
1734:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:..\Source/tasks.c **** 					}
1736:..\Source/tasks.c **** 				}
1737:..\Source/tasks.c **** 				else
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 69


1738:..\Source/tasks.c **** 				{
1739:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:..\Source/tasks.c **** 				}
1741:..\Source/tasks.c **** 			}
1742:..\Source/tasks.c **** 			taskEXIT_CRITICAL();
 1840              		.loc 1 1742 0
 1841 00ac FFF7FEFF 		bl	vPortExitCritical
 1842              	.L119:
1743:..\Source/tasks.c **** 		}
1744:..\Source/tasks.c **** 		else
1745:..\Source/tasks.c **** 		{
1746:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:..\Source/tasks.c **** 		}
1748:..\Source/tasks.c **** 	}
 1843              		.loc 1 1748 0
 1844 00b0 00BF     		nop
 1845 00b2 1037     		adds	r7, r7, #16
 1846              		.cfi_def_cfa_offset 8
 1847 00b4 BD46     		mov	sp, r7
 1848              		.cfi_def_cfa_register 13
 1849              		@ sp needed
 1850 00b6 80BD     		pop	{r7, pc}
 1851              	.L121:
 1852              		.align	2
 1853              	.L120:
 1854 00b8 00000000 		.word	pxCurrentTCB
 1855 00bc E0000000 		.word	uxTopReadyPriority
 1856 00c0 04000000 		.word	pxReadyTasksLists
 1857 00c4 04ED00E0 		.word	-536810236
 1858              		.cfi_endproc
 1859              	.LFE80:
 1860              		.size	vTaskResume, .-vTaskResume
 1861              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1862              		.align	2
 1863              		.global	xTaskResumeFromISR
 1864              		.thumb
 1865              		.thumb_func
 1866              		.type	xTaskResumeFromISR, %function
 1867              	xTaskResumeFromISR:
 1868              	.LFB81:
1749:..\Source/tasks.c **** 
1750:..\Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:..\Source/tasks.c **** 
1752:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1753:..\Source/tasks.c **** 
1754:..\Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:..\Source/tasks.c **** 
1756:..\Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:..\Source/tasks.c **** 	{
 1869              		.loc 1 1757 0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 32
 1872              		@ frame_needed = 1, uses_anonymous_args = 0
 1873 0000 80B5     		push	{r7, lr}
 1874              		.cfi_def_cfa_offset 8
 1875              		.cfi_offset 7, -8
 1876              		.cfi_offset 14, -4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 70


 1877 0002 88B0     		sub	sp, sp, #32
 1878              		.cfi_def_cfa_offset 40
 1879 0004 00AF     		add	r7, sp, #0
 1880              		.cfi_def_cfa_register 7
 1881 0006 7860     		str	r0, [r7, #4]
1758:..\Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1882              		.loc 1 1758 0
 1883 0008 0023     		movs	r3, #0
 1884 000a FB61     		str	r3, [r7, #28]
1759:..\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1885              		.loc 1 1759 0
 1886 000c 7B68     		ldr	r3, [r7, #4]
 1887 000e BB61     		str	r3, [r7, #24]
 1888              	.LBB33:
 1889              	.LBB34:
 253:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1890              		.loc 2 253 0
 1891              		.syntax unified
 1892              	@ 253 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1893 0010 EFF31182 			mrs r2, basepri											
 1894 0014 4FF0A003 		mov r3, #160												
 1895 0018 83F31188 		msr basepri, r3											
 1896 001c BFF36F8F 		isb														
 1897 0020 BFF34F8F 		dsb														
 1898              	
 1899              	@ 0 "" 2
 1900              		.thumb
 1901              		.syntax unified
 1902 0024 FA60     		str	r2, [r7, #12]
 1903 0026 BB60     		str	r3, [r7, #8]
 265:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1904              		.loc 2 265 0
 1905 0028 FB68     		ldr	r3, [r7, #12]
 1906              	.LBE34:
 1907              	.LBE33:
1760:..\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:..\Source/tasks.c **** 
1762:..\Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:..\Source/tasks.c **** 
1764:..\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:..\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:..\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:..\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:..\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:..\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:..\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:..\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:..\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:..\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:..\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:..\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:..\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:..\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:..\Source/tasks.c **** 		provided on the following link:
1779:..\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:..\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 71


1782:..\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1908              		.loc 1 1782 0
 1909 002a 3B61     		str	r3, [r7, #16]
1783:..\Source/tasks.c **** 		{
1784:..\Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1910              		.loc 1 1784 0
 1911 002c B869     		ldr	r0, [r7, #24]
 1912 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1913 0032 0346     		mov	r3, r0
 1914 0034 002B     		cmp	r3, #0
 1915 0036 44D0     		beq	.L124
1785:..\Source/tasks.c **** 			{
1786:..\Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
 1916              		.loc 1 1786 0
 1917 0038 BB69     		ldr	r3, [r7, #24]
 1918 003a 5B6C     		ldr	r3, [r3, #68]
 1919 003c DBB2     		uxtb	r3, r3
 1920 003e 1946     		mov	r1, r3
 1921 0040 2B20     		movs	r0, #43
 1922 0042 FFF7FEFF 		bl	packPayload1
1787:..\Source/tasks.c **** 
1788:..\Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:..\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1923              		.loc 1 1789 0
 1924 0046 244B     		ldr	r3, .L129
 1925 0048 1B68     		ldr	r3, [r3]
 1926 004a 002B     		cmp	r3, #0
 1927 004c 33D1     		bne	.L125
1790:..\Source/tasks.c **** 				{
1791:..\Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:..\Source/tasks.c **** 					suspended list to the ready list directly. */
1793:..\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1928              		.loc 1 1793 0
 1929 004e BB69     		ldr	r3, [r7, #24]
 1930 0050 DA6A     		ldr	r2, [r3, #44]
 1931 0052 224B     		ldr	r3, .L129+4
 1932 0054 1B68     		ldr	r3, [r3]
 1933 0056 DB6A     		ldr	r3, [r3, #44]
 1934 0058 9A42     		cmp	r2, r3
 1935 005a 01D3     		bcc	.L126
1794:..\Source/tasks.c **** 					{
1795:..\Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1936              		.loc 1 1795 0
 1937 005c 0123     		movs	r3, #1
 1938 005e FB61     		str	r3, [r7, #28]
 1939              	.L126:
1796:..\Source/tasks.c **** 					}
1797:..\Source/tasks.c **** 					else
1798:..\Source/tasks.c **** 					{
1799:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:..\Source/tasks.c **** 					}
1801:..\Source/tasks.c **** 
1802:..\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1940              		.loc 1 1802 0
 1941 0060 BB69     		ldr	r3, [r7, #24]
 1942 0062 0433     		adds	r3, r3, #4
 1943 0064 1846     		mov	r0, r3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 72


 1944 0066 FFF7FEFF 		bl	uxListRemove
1803:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1945              		.loc 1 1803 0
 1946 006a BB69     		ldr	r3, [r7, #24]
 1947 006c 5B6C     		ldr	r3, [r3, #68]
 1948 006e DBB2     		uxtb	r3, r3
 1949 0070 1946     		mov	r1, r3
 1950 0072 0B20     		movs	r0, #11
 1951 0074 FFF7FEFF 		bl	packPayload1
 1952 0078 BB69     		ldr	r3, [r7, #24]
 1953 007a DB6A     		ldr	r3, [r3, #44]
 1954 007c 0122     		movs	r2, #1
 1955 007e 9A40     		lsls	r2, r2, r3
 1956 0080 174B     		ldr	r3, .L129+8
 1957 0082 1B68     		ldr	r3, [r3]
 1958 0084 1343     		orrs	r3, r3, r2
 1959 0086 164A     		ldr	r2, .L129+8
 1960 0088 1360     		str	r3, [r2]
 1961 008a BB69     		ldr	r3, [r7, #24]
 1962 008c DA6A     		ldr	r2, [r3, #44]
 1963 008e 1346     		mov	r3, r2
 1964 0090 9B00     		lsls	r3, r3, #2
 1965 0092 1344     		add	r3, r3, r2
 1966 0094 9B00     		lsls	r3, r3, #2
 1967 0096 134A     		ldr	r2, .L129+12
 1968 0098 1A44     		add	r2, r2, r3
 1969 009a BB69     		ldr	r3, [r7, #24]
 1970 009c 0433     		adds	r3, r3, #4
 1971 009e 1946     		mov	r1, r3
 1972 00a0 1046     		mov	r0, r2
 1973 00a2 FFF7FEFF 		bl	vListInsertEnd
 1974 00a6 BB69     		ldr	r3, [r7, #24]
 1975 00a8 5B6C     		ldr	r3, [r3, #68]
 1976 00aa DBB2     		uxtb	r3, r3
 1977 00ac 1946     		mov	r1, r3
 1978 00ae 0C20     		movs	r0, #12
 1979 00b0 FFF7FEFF 		bl	packPayload1
 1980 00b4 05E0     		b	.L124
 1981              	.L125:
1804:..\Source/tasks.c **** 				}
1805:..\Source/tasks.c **** 				else
1806:..\Source/tasks.c **** 				{
1807:..\Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:..\Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:..\Source/tasks.c **** 					unsuspended. */
1810:..\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1982              		.loc 1 1810 0
 1983 00b6 BB69     		ldr	r3, [r7, #24]
 1984 00b8 1833     		adds	r3, r3, #24
 1985 00ba 1946     		mov	r1, r3
 1986 00bc 0A48     		ldr	r0, .L129+16
 1987 00be FFF7FEFF 		bl	vListInsertEnd
 1988              	.L124:
 1989 00c2 3B69     		ldr	r3, [r7, #16]
 1990 00c4 7B61     		str	r3, [r7, #20]
 1991              	.LBB35:
 1992              	.LBB36:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 73


 1993              		.loc 2 271 0
 1994 00c6 7B69     		ldr	r3, [r7, #20]
 1995              		.syntax unified
 1996              	@ 271 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1997 00c8 83F31188 			msr basepri, r3	
 1998              	@ 0 "" 2
 1999              		.thumb
 2000              		.syntax unified
 2001              	.LBE36:
 2002              	.LBE35:
1811:..\Source/tasks.c **** 				}
1812:..\Source/tasks.c **** 			}
1813:..\Source/tasks.c **** 			else
1814:..\Source/tasks.c **** 			{
1815:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:..\Source/tasks.c **** 			}
1817:..\Source/tasks.c **** 		}
1818:..\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:..\Source/tasks.c **** 
1820:..\Source/tasks.c **** 		return xYieldRequired;
 2003              		.loc 1 1820 0
 2004 00cc FB69     		ldr	r3, [r7, #28]
1821:..\Source/tasks.c **** 	}
 2005              		.loc 1 1821 0
 2006 00ce 1846     		mov	r0, r3
 2007 00d0 2037     		adds	r7, r7, #32
 2008              		.cfi_def_cfa_offset 8
 2009 00d2 BD46     		mov	sp, r7
 2010              		.cfi_def_cfa_register 13
 2011              		@ sp needed
 2012 00d4 80BD     		pop	{r7, pc}
 2013              	.L130:
 2014 00d6 00BF     		.align	2
 2015              	.L129:
 2016 00d8 00010000 		.word	uxSchedulerSuspended
 2017 00dc 00000000 		.word	pxCurrentTCB
 2018 00e0 E0000000 		.word	uxTopReadyPriority
 2019 00e4 04000000 		.word	pxReadyTasksLists
 2020 00e8 98000000 		.word	xPendingReadyList
 2021              		.cfi_endproc
 2022              	.LFE81:
 2023              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 2024              		.section	.rodata
 2025              		.align	2
 2026              	.LC0:
 2027 0000 49444C45 		.ascii	"IDLE\000"
 2027      00
 2028              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2029              		.align	2
 2030              		.global	vTaskStartScheduler
 2031              		.thumb
 2032              		.thumb_func
 2033              		.type	vTaskStartScheduler, %function
 2034              	vTaskStartScheduler:
 2035              	.LFB82:
1822:..\Source/tasks.c **** 
1823:..\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 74


1824:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1825:..\Source/tasks.c **** 
1826:..\Source/tasks.c **** void vTaskStartScheduler( void )
1827:..\Source/tasks.c **** {
 2036              		.loc 1 1827 0
 2037              		.cfi_startproc
 2038              		@ args = 0, pretend = 0, frame = 8
 2039              		@ frame_needed = 1, uses_anonymous_args = 0
 2040 0000 80B5     		push	{r7, lr}
 2041              		.cfi_def_cfa_offset 8
 2042              		.cfi_offset 7, -8
 2043              		.cfi_offset 14, -4
 2044 0002 84B0     		sub	sp, sp, #16
 2045              		.cfi_def_cfa_offset 24
 2046 0004 02AF     		add	r7, sp, #8
 2047              		.cfi_def_cfa 7, 16
1828:..\Source/tasks.c **** BaseType_t xReturn;
1829:..\Source/tasks.c **** 
1830:..\Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:..\Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:..\Source/tasks.c **** 	{
1833:..\Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:..\Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:..\Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:..\Source/tasks.c **** 
1837:..\Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:..\Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:..\Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:..\Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:..\Source/tasks.c **** 												"IDLE",
1842:..\Source/tasks.c **** 												ulIdleTaskStackSize,
1843:..\Source/tasks.c **** 												( void * ) NULL,
1844:..\Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:..\Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:..\Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:..\Source/tasks.c **** 
1848:..\Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:..\Source/tasks.c **** 		{
1850:..\Source/tasks.c **** 			xReturn = pdPASS;
1851:..\Source/tasks.c **** 		}
1852:..\Source/tasks.c **** 		else
1853:..\Source/tasks.c **** 		{
1854:..\Source/tasks.c **** 			xReturn = pdFAIL;
1855:..\Source/tasks.c **** 		}
1856:..\Source/tasks.c **** 	}
1857:..\Source/tasks.c **** 	#else
1858:..\Source/tasks.c **** 	{
1859:..\Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:..\Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 2048              		.loc 1 1860 0
 2049 0006 134B     		ldr	r3, .L134
 2050 0008 0193     		str	r3, [sp, #4]
 2051 000a 0023     		movs	r3, #0
 2052 000c 0093     		str	r3, [sp]
 2053 000e 0023     		movs	r3, #0
 2054 0010 6422     		movs	r2, #100
 2055 0012 1149     		ldr	r1, .L134+4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 75


 2056 0014 1148     		ldr	r0, .L134+8
 2057 0016 FFF7FEFF 		bl	xTaskCreate
 2058 001a 7860     		str	r0, [r7, #4]
1861:..\Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:..\Source/tasks.c **** 								( void * ) NULL,
1863:..\Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:..\Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:..\Source/tasks.c **** 	}
1866:..\Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:..\Source/tasks.c **** 
1868:..\Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:..\Source/tasks.c **** 	{
1870:..\Source/tasks.c **** 		if( xReturn == pdPASS )
1871:..\Source/tasks.c **** 		{
1872:..\Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:..\Source/tasks.c **** 		}
1874:..\Source/tasks.c **** 		else
1875:..\Source/tasks.c **** 		{
1876:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:..\Source/tasks.c **** 		}
1878:..\Source/tasks.c **** 	}
1879:..\Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:..\Source/tasks.c **** 
1881:..\Source/tasks.c **** 	if( xReturn == pdPASS )
 2059              		.loc 1 1881 0
 2060 001c 7B68     		ldr	r3, [r7, #4]
 2061 001e 012B     		cmp	r3, #1
 2062 0020 14D1     		bne	.L133
 2063              	.LBB37:
 2064              	.LBB38:
 237:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 2065              		.loc 2 237 0
 2066              		.syntax unified
 2067              	@ 237 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2068 0022 4FF0A003 			mov r3, #160												
 2069 0026 83F31188 		msr basepri, r3											
 2070 002a BFF36F8F 		isb														
 2071 002e BFF34F8F 		dsb														
 2072              	
 2073              	@ 0 "" 2
 2074              		.thumb
 2075              		.syntax unified
 2076 0032 3B60     		str	r3, [r7]
 2077              	.LBE38:
 2078              	.LBE37:
1882:..\Source/tasks.c **** 	{
1883:..\Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:..\Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:..\Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:..\Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:..\Source/tasks.c **** 		starts to run. */
1888:..\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:..\Source/tasks.c **** 
1890:..\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:..\Source/tasks.c **** 		{
1892:..\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:..\Source/tasks.c **** 			structure specific to the task that will run first. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 76


1894:..\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:..\Source/tasks.c **** 		}
1896:..\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:..\Source/tasks.c **** 
1898:..\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2079              		.loc 1 1898 0
 2080 0034 0A4B     		ldr	r3, .L134+12
 2081 0036 4FF0FF32 		mov	r2, #-1
 2082 003a 1A60     		str	r2, [r3]
1899:..\Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2083              		.loc 1 1899 0
 2084 003c 094B     		ldr	r3, .L134+16
 2085 003e 0122     		movs	r2, #1
 2086 0040 1A60     		str	r2, [r3]
1900:..\Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2087              		.loc 1 1900 0
 2088 0042 094B     		ldr	r3, .L134+20
 2089 0044 0022     		movs	r2, #0
 2090 0046 1A60     		str	r2, [r3]
1901:..\Source/tasks.c **** 
1902:..\Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:..\Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:..\Source/tasks.c **** 		the run time counter time base. */
1905:..\Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:..\Source/tasks.c **** 
1907:..\Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:..\Source/tasks.c **** 		portable interface. */
1909:..\Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2091              		.loc 1 1909 0
 2092 0048 FFF7FEFF 		bl	xPortStartScheduler
 2093              	.L133:
1910:..\Source/tasks.c **** 		{
1911:..\Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:..\Source/tasks.c **** 			function will not return. */
1913:..\Source/tasks.c **** 		}
1914:..\Source/tasks.c **** 		else
1915:..\Source/tasks.c **** 		{
1916:..\Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:..\Source/tasks.c **** 		}
1918:..\Source/tasks.c **** 	}
1919:..\Source/tasks.c **** 	else
1920:..\Source/tasks.c **** 	{
1921:..\Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:..\Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:..\Source/tasks.c **** 		or the timer task. */
1924:..\Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:..\Source/tasks.c **** 	}
1926:..\Source/tasks.c **** 
1927:..\Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:..\Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:..\Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:..\Source/tasks.c **** }
 2094              		.loc 1 1930 0
 2095 004c 00BF     		nop
 2096 004e 0837     		adds	r7, r7, #8
 2097              		.cfi_def_cfa_offset 8
 2098 0050 BD46     		mov	sp, r7
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 77


 2099              		.cfi_def_cfa_register 13
 2100              		@ sp needed
 2101 0052 80BD     		pop	{r7, pc}
 2102              	.L135:
 2103              		.align	2
 2104              	.L134:
 2105 0054 FC000000 		.word	xIdleTaskHandle
 2106 0058 00000000 		.word	.LC0
 2107 005c 00000000 		.word	prvIdleTask
 2108 0060 F8000000 		.word	xNextTaskUnblockTime
 2109 0064 E4000000 		.word	xSchedulerRunning
 2110 0068 DC000000 		.word	xTickCount
 2111              		.cfi_endproc
 2112              	.LFE82:
 2113              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 2114              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2115              		.align	2
 2116              		.global	vTaskEndScheduler
 2117              		.thumb
 2118              		.thumb_func
 2119              		.type	vTaskEndScheduler, %function
 2120              	vTaskEndScheduler:
 2121              	.LFB83:
1931:..\Source/tasks.c **** /*-----------------------------------------------------------*/
1932:..\Source/tasks.c **** 
1933:..\Source/tasks.c **** void vTaskEndScheduler( void )
1934:..\Source/tasks.c **** {
 2122              		.loc 1 1934 0
 2123              		.cfi_startproc
 2124              		@ args = 0, pretend = 0, frame = 8
 2125              		@ frame_needed = 1, uses_anonymous_args = 0
 2126 0000 80B5     		push	{r7, lr}
 2127              		.cfi_def_cfa_offset 8
 2128              		.cfi_offset 7, -8
 2129              		.cfi_offset 14, -4
 2130 0002 82B0     		sub	sp, sp, #8
 2131              		.cfi_def_cfa_offset 16
 2132 0004 00AF     		add	r7, sp, #0
 2133              		.cfi_def_cfa_register 7
 2134              	.LBB39:
 2135              	.LBB40:
 237:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 2136              		.loc 2 237 0
 2137              		.syntax unified
 2138              	@ 237 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2139 0006 4FF0A003 			mov r3, #160												
 2140 000a 83F31188 		msr basepri, r3											
 2141 000e BFF36F8F 		isb														
 2142 0012 BFF34F8F 		dsb														
 2143              	
 2144              	@ 0 "" 2
 2145              		.thumb
 2146              		.syntax unified
 2147 0016 7B60     		str	r3, [r7, #4]
 2148              	.LBE40:
 2149              	.LBE39:
1935:..\Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 78


1936:..\Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:..\Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:..\Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:..\Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2150              		.loc 1 1939 0
 2151 0018 044B     		ldr	r3, .L137
 2152 001a 0022     		movs	r2, #0
 2153 001c 1A60     		str	r2, [r3]
1940:..\Source/tasks.c **** 	vPortEndScheduler();
 2154              		.loc 1 1940 0
 2155 001e FFF7FEFF 		bl	vPortEndScheduler
1941:..\Source/tasks.c **** }
 2156              		.loc 1 1941 0
 2157 0022 00BF     		nop
 2158 0024 0837     		adds	r7, r7, #8
 2159              		.cfi_def_cfa_offset 8
 2160 0026 BD46     		mov	sp, r7
 2161              		.cfi_def_cfa_register 13
 2162              		@ sp needed
 2163 0028 80BD     		pop	{r7, pc}
 2164              	.L138:
 2165 002a 00BF     		.align	2
 2166              	.L137:
 2167 002c E4000000 		.word	xSchedulerRunning
 2168              		.cfi_endproc
 2169              	.LFE83:
 2170              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 2171              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2172              		.align	2
 2173              		.global	vTaskSuspendAll
 2174              		.thumb
 2175              		.thumb_func
 2176              		.type	vTaskSuspendAll, %function
 2177              	vTaskSuspendAll:
 2178              	.LFB84:
1942:..\Source/tasks.c **** /*----------------------------------------------------------*/
1943:..\Source/tasks.c **** 
1944:..\Source/tasks.c **** void vTaskSuspendAll( void )
1945:..\Source/tasks.c **** {
 2179              		.loc 1 1945 0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 0
 2182              		@ frame_needed = 1, uses_anonymous_args = 0
 2183              		@ link register save eliminated.
 2184 0000 80B4     		push	{r7}
 2185              		.cfi_def_cfa_offset 4
 2186              		.cfi_offset 7, -4
 2187 0002 00AF     		add	r7, sp, #0
 2188              		.cfi_def_cfa_register 7
1946:..\Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:..\Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:..\Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:..\Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:..\Source/tasks.c **** 	++uxSchedulerSuspended;
 2189              		.loc 1 1950 0
 2190 0004 044B     		ldr	r3, .L140
 2191 0006 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 79


 2192 0008 0133     		adds	r3, r3, #1
 2193 000a 034A     		ldr	r2, .L140
 2194 000c 1360     		str	r3, [r2]
1951:..\Source/tasks.c **** }
 2195              		.loc 1 1951 0
 2196 000e 00BF     		nop
 2197 0010 BD46     		mov	sp, r7
 2198              		.cfi_def_cfa_register 13
 2199              		@ sp needed
 2200 0012 80BC     		pop	{r7}
 2201              		.cfi_restore 7
 2202              		.cfi_def_cfa_offset 0
 2203 0014 7047     		bx	lr
 2204              	.L141:
 2205 0016 00BF     		.align	2
 2206              	.L140:
 2207 0018 00010000 		.word	uxSchedulerSuspended
 2208              		.cfi_endproc
 2209              	.LFE84:
 2210              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2211              		.section	.text.xTaskResumeAll,"ax",%progbits
 2212              		.align	2
 2213              		.global	xTaskResumeAll
 2214              		.thumb
 2215              		.thumb_func
 2216              		.type	xTaskResumeAll, %function
 2217              	xTaskResumeAll:
 2218              	.LFB85:
1952:..\Source/tasks.c **** /*----------------------------------------------------------*/
1953:..\Source/tasks.c **** 
1954:..\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:..\Source/tasks.c **** 
1956:..\Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:..\Source/tasks.c **** 	{
1958:..\Source/tasks.c **** 	TickType_t xReturn;
1959:..\Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:..\Source/tasks.c **** 
1961:..\Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:..\Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:..\Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:..\Source/tasks.c **** 		running. */
1965:..\Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:..\Source/tasks.c **** 		{
1967:..\Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:..\Source/tasks.c **** 			{
1969:..\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:..\Source/tasks.c **** 			}
1971:..\Source/tasks.c **** 		}
1972:..\Source/tasks.c **** 		#else
1973:..\Source/tasks.c **** 		{
1974:..\Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:..\Source/tasks.c **** 
1976:..\Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:..\Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:..\Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:..\Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:..\Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 80


1981:..\Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:..\Source/tasks.c **** 			{
1983:..\Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:..\Source/tasks.c **** 			}
1985:..\Source/tasks.c **** 		}
1986:..\Source/tasks.c **** 		#endif
1987:..\Source/tasks.c **** 
1988:..\Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:..\Source/tasks.c **** 		{
1990:..\Source/tasks.c **** 			xReturn = 0;
1991:..\Source/tasks.c **** 		}
1992:..\Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:..\Source/tasks.c **** 		{
1994:..\Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:..\Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:..\Source/tasks.c **** 			processed. */
1997:..\Source/tasks.c **** 			xReturn = 0;
1998:..\Source/tasks.c **** 		}
1999:..\Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:..\Source/tasks.c **** 		{
2001:..\Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:..\Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:..\Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:..\Source/tasks.c **** 			xReturn = 0;
2005:..\Source/tasks.c **** 		}
2006:..\Source/tasks.c **** 		else
2007:..\Source/tasks.c **** 		{
2008:..\Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:..\Source/tasks.c **** 		}
2010:..\Source/tasks.c **** 
2011:..\Source/tasks.c **** 		return xReturn;
2012:..\Source/tasks.c **** 	}
2013:..\Source/tasks.c **** 
2014:..\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:..\Source/tasks.c **** /*----------------------------------------------------------*/
2016:..\Source/tasks.c **** 
2017:..\Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:..\Source/tasks.c **** {
 2219              		.loc 1 2018 0
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 16
 2222              		@ frame_needed = 1, uses_anonymous_args = 0
 2223 0000 80B5     		push	{r7, lr}
 2224              		.cfi_def_cfa_offset 8
 2225              		.cfi_offset 7, -8
 2226              		.cfi_offset 14, -4
 2227 0002 84B0     		sub	sp, sp, #16
 2228              		.cfi_def_cfa_offset 24
 2229 0004 00AF     		add	r7, sp, #0
 2230              		.cfi_def_cfa_register 7
2019:..\Source/tasks.c **** TCB_t *pxTCB = NULL;
 2231              		.loc 1 2019 0
 2232 0006 0023     		movs	r3, #0
 2233 0008 FB60     		str	r3, [r7, #12]
2020:..\Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2234              		.loc 1 2020 0
 2235 000a 0023     		movs	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 81


 2236 000c BB60     		str	r3, [r7, #8]
2021:..\Source/tasks.c **** 
2022:..\Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:..\Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:..\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:..\Source/tasks.c **** 
2026:..\Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:..\Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:..\Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:..\Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:..\Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:..\Source/tasks.c **** 	taskENTER_CRITICAL();
 2237              		.loc 1 2031 0
 2238 000e FFF7FEFF 		bl	vPortEnterCritical
2032:..\Source/tasks.c **** 	{
2033:..\Source/tasks.c **** 		--uxSchedulerSuspended;
 2239              		.loc 1 2033 0
 2240 0012 404B     		ldr	r3, .L151
 2241 0014 1B68     		ldr	r3, [r3]
 2242 0016 013B     		subs	r3, r3, #1
 2243 0018 3E4A     		ldr	r2, .L151
 2244 001a 1360     		str	r3, [r2]
2034:..\Source/tasks.c **** 
2035:..\Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2245              		.loc 1 2035 0
 2246 001c 3D4B     		ldr	r3, .L151
 2247 001e 1B68     		ldr	r3, [r3]
 2248 0020 002B     		cmp	r3, #0
 2249 0022 6FD1     		bne	.L143
2036:..\Source/tasks.c **** 		{
2037:..\Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2250              		.loc 1 2037 0
 2251 0024 3C4B     		ldr	r3, .L151+4
 2252 0026 1B68     		ldr	r3, [r3]
 2253 0028 002B     		cmp	r3, #0
 2254 002a 6BD0     		beq	.L143
2038:..\Source/tasks.c **** 			{
2039:..\Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:..\Source/tasks.c **** 				appropriate ready list. */
2041:..\Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2255              		.loc 1 2041 0
 2256 002c 3CE0     		b	.L144
 2257              	.L145:
2042:..\Source/tasks.c **** 				{
2043:..\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2258              		.loc 1 2043 0
 2259 002e 3B4B     		ldr	r3, .L151+8
 2260 0030 DB68     		ldr	r3, [r3, #12]
 2261 0032 DB68     		ldr	r3, [r3, #12]
 2262 0034 FB60     		str	r3, [r7, #12]
2044:..\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2263              		.loc 1 2044 0
 2264 0036 FB68     		ldr	r3, [r7, #12]
 2265 0038 1833     		adds	r3, r3, #24
 2266 003a 1846     		mov	r0, r3
 2267 003c FFF7FEFF 		bl	uxListRemove
2045:..\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 82


 2268              		.loc 1 2045 0
 2269 0040 FB68     		ldr	r3, [r7, #12]
 2270 0042 0433     		adds	r3, r3, #4
 2271 0044 1846     		mov	r0, r3
 2272 0046 FFF7FEFF 		bl	uxListRemove
2046:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2273              		.loc 1 2046 0
 2274 004a FB68     		ldr	r3, [r7, #12]
 2275 004c 5B6C     		ldr	r3, [r3, #68]
 2276 004e DBB2     		uxtb	r3, r3
 2277 0050 1946     		mov	r1, r3
 2278 0052 0B20     		movs	r0, #11
 2279 0054 FFF7FEFF 		bl	packPayload1
 2280 0058 FB68     		ldr	r3, [r7, #12]
 2281 005a DB6A     		ldr	r3, [r3, #44]
 2282 005c 0122     		movs	r2, #1
 2283 005e 9A40     		lsls	r2, r2, r3
 2284 0060 2F4B     		ldr	r3, .L151+12
 2285 0062 1B68     		ldr	r3, [r3]
 2286 0064 1343     		orrs	r3, r3, r2
 2287 0066 2E4A     		ldr	r2, .L151+12
 2288 0068 1360     		str	r3, [r2]
 2289 006a FB68     		ldr	r3, [r7, #12]
 2290 006c DA6A     		ldr	r2, [r3, #44]
 2291 006e 1346     		mov	r3, r2
 2292 0070 9B00     		lsls	r3, r3, #2
 2293 0072 1344     		add	r3, r3, r2
 2294 0074 9B00     		lsls	r3, r3, #2
 2295 0076 2B4A     		ldr	r2, .L151+16
 2296 0078 1A44     		add	r2, r2, r3
 2297 007a FB68     		ldr	r3, [r7, #12]
 2298 007c 0433     		adds	r3, r3, #4
 2299 007e 1946     		mov	r1, r3
 2300 0080 1046     		mov	r0, r2
 2301 0082 FFF7FEFF 		bl	vListInsertEnd
 2302 0086 FB68     		ldr	r3, [r7, #12]
 2303 0088 5B6C     		ldr	r3, [r3, #68]
 2304 008a DBB2     		uxtb	r3, r3
 2305 008c 1946     		mov	r1, r3
 2306 008e 0C20     		movs	r0, #12
 2307 0090 FFF7FEFF 		bl	packPayload1
2047:..\Source/tasks.c **** 
2048:..\Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:..\Source/tasks.c **** 					task then a yield must be performed. */
2050:..\Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2308              		.loc 1 2050 0
 2309 0094 FB68     		ldr	r3, [r7, #12]
 2310 0096 DA6A     		ldr	r2, [r3, #44]
 2311 0098 234B     		ldr	r3, .L151+20
 2312 009a 1B68     		ldr	r3, [r3]
 2313 009c DB6A     		ldr	r3, [r3, #44]
 2314 009e 9A42     		cmp	r2, r3
 2315 00a0 02D3     		bcc	.L144
2051:..\Source/tasks.c **** 					{
2052:..\Source/tasks.c **** 						xYieldPending = pdTRUE;
 2316              		.loc 1 2052 0
 2317 00a2 224B     		ldr	r3, .L151+24
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 83


 2318 00a4 0122     		movs	r2, #1
 2319 00a6 1A60     		str	r2, [r3]
 2320              	.L144:
2041:..\Source/tasks.c **** 				{
 2321              		.loc 1 2041 0
 2322 00a8 1C4B     		ldr	r3, .L151+8
 2323 00aa 1B68     		ldr	r3, [r3]
 2324 00ac 002B     		cmp	r3, #0
 2325 00ae BED1     		bne	.L145
2053:..\Source/tasks.c **** 					}
2054:..\Source/tasks.c **** 					else
2055:..\Source/tasks.c **** 					{
2056:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:..\Source/tasks.c **** 					}
2058:..\Source/tasks.c **** 				}
2059:..\Source/tasks.c **** 
2060:..\Source/tasks.c **** 				if( pxTCB != NULL )
 2326              		.loc 1 2060 0
 2327 00b0 FB68     		ldr	r3, [r7, #12]
 2328 00b2 002B     		cmp	r3, #0
 2329 00b4 01D0     		beq	.L146
2061:..\Source/tasks.c **** 				{
2062:..\Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:..\Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:..\Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:..\Source/tasks.c **** 					important for low power tickless implementations, where
2066:..\Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:..\Source/tasks.c **** 					state. */
2068:..\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2330              		.loc 1 2068 0
 2331 00b6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2332              	.L146:
 2333              	.LBB41:
2069:..\Source/tasks.c **** 				}
2070:..\Source/tasks.c **** 
2071:..\Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:..\Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:..\Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:..\Source/tasks.c **** 				time. */
2075:..\Source/tasks.c **** 				{
2076:..\Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2334              		.loc 1 2076 0
 2335 00ba 1D4B     		ldr	r3, .L151+28
 2336 00bc 1B68     		ldr	r3, [r3]
 2337 00be 7B60     		str	r3, [r7, #4]
2077:..\Source/tasks.c **** 
2078:..\Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2338              		.loc 1 2078 0
 2339 00c0 7B68     		ldr	r3, [r7, #4]
 2340 00c2 002B     		cmp	r3, #0
 2341 00c4 10D0     		beq	.L147
 2342              	.L149:
2079:..\Source/tasks.c **** 					{
2080:..\Source/tasks.c **** 						do
2081:..\Source/tasks.c **** 						{
2082:..\Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2343              		.loc 1 2082 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 84


 2344 00c6 FFF7FEFF 		bl	xTaskIncrementTick
 2345 00ca 0346     		mov	r3, r0
 2346 00cc 002B     		cmp	r3, #0
 2347 00ce 02D0     		beq	.L148
2083:..\Source/tasks.c **** 							{
2084:..\Source/tasks.c **** 								xYieldPending = pdTRUE;
 2348              		.loc 1 2084 0
 2349 00d0 164B     		ldr	r3, .L151+24
 2350 00d2 0122     		movs	r2, #1
 2351 00d4 1A60     		str	r2, [r3]
 2352              	.L148:
2085:..\Source/tasks.c **** 							}
2086:..\Source/tasks.c **** 							else
2087:..\Source/tasks.c **** 							{
2088:..\Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:..\Source/tasks.c **** 							}
2090:..\Source/tasks.c **** 							--uxPendedCounts;
 2353              		.loc 1 2090 0
 2354 00d6 7B68     		ldr	r3, [r7, #4]
 2355 00d8 013B     		subs	r3, r3, #1
 2356 00da 7B60     		str	r3, [r7, #4]
2091:..\Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2357              		.loc 1 2091 0
 2358 00dc 7B68     		ldr	r3, [r7, #4]
 2359 00de 002B     		cmp	r3, #0
 2360 00e0 F1D1     		bne	.L149
2092:..\Source/tasks.c **** 
2093:..\Source/tasks.c **** 						uxPendedTicks = 0;
 2361              		.loc 1 2093 0
 2362 00e2 134B     		ldr	r3, .L151+28
 2363 00e4 0022     		movs	r2, #0
 2364 00e6 1A60     		str	r2, [r3]
 2365              	.L147:
 2366              	.LBE41:
2094:..\Source/tasks.c **** 					}
2095:..\Source/tasks.c **** 					else
2096:..\Source/tasks.c **** 					{
2097:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:..\Source/tasks.c **** 					}
2099:..\Source/tasks.c **** 				}
2100:..\Source/tasks.c **** 
2101:..\Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2367              		.loc 1 2101 0
 2368 00e8 104B     		ldr	r3, .L151+24
 2369 00ea 1B68     		ldr	r3, [r3]
 2370 00ec 002B     		cmp	r3, #0
 2371 00ee 09D0     		beq	.L143
2102:..\Source/tasks.c **** 				{
2103:..\Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:..\Source/tasks.c **** 					{
2105:..\Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2372              		.loc 1 2105 0
 2373 00f0 0123     		movs	r3, #1
 2374 00f2 BB60     		str	r3, [r7, #8]
2106:..\Source/tasks.c **** 					}
2107:..\Source/tasks.c **** 					#endif
2108:..\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 85


 2375              		.loc 1 2108 0
 2376 00f4 0F4B     		ldr	r3, .L151+32
 2377 00f6 4FF08052 		mov	r2, #268435456
 2378 00fa 1A60     		str	r2, [r3]
 2379              		.syntax unified
 2380              	@ 2108 "..\Source\tasks.c" 1
 2381 00fc BFF34F8F 		dsb
 2382              	@ 0 "" 2
 2383              	@ 2108 "..\Source\tasks.c" 1
 2384 0100 BFF36F8F 		isb
 2385              	@ 0 "" 2
 2386              		.thumb
 2387              		.syntax unified
 2388              	.L143:
2109:..\Source/tasks.c **** 				}
2110:..\Source/tasks.c **** 				else
2111:..\Source/tasks.c **** 				{
2112:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:..\Source/tasks.c **** 				}
2114:..\Source/tasks.c **** 			}
2115:..\Source/tasks.c **** 		}
2116:..\Source/tasks.c **** 		else
2117:..\Source/tasks.c **** 		{
2118:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:..\Source/tasks.c **** 		}
2120:..\Source/tasks.c **** 	}
2121:..\Source/tasks.c **** 	taskEXIT_CRITICAL();
 2389              		.loc 1 2121 0
 2390 0104 FFF7FEFF 		bl	vPortExitCritical
2122:..\Source/tasks.c **** 
2123:..\Source/tasks.c **** 	return xAlreadyYielded;
 2391              		.loc 1 2123 0
 2392 0108 BB68     		ldr	r3, [r7, #8]
2124:..\Source/tasks.c **** }
 2393              		.loc 1 2124 0
 2394 010a 1846     		mov	r0, r3
 2395 010c 1037     		adds	r7, r7, #16
 2396              		.cfi_def_cfa_offset 8
 2397 010e BD46     		mov	sp, r7
 2398              		.cfi_def_cfa_register 13
 2399              		@ sp needed
 2400 0110 80BD     		pop	{r7, pc}
 2401              	.L152:
 2402 0112 00BF     		.align	2
 2403              	.L151:
 2404 0114 00010000 		.word	uxSchedulerSuspended
 2405 0118 D8000000 		.word	uxCurrentNumberOfTasks
 2406 011c 98000000 		.word	xPendingReadyList
 2407 0120 E0000000 		.word	uxTopReadyPriority
 2408 0124 04000000 		.word	pxReadyTasksLists
 2409 0128 00000000 		.word	pxCurrentTCB
 2410 012c EC000000 		.word	xYieldPending
 2411 0130 E8000000 		.word	uxPendedTicks
 2412 0134 04ED00E0 		.word	-536810236
 2413              		.cfi_endproc
 2414              	.LFE85:
 2415              		.size	xTaskResumeAll, .-xTaskResumeAll
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 86


 2416              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2417              		.align	2
 2418              		.global	xTaskGetTickCount
 2419              		.thumb
 2420              		.thumb_func
 2421              		.type	xTaskGetTickCount, %function
 2422              	xTaskGetTickCount:
 2423              	.LFB86:
2125:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2126:..\Source/tasks.c **** 
2127:..\Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:..\Source/tasks.c **** {
 2424              		.loc 1 2128 0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 8
 2427              		@ frame_needed = 1, uses_anonymous_args = 0
 2428              		@ link register save eliminated.
 2429 0000 80B4     		push	{r7}
 2430              		.cfi_def_cfa_offset 4
 2431              		.cfi_offset 7, -4
 2432 0002 83B0     		sub	sp, sp, #12
 2433              		.cfi_def_cfa_offset 16
 2434 0004 00AF     		add	r7, sp, #0
 2435              		.cfi_def_cfa_register 7
2129:..\Source/tasks.c **** TickType_t xTicks;
2130:..\Source/tasks.c **** 
2131:..\Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:..\Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:..\Source/tasks.c **** 	{
2134:..\Source/tasks.c **** 		xTicks = xTickCount;
 2436              		.loc 1 2134 0
 2437 0006 044B     		ldr	r3, .L155
 2438 0008 1B68     		ldr	r3, [r3]
 2439 000a 7B60     		str	r3, [r7, #4]
2135:..\Source/tasks.c **** 	}
2136:..\Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:..\Source/tasks.c **** 
2138:..\Source/tasks.c **** 	return xTicks;
 2440              		.loc 1 2138 0
 2441 000c 7B68     		ldr	r3, [r7, #4]
2139:..\Source/tasks.c **** }
 2442              		.loc 1 2139 0
 2443 000e 1846     		mov	r0, r3
 2444 0010 0C37     		adds	r7, r7, #12
 2445              		.cfi_def_cfa_offset 4
 2446 0012 BD46     		mov	sp, r7
 2447              		.cfi_def_cfa_register 13
 2448              		@ sp needed
 2449 0014 80BC     		pop	{r7}
 2450              		.cfi_restore 7
 2451              		.cfi_def_cfa_offset 0
 2452 0016 7047     		bx	lr
 2453              	.L156:
 2454              		.align	2
 2455              	.L155:
 2456 0018 DC000000 		.word	xTickCount
 2457              		.cfi_endproc
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 87


 2458              	.LFE86:
 2459              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2460              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2461              		.align	2
 2462              		.global	xTaskGetTickCountFromISR
 2463              		.thumb
 2464              		.thumb_func
 2465              		.type	xTaskGetTickCountFromISR, %function
 2466              	xTaskGetTickCountFromISR:
 2467              	.LFB87:
2140:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2141:..\Source/tasks.c **** 
2142:..\Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:..\Source/tasks.c **** {
 2468              		.loc 1 2143 0
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 8
 2471              		@ frame_needed = 1, uses_anonymous_args = 0
 2472              		@ link register save eliminated.
 2473 0000 80B4     		push	{r7}
 2474              		.cfi_def_cfa_offset 4
 2475              		.cfi_offset 7, -4
 2476 0002 83B0     		sub	sp, sp, #12
 2477              		.cfi_def_cfa_offset 16
 2478 0004 00AF     		add	r7, sp, #0
 2479              		.cfi_def_cfa_register 7
2144:..\Source/tasks.c **** TickType_t xReturn;
2145:..\Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:..\Source/tasks.c **** 
2147:..\Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:..\Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:..\Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:..\Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:..\Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:..\Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:..\Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:..\Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:..\Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:..\Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:..\Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:..\Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:..\Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:..\Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:..\Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:..\Source/tasks.c **** 
2163:..\Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2480              		.loc 1 2163 0
 2481 0006 0023     		movs	r3, #0
 2482 0008 7B60     		str	r3, [r7, #4]
2164:..\Source/tasks.c **** 	{
2165:..\Source/tasks.c **** 		xReturn = xTickCount;
 2483              		.loc 1 2165 0
 2484 000a 044B     		ldr	r3, .L159
 2485 000c 1B68     		ldr	r3, [r3]
 2486 000e 3B60     		str	r3, [r7]
2166:..\Source/tasks.c **** 	}
2167:..\Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 88


2168:..\Source/tasks.c **** 
2169:..\Source/tasks.c **** 	return xReturn;
 2487              		.loc 1 2169 0
 2488 0010 3B68     		ldr	r3, [r7]
2170:..\Source/tasks.c **** }
 2489              		.loc 1 2170 0
 2490 0012 1846     		mov	r0, r3
 2491 0014 0C37     		adds	r7, r7, #12
 2492              		.cfi_def_cfa_offset 4
 2493 0016 BD46     		mov	sp, r7
 2494              		.cfi_def_cfa_register 13
 2495              		@ sp needed
 2496 0018 80BC     		pop	{r7}
 2497              		.cfi_restore 7
 2498              		.cfi_def_cfa_offset 0
 2499 001a 7047     		bx	lr
 2500              	.L160:
 2501              		.align	2
 2502              	.L159:
 2503 001c DC000000 		.word	xTickCount
 2504              		.cfi_endproc
 2505              	.LFE87:
 2506              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2507              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2508              		.align	2
 2509              		.global	uxTaskGetNumberOfTasks
 2510              		.thumb
 2511              		.thumb_func
 2512              		.type	uxTaskGetNumberOfTasks, %function
 2513              	uxTaskGetNumberOfTasks:
 2514              	.LFB88:
2171:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2172:..\Source/tasks.c **** 
2173:..\Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:..\Source/tasks.c **** {
 2515              		.loc 1 2174 0
 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 0
 2518              		@ frame_needed = 1, uses_anonymous_args = 0
 2519              		@ link register save eliminated.
 2520 0000 80B4     		push	{r7}
 2521              		.cfi_def_cfa_offset 4
 2522              		.cfi_offset 7, -4
 2523 0002 00AF     		add	r7, sp, #0
 2524              		.cfi_def_cfa_register 7
2175:..\Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:..\Source/tasks.c **** 	BaseType_t. */
2177:..\Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2525              		.loc 1 2177 0
 2526 0004 024B     		ldr	r3, .L163
 2527 0006 1B68     		ldr	r3, [r3]
2178:..\Source/tasks.c **** }
 2528              		.loc 1 2178 0
 2529 0008 1846     		mov	r0, r3
 2530 000a BD46     		mov	sp, r7
 2531              		.cfi_def_cfa_register 13
 2532              		@ sp needed
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 89


 2533 000c 80BC     		pop	{r7}
 2534              		.cfi_restore 7
 2535              		.cfi_def_cfa_offset 0
 2536 000e 7047     		bx	lr
 2537              	.L164:
 2538              		.align	2
 2539              	.L163:
 2540 0010 D8000000 		.word	uxCurrentNumberOfTasks
 2541              		.cfi_endproc
 2542              	.LFE88:
 2543              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2544              		.section	.text.pcTaskGetName,"ax",%progbits
 2545              		.align	2
 2546              		.global	pcTaskGetName
 2547              		.thumb
 2548              		.thumb_func
 2549              		.type	pcTaskGetName, %function
 2550              	pcTaskGetName:
 2551              	.LFB89:
2179:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2180:..\Source/tasks.c **** 
2181:..\Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:..\Source/tasks.c **** {
 2552              		.loc 1 2182 0
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 16
 2555              		@ frame_needed = 1, uses_anonymous_args = 0
 2556              		@ link register save eliminated.
 2557 0000 80B4     		push	{r7}
 2558              		.cfi_def_cfa_offset 4
 2559              		.cfi_offset 7, -4
 2560 0002 85B0     		sub	sp, sp, #20
 2561              		.cfi_def_cfa_offset 24
 2562 0004 00AF     		add	r7, sp, #0
 2563              		.cfi_def_cfa_register 7
 2564 0006 7860     		str	r0, [r7, #4]
2183:..\Source/tasks.c **** TCB_t *pxTCB;
2184:..\Source/tasks.c **** 
2185:..\Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:..\Source/tasks.c **** 	queried. */
2187:..\Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2565              		.loc 1 2187 0
 2566 0008 7B68     		ldr	r3, [r7, #4]
 2567 000a 002B     		cmp	r3, #0
 2568 000c 02D1     		bne	.L166
 2569              		.loc 1 2187 0 is_stmt 0 discriminator 1
 2570 000e 064B     		ldr	r3, .L169
 2571 0010 1B68     		ldr	r3, [r3]
 2572 0012 00E0     		b	.L167
 2573              	.L166:
 2574              		.loc 1 2187 0 discriminator 2
 2575 0014 7B68     		ldr	r3, [r7, #4]
 2576              	.L167:
 2577              		.loc 1 2187 0 discriminator 4
 2578 0016 FB60     		str	r3, [r7, #12]
2188:..\Source/tasks.c **** 	configASSERT( pxTCB );
2189:..\Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 90


 2579              		.loc 1 2189 0 is_stmt 1 discriminator 4
 2580 0018 FB68     		ldr	r3, [r7, #12]
 2581 001a 3433     		adds	r3, r3, #52
2190:..\Source/tasks.c **** }
 2582              		.loc 1 2190 0 discriminator 4
 2583 001c 1846     		mov	r0, r3
 2584 001e 1437     		adds	r7, r7, #20
 2585              		.cfi_def_cfa_offset 4
 2586 0020 BD46     		mov	sp, r7
 2587              		.cfi_def_cfa_register 13
 2588              		@ sp needed
 2589 0022 80BC     		pop	{r7}
 2590              		.cfi_restore 7
 2591              		.cfi_def_cfa_offset 0
 2592 0024 7047     		bx	lr
 2593              	.L170:
 2594 0026 00BF     		.align	2
 2595              	.L169:
 2596 0028 00000000 		.word	pxCurrentTCB
 2597              		.cfi_endproc
 2598              	.LFE89:
 2599              		.size	pcTaskGetName, .-pcTaskGetName
 2600              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2601              		.align	2
 2602              		.global	uxTaskGetSystemState
 2603              		.thumb
 2604              		.thumb_func
 2605              		.type	uxTaskGetSystemState, %function
 2606              	uxTaskGetSystemState:
 2607              	.LFB90:
2191:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2192:..\Source/tasks.c **** 
2193:..\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:..\Source/tasks.c **** 
2195:..\Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:..\Source/tasks.c **** 	{
2197:..\Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:..\Source/tasks.c **** 	UBaseType_t x;
2199:..\Source/tasks.c **** 	char cNextChar;
2200:..\Source/tasks.c **** 
2201:..\Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:..\Source/tasks.c **** 
2203:..\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:..\Source/tasks.c **** 		{
2205:..\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:..\Source/tasks.c **** 
2207:..\Source/tasks.c **** 			do
2208:..\Source/tasks.c **** 			{
2209:..\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:..\Source/tasks.c **** 
2211:..\Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:..\Source/tasks.c **** 				mismatch. */
2213:..\Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:..\Source/tasks.c **** 				{
2215:..\Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:..\Source/tasks.c **** 
2217:..\Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 91


2218:..\Source/tasks.c **** 					{
2219:..\Source/tasks.c **** 						/* Characters didn't match. */
2220:..\Source/tasks.c **** 						break;
2221:..\Source/tasks.c **** 					}
2222:..\Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:..\Source/tasks.c **** 					{
2224:..\Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:..\Source/tasks.c **** 						found. */
2226:..\Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:..\Source/tasks.c **** 						break;
2228:..\Source/tasks.c **** 					}
2229:..\Source/tasks.c **** 					else
2230:..\Source/tasks.c **** 					{
2231:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:..\Source/tasks.c **** 					}
2233:..\Source/tasks.c **** 				}
2234:..\Source/tasks.c **** 
2235:..\Source/tasks.c **** 				if( pxReturn != NULL )
2236:..\Source/tasks.c **** 				{
2237:..\Source/tasks.c **** 					/* The handle has been found. */
2238:..\Source/tasks.c **** 					break;
2239:..\Source/tasks.c **** 				}
2240:..\Source/tasks.c **** 
2241:..\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:..\Source/tasks.c **** 		}
2243:..\Source/tasks.c **** 		else
2244:..\Source/tasks.c **** 		{
2245:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:..\Source/tasks.c **** 		}
2247:..\Source/tasks.c **** 
2248:..\Source/tasks.c **** 		return pxReturn;
2249:..\Source/tasks.c **** 	}
2250:..\Source/tasks.c **** 
2251:..\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2253:..\Source/tasks.c **** 
2254:..\Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:..\Source/tasks.c **** 
2256:..\Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:..\Source/tasks.c **** 	{
2258:..\Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:..\Source/tasks.c **** 	TCB_t* pxTCB;
2260:..\Source/tasks.c **** 
2261:..\Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:..\Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:..\Source/tasks.c **** 
2264:..\Source/tasks.c **** 		vTaskSuspendAll();
2265:..\Source/tasks.c **** 		{
2266:..\Source/tasks.c **** 			/* Search the ready lists. */
2267:..\Source/tasks.c **** 			do
2268:..\Source/tasks.c **** 			{
2269:..\Source/tasks.c **** 				uxQueue--;
2270:..\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:..\Source/tasks.c **** 
2272:..\Source/tasks.c **** 				if( pxTCB != NULL )
2273:..\Source/tasks.c **** 				{
2274:..\Source/tasks.c **** 					/* Found the handle. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 92


2275:..\Source/tasks.c **** 					break;
2276:..\Source/tasks.c **** 				}
2277:..\Source/tasks.c **** 
2278:..\Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:..\Source/tasks.c **** 
2280:..\Source/tasks.c **** 			/* Search the delayed lists. */
2281:..\Source/tasks.c **** 			if( pxTCB == NULL )
2282:..\Source/tasks.c **** 			{
2283:..\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:..\Source/tasks.c **** 			}
2285:..\Source/tasks.c **** 
2286:..\Source/tasks.c **** 			if( pxTCB == NULL )
2287:..\Source/tasks.c **** 			{
2288:..\Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:..\Source/tasks.c **** 			}
2290:..\Source/tasks.c **** 
2291:..\Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:..\Source/tasks.c **** 			{
2293:..\Source/tasks.c **** 				if( pxTCB == NULL )
2294:..\Source/tasks.c **** 				{
2295:..\Source/tasks.c **** 					/* Search the suspended list. */
2296:..\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:..\Source/tasks.c **** 				}
2298:..\Source/tasks.c **** 			}
2299:..\Source/tasks.c **** 			#endif
2300:..\Source/tasks.c **** 
2301:..\Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:..\Source/tasks.c **** 			{
2303:..\Source/tasks.c **** 				if( pxTCB == NULL )
2304:..\Source/tasks.c **** 				{
2305:..\Source/tasks.c **** 					/* Search the deleted list. */
2306:..\Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:..\Source/tasks.c **** 				}
2308:..\Source/tasks.c **** 			}
2309:..\Source/tasks.c **** 			#endif
2310:..\Source/tasks.c **** 		}
2311:..\Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:..\Source/tasks.c **** 
2313:..\Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:..\Source/tasks.c **** 	}
2315:..\Source/tasks.c **** 
2316:..\Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2318:..\Source/tasks.c **** 
2319:..\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:..\Source/tasks.c **** 
2321:..\Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:..\Source/tasks.c **** 	{
 2608              		.loc 1 2322 0
 2609              		.cfi_startproc
 2610              		@ args = 0, pretend = 0, frame = 24
 2611              		@ frame_needed = 1, uses_anonymous_args = 0
 2612 0000 80B5     		push	{r7, lr}
 2613              		.cfi_def_cfa_offset 8
 2614              		.cfi_offset 7, -8
 2615              		.cfi_offset 14, -4
 2616 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 93


 2617              		.cfi_def_cfa_offset 32
 2618 0004 00AF     		add	r7, sp, #0
 2619              		.cfi_def_cfa_register 7
 2620 0006 F860     		str	r0, [r7, #12]
 2621 0008 B960     		str	r1, [r7, #8]
 2622 000a 7A60     		str	r2, [r7, #4]
2323:..\Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2623              		.loc 1 2323 0
 2624 000c 0023     		movs	r3, #0
 2625 000e 7B61     		str	r3, [r7, #20]
 2626 0010 0523     		movs	r3, #5
 2627 0012 3B61     		str	r3, [r7, #16]
2324:..\Source/tasks.c **** 
2325:..\Source/tasks.c **** 		vTaskSuspendAll();
 2628              		.loc 1 2325 0
 2629 0014 FFF7FEFF 		bl	vTaskSuspendAll
2326:..\Source/tasks.c **** 		{
2327:..\Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:..\Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2630              		.loc 1 2328 0
 2631 0018 3A4B     		ldr	r3, .L176
 2632 001a 1B68     		ldr	r3, [r3]
 2633 001c BA68     		ldr	r2, [r7, #8]
 2634 001e 9A42     		cmp	r2, r3
 2635 0020 68D3     		bcc	.L172
 2636              	.L173:
2329:..\Source/tasks.c **** 			{
2330:..\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:..\Source/tasks.c **** 				task in the Ready state. */
2332:..\Source/tasks.c **** 				do
2333:..\Source/tasks.c **** 				{
2334:..\Source/tasks.c **** 					uxQueue--;
 2637              		.loc 1 2334 0 discriminator 1
 2638 0022 3B69     		ldr	r3, [r7, #16]
 2639 0024 013B     		subs	r3, r3, #1
 2640 0026 3B61     		str	r3, [r7, #16]
2335:..\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 2641              		.loc 1 2335 0 discriminator 1
 2642 0028 7A69     		ldr	r2, [r7, #20]
 2643 002a 1346     		mov	r3, r2
 2644 002c DB00     		lsls	r3, r3, #3
 2645 002e 1344     		add	r3, r3, r2
 2646 0030 9B00     		lsls	r3, r3, #2
 2647 0032 1A46     		mov	r2, r3
 2648 0034 FB68     		ldr	r3, [r7, #12]
 2649 0036 9818     		adds	r0, r3, r2
 2650 0038 3A69     		ldr	r2, [r7, #16]
 2651 003a 1346     		mov	r3, r2
 2652 003c 9B00     		lsls	r3, r3, #2
 2653 003e 1344     		add	r3, r3, r2
 2654 0040 9B00     		lsls	r3, r3, #2
 2655 0042 314A     		ldr	r2, .L176+4
 2656 0044 1344     		add	r3, r3, r2
 2657 0046 0122     		movs	r2, #1
 2658 0048 1946     		mov	r1, r3
 2659 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 2660 004e 0246     		mov	r2, r0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 94


 2661 0050 7B69     		ldr	r3, [r7, #20]
 2662 0052 1344     		add	r3, r3, r2
 2663 0054 7B61     		str	r3, [r7, #20]
2336:..\Source/tasks.c **** 
2337:..\Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 2664              		.loc 1 2337 0 discriminator 1
 2665 0056 3B69     		ldr	r3, [r7, #16]
 2666 0058 002B     		cmp	r3, #0
 2667 005a E2D1     		bne	.L173
2338:..\Source/tasks.c **** 
2339:..\Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:..\Source/tasks.c **** 				task in the Blocked state. */
2341:..\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 2668              		.loc 1 2341 0
 2669 005c 7A69     		ldr	r2, [r7, #20]
 2670 005e 1346     		mov	r3, r2
 2671 0060 DB00     		lsls	r3, r3, #3
 2672 0062 1344     		add	r3, r3, r2
 2673 0064 9B00     		lsls	r3, r3, #2
 2674 0066 1A46     		mov	r2, r3
 2675 0068 FB68     		ldr	r3, [r7, #12]
 2676 006a 9818     		adds	r0, r3, r2
 2677 006c 274B     		ldr	r3, .L176+8
 2678 006e 1B68     		ldr	r3, [r3]
 2679 0070 0222     		movs	r2, #2
 2680 0072 1946     		mov	r1, r3
 2681 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2682 0078 0246     		mov	r2, r0
 2683 007a 7B69     		ldr	r3, [r7, #20]
 2684 007c 1344     		add	r3, r3, r2
 2685 007e 7B61     		str	r3, [r7, #20]
2342:..\Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 2686              		.loc 1 2342 0
 2687 0080 7A69     		ldr	r2, [r7, #20]
 2688 0082 1346     		mov	r3, r2
 2689 0084 DB00     		lsls	r3, r3, #3
 2690 0086 1344     		add	r3, r3, r2
 2691 0088 9B00     		lsls	r3, r3, #2
 2692 008a 1A46     		mov	r2, r3
 2693 008c FB68     		ldr	r3, [r7, #12]
 2694 008e 9818     		adds	r0, r3, r2
 2695 0090 1F4B     		ldr	r3, .L176+12
 2696 0092 1B68     		ldr	r3, [r3]
 2697 0094 0222     		movs	r2, #2
 2698 0096 1946     		mov	r1, r3
 2699 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 2700 009c 0246     		mov	r2, r0
 2701 009e 7B69     		ldr	r3, [r7, #20]
 2702 00a0 1344     		add	r3, r3, r2
 2703 00a2 7B61     		str	r3, [r7, #20]
2343:..\Source/tasks.c **** 
2344:..\Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:..\Source/tasks.c **** 				{
2346:..\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:..\Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:..\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 2704              		.loc 1 2348 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 95


 2705 00a4 7A69     		ldr	r2, [r7, #20]
 2706 00a6 1346     		mov	r3, r2
 2707 00a8 DB00     		lsls	r3, r3, #3
 2708 00aa 1344     		add	r3, r3, r2
 2709 00ac 9B00     		lsls	r3, r3, #2
 2710 00ae 1A46     		mov	r2, r3
 2711 00b0 FB68     		ldr	r3, [r7, #12]
 2712 00b2 1344     		add	r3, r3, r2
 2713 00b4 0422     		movs	r2, #4
 2714 00b6 1749     		ldr	r1, .L176+16
 2715 00b8 1846     		mov	r0, r3
 2716 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 2717 00be 0246     		mov	r2, r0
 2718 00c0 7B69     		ldr	r3, [r7, #20]
 2719 00c2 1344     		add	r3, r3, r2
 2720 00c4 7B61     		str	r3, [r7, #20]
2349:..\Source/tasks.c **** 				}
2350:..\Source/tasks.c **** 				#endif
2351:..\Source/tasks.c **** 
2352:..\Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:..\Source/tasks.c **** 				{
2354:..\Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:..\Source/tasks.c **** 					each task in the Suspended state. */
2356:..\Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 2721              		.loc 1 2356 0
 2722 00c6 7A69     		ldr	r2, [r7, #20]
 2723 00c8 1346     		mov	r3, r2
 2724 00ca DB00     		lsls	r3, r3, #3
 2725 00cc 1344     		add	r3, r3, r2
 2726 00ce 9B00     		lsls	r3, r3, #2
 2727 00d0 1A46     		mov	r2, r3
 2728 00d2 FB68     		ldr	r3, [r7, #12]
 2729 00d4 1344     		add	r3, r3, r2
 2730 00d6 0322     		movs	r2, #3
 2731 00d8 0F49     		ldr	r1, .L176+20
 2732 00da 1846     		mov	r0, r3
 2733 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 2734 00e0 0246     		mov	r2, r0
 2735 00e2 7B69     		ldr	r3, [r7, #20]
 2736 00e4 1344     		add	r3, r3, r2
 2737 00e6 7B61     		str	r3, [r7, #20]
2357:..\Source/tasks.c **** 				}
2358:..\Source/tasks.c **** 				#endif
2359:..\Source/tasks.c **** 
2360:..\Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:..\Source/tasks.c **** 				{
2362:..\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:..\Source/tasks.c **** 					{
2364:..\Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:..\Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:..\Source/tasks.c **** 						#else
2367:..\Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:..\Source/tasks.c **** 						#endif
2369:..\Source/tasks.c **** 					}
2370:..\Source/tasks.c **** 				}
2371:..\Source/tasks.c **** 				#else
2372:..\Source/tasks.c **** 				{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 96


2373:..\Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 2738              		.loc 1 2373 0
 2739 00e8 7B68     		ldr	r3, [r7, #4]
 2740 00ea 002B     		cmp	r3, #0
 2741 00ec 02D0     		beq	.L172
2374:..\Source/tasks.c **** 					{
2375:..\Source/tasks.c **** 						*pulTotalRunTime = 0;
 2742              		.loc 1 2375 0
 2743 00ee 7B68     		ldr	r3, [r7, #4]
 2744 00f0 0022     		movs	r2, #0
 2745 00f2 1A60     		str	r2, [r3]
 2746              	.L172:
2376:..\Source/tasks.c **** 					}
2377:..\Source/tasks.c **** 				}
2378:..\Source/tasks.c **** 				#endif
2379:..\Source/tasks.c **** 			}
2380:..\Source/tasks.c **** 			else
2381:..\Source/tasks.c **** 			{
2382:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:..\Source/tasks.c **** 			}
2384:..\Source/tasks.c **** 		}
2385:..\Source/tasks.c **** 		( void ) xTaskResumeAll();
 2747              		.loc 1 2385 0
 2748 00f4 FFF7FEFF 		bl	xTaskResumeAll
2386:..\Source/tasks.c **** 
2387:..\Source/tasks.c **** 		return uxTask;
 2749              		.loc 1 2387 0
 2750 00f8 7B69     		ldr	r3, [r7, #20]
2388:..\Source/tasks.c **** 	}
 2751              		.loc 1 2388 0
 2752 00fa 1846     		mov	r0, r3
 2753 00fc 1837     		adds	r7, r7, #24
 2754              		.cfi_def_cfa_offset 8
 2755 00fe BD46     		mov	sp, r7
 2756              		.cfi_def_cfa_register 13
 2757              		@ sp needed
 2758 0100 80BD     		pop	{r7, pc}
 2759              	.L177:
 2760 0102 00BF     		.align	2
 2761              	.L176:
 2762 0104 D8000000 		.word	uxCurrentNumberOfTasks
 2763 0108 04000000 		.word	pxReadyTasksLists
 2764 010c 90000000 		.word	pxDelayedTaskList
 2765 0110 94000000 		.word	pxOverflowDelayedTaskList
 2766 0114 AC000000 		.word	xTasksWaitingTermination
 2767 0118 C4000000 		.word	xSuspendedTaskList
 2768              		.cfi_endproc
 2769              	.LFE90:
 2770              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 2771              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2772              		.align	2
 2773              		.global	xTaskIncrementTick
 2774              		.thumb
 2775              		.thumb_func
 2776              		.type	xTaskIncrementTick, %function
 2777              	xTaskIncrementTick:
 2778              	.LFB91:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 97


2389:..\Source/tasks.c **** 
2390:..\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:..\Source/tasks.c **** /*----------------------------------------------------------*/
2392:..\Source/tasks.c **** 
2393:..\Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:..\Source/tasks.c **** 
2395:..\Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:..\Source/tasks.c **** 	{
2397:..\Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:..\Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:..\Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:..\Source/tasks.c **** 		return xIdleTaskHandle;
2401:..\Source/tasks.c **** 	}
2402:..\Source/tasks.c **** 
2403:..\Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:..\Source/tasks.c **** /*----------------------------------------------------------*/
2405:..\Source/tasks.c **** 
2406:..\Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:..\Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:..\Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:..\Source/tasks.c **** 1. */
2410:..\Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:..\Source/tasks.c **** 
2412:..\Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:..\Source/tasks.c **** 	{
2414:..\Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:..\Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:..\Source/tasks.c **** 		each stepped tick. */
2417:..\Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:..\Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:..\Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:..\Source/tasks.c **** 	}
2421:..\Source/tasks.c **** 
2422:..\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:..\Source/tasks.c **** /*----------------------------------------------------------*/
2424:..\Source/tasks.c **** 
2425:..\Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:..\Source/tasks.c **** 
2427:..\Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:..\Source/tasks.c **** 	{
2429:..\Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:..\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:..\Source/tasks.c **** 
2432:..\Source/tasks.c **** 		configASSERT( pxTCB );
2433:..\Source/tasks.c **** 
2434:..\Source/tasks.c **** 		vTaskSuspendAll();
2435:..\Source/tasks.c **** 		{
2436:..\Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:..\Source/tasks.c **** 			it is actually in the Blocked state. */
2438:..\Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:..\Source/tasks.c **** 			{
2440:..\Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:..\Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:..\Source/tasks.c **** 				scheduler is suspended. */
2443:..\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:..\Source/tasks.c **** 
2445:..\Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 98


2446:..\Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:..\Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:..\Source/tasks.c **** 				is used. */
2449:..\Source/tasks.c **** 				taskENTER_CRITICAL();
2450:..\Source/tasks.c **** 				{
2451:..\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:..\Source/tasks.c **** 					{
2453:..\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:..\Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:..\Source/tasks.c **** 					}
2456:..\Source/tasks.c **** 					else
2457:..\Source/tasks.c **** 					{
2458:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:..\Source/tasks.c **** 					}
2460:..\Source/tasks.c **** 				}
2461:..\Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:..\Source/tasks.c **** 
2463:..\Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:..\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:..\Source/tasks.c **** 
2466:..\Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:..\Source/tasks.c **** 				switch if preemption is turned off. */
2468:..\Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:..\Source/tasks.c **** 				{
2470:..\Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:..\Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:..\Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:..\Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:..\Source/tasks.c **** 					{
2475:..\Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:..\Source/tasks.c **** 						is unsuspended. */
2477:..\Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:..\Source/tasks.c **** 					}
2479:..\Source/tasks.c **** 					else
2480:..\Source/tasks.c **** 					{
2481:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:..\Source/tasks.c **** 					}
2483:..\Source/tasks.c **** 				}
2484:..\Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:..\Source/tasks.c **** 			}
2486:..\Source/tasks.c **** 			else
2487:..\Source/tasks.c **** 			{
2488:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:..\Source/tasks.c **** 			}
2490:..\Source/tasks.c **** 		}
2491:..\Source/tasks.c **** 		xTaskResumeAll();
2492:..\Source/tasks.c **** 
2493:..\Source/tasks.c **** 		return xReturn;
2494:..\Source/tasks.c **** 	}
2495:..\Source/tasks.c **** 
2496:..\Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:..\Source/tasks.c **** /*----------------------------------------------------------*/
2498:..\Source/tasks.c **** 
2499:..\Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:..\Source/tasks.c **** {
 2779              		.loc 1 2500 0
 2780              		.cfi_startproc
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 99


 2781              		@ args = 0, pretend = 0, frame = 24
 2782              		@ frame_needed = 1, uses_anonymous_args = 0
 2783 0000 80B5     		push	{r7, lr}
 2784              		.cfi_def_cfa_offset 8
 2785              		.cfi_offset 7, -8
 2786              		.cfi_offset 14, -4
 2787 0002 86B0     		sub	sp, sp, #24
 2788              		.cfi_def_cfa_offset 32
 2789 0004 00AF     		add	r7, sp, #0
 2790              		.cfi_def_cfa_register 7
2501:..\Source/tasks.c **** TCB_t * pxTCB;
2502:..\Source/tasks.c **** TickType_t xItemValue;
2503:..\Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2791              		.loc 1 2503 0
 2792 0006 0023     		movs	r3, #0
 2793 0008 7B61     		str	r3, [r7, #20]
2504:..\Source/tasks.c **** 
2505:..\Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:..\Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:..\Source/tasks.c **** 	tasks to be unblocked. */
2508:..\Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
 2794              		.loc 1 2508 0
 2795 000a 2C20     		movs	r0, #44
 2796 000c FFF7FEFF 		bl	packPayload0
2509:..\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2797              		.loc 1 2509 0
 2798 0010 4F4B     		ldr	r3, .L193
 2799 0012 1B68     		ldr	r3, [r3]
 2800 0014 002B     		cmp	r3, #0
 2801 0016 40F08B80 		bne	.L179
 2802              	.LBB42:
2510:..\Source/tasks.c **** 	{
2511:..\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:..\Source/tasks.c **** 		block. */
2513:..\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
 2803              		.loc 1 2513 0
 2804 001a 4E4B     		ldr	r3, .L193+4
 2805 001c 1B68     		ldr	r3, [r3]
 2806 001e 0133     		adds	r3, r3, #1
 2807 0020 3B61     		str	r3, [r7, #16]
2514:..\Source/tasks.c **** 
2515:..\Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:..\Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:..\Source/tasks.c **** 		xTickCount = xConstTickCount;
 2808              		.loc 1 2517 0
 2809 0022 4C4A     		ldr	r2, .L193+4
 2810 0024 3B69     		ldr	r3, [r7, #16]
 2811 0026 1360     		str	r3, [r2]
2518:..\Source/tasks.c **** 
2519:..\Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
 2812              		.loc 1 2519 0
 2813 0028 3B69     		ldr	r3, [r7, #16]
 2814 002a 002B     		cmp	r3, #0
 2815 002c 10D1     		bne	.L180
 2816              	.LBB43:
2520:..\Source/tasks.c **** 		{
2521:..\Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 100


 2817              		.loc 1 2521 0
 2818 002e 4A4B     		ldr	r3, .L193+8
 2819 0030 1B68     		ldr	r3, [r3]
 2820 0032 FB60     		str	r3, [r7, #12]
 2821 0034 494B     		ldr	r3, .L193+12
 2822 0036 1B68     		ldr	r3, [r3]
 2823 0038 474A     		ldr	r2, .L193+8
 2824 003a 1360     		str	r3, [r2]
 2825 003c 474A     		ldr	r2, .L193+12
 2826 003e FB68     		ldr	r3, [r7, #12]
 2827 0040 1360     		str	r3, [r2]
 2828 0042 474B     		ldr	r3, .L193+16
 2829 0044 1B68     		ldr	r3, [r3]
 2830 0046 0133     		adds	r3, r3, #1
 2831 0048 454A     		ldr	r2, .L193+16
 2832 004a 1360     		str	r3, [r2]
 2833 004c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2834              	.L180:
 2835              	.LBE43:
2522:..\Source/tasks.c **** 		}
2523:..\Source/tasks.c **** 		else
2524:..\Source/tasks.c **** 		{
2525:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:..\Source/tasks.c **** 		}
2527:..\Source/tasks.c **** 
2528:..\Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:..\Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:..\Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:..\Source/tasks.c **** 		look any further down the list. */
2532:..\Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2836              		.loc 1 2532 0
 2837 0050 444B     		ldr	r3, .L193+20
 2838 0052 1B68     		ldr	r3, [r3]
 2839 0054 3A69     		ldr	r2, [r7, #16]
 2840 0056 9A42     		cmp	r2, r3
 2841 0058 5BD3     		bcc	.L181
 2842              	.L188:
2533:..\Source/tasks.c **** 		{
2534:..\Source/tasks.c **** 			for( ;; )
2535:..\Source/tasks.c **** 			{
2536:..\Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2843              		.loc 1 2536 0
 2844 005a 3F4B     		ldr	r3, .L193+8
 2845 005c 1B68     		ldr	r3, [r3]
 2846 005e 1B68     		ldr	r3, [r3]
 2847 0060 002B     		cmp	r3, #0
 2848 0062 01D1     		bne	.L182
 2849              		.loc 1 2536 0 is_stmt 0 discriminator 1
 2850 0064 0123     		movs	r3, #1
 2851 0066 00E0     		b	.L183
 2852              	.L182:
 2853              		.loc 1 2536 0 discriminator 2
 2854 0068 0023     		movs	r3, #0
 2855              	.L183:
 2856              		.loc 1 2536 0 discriminator 4
 2857 006a 002B     		cmp	r3, #0
 2858 006c 04D0     		beq	.L184
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 101


2537:..\Source/tasks.c **** 				{
2538:..\Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:..\Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:..\Source/tasks.c **** 					unlikely that the
2541:..\Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:..\Source/tasks.c **** 					next time through. */
2543:..\Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2859              		.loc 1 2543 0 is_stmt 1
 2860 006e 3D4B     		ldr	r3, .L193+20
 2861 0070 4FF0FF32 		mov	r2, #-1
 2862 0074 1A60     		str	r2, [r3]
2544:..\Source/tasks.c **** 					break;
 2863              		.loc 1 2544 0
 2864 0076 4CE0     		b	.L181
 2865              	.L184:
2545:..\Source/tasks.c **** 				}
2546:..\Source/tasks.c **** 				else
2547:..\Source/tasks.c **** 				{
2548:..\Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:..\Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:..\Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:..\Source/tasks.c **** 					be removed from the Blocked state. */
2552:..\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2866              		.loc 1 2552 0
 2867 0078 374B     		ldr	r3, .L193+8
 2868 007a 1B68     		ldr	r3, [r3]
 2869 007c DB68     		ldr	r3, [r3, #12]
 2870 007e DB68     		ldr	r3, [r3, #12]
 2871 0080 BB60     		str	r3, [r7, #8]
2553:..\Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2872              		.loc 1 2553 0
 2873 0082 BB68     		ldr	r3, [r7, #8]
 2874 0084 5B68     		ldr	r3, [r3, #4]
 2875 0086 7B60     		str	r3, [r7, #4]
2554:..\Source/tasks.c **** 
2555:..\Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2876              		.loc 1 2555 0
 2877 0088 3A69     		ldr	r2, [r7, #16]
 2878 008a 7B68     		ldr	r3, [r7, #4]
 2879 008c 9A42     		cmp	r2, r3
 2880 008e 03D2     		bcs	.L185
2556:..\Source/tasks.c **** 					{
2557:..\Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:..\Source/tasks.c **** 						item value is the time at which the task at the head
2559:..\Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:..\Source/tasks.c **** 						state -	so record the item value in
2561:..\Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:..\Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2881              		.loc 1 2562 0
 2882 0090 344A     		ldr	r2, .L193+20
 2883 0092 7B68     		ldr	r3, [r7, #4]
 2884 0094 1360     		str	r3, [r2]
2563:..\Source/tasks.c **** 						break;
 2885              		.loc 1 2563 0
 2886 0096 3CE0     		b	.L181
 2887              	.L185:
2564:..\Source/tasks.c **** 					}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 102


2565:..\Source/tasks.c **** 					else
2566:..\Source/tasks.c **** 					{
2567:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:..\Source/tasks.c **** 					}
2569:..\Source/tasks.c **** 
2570:..\Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:..\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2888              		.loc 1 2571 0
 2889 0098 BB68     		ldr	r3, [r7, #8]
 2890 009a 0433     		adds	r3, r3, #4
 2891 009c 1846     		mov	r0, r3
 2892 009e FFF7FEFF 		bl	uxListRemove
2572:..\Source/tasks.c **** 
2573:..\Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:..\Source/tasks.c **** 					it from the event list. */
2575:..\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2893              		.loc 1 2575 0
 2894 00a2 BB68     		ldr	r3, [r7, #8]
 2895 00a4 9B6A     		ldr	r3, [r3, #40]
 2896 00a6 002B     		cmp	r3, #0
 2897 00a8 04D0     		beq	.L186
2576:..\Source/tasks.c **** 					{
2577:..\Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2898              		.loc 1 2577 0
 2899 00aa BB68     		ldr	r3, [r7, #8]
 2900 00ac 1833     		adds	r3, r3, #24
 2901 00ae 1846     		mov	r0, r3
 2902 00b0 FFF7FEFF 		bl	uxListRemove
 2903              	.L186:
2578:..\Source/tasks.c **** 					}
2579:..\Source/tasks.c **** 					else
2580:..\Source/tasks.c **** 					{
2581:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:..\Source/tasks.c **** 					}
2583:..\Source/tasks.c **** 
2584:..\Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:..\Source/tasks.c **** 					list. */
2586:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2904              		.loc 1 2586 0
 2905 00b4 BB68     		ldr	r3, [r7, #8]
 2906 00b6 5B6C     		ldr	r3, [r3, #68]
 2907 00b8 DBB2     		uxtb	r3, r3
 2908 00ba 1946     		mov	r1, r3
 2909 00bc 0B20     		movs	r0, #11
 2910 00be FFF7FEFF 		bl	packPayload1
 2911 00c2 BB68     		ldr	r3, [r7, #8]
 2912 00c4 DB6A     		ldr	r3, [r3, #44]
 2913 00c6 0122     		movs	r2, #1
 2914 00c8 9A40     		lsls	r2, r2, r3
 2915 00ca 274B     		ldr	r3, .L193+24
 2916 00cc 1B68     		ldr	r3, [r3]
 2917 00ce 1343     		orrs	r3, r3, r2
 2918 00d0 254A     		ldr	r2, .L193+24
 2919 00d2 1360     		str	r3, [r2]
 2920 00d4 BB68     		ldr	r3, [r7, #8]
 2921 00d6 DA6A     		ldr	r2, [r3, #44]
 2922 00d8 1346     		mov	r3, r2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 103


 2923 00da 9B00     		lsls	r3, r3, #2
 2924 00dc 1344     		add	r3, r3, r2
 2925 00de 9B00     		lsls	r3, r3, #2
 2926 00e0 224A     		ldr	r2, .L193+28
 2927 00e2 1A44     		add	r2, r2, r3
 2928 00e4 BB68     		ldr	r3, [r7, #8]
 2929 00e6 0433     		adds	r3, r3, #4
 2930 00e8 1946     		mov	r1, r3
 2931 00ea 1046     		mov	r0, r2
 2932 00ec FFF7FEFF 		bl	vListInsertEnd
 2933 00f0 BB68     		ldr	r3, [r7, #8]
 2934 00f2 5B6C     		ldr	r3, [r3, #68]
 2935 00f4 DBB2     		uxtb	r3, r3
 2936 00f6 1946     		mov	r1, r3
 2937 00f8 0C20     		movs	r0, #12
 2938 00fa FFF7FEFF 		bl	packPayload1
2587:..\Source/tasks.c **** 
2588:..\Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:..\Source/tasks.c **** 					context switch if preemption is turned off. */
2590:..\Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:..\Source/tasks.c **** 					{
2592:..\Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:..\Source/tasks.c **** 						only be performed if the unblocked task has a
2594:..\Source/tasks.c **** 						priority that is equal to or higher than the
2595:..\Source/tasks.c **** 						currently executing task. */
2596:..\Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2939              		.loc 1 2596 0
 2940 00fe BB68     		ldr	r3, [r7, #8]
 2941 0100 DA6A     		ldr	r2, [r3, #44]
 2942 0102 1B4B     		ldr	r3, .L193+32
 2943 0104 1B68     		ldr	r3, [r3]
 2944 0106 DB6A     		ldr	r3, [r3, #44]
 2945 0108 9A42     		cmp	r2, r3
 2946 010a A6D3     		bcc	.L188
2597:..\Source/tasks.c **** 						{
2598:..\Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2947              		.loc 1 2598 0
 2948 010c 0123     		movs	r3, #1
 2949 010e 7B61     		str	r3, [r7, #20]
2599:..\Source/tasks.c **** 						}
2600:..\Source/tasks.c **** 						else
2601:..\Source/tasks.c **** 						{
2602:..\Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:..\Source/tasks.c **** 						}
2604:..\Source/tasks.c **** 					}
2605:..\Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:..\Source/tasks.c **** 				}
2607:..\Source/tasks.c **** 			}
 2950              		.loc 1 2607 0
 2951 0110 A3E7     		b	.L188
 2952              	.L181:
2608:..\Source/tasks.c **** 		}
2609:..\Source/tasks.c **** 
2610:..\Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:..\Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:..\Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:..\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 104


2614:..\Source/tasks.c **** 		{
2615:..\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2953              		.loc 1 2615 0
 2954 0112 174B     		ldr	r3, .L193+32
 2955 0114 1B68     		ldr	r3, [r3]
 2956 0116 DA6A     		ldr	r2, [r3, #44]
 2957 0118 1449     		ldr	r1, .L193+28
 2958 011a 1346     		mov	r3, r2
 2959 011c 9B00     		lsls	r3, r3, #2
 2960 011e 1344     		add	r3, r3, r2
 2961 0120 9B00     		lsls	r3, r3, #2
 2962 0122 0B44     		add	r3, r3, r1
 2963 0124 1B68     		ldr	r3, [r3]
 2964 0126 012B     		cmp	r3, #1
 2965 0128 07D9     		bls	.L190
2616:..\Source/tasks.c **** 			{
2617:..\Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2966              		.loc 1 2617 0
 2967 012a 0123     		movs	r3, #1
 2968 012c 7B61     		str	r3, [r7, #20]
 2969 012e 04E0     		b	.L190
 2970              	.L179:
 2971              	.LBE42:
2618:..\Source/tasks.c **** 			}
2619:..\Source/tasks.c **** 			else
2620:..\Source/tasks.c **** 			{
2621:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:..\Source/tasks.c **** 			}
2623:..\Source/tasks.c **** 		}
2624:..\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:..\Source/tasks.c **** 
2626:..\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:..\Source/tasks.c **** 		{
2628:..\Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:..\Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:..\Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:..\Source/tasks.c **** 			{
2632:..\Source/tasks.c **** 				vApplicationTickHook();
2633:..\Source/tasks.c **** 			}
2634:..\Source/tasks.c **** 			else
2635:..\Source/tasks.c **** 			{
2636:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:..\Source/tasks.c **** 			}
2638:..\Source/tasks.c **** 		}
2639:..\Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:..\Source/tasks.c **** 	}
2641:..\Source/tasks.c **** 	else
2642:..\Source/tasks.c **** 	{
2643:..\Source/tasks.c **** 		++uxPendedTicks;
 2972              		.loc 1 2643 0
 2973 0130 104B     		ldr	r3, .L193+36
 2974 0132 1B68     		ldr	r3, [r3]
 2975 0134 0133     		adds	r3, r3, #1
 2976 0136 0F4A     		ldr	r2, .L193+36
 2977 0138 1360     		str	r3, [r2]
 2978              	.L190:
2644:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 105


2645:..\Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:..\Source/tasks.c **** 		scheduler is locked. */
2647:..\Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:..\Source/tasks.c **** 		{
2649:..\Source/tasks.c **** 			vApplicationTickHook();
2650:..\Source/tasks.c **** 		}
2651:..\Source/tasks.c **** 		#endif
2652:..\Source/tasks.c **** 	}
2653:..\Source/tasks.c **** 
2654:..\Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:..\Source/tasks.c **** 	{
2656:..\Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2979              		.loc 1 2656 0
 2980 013a 0F4B     		ldr	r3, .L193+40
 2981 013c 1B68     		ldr	r3, [r3]
 2982 013e 002B     		cmp	r3, #0
 2983 0140 01D0     		beq	.L191
2657:..\Source/tasks.c **** 		{
2658:..\Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2984              		.loc 1 2658 0
 2985 0142 0123     		movs	r3, #1
 2986 0144 7B61     		str	r3, [r7, #20]
 2987              	.L191:
2659:..\Source/tasks.c **** 		}
2660:..\Source/tasks.c **** 		else
2661:..\Source/tasks.c **** 		{
2662:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:..\Source/tasks.c **** 		}
2664:..\Source/tasks.c **** 	}
2665:..\Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:..\Source/tasks.c **** 
2667:..\Source/tasks.c **** 	return xSwitchRequired;
 2988              		.loc 1 2667 0
 2989 0146 7B69     		ldr	r3, [r7, #20]
2668:..\Source/tasks.c **** }
 2990              		.loc 1 2668 0
 2991 0148 1846     		mov	r0, r3
 2992 014a 1837     		adds	r7, r7, #24
 2993              		.cfi_def_cfa_offset 8
 2994 014c BD46     		mov	sp, r7
 2995              		.cfi_def_cfa_register 13
 2996              		@ sp needed
 2997 014e 80BD     		pop	{r7, pc}
 2998              	.L194:
 2999              		.align	2
 3000              	.L193:
 3001 0150 00010000 		.word	uxSchedulerSuspended
 3002 0154 DC000000 		.word	xTickCount
 3003 0158 90000000 		.word	pxDelayedTaskList
 3004 015c 94000000 		.word	pxOverflowDelayedTaskList
 3005 0160 F0000000 		.word	xNumOfOverflows
 3006 0164 F8000000 		.word	xNextTaskUnblockTime
 3007 0168 E0000000 		.word	uxTopReadyPriority
 3008 016c 04000000 		.word	pxReadyTasksLists
 3009 0170 00000000 		.word	pxCurrentTCB
 3010 0174 E8000000 		.word	uxPendedTicks
 3011 0178 EC000000 		.word	xYieldPending
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 106


 3012              		.cfi_endproc
 3013              	.LFE91:
 3014              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 3015              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3016              		.align	2
 3017              		.global	vTaskSwitchContext
 3018              		.thumb
 3019              		.thumb_func
 3020              		.type	vTaskSwitchContext, %function
 3021              	vTaskSwitchContext:
 3022              	.LFB92:
2669:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2670:..\Source/tasks.c **** 
2671:..\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:..\Source/tasks.c **** 
2673:..\Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:..\Source/tasks.c **** 	{
2675:..\Source/tasks.c **** 	TCB_t *xTCB;
2676:..\Source/tasks.c **** 
2677:..\Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:..\Source/tasks.c **** 		getting set. */
2679:..\Source/tasks.c **** 		if( xTask == NULL )
2680:..\Source/tasks.c **** 		{
2681:..\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:..\Source/tasks.c **** 		}
2683:..\Source/tasks.c **** 		else
2684:..\Source/tasks.c **** 		{
2685:..\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:..\Source/tasks.c **** 		}
2687:..\Source/tasks.c **** 
2688:..\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:..\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:..\Source/tasks.c **** 		taskENTER_CRITICAL();
2691:..\Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:..\Source/tasks.c **** 	}
2694:..\Source/tasks.c **** 
2695:..\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2697:..\Source/tasks.c **** 
2698:..\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:..\Source/tasks.c **** 
2700:..\Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:..\Source/tasks.c **** 	{
2702:..\Source/tasks.c **** 	TCB_t *xTCB;
2703:..\Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:..\Source/tasks.c **** 
2705:..\Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:..\Source/tasks.c **** 		if( xTask == NULL )
2707:..\Source/tasks.c **** 		{
2708:..\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:..\Source/tasks.c **** 		}
2710:..\Source/tasks.c **** 		else
2711:..\Source/tasks.c **** 		{
2712:..\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:..\Source/tasks.c **** 		}
2714:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 107


2715:..\Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:..\Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:..\Source/tasks.c **** 		taskENTER_CRITICAL();
2718:..\Source/tasks.c **** 		{
2719:..\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:..\Source/tasks.c **** 		}
2721:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:..\Source/tasks.c **** 
2723:..\Source/tasks.c **** 		return xReturn;
2724:..\Source/tasks.c **** 	}
2725:..\Source/tasks.c **** 
2726:..\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2728:..\Source/tasks.c **** 
2729:..\Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:..\Source/tasks.c **** 
2731:..\Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:..\Source/tasks.c **** 	{
2733:..\Source/tasks.c **** 	TCB_t *xTCB;
2734:..\Source/tasks.c **** 	BaseType_t xReturn;
2735:..\Source/tasks.c **** 
2736:..\Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:..\Source/tasks.c **** 		if( xTask == NULL )
2738:..\Source/tasks.c **** 		{
2739:..\Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:..\Source/tasks.c **** 		}
2741:..\Source/tasks.c **** 		else
2742:..\Source/tasks.c **** 		{
2743:..\Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:..\Source/tasks.c **** 		}
2745:..\Source/tasks.c **** 
2746:..\Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:..\Source/tasks.c **** 		{
2748:..\Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:..\Source/tasks.c **** 		}
2750:..\Source/tasks.c **** 		else
2751:..\Source/tasks.c **** 		{
2752:..\Source/tasks.c **** 			xReturn = pdFAIL;
2753:..\Source/tasks.c **** 		}
2754:..\Source/tasks.c **** 
2755:..\Source/tasks.c **** 		return xReturn;
2756:..\Source/tasks.c **** 	}
2757:..\Source/tasks.c **** 
2758:..\Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2760:..\Source/tasks.c **** 
2761:..\Source/tasks.c **** void vTaskSwitchContext( void )
2762:..\Source/tasks.c **** {
 3023              		.loc 1 2762 0
 3024              		.cfi_startproc
 3025              		@ args = 0, pretend = 0, frame = 24
 3026              		@ frame_needed = 1, uses_anonymous_args = 0
 3027 0000 80B5     		push	{r7, lr}
 3028              		.cfi_def_cfa_offset 8
 3029              		.cfi_offset 7, -8
 3030              		.cfi_offset 14, -4
 3031 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 108


 3032              		.cfi_def_cfa_offset 32
 3033 0004 00AF     		add	r7, sp, #0
 3034              		.cfi_def_cfa_register 7
2763:..\Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3035              		.loc 1 2763 0
 3036 0006 374B     		ldr	r3, .L203
 3037 0008 1B68     		ldr	r3, [r3]
 3038 000a 002B     		cmp	r3, #0
 3039 000c 03D0     		beq	.L196
2764:..\Source/tasks.c **** 	{
2765:..\Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:..\Source/tasks.c **** 		switch. */
2767:..\Source/tasks.c **** 		xYieldPending = pdTRUE;
 3040              		.loc 1 2767 0
 3041 000e 364B     		ldr	r3, .L203+4
 3042 0010 0122     		movs	r2, #1
 3043 0012 1A60     		str	r2, [r3]
2768:..\Source/tasks.c **** 	}
2769:..\Source/tasks.c **** 	else
2770:..\Source/tasks.c **** 	{
2771:..\Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:..\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:..\Source/tasks.c **** 
2774:..\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:..\Source/tasks.c **** 		{
2776:..\Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:..\Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:..\Source/tasks.c **** 				#else
2779:..\Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:..\Source/tasks.c **** 				#endif
2781:..\Source/tasks.c **** 
2782:..\Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:..\Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:..\Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:..\Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:..\Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:..\Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:..\Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:..\Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:..\Source/tasks.c **** 				{
2791:..\Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:..\Source/tasks.c **** 				}
2793:..\Source/tasks.c **** 				else
2794:..\Source/tasks.c **** 				{
2795:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:..\Source/tasks.c **** 				}
2797:..\Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:..\Source/tasks.c **** 		}
2799:..\Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:..\Source/tasks.c **** 
2801:..\Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:..\Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:..\Source/tasks.c **** 
2804:..\Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:..\Source/tasks.c **** 		optimised asm code. */
2806:..\Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:..\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 109


2808:..\Source/tasks.c **** 
2809:..\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:..\Source/tasks.c **** 		{
2811:..\Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:..\Source/tasks.c **** 			structure specific to this task. */
2813:..\Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:..\Source/tasks.c **** 		}
2815:..\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:..\Source/tasks.c **** 	}
2817:..\Source/tasks.c **** }
 3044              		.loc 1 2817 0
 3045 0014 61E0     		b	.L202
 3046              	.L196:
2771:..\Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3047              		.loc 1 2771 0
 3048 0016 344B     		ldr	r3, .L203+4
 3049 0018 0022     		movs	r2, #0
 3050 001a 1A60     		str	r2, [r3]
2772:..\Source/tasks.c **** 
 3051              		.loc 1 2772 0
 3052 001c 334B     		ldr	r3, .L203+8
 3053 001e 1B68     		ldr	r3, [r3]
 3054 0020 5B6C     		ldr	r3, [r3, #68]
 3055 0022 DBB2     		uxtb	r3, r3
 3056 0024 1946     		mov	r1, r3
 3057 0026 0620     		movs	r0, #6
 3058 0028 FFF7FEFF 		bl	packPayload1
 3059              	.LBB44:
2802:..\Source/tasks.c **** 
 3060              		.loc 1 2802 0
 3061 002c 2F4B     		ldr	r3, .L203+8
 3062 002e 1B68     		ldr	r3, [r3]
 3063 0030 1B6B     		ldr	r3, [r3, #48]
 3064 0032 7B61     		str	r3, [r7, #20]
 3065 0034 4FF0A533 		mov	r3, #-1515870811
 3066 0038 3B61     		str	r3, [r7, #16]
 3067 003a 7B69     		ldr	r3, [r7, #20]
 3068 003c 1A68     		ldr	r2, [r3]
 3069 003e 3B69     		ldr	r3, [r7, #16]
 3070 0040 9A42     		cmp	r2, r3
 3071 0042 11D1     		bne	.L198
2802:..\Source/tasks.c **** 
 3072              		.loc 1 2802 0 is_stmt 0 discriminator 2
 3073 0044 7B69     		ldr	r3, [r7, #20]
 3074 0046 0433     		adds	r3, r3, #4
 3075 0048 1A68     		ldr	r2, [r3]
 3076 004a 3B69     		ldr	r3, [r7, #16]
 3077 004c 9A42     		cmp	r2, r3
 3078 004e 0BD1     		bne	.L198
2802:..\Source/tasks.c **** 
 3079              		.loc 1 2802 0 discriminator 4
 3080 0050 7B69     		ldr	r3, [r7, #20]
 3081 0052 0833     		adds	r3, r3, #8
 3082 0054 1A68     		ldr	r2, [r3]
 3083 0056 3B69     		ldr	r3, [r7, #16]
 3084 0058 9A42     		cmp	r2, r3
 3085 005a 05D1     		bne	.L198
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 110


2802:..\Source/tasks.c **** 
 3086              		.loc 1 2802 0 discriminator 6
 3087 005c 7B69     		ldr	r3, [r7, #20]
 3088 005e 0C33     		adds	r3, r3, #12
 3089 0060 1A68     		ldr	r2, [r3]
 3090 0062 3B69     		ldr	r3, [r7, #16]
 3091 0064 9A42     		cmp	r2, r3
 3092 0066 08D0     		beq	.L199
 3093              	.L198:
2802:..\Source/tasks.c **** 
 3094              		.loc 1 2802 0 discriminator 7
 3095 0068 204B     		ldr	r3, .L203+8
 3096 006a 1A68     		ldr	r2, [r3]
 3097 006c 1F4B     		ldr	r3, .L203+8
 3098 006e 1B68     		ldr	r3, [r3]
 3099 0070 3433     		adds	r3, r3, #52
 3100 0072 1946     		mov	r1, r3
 3101 0074 1046     		mov	r0, r2
 3102 0076 FFF7FEFF 		bl	vApplicationStackOverflowHook
 3103              	.L199:
 3104              	.LBE44:
 3105              	.LBB45:
2806:..\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3106              		.loc 1 2806 0 is_stmt 1
 3107 007a 1D4B     		ldr	r3, .L203+12
 3108 007c 1B68     		ldr	r3, [r3]
 3109 007e 7B60     		str	r3, [r7, #4]
 3110              	.LBB46:
 3111              	.LBB47:
 176:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 3112              		.loc 2 176 0
 3113 0080 7B68     		ldr	r3, [r7, #4]
 3114              		.syntax unified
 3115              	@ 176 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 3116 0082 B3FA83F3 		clz r3, r3
 3117              	@ 0 "" 2
 3118              		.thumb
 3119              		.syntax unified
 3120 0086 FB70     		strb	r3, [r7, #3]
 177:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 3121              		.loc 2 177 0
 3122 0088 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3123              	.LBE47:
 3124              	.LBE46:
2806:..\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3125              		.loc 1 2806 0
 3126 008a C3F11F03 		rsb	r3, r3, #31
 3127 008e FB60     		str	r3, [r7, #12]
 3128              	.LBB48:
 3129 0090 FA68     		ldr	r2, [r7, #12]
 3130 0092 1346     		mov	r3, r2
 3131 0094 9B00     		lsls	r3, r3, #2
 3132 0096 1344     		add	r3, r3, r2
 3133 0098 9B00     		lsls	r3, r3, #2
 3134 009a 164A     		ldr	r2, .L203+16
 3135 009c 1344     		add	r3, r3, r2
 3136 009e BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 111


 3137 00a0 BB68     		ldr	r3, [r7, #8]
 3138 00a2 5B68     		ldr	r3, [r3, #4]
 3139 00a4 5A68     		ldr	r2, [r3, #4]
 3140 00a6 BB68     		ldr	r3, [r7, #8]
 3141 00a8 5A60     		str	r2, [r3, #4]
 3142 00aa BB68     		ldr	r3, [r7, #8]
 3143 00ac 5A68     		ldr	r2, [r3, #4]
 3144 00ae BB68     		ldr	r3, [r7, #8]
 3145 00b0 0833     		adds	r3, r3, #8
 3146 00b2 9A42     		cmp	r2, r3
 3147 00b4 04D1     		bne	.L201
2806:..\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3148              		.loc 1 2806 0 is_stmt 0 discriminator 1
 3149 00b6 BB68     		ldr	r3, [r7, #8]
 3150 00b8 5B68     		ldr	r3, [r3, #4]
 3151 00ba 5A68     		ldr	r2, [r3, #4]
 3152 00bc BB68     		ldr	r3, [r7, #8]
 3153 00be 5A60     		str	r2, [r3, #4]
 3154              	.L201:
2806:..\Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3155              		.loc 1 2806 0 discriminator 3
 3156 00c0 BB68     		ldr	r3, [r7, #8]
 3157 00c2 5B68     		ldr	r3, [r3, #4]
 3158 00c4 DB68     		ldr	r3, [r3, #12]
 3159 00c6 094A     		ldr	r2, .L203+8
 3160 00c8 1360     		str	r3, [r2]
 3161              	.LBE48:
 3162              	.LBE45:
2807:..\Source/tasks.c **** 
 3163              		.loc 1 2807 0 is_stmt 1 discriminator 3
 3164 00ca 084B     		ldr	r3, .L203+8
 3165 00cc 1B68     		ldr	r3, [r3]
 3166 00ce 5B6C     		ldr	r3, [r3, #68]
 3167 00d0 DBB2     		uxtb	r3, r3
 3168 00d2 1946     		mov	r1, r3
 3169 00d4 0220     		movs	r0, #2
 3170 00d6 FFF7FEFF 		bl	packPayload1
 3171              	.L202:
 3172              		.loc 1 2817 0
 3173 00da 00BF     		nop
 3174 00dc 1837     		adds	r7, r7, #24
 3175              		.cfi_def_cfa_offset 8
 3176 00de BD46     		mov	sp, r7
 3177              		.cfi_def_cfa_register 13
 3178              		@ sp needed
 3179 00e0 80BD     		pop	{r7, pc}
 3180              	.L204:
 3181 00e2 00BF     		.align	2
 3182              	.L203:
 3183 00e4 00010000 		.word	uxSchedulerSuspended
 3184 00e8 EC000000 		.word	xYieldPending
 3185 00ec 00000000 		.word	pxCurrentTCB
 3186 00f0 E0000000 		.word	uxTopReadyPriority
 3187 00f4 04000000 		.word	pxReadyTasksLists
 3188              		.cfi_endproc
 3189              	.LFE92:
 3190              		.size	vTaskSwitchContext, .-vTaskSwitchContext
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 112


 3191              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3192              		.align	2
 3193              		.global	vTaskPlaceOnEventList
 3194              		.thumb
 3195              		.thumb_func
 3196              		.type	vTaskPlaceOnEventList, %function
 3197              	vTaskPlaceOnEventList:
 3198              	.LFB93:
2818:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2819:..\Source/tasks.c **** 
2820:..\Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:..\Source/tasks.c **** {
 3199              		.loc 1 2821 0
 3200              		.cfi_startproc
 3201              		@ args = 0, pretend = 0, frame = 8
 3202              		@ frame_needed = 1, uses_anonymous_args = 0
 3203 0000 80B5     		push	{r7, lr}
 3204              		.cfi_def_cfa_offset 8
 3205              		.cfi_offset 7, -8
 3206              		.cfi_offset 14, -4
 3207 0002 82B0     		sub	sp, sp, #8
 3208              		.cfi_def_cfa_offset 16
 3209 0004 00AF     		add	r7, sp, #0
 3210              		.cfi_def_cfa_register 7
 3211 0006 7860     		str	r0, [r7, #4]
 3212 0008 3960     		str	r1, [r7]
2822:..\Source/tasks.c **** 	configASSERT( pxEventList );
2823:..\Source/tasks.c **** 
2824:..\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:..\Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:..\Source/tasks.c **** 
2827:..\Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:..\Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:..\Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:..\Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:..\Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3213              		.loc 1 2831 0
 3214 000a 074B     		ldr	r3, .L206
 3215 000c 1B68     		ldr	r3, [r3]
 3216 000e 1833     		adds	r3, r3, #24
 3217 0010 1946     		mov	r1, r3
 3218 0012 7868     		ldr	r0, [r7, #4]
 3219 0014 FFF7FEFF 		bl	vListInsert
2832:..\Source/tasks.c **** 
2833:..\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3220              		.loc 1 2833 0
 3221 0018 0121     		movs	r1, #1
 3222 001a 3868     		ldr	r0, [r7]
 3223 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2834:..\Source/tasks.c **** }
 3224              		.loc 1 2834 0
 3225 0020 00BF     		nop
 3226 0022 0837     		adds	r7, r7, #8
 3227              		.cfi_def_cfa_offset 8
 3228 0024 BD46     		mov	sp, r7
 3229              		.cfi_def_cfa_register 13
 3230              		@ sp needed
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 113


 3231 0026 80BD     		pop	{r7, pc}
 3232              	.L207:
 3233              		.align	2
 3234              	.L206:
 3235 0028 00000000 		.word	pxCurrentTCB
 3236              		.cfi_endproc
 3237              	.LFE93:
 3238              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 3239              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3240              		.align	2
 3241              		.global	vTaskPlaceOnUnorderedEventList
 3242              		.thumb
 3243              		.thumb_func
 3244              		.type	vTaskPlaceOnUnorderedEventList, %function
 3245              	vTaskPlaceOnUnorderedEventList:
 3246              	.LFB94:
2835:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2836:..\Source/tasks.c **** 
2837:..\Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:..\Source/tasks.c **** {
 3247              		.loc 1 2838 0
 3248              		.cfi_startproc
 3249              		@ args = 0, pretend = 0, frame = 16
 3250              		@ frame_needed = 1, uses_anonymous_args = 0
 3251 0000 80B5     		push	{r7, lr}
 3252              		.cfi_def_cfa_offset 8
 3253              		.cfi_offset 7, -8
 3254              		.cfi_offset 14, -4
 3255 0002 84B0     		sub	sp, sp, #16
 3256              		.cfi_def_cfa_offset 24
 3257 0004 00AF     		add	r7, sp, #0
 3258              		.cfi_def_cfa_register 7
 3259 0006 F860     		str	r0, [r7, #12]
 3260 0008 B960     		str	r1, [r7, #8]
 3261 000a 7A60     		str	r2, [r7, #4]
2839:..\Source/tasks.c **** 	configASSERT( pxEventList );
2840:..\Source/tasks.c **** 
2841:..\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:..\Source/tasks.c **** 	the event groups implementation. */
2843:..\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:..\Source/tasks.c **** 
2845:..\Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:..\Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:..\Source/tasks.c **** 	task that is not in the Blocked state. */
2848:..\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3262              		.loc 1 2848 0
 3263 000c 0A4B     		ldr	r3, .L209
 3264 000e 1B68     		ldr	r3, [r3]
 3265 0010 BA68     		ldr	r2, [r7, #8]
 3266 0012 42F00042 		orr	r2, r2, #-2147483648
 3267 0016 9A61     		str	r2, [r3, #24]
2849:..\Source/tasks.c **** 
2850:..\Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:..\Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:..\Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:..\Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:..\Source/tasks.c **** 	the task level). */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 114


2855:..\Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3268              		.loc 1 2855 0
 3269 0018 074B     		ldr	r3, .L209
 3270 001a 1B68     		ldr	r3, [r3]
 3271 001c 1833     		adds	r3, r3, #24
 3272 001e 1946     		mov	r1, r3
 3273 0020 F868     		ldr	r0, [r7, #12]
 3274 0022 FFF7FEFF 		bl	vListInsertEnd
2856:..\Source/tasks.c **** 
2857:..\Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 3275              		.loc 1 2857 0
 3276 0026 0121     		movs	r1, #1
 3277 0028 7868     		ldr	r0, [r7, #4]
 3278 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2858:..\Source/tasks.c **** }
 3279              		.loc 1 2858 0
 3280 002e 00BF     		nop
 3281 0030 1037     		adds	r7, r7, #16
 3282              		.cfi_def_cfa_offset 8
 3283 0032 BD46     		mov	sp, r7
 3284              		.cfi_def_cfa_register 13
 3285              		@ sp needed
 3286 0034 80BD     		pop	{r7, pc}
 3287              	.L210:
 3288 0036 00BF     		.align	2
 3289              	.L209:
 3290 0038 00000000 		.word	pxCurrentTCB
 3291              		.cfi_endproc
 3292              	.LFE94:
 3293              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3294              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3295              		.align	2
 3296              		.global	xTaskRemoveFromEventList
 3297              		.thumb
 3298              		.thumb_func
 3299              		.type	xTaskRemoveFromEventList, %function
 3300              	xTaskRemoveFromEventList:
 3301              	.LFB95:
2859:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2860:..\Source/tasks.c **** 
2861:..\Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:..\Source/tasks.c **** 
2863:..\Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:..\Source/tasks.c **** 	{
2865:..\Source/tasks.c **** 		configASSERT( pxEventList );
2866:..\Source/tasks.c **** 
2867:..\Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:..\Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:..\Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:..\Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:..\Source/tasks.c **** 
2872:..\Source/tasks.c **** 
2873:..\Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:..\Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:..\Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:..\Source/tasks.c **** 		can be used in place of vListInsert. */
2877:..\Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 115


2878:..\Source/tasks.c **** 
2879:..\Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:..\Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:..\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:..\Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:..\Source/tasks.c **** 		{
2884:..\Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:..\Source/tasks.c **** 		}
2886:..\Source/tasks.c **** 
2887:..\Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:..\Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:..\Source/tasks.c **** 	}
2890:..\Source/tasks.c **** 
2891:..\Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2893:..\Source/tasks.c **** 
2894:..\Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:..\Source/tasks.c **** {
 3302              		.loc 1 2895 0
 3303              		.cfi_startproc
 3304              		@ args = 0, pretend = 0, frame = 16
 3305              		@ frame_needed = 1, uses_anonymous_args = 0
 3306 0000 80B5     		push	{r7, lr}
 3307              		.cfi_def_cfa_offset 8
 3308              		.cfi_offset 7, -8
 3309              		.cfi_offset 14, -4
 3310 0002 84B0     		sub	sp, sp, #16
 3311              		.cfi_def_cfa_offset 24
 3312 0004 00AF     		add	r7, sp, #0
 3313              		.cfi_def_cfa_register 7
 3314 0006 7860     		str	r0, [r7, #4]
2896:..\Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:..\Source/tasks.c **** BaseType_t xReturn;
2898:..\Source/tasks.c **** 
2899:..\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:..\Source/tasks.c **** 	called from a critical section within an ISR. */
2901:..\Source/tasks.c **** 
2902:..\Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:..\Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:..\Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:..\Source/tasks.c **** 
2906:..\Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:..\Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:..\Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:..\Source/tasks.c **** 
2910:..\Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:..\Source/tasks.c **** 	pxEventList is not empty. */
2912:..\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3315              		.loc 1 2912 0
 3316 0008 7B68     		ldr	r3, [r7, #4]
 3317 000a DB68     		ldr	r3, [r3, #12]
 3318 000c DB68     		ldr	r3, [r3, #12]
 3319 000e BB60     		str	r3, [r7, #8]
2913:..\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:..\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3320              		.loc 1 2914 0
 3321 0010 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 116


 3322 0012 1833     		adds	r3, r3, #24
 3323 0014 1846     		mov	r0, r3
 3324 0016 FFF7FEFF 		bl	uxListRemove
2915:..\Source/tasks.c **** 
2916:..\Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3325              		.loc 1 2916 0
 3326 001a 244B     		ldr	r3, .L217
 3327 001c 1B68     		ldr	r3, [r3]
 3328 001e 002B     		cmp	r3, #0
 3329 0020 2AD1     		bne	.L212
2917:..\Source/tasks.c **** 	{
2918:..\Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3330              		.loc 1 2918 0
 3331 0022 BB68     		ldr	r3, [r7, #8]
 3332 0024 0433     		adds	r3, r3, #4
 3333 0026 1846     		mov	r0, r3
 3334 0028 FFF7FEFF 		bl	uxListRemove
2919:..\Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3335              		.loc 1 2919 0
 3336 002c BB68     		ldr	r3, [r7, #8]
 3337 002e 5B6C     		ldr	r3, [r3, #68]
 3338 0030 DBB2     		uxtb	r3, r3
 3339 0032 1946     		mov	r1, r3
 3340 0034 0B20     		movs	r0, #11
 3341 0036 FFF7FEFF 		bl	packPayload1
 3342 003a BB68     		ldr	r3, [r7, #8]
 3343 003c DB6A     		ldr	r3, [r3, #44]
 3344 003e 0122     		movs	r2, #1
 3345 0040 9A40     		lsls	r2, r2, r3
 3346 0042 1B4B     		ldr	r3, .L217+4
 3347 0044 1B68     		ldr	r3, [r3]
 3348 0046 1343     		orrs	r3, r3, r2
 3349 0048 194A     		ldr	r2, .L217+4
 3350 004a 1360     		str	r3, [r2]
 3351 004c BB68     		ldr	r3, [r7, #8]
 3352 004e DA6A     		ldr	r2, [r3, #44]
 3353 0050 1346     		mov	r3, r2
 3354 0052 9B00     		lsls	r3, r3, #2
 3355 0054 1344     		add	r3, r3, r2
 3356 0056 9B00     		lsls	r3, r3, #2
 3357 0058 164A     		ldr	r2, .L217+8
 3358 005a 1A44     		add	r2, r2, r3
 3359 005c BB68     		ldr	r3, [r7, #8]
 3360 005e 0433     		adds	r3, r3, #4
 3361 0060 1946     		mov	r1, r3
 3362 0062 1046     		mov	r0, r2
 3363 0064 FFF7FEFF 		bl	vListInsertEnd
 3364 0068 BB68     		ldr	r3, [r7, #8]
 3365 006a 5B6C     		ldr	r3, [r3, #68]
 3366 006c DBB2     		uxtb	r3, r3
 3367 006e 1946     		mov	r1, r3
 3368 0070 0C20     		movs	r0, #12
 3369 0072 FFF7FEFF 		bl	packPayload1
 3370 0076 05E0     		b	.L213
 3371              	.L212:
2920:..\Source/tasks.c **** 	}
2921:..\Source/tasks.c **** 	else
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 117


2922:..\Source/tasks.c **** 	{
2923:..\Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:..\Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:..\Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3372              		.loc 1 2925 0
 3373 0078 BB68     		ldr	r3, [r7, #8]
 3374 007a 1833     		adds	r3, r3, #24
 3375 007c 1946     		mov	r1, r3
 3376 007e 0E48     		ldr	r0, .L217+12
 3377 0080 FFF7FEFF 		bl	vListInsertEnd
 3378              	.L213:
2926:..\Source/tasks.c **** 	}
2927:..\Source/tasks.c **** 
2928:..\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3379              		.loc 1 2928 0
 3380 0084 BB68     		ldr	r3, [r7, #8]
 3381 0086 DA6A     		ldr	r2, [r3, #44]
 3382 0088 0C4B     		ldr	r3, .L217+16
 3383 008a 1B68     		ldr	r3, [r3]
 3384 008c DB6A     		ldr	r3, [r3, #44]
 3385 008e 9A42     		cmp	r2, r3
 3386 0090 05D9     		bls	.L214
2929:..\Source/tasks.c **** 	{
2930:..\Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:..\Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:..\Source/tasks.c **** 		it should force a context switch now. */
2933:..\Source/tasks.c **** 		xReturn = pdTRUE;
 3387              		.loc 1 2933 0
 3388 0092 0123     		movs	r3, #1
 3389 0094 FB60     		str	r3, [r7, #12]
2934:..\Source/tasks.c **** 
2935:..\Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:..\Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:..\Source/tasks.c **** 		xYieldPending = pdTRUE;
 3390              		.loc 1 2937 0
 3391 0096 0A4B     		ldr	r3, .L217+20
 3392 0098 0122     		movs	r2, #1
 3393 009a 1A60     		str	r2, [r3]
 3394 009c 01E0     		b	.L215
 3395              	.L214:
2938:..\Source/tasks.c **** 	}
2939:..\Source/tasks.c **** 	else
2940:..\Source/tasks.c **** 	{
2941:..\Source/tasks.c **** 		xReturn = pdFALSE;
 3396              		.loc 1 2941 0
 3397 009e 0023     		movs	r3, #0
 3398 00a0 FB60     		str	r3, [r7, #12]
 3399              	.L215:
2942:..\Source/tasks.c **** 	}
2943:..\Source/tasks.c **** 
2944:..\Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:..\Source/tasks.c **** 	{
2946:..\Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:..\Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:..\Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:..\Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:..\Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 118


2951:..\Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:..\Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:..\Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:..\Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:..\Source/tasks.c **** 	}
2956:..\Source/tasks.c **** 	#endif
2957:..\Source/tasks.c **** 
2958:..\Source/tasks.c **** 	return xReturn;
 3400              		.loc 1 2958 0
 3401 00a2 FB68     		ldr	r3, [r7, #12]
2959:..\Source/tasks.c **** }
 3402              		.loc 1 2959 0
 3403 00a4 1846     		mov	r0, r3
 3404 00a6 1037     		adds	r7, r7, #16
 3405              		.cfi_def_cfa_offset 8
 3406 00a8 BD46     		mov	sp, r7
 3407              		.cfi_def_cfa_register 13
 3408              		@ sp needed
 3409 00aa 80BD     		pop	{r7, pc}
 3410              	.L218:
 3411              		.align	2
 3412              	.L217:
 3413 00ac 00010000 		.word	uxSchedulerSuspended
 3414 00b0 E0000000 		.word	uxTopReadyPriority
 3415 00b4 04000000 		.word	pxReadyTasksLists
 3416 00b8 98000000 		.word	xPendingReadyList
 3417 00bc 00000000 		.word	pxCurrentTCB
 3418 00c0 EC000000 		.word	xYieldPending
 3419              		.cfi_endproc
 3420              	.LFE95:
 3421              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3422              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3423              		.align	2
 3424              		.global	xTaskRemoveFromUnorderedEventList
 3425              		.thumb
 3426              		.thumb_func
 3427              		.type	xTaskRemoveFromUnorderedEventList, %function
 3428              	xTaskRemoveFromUnorderedEventList:
 3429              	.LFB96:
2960:..\Source/tasks.c **** /*-----------------------------------------------------------*/
2961:..\Source/tasks.c **** 
2962:..\Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:..\Source/tasks.c **** {
 3430              		.loc 1 2963 0
 3431              		.cfi_startproc
 3432              		@ args = 0, pretend = 0, frame = 16
 3433              		@ frame_needed = 1, uses_anonymous_args = 0
 3434 0000 80B5     		push	{r7, lr}
 3435              		.cfi_def_cfa_offset 8
 3436              		.cfi_offset 7, -8
 3437              		.cfi_offset 14, -4
 3438 0002 84B0     		sub	sp, sp, #16
 3439              		.cfi_def_cfa_offset 24
 3440 0004 00AF     		add	r7, sp, #0
 3441              		.cfi_def_cfa_register 7
 3442 0006 7860     		str	r0, [r7, #4]
 3443 0008 3960     		str	r1, [r7]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 119


2964:..\Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:..\Source/tasks.c **** BaseType_t xReturn;
2966:..\Source/tasks.c **** 
2967:..\Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:..\Source/tasks.c **** 	the event flags implementation. */
2969:..\Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:..\Source/tasks.c **** 
2971:..\Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:..\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3444              		.loc 1 2972 0
 3445 000a 3B68     		ldr	r3, [r7]
 3446 000c 43F00042 		orr	r2, r3, #-2147483648
 3447 0010 7B68     		ldr	r3, [r7, #4]
 3448 0012 1A60     		str	r2, [r3]
2973:..\Source/tasks.c **** 
2974:..\Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:..\Source/tasks.c **** 	event flags. */
2976:..\Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3449              		.loc 1 2976 0
 3450 0014 7B68     		ldr	r3, [r7, #4]
 3451 0016 DB68     		ldr	r3, [r3, #12]
 3452 0018 BB60     		str	r3, [r7, #8]
2977:..\Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:..\Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3453              		.loc 1 2978 0
 3454 001a 7868     		ldr	r0, [r7, #4]
 3455 001c FFF7FEFF 		bl	uxListRemove
2979:..\Source/tasks.c **** 
2980:..\Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:..\Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:..\Source/tasks.c **** 	lists. */
2983:..\Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3456              		.loc 1 2983 0
 3457 0020 BB68     		ldr	r3, [r7, #8]
 3458 0022 0433     		adds	r3, r3, #4
 3459 0024 1846     		mov	r0, r3
 3460 0026 FFF7FEFF 		bl	uxListRemove
2984:..\Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3461              		.loc 1 2984 0
 3462 002a BB68     		ldr	r3, [r7, #8]
 3463 002c 5B6C     		ldr	r3, [r3, #68]
 3464 002e DBB2     		uxtb	r3, r3
 3465 0030 1946     		mov	r1, r3
 3466 0032 0B20     		movs	r0, #11
 3467 0034 FFF7FEFF 		bl	packPayload1
 3468 0038 BB68     		ldr	r3, [r7, #8]
 3469 003a DB6A     		ldr	r3, [r3, #44]
 3470 003c 0122     		movs	r2, #1
 3471 003e 9A40     		lsls	r2, r2, r3
 3472 0040 164B     		ldr	r3, .L223
 3473 0042 1B68     		ldr	r3, [r3]
 3474 0044 1343     		orrs	r3, r3, r2
 3475 0046 154A     		ldr	r2, .L223
 3476 0048 1360     		str	r3, [r2]
 3477 004a BB68     		ldr	r3, [r7, #8]
 3478 004c DA6A     		ldr	r2, [r3, #44]
 3479 004e 1346     		mov	r3, r2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 120


 3480 0050 9B00     		lsls	r3, r3, #2
 3481 0052 1344     		add	r3, r3, r2
 3482 0054 9B00     		lsls	r3, r3, #2
 3483 0056 124A     		ldr	r2, .L223+4
 3484 0058 1A44     		add	r2, r2, r3
 3485 005a BB68     		ldr	r3, [r7, #8]
 3486 005c 0433     		adds	r3, r3, #4
 3487 005e 1946     		mov	r1, r3
 3488 0060 1046     		mov	r0, r2
 3489 0062 FFF7FEFF 		bl	vListInsertEnd
 3490 0066 BB68     		ldr	r3, [r7, #8]
 3491 0068 5B6C     		ldr	r3, [r3, #68]
 3492 006a DBB2     		uxtb	r3, r3
 3493 006c 1946     		mov	r1, r3
 3494 006e 0C20     		movs	r0, #12
 3495 0070 FFF7FEFF 		bl	packPayload1
2985:..\Source/tasks.c **** 
2986:..\Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3496              		.loc 1 2986 0
 3497 0074 BB68     		ldr	r3, [r7, #8]
 3498 0076 DA6A     		ldr	r2, [r3, #44]
 3499 0078 0A4B     		ldr	r3, .L223+8
 3500 007a 1B68     		ldr	r3, [r3]
 3501 007c DB6A     		ldr	r3, [r3, #44]
 3502 007e 9A42     		cmp	r2, r3
 3503 0080 05D9     		bls	.L220
2987:..\Source/tasks.c **** 	{
2988:..\Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:..\Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:..\Source/tasks.c **** 		the calling task to know if it should force a context
2991:..\Source/tasks.c **** 		switch now. */
2992:..\Source/tasks.c **** 		xReturn = pdTRUE;
 3504              		.loc 1 2992 0
 3505 0082 0123     		movs	r3, #1
 3506 0084 FB60     		str	r3, [r7, #12]
2993:..\Source/tasks.c **** 
2994:..\Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:..\Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:..\Source/tasks.c **** 		xYieldPending = pdTRUE;
 3507              		.loc 1 2996 0
 3508 0086 084B     		ldr	r3, .L223+12
 3509 0088 0122     		movs	r2, #1
 3510 008a 1A60     		str	r2, [r3]
 3511 008c 01E0     		b	.L221
 3512              	.L220:
2997:..\Source/tasks.c **** 	}
2998:..\Source/tasks.c **** 	else
2999:..\Source/tasks.c **** 	{
3000:..\Source/tasks.c **** 		xReturn = pdFALSE;
 3513              		.loc 1 3000 0
 3514 008e 0023     		movs	r3, #0
 3515 0090 FB60     		str	r3, [r7, #12]
 3516              	.L221:
3001:..\Source/tasks.c **** 	}
3002:..\Source/tasks.c **** 
3003:..\Source/tasks.c **** 	return xReturn;
 3517              		.loc 1 3003 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 121


 3518 0092 FB68     		ldr	r3, [r7, #12]
3004:..\Source/tasks.c **** }
 3519              		.loc 1 3004 0
 3520 0094 1846     		mov	r0, r3
 3521 0096 1037     		adds	r7, r7, #16
 3522              		.cfi_def_cfa_offset 8
 3523 0098 BD46     		mov	sp, r7
 3524              		.cfi_def_cfa_register 13
 3525              		@ sp needed
 3526 009a 80BD     		pop	{r7, pc}
 3527              	.L224:
 3528              		.align	2
 3529              	.L223:
 3530 009c E0000000 		.word	uxTopReadyPriority
 3531 00a0 04000000 		.word	pxReadyTasksLists
 3532 00a4 00000000 		.word	pxCurrentTCB
 3533 00a8 EC000000 		.word	xYieldPending
 3534              		.cfi_endproc
 3535              	.LFE96:
 3536              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 3537              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3538              		.align	2
 3539              		.global	vTaskSetTimeOutState
 3540              		.thumb
 3541              		.thumb_func
 3542              		.type	vTaskSetTimeOutState, %function
 3543              	vTaskSetTimeOutState:
 3544              	.LFB97:
3005:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3006:..\Source/tasks.c **** 
3007:..\Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:..\Source/tasks.c **** {
 3545              		.loc 1 3008 0
 3546              		.cfi_startproc
 3547              		@ args = 0, pretend = 0, frame = 8
 3548              		@ frame_needed = 1, uses_anonymous_args = 0
 3549              		@ link register save eliminated.
 3550 0000 80B4     		push	{r7}
 3551              		.cfi_def_cfa_offset 4
 3552              		.cfi_offset 7, -4
 3553 0002 83B0     		sub	sp, sp, #12
 3554              		.cfi_def_cfa_offset 16
 3555 0004 00AF     		add	r7, sp, #0
 3556              		.cfi_def_cfa_register 7
 3557 0006 7860     		str	r0, [r7, #4]
3009:..\Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:..\Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3558              		.loc 1 3010 0
 3559 0008 064B     		ldr	r3, .L226
 3560 000a 1A68     		ldr	r2, [r3]
 3561 000c 7B68     		ldr	r3, [r7, #4]
 3562 000e 1A60     		str	r2, [r3]
3011:..\Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3563              		.loc 1 3011 0
 3564 0010 054B     		ldr	r3, .L226+4
 3565 0012 1A68     		ldr	r2, [r3]
 3566 0014 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 122


 3567 0016 5A60     		str	r2, [r3, #4]
3012:..\Source/tasks.c **** }
 3568              		.loc 1 3012 0
 3569 0018 00BF     		nop
 3570 001a 0C37     		adds	r7, r7, #12
 3571              		.cfi_def_cfa_offset 4
 3572 001c BD46     		mov	sp, r7
 3573              		.cfi_def_cfa_register 13
 3574              		@ sp needed
 3575 001e 80BC     		pop	{r7}
 3576              		.cfi_restore 7
 3577              		.cfi_def_cfa_offset 0
 3578 0020 7047     		bx	lr
 3579              	.L227:
 3580 0022 00BF     		.align	2
 3581              	.L226:
 3582 0024 F0000000 		.word	xNumOfOverflows
 3583 0028 DC000000 		.word	xTickCount
 3584              		.cfi_endproc
 3585              	.LFE97:
 3586              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3587              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3588              		.align	2
 3589              		.global	xTaskCheckForTimeOut
 3590              		.thumb
 3591              		.thumb_func
 3592              		.type	xTaskCheckForTimeOut, %function
 3593              	xTaskCheckForTimeOut:
 3594              	.LFB98:
3013:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3014:..\Source/tasks.c **** 
3015:..\Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:..\Source/tasks.c **** {
 3595              		.loc 1 3016 0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 16
 3598              		@ frame_needed = 1, uses_anonymous_args = 0
 3599 0000 80B5     		push	{r7, lr}
 3600              		.cfi_def_cfa_offset 8
 3601              		.cfi_offset 7, -8
 3602              		.cfi_offset 14, -4
 3603 0002 84B0     		sub	sp, sp, #16
 3604              		.cfi_def_cfa_offset 24
 3605 0004 00AF     		add	r7, sp, #0
 3606              		.cfi_def_cfa_register 7
 3607 0006 7860     		str	r0, [r7, #4]
 3608 0008 3960     		str	r1, [r7]
3017:..\Source/tasks.c **** BaseType_t xReturn;
3018:..\Source/tasks.c **** 
3019:..\Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:..\Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:..\Source/tasks.c **** 
3022:..\Source/tasks.c **** 	taskENTER_CRITICAL();
 3609              		.loc 1 3022 0
 3610 000a FFF7FEFF 		bl	vPortEnterCritical
 3611              	.LBB49:
3023:..\Source/tasks.c **** 	{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 123


3024:..\Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:..\Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3612              		.loc 1 3025 0
 3613 000e 1C4B     		ldr	r3, .L234
 3614 0010 1B68     		ldr	r3, [r3]
 3615 0012 BB60     		str	r3, [r7, #8]
3026:..\Source/tasks.c **** 
3027:..\Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:..\Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:..\Source/tasks.c **** 			{
3030:..\Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:..\Source/tasks.c **** 				but has the same result. */
3032:..\Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:..\Source/tasks.c **** 				xReturn = pdTRUE;
3034:..\Source/tasks.c **** 			}
3035:..\Source/tasks.c **** 			else
3036:..\Source/tasks.c **** 		#endif
3037:..\Source/tasks.c **** 
3038:..\Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:..\Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3616              		.loc 1 3039 0
 3617 0014 3B68     		ldr	r3, [r7]
 3618 0016 1B68     		ldr	r3, [r3]
 3619 0018 B3F1FF3F 		cmp	r3, #-1
 3620 001c 02D1     		bne	.L229
3040:..\Source/tasks.c **** 			{
3041:..\Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:..\Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:..\Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:..\Source/tasks.c **** 				xReturn = pdFALSE;
 3621              		.loc 1 3044 0
 3622 001e 0023     		movs	r3, #0
 3623 0020 FB60     		str	r3, [r7, #12]
 3624 0022 26E0     		b	.L230
 3625              	.L229:
3045:..\Source/tasks.c **** 			}
3046:..\Source/tasks.c **** 			else
3047:..\Source/tasks.c **** 		#endif
3048:..\Source/tasks.c **** 
3049:..\Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3626              		.loc 1 3049 0
 3627 0024 7B68     		ldr	r3, [r7, #4]
 3628 0026 1A68     		ldr	r2, [r3]
 3629 0028 164B     		ldr	r3, .L234+4
 3630 002a 1B68     		ldr	r3, [r3]
 3631 002c 9A42     		cmp	r2, r3
 3632 002e 07D0     		beq	.L231
 3633              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3634 0030 7B68     		ldr	r3, [r7, #4]
 3635 0032 5A68     		ldr	r2, [r3, #4]
 3636 0034 BB68     		ldr	r3, [r7, #8]
 3637 0036 9A42     		cmp	r2, r3
 3638 0038 02D8     		bhi	.L231
3050:..\Source/tasks.c **** 		{
3051:..\Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:..\Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:..\Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 124


3054:..\Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:..\Source/tasks.c **** 			was called. */
3056:..\Source/tasks.c **** 			xReturn = pdTRUE;
 3639              		.loc 1 3056 0 is_stmt 1
 3640 003a 0123     		movs	r3, #1
 3641 003c FB60     		str	r3, [r7, #12]
 3642 003e 18E0     		b	.L230
 3643              	.L231:
3057:..\Source/tasks.c **** 		}
3058:..\Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
 3644              		.loc 1 3058 0
 3645 0040 7B68     		ldr	r3, [r7, #4]
 3646 0042 5B68     		ldr	r3, [r3, #4]
 3647 0044 BA68     		ldr	r2, [r7, #8]
 3648 0046 D21A     		subs	r2, r2, r3
 3649 0048 3B68     		ldr	r3, [r7]
 3650 004a 1B68     		ldr	r3, [r3]
 3651 004c 9A42     		cmp	r2, r3
 3652 004e 0ED2     		bcs	.L232
3059:..\Source/tasks.c **** 		{
3060:..\Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:..\Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 3653              		.loc 1 3061 0
 3654 0050 3B68     		ldr	r3, [r7]
 3655 0052 1A68     		ldr	r2, [r3]
 3656 0054 7B68     		ldr	r3, [r7, #4]
 3657 0056 5968     		ldr	r1, [r3, #4]
 3658 0058 BB68     		ldr	r3, [r7, #8]
 3659 005a CB1A     		subs	r3, r1, r3
 3660 005c 1A44     		add	r2, r2, r3
 3661 005e 3B68     		ldr	r3, [r7]
 3662 0060 1A60     		str	r2, [r3]
3062:..\Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3663              		.loc 1 3062 0
 3664 0062 7868     		ldr	r0, [r7, #4]
 3665 0064 FFF7FEFF 		bl	vTaskSetTimeOutState
3063:..\Source/tasks.c **** 			xReturn = pdFALSE;
 3666              		.loc 1 3063 0
 3667 0068 0023     		movs	r3, #0
 3668 006a FB60     		str	r3, [r7, #12]
 3669 006c 01E0     		b	.L230
 3670              	.L232:
3064:..\Source/tasks.c **** 		}
3065:..\Source/tasks.c **** 		else
3066:..\Source/tasks.c **** 		{
3067:..\Source/tasks.c **** 			xReturn = pdTRUE;
 3671              		.loc 1 3067 0
 3672 006e 0123     		movs	r3, #1
 3673 0070 FB60     		str	r3, [r7, #12]
 3674              	.L230:
 3675              	.LBE49:
3068:..\Source/tasks.c **** 		}
3069:..\Source/tasks.c **** 	}
3070:..\Source/tasks.c **** 	taskEXIT_CRITICAL();
 3676              		.loc 1 3070 0
 3677 0072 FFF7FEFF 		bl	vPortExitCritical
3071:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 125


3072:..\Source/tasks.c **** 	return xReturn;
 3678              		.loc 1 3072 0
 3679 0076 FB68     		ldr	r3, [r7, #12]
3073:..\Source/tasks.c **** }
 3680              		.loc 1 3073 0
 3681 0078 1846     		mov	r0, r3
 3682 007a 1037     		adds	r7, r7, #16
 3683              		.cfi_def_cfa_offset 8
 3684 007c BD46     		mov	sp, r7
 3685              		.cfi_def_cfa_register 13
 3686              		@ sp needed
 3687 007e 80BD     		pop	{r7, pc}
 3688              	.L235:
 3689              		.align	2
 3690              	.L234:
 3691 0080 DC000000 		.word	xTickCount
 3692 0084 F0000000 		.word	xNumOfOverflows
 3693              		.cfi_endproc
 3694              	.LFE98:
 3695              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3696              		.section	.text.vTaskMissedYield,"ax",%progbits
 3697              		.align	2
 3698              		.global	vTaskMissedYield
 3699              		.thumb
 3700              		.thumb_func
 3701              		.type	vTaskMissedYield, %function
 3702              	vTaskMissedYield:
 3703              	.LFB99:
3074:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3075:..\Source/tasks.c **** 
3076:..\Source/tasks.c **** void vTaskMissedYield( void )
3077:..\Source/tasks.c **** {
 3704              		.loc 1 3077 0
 3705              		.cfi_startproc
 3706              		@ args = 0, pretend = 0, frame = 0
 3707              		@ frame_needed = 1, uses_anonymous_args = 0
 3708              		@ link register save eliminated.
 3709 0000 80B4     		push	{r7}
 3710              		.cfi_def_cfa_offset 4
 3711              		.cfi_offset 7, -4
 3712 0002 00AF     		add	r7, sp, #0
 3713              		.cfi_def_cfa_register 7
3078:..\Source/tasks.c **** 	xYieldPending = pdTRUE;
 3714              		.loc 1 3078 0
 3715 0004 034B     		ldr	r3, .L237
 3716 0006 0122     		movs	r2, #1
 3717 0008 1A60     		str	r2, [r3]
3079:..\Source/tasks.c **** }
 3718              		.loc 1 3079 0
 3719 000a 00BF     		nop
 3720 000c BD46     		mov	sp, r7
 3721              		.cfi_def_cfa_register 13
 3722              		@ sp needed
 3723 000e 80BC     		pop	{r7}
 3724              		.cfi_restore 7
 3725              		.cfi_def_cfa_offset 0
 3726 0010 7047     		bx	lr
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 126


 3727              	.L238:
 3728 0012 00BF     		.align	2
 3729              	.L237:
 3730 0014 EC000000 		.word	xYieldPending
 3731              		.cfi_endproc
 3732              	.LFE99:
 3733              		.size	vTaskMissedYield, .-vTaskMissedYield
 3734              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3735              		.align	2
 3736              		.global	uxTaskGetTaskNumber
 3737              		.thumb
 3738              		.thumb_func
 3739              		.type	uxTaskGetTaskNumber, %function
 3740              	uxTaskGetTaskNumber:
 3741              	.LFB100:
3080:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3081:..\Source/tasks.c **** 
3082:..\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:..\Source/tasks.c **** 
3084:..\Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:..\Source/tasks.c **** 	{
 3742              		.loc 1 3085 0
 3743              		.cfi_startproc
 3744              		@ args = 0, pretend = 0, frame = 16
 3745              		@ frame_needed = 1, uses_anonymous_args = 0
 3746              		@ link register save eliminated.
 3747 0000 80B4     		push	{r7}
 3748              		.cfi_def_cfa_offset 4
 3749              		.cfi_offset 7, -4
 3750 0002 85B0     		sub	sp, sp, #20
 3751              		.cfi_def_cfa_offset 24
 3752 0004 00AF     		add	r7, sp, #0
 3753              		.cfi_def_cfa_register 7
 3754 0006 7860     		str	r0, [r7, #4]
3086:..\Source/tasks.c **** 	UBaseType_t uxReturn;
3087:..\Source/tasks.c **** 	TCB_t *pxTCB;
3088:..\Source/tasks.c **** 
3089:..\Source/tasks.c **** 		if( xTask != NULL )
 3755              		.loc 1 3089 0
 3756 0008 7B68     		ldr	r3, [r7, #4]
 3757 000a 002B     		cmp	r3, #0
 3758 000c 05D0     		beq	.L240
3090:..\Source/tasks.c **** 		{
3091:..\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3759              		.loc 1 3091 0
 3760 000e 7B68     		ldr	r3, [r7, #4]
 3761 0010 BB60     		str	r3, [r7, #8]
3092:..\Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 3762              		.loc 1 3092 0
 3763 0012 BB68     		ldr	r3, [r7, #8]
 3764 0014 5B6C     		ldr	r3, [r3, #68]
 3765 0016 FB60     		str	r3, [r7, #12]
 3766 0018 01E0     		b	.L241
 3767              	.L240:
3093:..\Source/tasks.c **** 		}
3094:..\Source/tasks.c **** 		else
3095:..\Source/tasks.c **** 		{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 127


3096:..\Source/tasks.c **** 			uxReturn = 0U;
 3768              		.loc 1 3096 0
 3769 001a 0023     		movs	r3, #0
 3770 001c FB60     		str	r3, [r7, #12]
 3771              	.L241:
3097:..\Source/tasks.c **** 		}
3098:..\Source/tasks.c **** 
3099:..\Source/tasks.c **** 		return uxReturn;
 3772              		.loc 1 3099 0
 3773 001e FB68     		ldr	r3, [r7, #12]
3100:..\Source/tasks.c **** 	}
 3774              		.loc 1 3100 0
 3775 0020 1846     		mov	r0, r3
 3776 0022 1437     		adds	r7, r7, #20
 3777              		.cfi_def_cfa_offset 4
 3778 0024 BD46     		mov	sp, r7
 3779              		.cfi_def_cfa_register 13
 3780              		@ sp needed
 3781 0026 80BC     		pop	{r7}
 3782              		.cfi_restore 7
 3783              		.cfi_def_cfa_offset 0
 3784 0028 7047     		bx	lr
 3785              		.cfi_endproc
 3786              	.LFE100:
 3787              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 3788 002a 00BF     		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3789              		.align	2
 3790              		.global	vTaskSetTaskNumber
 3791              		.thumb
 3792              		.thumb_func
 3793              		.type	vTaskSetTaskNumber, %function
 3794              	vTaskSetTaskNumber:
 3795              	.LFB101:
3101:..\Source/tasks.c **** 
3102:..\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3104:..\Source/tasks.c **** 
3105:..\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:..\Source/tasks.c **** 
3107:..\Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:..\Source/tasks.c **** 	{
 3796              		.loc 1 3108 0
 3797              		.cfi_startproc
 3798              		@ args = 0, pretend = 0, frame = 16
 3799              		@ frame_needed = 1, uses_anonymous_args = 0
 3800              		@ link register save eliminated.
 3801 0000 80B4     		push	{r7}
 3802              		.cfi_def_cfa_offset 4
 3803              		.cfi_offset 7, -4
 3804 0002 85B0     		sub	sp, sp, #20
 3805              		.cfi_def_cfa_offset 24
 3806 0004 00AF     		add	r7, sp, #0
 3807              		.cfi_def_cfa_register 7
 3808 0006 7860     		str	r0, [r7, #4]
 3809 0008 3960     		str	r1, [r7]
3109:..\Source/tasks.c **** 	TCB_t *pxTCB;
3110:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 128


3111:..\Source/tasks.c **** 		if( xTask != NULL )
 3810              		.loc 1 3111 0
 3811 000a 7B68     		ldr	r3, [r7, #4]
 3812 000c 002B     		cmp	r3, #0
 3813 000e 04D0     		beq	.L245
3112:..\Source/tasks.c **** 		{
3113:..\Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3814              		.loc 1 3113 0
 3815 0010 7B68     		ldr	r3, [r7, #4]
 3816 0012 FB60     		str	r3, [r7, #12]
3114:..\Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 3817              		.loc 1 3114 0
 3818 0014 FB68     		ldr	r3, [r7, #12]
 3819 0016 3A68     		ldr	r2, [r7]
 3820 0018 5A64     		str	r2, [r3, #68]
 3821              	.L245:
3115:..\Source/tasks.c **** 		}
3116:..\Source/tasks.c **** 	}
 3822              		.loc 1 3116 0
 3823 001a 00BF     		nop
 3824 001c 1437     		adds	r7, r7, #20
 3825              		.cfi_def_cfa_offset 4
 3826 001e BD46     		mov	sp, r7
 3827              		.cfi_def_cfa_register 13
 3828              		@ sp needed
 3829 0020 80BC     		pop	{r7}
 3830              		.cfi_restore 7
 3831              		.cfi_def_cfa_offset 0
 3832 0022 7047     		bx	lr
 3833              		.cfi_endproc
 3834              	.LFE101:
 3835              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 3836              		.section	.text.prvIdleTask,"ax",%progbits
 3837              		.align	2
 3838              		.thumb
 3839              		.thumb_func
 3840              		.type	prvIdleTask, %function
 3841              	prvIdleTask:
 3842              	.LFB102:
3117:..\Source/tasks.c **** 
3118:..\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:..\Source/tasks.c **** 
3120:..\Source/tasks.c **** /*
3121:..\Source/tasks.c ****  * -----------------------------------------------------------
3122:..\Source/tasks.c ****  * The Idle task.
3123:..\Source/tasks.c ****  * ----------------------------------------------------------
3124:..\Source/tasks.c ****  *
3125:..\Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:..\Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:..\Source/tasks.c ****  *
3128:..\Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:..\Source/tasks.c ****  *
3130:..\Source/tasks.c ****  */
3131:..\Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:..\Source/tasks.c **** {
 3843              		.loc 1 3132 0
 3844              		.cfi_startproc
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 129


 3845              		@ args = 0, pretend = 0, frame = 8
 3846              		@ frame_needed = 1, uses_anonymous_args = 0
 3847 0000 80B5     		push	{r7, lr}
 3848              		.cfi_def_cfa_offset 8
 3849              		.cfi_offset 7, -8
 3850              		.cfi_offset 14, -4
 3851 0002 82B0     		sub	sp, sp, #8
 3852              		.cfi_def_cfa_offset 16
 3853 0004 00AF     		add	r7, sp, #0
 3854              		.cfi_def_cfa_register 7
 3855 0006 7860     		str	r0, [r7, #4]
 3856              	.L247:
3133:..\Source/tasks.c **** 	/* Stop warnings. */
3134:..\Source/tasks.c **** 	( void ) pvParameters;
3135:..\Source/tasks.c **** 
3136:..\Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:..\Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:..\Source/tasks.c **** 
3139:..\Source/tasks.c **** 	for( ;; )
3140:..\Source/tasks.c **** 	{
3141:..\Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:..\Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:..\Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3857              		.loc 1 3143 0 discriminator 1
 3858 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3144:..\Source/tasks.c **** 
3145:..\Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:..\Source/tasks.c **** 		{
3147:..\Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:..\Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:..\Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:..\Source/tasks.c **** 			will automatically get the processor anyway. */
3151:..\Source/tasks.c **** 			taskYIELD();
3152:..\Source/tasks.c **** 		}
3153:..\Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:..\Source/tasks.c **** 
3155:..\Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:..\Source/tasks.c **** 		{
3157:..\Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:..\Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:..\Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:..\Source/tasks.c **** 			timeslice.
3161:..\Source/tasks.c **** 
3162:..\Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:..\Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:..\Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:..\Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:..\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:..\Source/tasks.c **** 			{
3168:..\Source/tasks.c **** 				taskYIELD();
3169:..\Source/tasks.c **** 			}
3170:..\Source/tasks.c **** 			else
3171:..\Source/tasks.c **** 			{
3172:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:..\Source/tasks.c **** 			}
3174:..\Source/tasks.c **** 		}
3175:..\Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 130


3176:..\Source/tasks.c **** 
3177:..\Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:..\Source/tasks.c **** 		{
3179:..\Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:..\Source/tasks.c **** 
3181:..\Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:..\Source/tasks.c **** 			allows the application designer to add background functionality
3183:..\Source/tasks.c **** 			without the overhead of a separate task.
3184:..\Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:..\Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:..\Source/tasks.c **** 			vApplicationIdleHook();
3187:..\Source/tasks.c **** 		}
3188:..\Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:..\Source/tasks.c **** 
3190:..\Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:..\Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:..\Source/tasks.c **** 		user defined low power mode	implementations require
3193:..\Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:..\Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:..\Source/tasks.c **** 		{
3196:..\Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:..\Source/tasks.c **** 
3198:..\Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:..\Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:..\Source/tasks.c **** 			test of the expected idle time is performed without the
3201:..\Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:..\Source/tasks.c **** 			valid. */
3203:..\Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:..\Source/tasks.c **** 
3205:..\Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:..\Source/tasks.c **** 			{
3207:..\Source/tasks.c **** 				vTaskSuspendAll();
3208:..\Source/tasks.c **** 				{
3209:..\Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:..\Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:..\Source/tasks.c **** 					be used. */
3212:..\Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:..\Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:..\Source/tasks.c **** 
3215:..\Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:..\Source/tasks.c **** 					{
3217:..\Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:..\Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:..\Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:..\Source/tasks.c **** 					}
3221:..\Source/tasks.c **** 					else
3222:..\Source/tasks.c **** 					{
3223:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:..\Source/tasks.c **** 					}
3225:..\Source/tasks.c **** 				}
3226:..\Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:..\Source/tasks.c **** 			}
3228:..\Source/tasks.c **** 			else
3229:..\Source/tasks.c **** 			{
3230:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:..\Source/tasks.c **** 			}
3232:..\Source/tasks.c **** 		}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 131


3233:..\Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:..\Source/tasks.c **** 	}
 3859              		.loc 1 3234 0 discriminator 1
 3860 000c FCE7     		b	.L247
 3861              		.cfi_endproc
 3862              	.LFE102:
 3863              		.size	prvIdleTask, .-prvIdleTask
 3864 000e 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3865              		.align	2
 3866              		.thumb
 3867              		.thumb_func
 3868              		.type	prvInitialiseTaskLists, %function
 3869              	prvInitialiseTaskLists:
 3870              	.LFB103:
3235:..\Source/tasks.c **** }
3236:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3237:..\Source/tasks.c **** 
3238:..\Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:..\Source/tasks.c **** 
3240:..\Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:..\Source/tasks.c **** 	{
3242:..\Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:..\Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:..\Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:..\Source/tasks.c **** 
3246:..\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:..\Source/tasks.c **** 		{
3248:..\Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:..\Source/tasks.c **** 			eReturn = eAbortSleep;
3250:..\Source/tasks.c **** 		}
3251:..\Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:..\Source/tasks.c **** 		{
3253:..\Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:..\Source/tasks.c **** 			eReturn = eAbortSleep;
3255:..\Source/tasks.c **** 		}
3256:..\Source/tasks.c **** 		else
3257:..\Source/tasks.c **** 		{
3258:..\Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:..\Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:..\Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:..\Source/tasks.c **** 			interrupts. */
3262:..\Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:..\Source/tasks.c **** 			{
3264:..\Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:..\Source/tasks.c **** 			}
3266:..\Source/tasks.c **** 			else
3267:..\Source/tasks.c **** 			{
3268:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:..\Source/tasks.c **** 			}
3270:..\Source/tasks.c **** 		}
3271:..\Source/tasks.c **** 
3272:..\Source/tasks.c **** 		return eReturn;
3273:..\Source/tasks.c **** 	}
3274:..\Source/tasks.c **** 
3275:..\Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3277:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 132


3278:..\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:..\Source/tasks.c **** 
3280:..\Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:..\Source/tasks.c **** 	{
3282:..\Source/tasks.c **** 	TCB_t *pxTCB;
3283:..\Source/tasks.c **** 
3284:..\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:..\Source/tasks.c **** 		{
3286:..\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:..\Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:..\Source/tasks.c **** 		}
3289:..\Source/tasks.c **** 	}
3290:..\Source/tasks.c **** 
3291:..\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3293:..\Source/tasks.c **** 
3294:..\Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:..\Source/tasks.c **** 
3296:..\Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:..\Source/tasks.c **** 	{
3298:..\Source/tasks.c **** 	void *pvReturn = NULL;
3299:..\Source/tasks.c **** 	TCB_t *pxTCB;
3300:..\Source/tasks.c **** 
3301:..\Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:..\Source/tasks.c **** 		{
3303:..\Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:..\Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:..\Source/tasks.c **** 		}
3306:..\Source/tasks.c **** 		else
3307:..\Source/tasks.c **** 		{
3308:..\Source/tasks.c **** 			pvReturn = NULL;
3309:..\Source/tasks.c **** 		}
3310:..\Source/tasks.c **** 
3311:..\Source/tasks.c **** 		return pvReturn;
3312:..\Source/tasks.c **** 	}
3313:..\Source/tasks.c **** 
3314:..\Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3316:..\Source/tasks.c **** 
3317:..\Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:..\Source/tasks.c **** 
3319:..\Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:..\Source/tasks.c **** 	{
3321:..\Source/tasks.c **** 	TCB_t *pxTCB;
3322:..\Source/tasks.c **** 
3323:..\Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:..\Source/tasks.c **** 		the calling task. */
3325:..\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:..\Source/tasks.c **** 
3327:..\Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:..\Source/tasks.c **** 	}
3329:..\Source/tasks.c **** 
3330:..\Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3332:..\Source/tasks.c **** 
3333:..\Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:..\Source/tasks.c **** {
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 133


 3871              		.loc 1 3334 0
 3872              		.cfi_startproc
 3873              		@ args = 0, pretend = 0, frame = 8
 3874              		@ frame_needed = 1, uses_anonymous_args = 0
 3875 0000 80B5     		push	{r7, lr}
 3876              		.cfi_def_cfa_offset 8
 3877              		.cfi_offset 7, -8
 3878              		.cfi_offset 14, -4
 3879 0002 82B0     		sub	sp, sp, #8
 3880              		.cfi_def_cfa_offset 16
 3881 0004 00AF     		add	r7, sp, #0
 3882              		.cfi_def_cfa_register 7
3335:..\Source/tasks.c **** UBaseType_t uxPriority;
3336:..\Source/tasks.c **** 
3337:..\Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 3883              		.loc 1 3337 0
 3884 0006 0023     		movs	r3, #0
 3885 0008 7B60     		str	r3, [r7, #4]
 3886 000a 0CE0     		b	.L249
 3887              	.L250:
3338:..\Source/tasks.c **** 	{
3339:..\Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3888              		.loc 1 3339 0 discriminator 3
 3889 000c 7A68     		ldr	r2, [r7, #4]
 3890 000e 1346     		mov	r3, r2
 3891 0010 9B00     		lsls	r3, r3, #2
 3892 0012 1344     		add	r3, r3, r2
 3893 0014 9B00     		lsls	r3, r3, #2
 3894 0016 124A     		ldr	r2, .L251
 3895 0018 1344     		add	r3, r3, r2
 3896 001a 1846     		mov	r0, r3
 3897 001c FFF7FEFF 		bl	vListInitialise
3337:..\Source/tasks.c **** 	{
 3898              		.loc 1 3337 0 discriminator 3
 3899 0020 7B68     		ldr	r3, [r7, #4]
 3900 0022 0133     		adds	r3, r3, #1
 3901 0024 7B60     		str	r3, [r7, #4]
 3902              	.L249:
3337:..\Source/tasks.c **** 	{
 3903              		.loc 1 3337 0 is_stmt 0 discriminator 1
 3904 0026 7B68     		ldr	r3, [r7, #4]
 3905 0028 042B     		cmp	r3, #4
 3906 002a EFD9     		bls	.L250
3340:..\Source/tasks.c **** 	}
3341:..\Source/tasks.c **** 
3342:..\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3907              		.loc 1 3342 0 is_stmt 1
 3908 002c 0D48     		ldr	r0, .L251+4
 3909 002e FFF7FEFF 		bl	vListInitialise
3343:..\Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3910              		.loc 1 3343 0
 3911 0032 0D48     		ldr	r0, .L251+8
 3912 0034 FFF7FEFF 		bl	vListInitialise
3344:..\Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3913              		.loc 1 3344 0
 3914 0038 0C48     		ldr	r0, .L251+12
 3915 003a FFF7FEFF 		bl	vListInitialise
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 134


3345:..\Source/tasks.c **** 
3346:..\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:..\Source/tasks.c **** 	{
3348:..\Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3916              		.loc 1 3348 0
 3917 003e 0C48     		ldr	r0, .L251+16
 3918 0040 FFF7FEFF 		bl	vListInitialise
3349:..\Source/tasks.c **** 	}
3350:..\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:..\Source/tasks.c **** 
3352:..\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:..\Source/tasks.c **** 	{
3354:..\Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3919              		.loc 1 3354 0
 3920 0044 0B48     		ldr	r0, .L251+20
 3921 0046 FFF7FEFF 		bl	vListInitialise
3355:..\Source/tasks.c **** 	}
3356:..\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:..\Source/tasks.c **** 
3358:..\Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:..\Source/tasks.c **** 	using list2. */
3360:..\Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3922              		.loc 1 3360 0
 3923 004a 0B4B     		ldr	r3, .L251+24
 3924 004c 054A     		ldr	r2, .L251+4
 3925 004e 1A60     		str	r2, [r3]
3361:..\Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3926              		.loc 1 3361 0
 3927 0050 0A4B     		ldr	r3, .L251+28
 3928 0052 054A     		ldr	r2, .L251+8
 3929 0054 1A60     		str	r2, [r3]
3362:..\Source/tasks.c **** }
 3930              		.loc 1 3362 0
 3931 0056 00BF     		nop
 3932 0058 0837     		adds	r7, r7, #8
 3933              		.cfi_def_cfa_offset 8
 3934 005a BD46     		mov	sp, r7
 3935              		.cfi_def_cfa_register 13
 3936              		@ sp needed
 3937 005c 80BD     		pop	{r7, pc}
 3938              	.L252:
 3939 005e 00BF     		.align	2
 3940              	.L251:
 3941 0060 04000000 		.word	pxReadyTasksLists
 3942 0064 68000000 		.word	xDelayedTaskList1
 3943 0068 7C000000 		.word	xDelayedTaskList2
 3944 006c 98000000 		.word	xPendingReadyList
 3945 0070 AC000000 		.word	xTasksWaitingTermination
 3946 0074 C4000000 		.word	xSuspendedTaskList
 3947 0078 90000000 		.word	pxDelayedTaskList
 3948 007c 94000000 		.word	pxOverflowDelayedTaskList
 3949              		.cfi_endproc
 3950              	.LFE103:
 3951              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3952              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3953              		.align	2
 3954              		.thumb
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 135


 3955              		.thumb_func
 3956              		.type	prvCheckTasksWaitingTermination, %function
 3957              	prvCheckTasksWaitingTermination:
 3958              	.LFB104:
3363:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3364:..\Source/tasks.c **** 
3365:..\Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:..\Source/tasks.c **** {
 3959              		.loc 1 3366 0
 3960              		.cfi_startproc
 3961              		@ args = 0, pretend = 0, frame = 8
 3962              		@ frame_needed = 1, uses_anonymous_args = 0
 3963 0000 80B5     		push	{r7, lr}
 3964              		.cfi_def_cfa_offset 8
 3965              		.cfi_offset 7, -8
 3966              		.cfi_offset 14, -4
 3967 0002 82B0     		sub	sp, sp, #8
 3968              		.cfi_def_cfa_offset 16
 3969 0004 00AF     		add	r7, sp, #0
 3970              		.cfi_def_cfa_register 7
 3971              	.LBB50:
3367:..\Source/tasks.c **** 
3368:..\Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:..\Source/tasks.c **** 
3370:..\Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:..\Source/tasks.c **** 	{
3372:..\Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:..\Source/tasks.c **** 
3374:..\Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:..\Source/tasks.c **** 		too often in the idle task. */
3376:..\Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 3972              		.loc 1 3376 0
 3973 0006 28E0     		b	.L254
 3974              	.L255:
3377:..\Source/tasks.c **** 		{
3378:..\Source/tasks.c **** 			vTaskSuspendAll();
 3975              		.loc 1 3378 0
 3976 0008 FFF7FEFF 		bl	vTaskSuspendAll
3379:..\Source/tasks.c **** 			{
3380:..\Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3977              		.loc 1 3380 0
 3978 000c 174B     		ldr	r3, .L256
 3979 000e 1B68     		ldr	r3, [r3]
 3980 0010 002B     		cmp	r3, #0
 3981 0012 0CBF     		ite	eq
 3982 0014 0123     		moveq	r3, #1
 3983 0016 0023     		movne	r3, #0
 3984 0018 DBB2     		uxtb	r3, r3
 3985 001a 7B60     		str	r3, [r7, #4]
3381:..\Source/tasks.c **** 			}
3382:..\Source/tasks.c **** 			( void ) xTaskResumeAll();
 3986              		.loc 1 3382 0
 3987 001c FFF7FEFF 		bl	xTaskResumeAll
3383:..\Source/tasks.c **** 
3384:..\Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3988              		.loc 1 3384 0
 3989 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 136


 3990 0022 002B     		cmp	r3, #0
 3991 0024 19D1     		bne	.L254
 3992              	.LBB51:
3385:..\Source/tasks.c **** 			{
3386:..\Source/tasks.c **** 				TCB_t *pxTCB;
3387:..\Source/tasks.c **** 
3388:..\Source/tasks.c **** 				taskENTER_CRITICAL();
 3993              		.loc 1 3388 0
 3994 0026 FFF7FEFF 		bl	vPortEnterCritical
3389:..\Source/tasks.c **** 				{
3390:..\Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 3995              		.loc 1 3390 0
 3996 002a 104B     		ldr	r3, .L256
 3997 002c DB68     		ldr	r3, [r3, #12]
 3998 002e DB68     		ldr	r3, [r3, #12]
 3999 0030 3B60     		str	r3, [r7]
3391:..\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4000              		.loc 1 3391 0
 4001 0032 3B68     		ldr	r3, [r7]
 4002 0034 0433     		adds	r3, r3, #4
 4003 0036 1846     		mov	r0, r3
 4004 0038 FFF7FEFF 		bl	uxListRemove
3392:..\Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 4005              		.loc 1 3392 0
 4006 003c 0C4B     		ldr	r3, .L256+4
 4007 003e 1B68     		ldr	r3, [r3]
 4008 0040 013B     		subs	r3, r3, #1
 4009 0042 0B4A     		ldr	r2, .L256+4
 4010 0044 1360     		str	r3, [r2]
3393:..\Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 4011              		.loc 1 3393 0
 4012 0046 0B4B     		ldr	r3, .L256+8
 4013 0048 1B68     		ldr	r3, [r3]
 4014 004a 013B     		subs	r3, r3, #1
 4015 004c 094A     		ldr	r2, .L256+8
 4016 004e 1360     		str	r3, [r2]
3394:..\Source/tasks.c **** 				}
3395:..\Source/tasks.c **** 				taskEXIT_CRITICAL();
 4017              		.loc 1 3395 0
 4018 0050 FFF7FEFF 		bl	vPortExitCritical
3396:..\Source/tasks.c **** 
3397:..\Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 4019              		.loc 1 3397 0
 4020 0054 3868     		ldr	r0, [r7]
 4021 0056 FFF7FEFF 		bl	prvDeleteTCB
 4022              	.L254:
 4023              	.LBE51:
3376:..\Source/tasks.c **** 		{
 4024              		.loc 1 3376 0
 4025 005a 064B     		ldr	r3, .L256+8
 4026 005c 1B68     		ldr	r3, [r3]
 4027 005e 002B     		cmp	r3, #0
 4028 0060 D2D1     		bne	.L255
 4029              	.LBE50:
3398:..\Source/tasks.c **** 			}
3399:..\Source/tasks.c **** 			else
3400:..\Source/tasks.c **** 			{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 137


3401:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:..\Source/tasks.c **** 			}
3403:..\Source/tasks.c **** 		}
3404:..\Source/tasks.c **** 	}
3405:..\Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:..\Source/tasks.c **** }
 4030              		.loc 1 3406 0
 4031 0062 00BF     		nop
 4032 0064 0837     		adds	r7, r7, #8
 4033              		.cfi_def_cfa_offset 8
 4034 0066 BD46     		mov	sp, r7
 4035              		.cfi_def_cfa_register 13
 4036              		@ sp needed
 4037 0068 80BD     		pop	{r7, pc}
 4038              	.L257:
 4039 006a 00BF     		.align	2
 4040              	.L256:
 4041 006c AC000000 		.word	xTasksWaitingTermination
 4042 0070 D8000000 		.word	uxCurrentNumberOfTasks
 4043 0074 C0000000 		.word	uxDeletedTasksWaitingCleanUp
 4044              		.cfi_endproc
 4045              	.LFE104:
 4046              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 4047              		.section	.text.vTaskGetInfo,"ax",%progbits
 4048              		.align	2
 4049              		.global	vTaskGetInfo
 4050              		.thumb
 4051              		.thumb_func
 4052              		.type	vTaskGetInfo, %function
 4053              	vTaskGetInfo:
 4054              	.LFB105:
3407:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3408:..\Source/tasks.c **** 
3409:..\Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:..\Source/tasks.c **** 
3411:..\Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:..\Source/tasks.c **** 	{
 4055              		.loc 1 3412 0
 4056              		.cfi_startproc
 4057              		@ args = 0, pretend = 0, frame = 24
 4058              		@ frame_needed = 1, uses_anonymous_args = 0
 4059 0000 80B5     		push	{r7, lr}
 4060              		.cfi_def_cfa_offset 8
 4061              		.cfi_offset 7, -8
 4062              		.cfi_offset 14, -4
 4063 0002 86B0     		sub	sp, sp, #24
 4064              		.cfi_def_cfa_offset 32
 4065 0004 00AF     		add	r7, sp, #0
 4066              		.cfi_def_cfa_register 7
 4067 0006 F860     		str	r0, [r7, #12]
 4068 0008 B960     		str	r1, [r7, #8]
 4069 000a 7A60     		str	r2, [r7, #4]
 4070 000c FB70     		strb	r3, [r7, #3]
3413:..\Source/tasks.c **** 	TCB_t *pxTCB;
3414:..\Source/tasks.c **** 
3415:..\Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:..\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 138


 4071              		.loc 1 3416 0
 4072 000e FB68     		ldr	r3, [r7, #12]
 4073 0010 002B     		cmp	r3, #0
 4074 0012 02D1     		bne	.L259
 4075              		.loc 1 3416 0 is_stmt 0 discriminator 1
 4076 0014 284B     		ldr	r3, .L268
 4077 0016 1B68     		ldr	r3, [r3]
 4078 0018 00E0     		b	.L260
 4079              	.L259:
 4080              		.loc 1 3416 0 discriminator 2
 4081 001a FB68     		ldr	r3, [r7, #12]
 4082              	.L260:
 4083              		.loc 1 3416 0 discriminator 4
 4084 001c 7B61     		str	r3, [r7, #20]
3417:..\Source/tasks.c **** 
3418:..\Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 4085              		.loc 1 3418 0 is_stmt 1 discriminator 4
 4086 001e BB68     		ldr	r3, [r7, #8]
 4087 0020 7A69     		ldr	r2, [r7, #20]
 4088 0022 1A60     		str	r2, [r3]
3419:..\Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4089              		.loc 1 3419 0 discriminator 4
 4090 0024 7B69     		ldr	r3, [r7, #20]
 4091 0026 03F13402 		add	r2, r3, #52
 4092 002a BB68     		ldr	r3, [r7, #8]
 4093 002c 5A60     		str	r2, [r3, #4]
3420:..\Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4094              		.loc 1 3420 0 discriminator 4
 4095 002e 7B69     		ldr	r3, [r7, #20]
 4096 0030 DA6A     		ldr	r2, [r3, #44]
 4097 0032 BB68     		ldr	r3, [r7, #8]
 4098 0034 1A61     		str	r2, [r3, #16]
3421:..\Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4099              		.loc 1 3421 0 discriminator 4
 4100 0036 7B69     		ldr	r3, [r7, #20]
 4101 0038 1A6B     		ldr	r2, [r3, #48]
 4102 003a BB68     		ldr	r3, [r7, #8]
 4103 003c DA61     		str	r2, [r3, #28]
3422:..\Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4104              		.loc 1 3422 0 discriminator 4
 4105 003e 7B69     		ldr	r3, [r7, #20]
 4106 0040 1A6C     		ldr	r2, [r3, #64]
 4107 0042 BB68     		ldr	r3, [r7, #8]
 4108 0044 9A60     		str	r2, [r3, #8]
3423:..\Source/tasks.c **** 
3424:..\Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:..\Source/tasks.c **** 		{
3426:..\Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:..\Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:..\Source/tasks.c **** 			being in the Blocked state. */
3429:..\Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
 4109              		.loc 1 3429 0 discriminator 4
 4110 0046 BB68     		ldr	r3, [r7, #8]
 4111 0048 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 4112 004a 032B     		cmp	r3, #3
 4113 004c 0AD1     		bne	.L261
3430:..\Source/tasks.c **** 			{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 139


3431:..\Source/tasks.c **** 				vTaskSuspendAll();
 4114              		.loc 1 3431 0
 4115 004e FFF7FEFF 		bl	vTaskSuspendAll
3432:..\Source/tasks.c **** 				{
3433:..\Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 4116              		.loc 1 3433 0
 4117 0052 7B69     		ldr	r3, [r7, #20]
 4118 0054 9B6A     		ldr	r3, [r3, #40]
 4119 0056 002B     		cmp	r3, #0
 4120 0058 02D0     		beq	.L262
3434:..\Source/tasks.c **** 					{
3435:..\Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
 4121              		.loc 1 3435 0
 4122 005a BB68     		ldr	r3, [r7, #8]
 4123 005c 0222     		movs	r2, #2
 4124 005e 1A73     		strb	r2, [r3, #12]
 4125              	.L262:
3436:..\Source/tasks.c **** 					}
3437:..\Source/tasks.c **** 				}
3438:..\Source/tasks.c **** 				xTaskResumeAll();
 4126              		.loc 1 3438 0
 4127 0060 FFF7FEFF 		bl	xTaskResumeAll
 4128              	.L261:
3439:..\Source/tasks.c **** 			}
3440:..\Source/tasks.c **** 		}
3441:..\Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:..\Source/tasks.c **** 
3443:..\Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:..\Source/tasks.c **** 		{
3445:..\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 4129              		.loc 1 3445 0
 4130 0064 7B69     		ldr	r3, [r7, #20]
 4131 0066 9A6C     		ldr	r2, [r3, #72]
 4132 0068 BB68     		ldr	r3, [r7, #8]
 4133 006a 5A61     		str	r2, [r3, #20]
3446:..\Source/tasks.c **** 		}
3447:..\Source/tasks.c **** 		#else
3448:..\Source/tasks.c **** 		{
3449:..\Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:..\Source/tasks.c **** 		}
3451:..\Source/tasks.c **** 		#endif
3452:..\Source/tasks.c **** 
3453:..\Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:..\Source/tasks.c **** 		{
3455:..\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:..\Source/tasks.c **** 		}
3457:..\Source/tasks.c **** 		#else
3458:..\Source/tasks.c **** 		{
3459:..\Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 4134              		.loc 1 3459 0
 4135 006c BB68     		ldr	r3, [r7, #8]
 4136 006e 0022     		movs	r2, #0
 4137 0070 9A61     		str	r2, [r3, #24]
3460:..\Source/tasks.c **** 		}
3461:..\Source/tasks.c **** 		#endif
3462:..\Source/tasks.c **** 
3463:..\Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 140


3464:..\Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:..\Source/tasks.c **** 		just set to whatever is passed in. */
3466:..\Source/tasks.c **** 		if( eState != eInvalid )
 4138              		.loc 1 3466 0
 4139 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4140 0074 052B     		cmp	r3, #5
 4141 0076 03D0     		beq	.L263
3467:..\Source/tasks.c **** 		{
3468:..\Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
 4142              		.loc 1 3468 0
 4143 0078 BB68     		ldr	r3, [r7, #8]
 4144 007a FA78     		ldrb	r2, [r7, #3]
 4145 007c 1A73     		strb	r2, [r3, #12]
 4146 007e 06E0     		b	.L264
 4147              	.L263:
3469:..\Source/tasks.c **** 		}
3470:..\Source/tasks.c **** 		else
3471:..\Source/tasks.c **** 		{
3472:..\Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 4148              		.loc 1 3472 0
 4149 0080 F868     		ldr	r0, [r7, #12]
 4150 0082 FFF7FEFF 		bl	eTaskGetState
 4151 0086 0346     		mov	r3, r0
 4152 0088 1A46     		mov	r2, r3
 4153 008a BB68     		ldr	r3, [r7, #8]
 4154 008c 1A73     		strb	r2, [r3, #12]
 4155              	.L264:
3473:..\Source/tasks.c **** 		}
3474:..\Source/tasks.c **** 
3475:..\Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:..\Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:..\Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 4156              		.loc 1 3477 0
 4157 008e 7B68     		ldr	r3, [r7, #4]
 4158 0090 002B     		cmp	r3, #0
 4159 0092 09D0     		beq	.L265
3478:..\Source/tasks.c **** 		{
3479:..\Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:..\Source/tasks.c **** 			{
3481:..\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:..\Source/tasks.c **** 			}
3483:..\Source/tasks.c **** 			#else
3484:..\Source/tasks.c **** 			{
3485:..\Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 4160              		.loc 1 3485 0
 4161 0094 7B69     		ldr	r3, [r7, #20]
 4162 0096 1B6B     		ldr	r3, [r3, #48]
 4163 0098 1846     		mov	r0, r3
 4164 009a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4165 009e 0346     		mov	r3, r0
 4166 00a0 1A46     		mov	r2, r3
 4167 00a2 BB68     		ldr	r3, [r7, #8]
 4168 00a4 1A84     		strh	r2, [r3, #32]	@ movhi
3486:..\Source/tasks.c **** 			}
3487:..\Source/tasks.c **** 			#endif
3488:..\Source/tasks.c **** 		}
3489:..\Source/tasks.c **** 		else
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 141


3490:..\Source/tasks.c **** 		{
3491:..\Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:..\Source/tasks.c **** 		}
3493:..\Source/tasks.c **** 	}
 4169              		.loc 1 3493 0
 4170 00a6 02E0     		b	.L267
 4171              	.L265:
3491:..\Source/tasks.c **** 		}
 4172              		.loc 1 3491 0
 4173 00a8 BB68     		ldr	r3, [r7, #8]
 4174 00aa 0022     		movs	r2, #0
 4175 00ac 1A84     		strh	r2, [r3, #32]	@ movhi
 4176              	.L267:
 4177              		.loc 1 3493 0
 4178 00ae 00BF     		nop
 4179 00b0 1837     		adds	r7, r7, #24
 4180              		.cfi_def_cfa_offset 8
 4181 00b2 BD46     		mov	sp, r7
 4182              		.cfi_def_cfa_register 13
 4183              		@ sp needed
 4184 00b4 80BD     		pop	{r7, pc}
 4185              	.L269:
 4186 00b6 00BF     		.align	2
 4187              	.L268:
 4188 00b8 00000000 		.word	pxCurrentTCB
 4189              		.cfi_endproc
 4190              	.LFE105:
 4191              		.size	vTaskGetInfo, .-vTaskGetInfo
 4192              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4193              		.align	2
 4194              		.thumb
 4195              		.thumb_func
 4196              		.type	prvListTasksWithinSingleList, %function
 4197              	prvListTasksWithinSingleList:
 4198              	.LFB106:
3494:..\Source/tasks.c **** 
3495:..\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3497:..\Source/tasks.c **** 
3498:..\Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:..\Source/tasks.c **** 
3500:..\Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:..\Source/tasks.c **** 	{
 4199              		.loc 1 3501 0
 4200              		.cfi_startproc
 4201              		@ args = 0, pretend = 0, frame = 40
 4202              		@ frame_needed = 1, uses_anonymous_args = 0
 4203 0000 80B5     		push	{r7, lr}
 4204              		.cfi_def_cfa_offset 8
 4205              		.cfi_offset 7, -8
 4206              		.cfi_offset 14, -4
 4207 0002 8AB0     		sub	sp, sp, #40
 4208              		.cfi_def_cfa_offset 48
 4209 0004 00AF     		add	r7, sp, #0
 4210              		.cfi_def_cfa_register 7
 4211 0006 F860     		str	r0, [r7, #12]
 4212 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 142


 4213 000a 1346     		mov	r3, r2
 4214 000c FB71     		strb	r3, [r7, #7]
3502:..\Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:..\Source/tasks.c **** 	UBaseType_t uxTask = 0;
 4215              		.loc 1 3503 0
 4216 000e 0023     		movs	r3, #0
 4217 0010 7B62     		str	r3, [r7, #36]
3504:..\Source/tasks.c **** 
3505:..\Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 4218              		.loc 1 3505 0
 4219 0012 BB68     		ldr	r3, [r7, #8]
 4220 0014 1B68     		ldr	r3, [r3]
 4221 0016 002B     		cmp	r3, #0
 4222 0018 3FD0     		beq	.L271
 4223              	.LBB52:
3506:..\Source/tasks.c **** 		{
3507:..\Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4224              		.loc 1 3507 0
 4225 001a BB68     		ldr	r3, [r7, #8]
 4226 001c 3B62     		str	r3, [r7, #32]
 4227 001e 3B6A     		ldr	r3, [r7, #32]
 4228 0020 5B68     		ldr	r3, [r3, #4]
 4229 0022 5A68     		ldr	r2, [r3, #4]
 4230 0024 3B6A     		ldr	r3, [r7, #32]
 4231 0026 5A60     		str	r2, [r3, #4]
 4232 0028 3B6A     		ldr	r3, [r7, #32]
 4233 002a 5A68     		ldr	r2, [r3, #4]
 4234 002c 3B6A     		ldr	r3, [r7, #32]
 4235 002e 0833     		adds	r3, r3, #8
 4236 0030 9A42     		cmp	r2, r3
 4237 0032 04D1     		bne	.L272
 4238              		.loc 1 3507 0 is_stmt 0 discriminator 1
 4239 0034 3B6A     		ldr	r3, [r7, #32]
 4240 0036 5B68     		ldr	r3, [r3, #4]
 4241 0038 5A68     		ldr	r2, [r3, #4]
 4242 003a 3B6A     		ldr	r3, [r7, #32]
 4243 003c 5A60     		str	r2, [r3, #4]
 4244              	.L272:
 4245              		.loc 1 3507 0 discriminator 3
 4246 003e 3B6A     		ldr	r3, [r7, #32]
 4247 0040 5B68     		ldr	r3, [r3, #4]
 4248 0042 DB68     		ldr	r3, [r3, #12]
 4249 0044 FB61     		str	r3, [r7, #28]
 4250              	.L274:
 4251              	.LBE52:
 4252              	.LBB53:
3508:..\Source/tasks.c **** 
3509:..\Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:..\Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:..\Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:..\Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:..\Source/tasks.c **** 			do
3514:..\Source/tasks.c **** 			{
3515:..\Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 4253              		.loc 1 3515 0 is_stmt 1
 4254 0046 BB68     		ldr	r3, [r7, #8]
 4255 0048 BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 143


 4256 004a BB69     		ldr	r3, [r7, #24]
 4257 004c 5B68     		ldr	r3, [r3, #4]
 4258 004e 5A68     		ldr	r2, [r3, #4]
 4259 0050 BB69     		ldr	r3, [r7, #24]
 4260 0052 5A60     		str	r2, [r3, #4]
 4261 0054 BB69     		ldr	r3, [r7, #24]
 4262 0056 5A68     		ldr	r2, [r3, #4]
 4263 0058 BB69     		ldr	r3, [r7, #24]
 4264 005a 0833     		adds	r3, r3, #8
 4265 005c 9A42     		cmp	r2, r3
 4266 005e 04D1     		bne	.L273
 4267              		.loc 1 3515 0 is_stmt 0 discriminator 1
 4268 0060 BB69     		ldr	r3, [r7, #24]
 4269 0062 5B68     		ldr	r3, [r3, #4]
 4270 0064 5A68     		ldr	r2, [r3, #4]
 4271 0066 BB69     		ldr	r3, [r7, #24]
 4272 0068 5A60     		str	r2, [r3, #4]
 4273              	.L273:
 4274              		.loc 1 3515 0 discriminator 3
 4275 006a BB69     		ldr	r3, [r7, #24]
 4276 006c 5B68     		ldr	r3, [r3, #4]
 4277 006e DB68     		ldr	r3, [r3, #12]
 4278 0070 7B61     		str	r3, [r7, #20]
 4279              	.LBE53:
3516:..\Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4280              		.loc 1 3516 0 is_stmt 1 discriminator 3
 4281 0072 7A6A     		ldr	r2, [r7, #36]
 4282 0074 1346     		mov	r3, r2
 4283 0076 DB00     		lsls	r3, r3, #3
 4284 0078 1344     		add	r3, r3, r2
 4285 007a 9B00     		lsls	r3, r3, #2
 4286 007c 1A46     		mov	r2, r3
 4287 007e FB68     		ldr	r3, [r7, #12]
 4288 0080 9918     		adds	r1, r3, r2
 4289 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4290 0084 0122     		movs	r2, #1
 4291 0086 7869     		ldr	r0, [r7, #20]
 4292 0088 FFF7FEFF 		bl	vTaskGetInfo
3517:..\Source/tasks.c **** 				uxTask++;
 4293              		.loc 1 3517 0 discriminator 3
 4294 008c 7B6A     		ldr	r3, [r7, #36]
 4295 008e 0133     		adds	r3, r3, #1
 4296 0090 7B62     		str	r3, [r7, #36]
3518:..\Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4297              		.loc 1 3518 0 discriminator 3
 4298 0092 7A69     		ldr	r2, [r7, #20]
 4299 0094 FB69     		ldr	r3, [r7, #28]
 4300 0096 9A42     		cmp	r2, r3
 4301 0098 D5D1     		bne	.L274
 4302              	.L271:
3519:..\Source/tasks.c **** 		}
3520:..\Source/tasks.c **** 		else
3521:..\Source/tasks.c **** 		{
3522:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:..\Source/tasks.c **** 		}
3524:..\Source/tasks.c **** 
3525:..\Source/tasks.c **** 		return uxTask;
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 144


 4303              		.loc 1 3525 0
 4304 009a 7B6A     		ldr	r3, [r7, #36]
3526:..\Source/tasks.c **** 	}
 4305              		.loc 1 3526 0
 4306 009c 1846     		mov	r0, r3
 4307 009e 2837     		adds	r7, r7, #40
 4308              		.cfi_def_cfa_offset 8
 4309 00a0 BD46     		mov	sp, r7
 4310              		.cfi_def_cfa_register 13
 4311              		@ sp needed
 4312 00a2 80BD     		pop	{r7, pc}
 4313              		.cfi_endproc
 4314              	.LFE106:
 4315              		.size	prvListTasksWithinSingleList, .-prvListTasksWithinSingleList
 4316              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4317              		.align	2
 4318              		.thumb
 4319              		.thumb_func
 4320              		.type	prvTaskCheckFreeStackSpace, %function
 4321              	prvTaskCheckFreeStackSpace:
 4322              	.LFB107:
3527:..\Source/tasks.c **** 
3528:..\Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3530:..\Source/tasks.c **** 
3531:..\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:..\Source/tasks.c **** 
3533:..\Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:..\Source/tasks.c **** 	{
 4323              		.loc 1 3534 0
 4324              		.cfi_startproc
 4325              		@ args = 0, pretend = 0, frame = 16
 4326              		@ frame_needed = 1, uses_anonymous_args = 0
 4327              		@ link register save eliminated.
 4328 0000 80B4     		push	{r7}
 4329              		.cfi_def_cfa_offset 4
 4330              		.cfi_offset 7, -4
 4331 0002 85B0     		sub	sp, sp, #20
 4332              		.cfi_def_cfa_offset 24
 4333 0004 00AF     		add	r7, sp, #0
 4334              		.cfi_def_cfa_register 7
 4335 0006 7860     		str	r0, [r7, #4]
3535:..\Source/tasks.c **** 	uint32_t ulCount = 0U;
 4336              		.loc 1 3535 0
 4337 0008 0023     		movs	r3, #0
 4338 000a FB60     		str	r3, [r7, #12]
3536:..\Source/tasks.c **** 
3537:..\Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4339              		.loc 1 3537 0
 4340 000c 05E0     		b	.L277
 4341              	.L278:
3538:..\Source/tasks.c **** 		{
3539:..\Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4342              		.loc 1 3539 0
 4343 000e 7B68     		ldr	r3, [r7, #4]
 4344 0010 0133     		adds	r3, r3, #1
 4345 0012 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 145


3540:..\Source/tasks.c **** 			ulCount++;
 4346              		.loc 1 3540 0
 4347 0014 FB68     		ldr	r3, [r7, #12]
 4348 0016 0133     		adds	r3, r3, #1
 4349 0018 FB60     		str	r3, [r7, #12]
 4350              	.L277:
3537:..\Source/tasks.c **** 		{
 4351              		.loc 1 3537 0
 4352 001a 7B68     		ldr	r3, [r7, #4]
 4353 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4354 001e A52B     		cmp	r3, #165
 4355 0020 F5D0     		beq	.L278
3541:..\Source/tasks.c **** 		}
3542:..\Source/tasks.c **** 
3543:..\Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 4356              		.loc 1 3543 0
 4357 0022 FB68     		ldr	r3, [r7, #12]
 4358 0024 9B08     		lsrs	r3, r3, #2
 4359 0026 FB60     		str	r3, [r7, #12]
3544:..\Source/tasks.c **** 
3545:..\Source/tasks.c **** 		return ( uint16_t ) ulCount;
 4360              		.loc 1 3545 0
 4361 0028 FB68     		ldr	r3, [r7, #12]
 4362 002a 9BB2     		uxth	r3, r3
3546:..\Source/tasks.c **** 	}
 4363              		.loc 1 3546 0
 4364 002c 1846     		mov	r0, r3
 4365 002e 1437     		adds	r7, r7, #20
 4366              		.cfi_def_cfa_offset 4
 4367 0030 BD46     		mov	sp, r7
 4368              		.cfi_def_cfa_register 13
 4369              		@ sp needed
 4370 0032 80BC     		pop	{r7}
 4371              		.cfi_restore 7
 4372              		.cfi_def_cfa_offset 0
 4373 0034 7047     		bx	lr
 4374              		.cfi_endproc
 4375              	.LFE107:
 4376              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 4377 0036 00BF     		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4378              		.align	2
 4379              		.global	uxTaskGetStackHighWaterMark
 4380              		.thumb
 4381              		.thumb_func
 4382              		.type	uxTaskGetStackHighWaterMark, %function
 4383              	uxTaskGetStackHighWaterMark:
 4384              	.LFB108:
3547:..\Source/tasks.c **** 
3548:..\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3550:..\Source/tasks.c **** 
3551:..\Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:..\Source/tasks.c **** 
3553:..\Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:..\Source/tasks.c **** 	{
 4385              		.loc 1 3554 0
 4386              		.cfi_startproc
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 146


 4387              		@ args = 0, pretend = 0, frame = 24
 4388              		@ frame_needed = 1, uses_anonymous_args = 0
 4389 0000 80B5     		push	{r7, lr}
 4390              		.cfi_def_cfa_offset 8
 4391              		.cfi_offset 7, -8
 4392              		.cfi_offset 14, -4
 4393 0002 86B0     		sub	sp, sp, #24
 4394              		.cfi_def_cfa_offset 32
 4395 0004 00AF     		add	r7, sp, #0
 4396              		.cfi_def_cfa_register 7
 4397 0006 7860     		str	r0, [r7, #4]
3555:..\Source/tasks.c **** 	TCB_t *pxTCB;
3556:..\Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:..\Source/tasks.c **** 	UBaseType_t uxReturn;
3558:..\Source/tasks.c **** 
3559:..\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4398              		.loc 1 3559 0
 4399 0008 7B68     		ldr	r3, [r7, #4]
 4400 000a 002B     		cmp	r3, #0
 4401 000c 02D1     		bne	.L281
 4402              		.loc 1 3559 0 is_stmt 0 discriminator 1
 4403 000e 094B     		ldr	r3, .L284
 4404 0010 1B68     		ldr	r3, [r3]
 4405 0012 00E0     		b	.L282
 4406              	.L281:
 4407              		.loc 1 3559 0 discriminator 2
 4408 0014 7B68     		ldr	r3, [r7, #4]
 4409              	.L282:
 4410              		.loc 1 3559 0 discriminator 4
 4411 0016 7B61     		str	r3, [r7, #20]
3560:..\Source/tasks.c **** 
3561:..\Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:..\Source/tasks.c **** 		{
3563:..\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 4412              		.loc 1 3563 0 is_stmt 1 discriminator 4
 4413 0018 7B69     		ldr	r3, [r7, #20]
 4414 001a 1B6B     		ldr	r3, [r3, #48]
 4415 001c 3B61     		str	r3, [r7, #16]
3564:..\Source/tasks.c **** 		}
3565:..\Source/tasks.c **** 		#else
3566:..\Source/tasks.c **** 		{
3567:..\Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:..\Source/tasks.c **** 		}
3569:..\Source/tasks.c **** 		#endif
3570:..\Source/tasks.c **** 
3571:..\Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 4416              		.loc 1 3571 0 discriminator 4
 4417 001e 3869     		ldr	r0, [r7, #16]
 4418 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4419 0024 0346     		mov	r3, r0
 4420 0026 FB60     		str	r3, [r7, #12]
3572:..\Source/tasks.c **** 
3573:..\Source/tasks.c **** 		return uxReturn;
 4421              		.loc 1 3573 0 discriminator 4
 4422 0028 FB68     		ldr	r3, [r7, #12]
3574:..\Source/tasks.c **** 	}
 4423              		.loc 1 3574 0 discriminator 4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 147


 4424 002a 1846     		mov	r0, r3
 4425 002c 1837     		adds	r7, r7, #24
 4426              		.cfi_def_cfa_offset 8
 4427 002e BD46     		mov	sp, r7
 4428              		.cfi_def_cfa_register 13
 4429              		@ sp needed
 4430 0030 80BD     		pop	{r7, pc}
 4431              	.L285:
 4432 0032 00BF     		.align	2
 4433              	.L284:
 4434 0034 00000000 		.word	pxCurrentTCB
 4435              		.cfi_endproc
 4436              	.LFE108:
 4437              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 4438              		.section	.text.prvDeleteTCB,"ax",%progbits
 4439              		.align	2
 4440              		.thumb
 4441              		.thumb_func
 4442              		.type	prvDeleteTCB, %function
 4443              	prvDeleteTCB:
 4444              	.LFB109:
3575:..\Source/tasks.c **** 
3576:..\Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3578:..\Source/tasks.c **** 
3579:..\Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:..\Source/tasks.c **** 
3581:..\Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:..\Source/tasks.c **** 	{
 4445              		.loc 1 3582 0
 4446              		.cfi_startproc
 4447              		@ args = 0, pretend = 0, frame = 8
 4448              		@ frame_needed = 1, uses_anonymous_args = 0
 4449 0000 80B5     		push	{r7, lr}
 4450              		.cfi_def_cfa_offset 8
 4451              		.cfi_offset 7, -8
 4452              		.cfi_offset 14, -4
 4453 0002 82B0     		sub	sp, sp, #8
 4454              		.cfi_def_cfa_offset 16
 4455 0004 00AF     		add	r7, sp, #0
 4456              		.cfi_def_cfa_register 7
 4457 0006 7860     		str	r0, [r7, #4]
3583:..\Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:..\Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:..\Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:..\Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:..\Source/tasks.c **** 
3588:..\Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:..\Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:..\Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:..\Source/tasks.c **** 		{
3592:..\Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:..\Source/tasks.c **** 		}
3594:..\Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:..\Source/tasks.c **** 
3596:..\Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:..\Source/tasks.c **** 		{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 148


3598:..\Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:..\Source/tasks.c **** 			the stack and TCB. */
3600:..\Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 4458              		.loc 1 3600 0
 4459 0008 7B68     		ldr	r3, [r7, #4]
 4460 000a 1B6B     		ldr	r3, [r3, #48]
 4461 000c 1846     		mov	r0, r3
 4462 000e FFF7FEFF 		bl	vPortFree
3601:..\Source/tasks.c **** 			vPortFree( pxTCB );
 4463              		.loc 1 3601 0
 4464 0012 7868     		ldr	r0, [r7, #4]
 4465 0014 FFF7FEFF 		bl	vPortFree
3602:..\Source/tasks.c **** 		}
3603:..\Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:..\Source/tasks.c **** 		{
3605:..\Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:..\Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:..\Source/tasks.c **** 			memory. */
3608:..\Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:..\Source/tasks.c **** 			{
3610:..\Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:..\Source/tasks.c **** 				must be freed. */
3612:..\Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:..\Source/tasks.c **** 				vPortFree( pxTCB );
3614:..\Source/tasks.c **** 			}
3615:..\Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:..\Source/tasks.c **** 			{
3617:..\Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:..\Source/tasks.c **** 				only memory that must be freed. */
3619:..\Source/tasks.c **** 				vPortFree( pxTCB );
3620:..\Source/tasks.c **** 			}
3621:..\Source/tasks.c **** 			else
3622:..\Source/tasks.c **** 			{
3623:..\Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:..\Source/tasks.c **** 				nothing needs to be freed. */
3625:..\Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:..\Source/tasks.c **** 			}
3628:..\Source/tasks.c **** 		}
3629:..\Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:..\Source/tasks.c **** 	}
 4466              		.loc 1 3630 0
 4467 0018 00BF     		nop
 4468 001a 0837     		adds	r7, r7, #8
 4469              		.cfi_def_cfa_offset 8
 4470 001c BD46     		mov	sp, r7
 4471              		.cfi_def_cfa_register 13
 4472              		@ sp needed
 4473 001e 80BD     		pop	{r7, pc}
 4474              		.cfi_endproc
 4475              	.LFE109:
 4476              		.size	prvDeleteTCB, .-prvDeleteTCB
 4477              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4478              		.align	2
 4479              		.thumb
 4480              		.thumb_func
 4481              		.type	prvResetNextTaskUnblockTime, %function
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 149


 4482              	prvResetNextTaskUnblockTime:
 4483              	.LFB110:
3631:..\Source/tasks.c **** 
3632:..\Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3634:..\Source/tasks.c **** 
3635:..\Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:..\Source/tasks.c **** {
 4484              		.loc 1 3636 0
 4485              		.cfi_startproc
 4486              		@ args = 0, pretend = 0, frame = 8
 4487              		@ frame_needed = 1, uses_anonymous_args = 0
 4488              		@ link register save eliminated.
 4489 0000 80B4     		push	{r7}
 4490              		.cfi_def_cfa_offset 4
 4491              		.cfi_offset 7, -4
 4492 0002 83B0     		sub	sp, sp, #12
 4493              		.cfi_def_cfa_offset 16
 4494 0004 00AF     		add	r7, sp, #0
 4495              		.cfi_def_cfa_register 7
3637:..\Source/tasks.c **** TCB_t *pxTCB;
3638:..\Source/tasks.c **** 
3639:..\Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4496              		.loc 1 3639 0
 4497 0006 0E4B     		ldr	r3, .L293
 4498 0008 1B68     		ldr	r3, [r3]
 4499 000a 1B68     		ldr	r3, [r3]
 4500 000c 002B     		cmp	r3, #0
 4501 000e 01D1     		bne	.L288
 4502              		.loc 1 3639 0 is_stmt 0 discriminator 1
 4503 0010 0123     		movs	r3, #1
 4504 0012 00E0     		b	.L289
 4505              	.L288:
 4506              		.loc 1 3639 0 discriminator 2
 4507 0014 0023     		movs	r3, #0
 4508              	.L289:
 4509              		.loc 1 3639 0 discriminator 4
 4510 0016 002B     		cmp	r3, #0
 4511 0018 04D0     		beq	.L290
3640:..\Source/tasks.c **** 	{
3641:..\Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:..\Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:..\Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:..\Source/tasks.c **** 		there is an item in the delayed list. */
3645:..\Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4512              		.loc 1 3645 0 is_stmt 1
 4513 001a 0A4B     		ldr	r3, .L293+4
 4514 001c 4FF0FF32 		mov	r2, #-1
 4515 0020 1A60     		str	r2, [r3]
3646:..\Source/tasks.c **** 	}
3647:..\Source/tasks.c **** 	else
3648:..\Source/tasks.c **** 	{
3649:..\Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:..\Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:..\Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:..\Source/tasks.c **** 		from the Blocked state. */
3653:..\Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 150


3654:..\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3655:..\Source/tasks.c **** 	}
3656:..\Source/tasks.c **** }
 4516              		.loc 1 3656 0
 4517 0022 08E0     		b	.L292
 4518              	.L290:
3653:..\Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 4519              		.loc 1 3653 0
 4520 0024 064B     		ldr	r3, .L293
 4521 0026 1B68     		ldr	r3, [r3]
 4522 0028 DB68     		ldr	r3, [r3, #12]
 4523 002a DB68     		ldr	r3, [r3, #12]
 4524 002c 7B60     		str	r3, [r7, #4]
3654:..\Source/tasks.c **** 	}
 4525              		.loc 1 3654 0
 4526 002e 7B68     		ldr	r3, [r7, #4]
 4527 0030 5B68     		ldr	r3, [r3, #4]
 4528 0032 044A     		ldr	r2, .L293+4
 4529 0034 1360     		str	r3, [r2]
 4530              	.L292:
 4531              		.loc 1 3656 0
 4532 0036 00BF     		nop
 4533 0038 0C37     		adds	r7, r7, #12
 4534              		.cfi_def_cfa_offset 4
 4535 003a BD46     		mov	sp, r7
 4536              		.cfi_def_cfa_register 13
 4537              		@ sp needed
 4538 003c 80BC     		pop	{r7}
 4539              		.cfi_restore 7
 4540              		.cfi_def_cfa_offset 0
 4541 003e 7047     		bx	lr
 4542              	.L294:
 4543              		.align	2
 4544              	.L293:
 4545 0040 90000000 		.word	pxDelayedTaskList
 4546 0044 F8000000 		.word	xNextTaskUnblockTime
 4547              		.cfi_endproc
 4548              	.LFE110:
 4549              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4550              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4551              		.align	2
 4552              		.global	xTaskGetCurrentTaskHandle
 4553              		.thumb
 4554              		.thumb_func
 4555              		.type	xTaskGetCurrentTaskHandle, %function
 4556              	xTaskGetCurrentTaskHandle:
 4557              	.LFB111:
3657:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3658:..\Source/tasks.c **** 
3659:..\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:..\Source/tasks.c **** 
3661:..\Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:..\Source/tasks.c **** 	{
 4558              		.loc 1 3662 0
 4559              		.cfi_startproc
 4560              		@ args = 0, pretend = 0, frame = 8
 4561              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 151


 4562              		@ link register save eliminated.
 4563 0000 80B4     		push	{r7}
 4564              		.cfi_def_cfa_offset 4
 4565              		.cfi_offset 7, -4
 4566 0002 83B0     		sub	sp, sp, #12
 4567              		.cfi_def_cfa_offset 16
 4568 0004 00AF     		add	r7, sp, #0
 4569              		.cfi_def_cfa_register 7
3663:..\Source/tasks.c **** 	TaskHandle_t xReturn;
3664:..\Source/tasks.c **** 
3665:..\Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:..\Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:..\Source/tasks.c **** 		individual execution thread. */
3668:..\Source/tasks.c **** 		xReturn = pxCurrentTCB;
 4570              		.loc 1 3668 0
 4571 0006 044B     		ldr	r3, .L297
 4572 0008 1B68     		ldr	r3, [r3]
 4573 000a 7B60     		str	r3, [r7, #4]
3669:..\Source/tasks.c **** 
3670:..\Source/tasks.c **** 		return xReturn;
 4574              		.loc 1 3670 0
 4575 000c 7B68     		ldr	r3, [r7, #4]
3671:..\Source/tasks.c **** 	}
 4576              		.loc 1 3671 0
 4577 000e 1846     		mov	r0, r3
 4578 0010 0C37     		adds	r7, r7, #12
 4579              		.cfi_def_cfa_offset 4
 4580 0012 BD46     		mov	sp, r7
 4581              		.cfi_def_cfa_register 13
 4582              		@ sp needed
 4583 0014 80BC     		pop	{r7}
 4584              		.cfi_restore 7
 4585              		.cfi_def_cfa_offset 0
 4586 0016 7047     		bx	lr
 4587              	.L298:
 4588              		.align	2
 4589              	.L297:
 4590 0018 00000000 		.word	pxCurrentTCB
 4591              		.cfi_endproc
 4592              	.LFE111:
 4593              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4594              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4595              		.align	2
 4596              		.global	vTaskPriorityInherit
 4597              		.thumb
 4598              		.thumb_func
 4599              		.type	vTaskPriorityInherit, %function
 4600              	vTaskPriorityInherit:
 4601              	.LFB112:
3672:..\Source/tasks.c **** 
3673:..\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3675:..\Source/tasks.c **** 
3676:..\Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:..\Source/tasks.c **** 
3678:..\Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:..\Source/tasks.c **** 	{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 152


3680:..\Source/tasks.c **** 	BaseType_t xReturn;
3681:..\Source/tasks.c **** 
3682:..\Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:..\Source/tasks.c **** 		{
3684:..\Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:..\Source/tasks.c **** 		}
3686:..\Source/tasks.c **** 		else
3687:..\Source/tasks.c **** 		{
3688:..\Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:..\Source/tasks.c **** 			{
3690:..\Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:..\Source/tasks.c **** 			}
3692:..\Source/tasks.c **** 			else
3693:..\Source/tasks.c **** 			{
3694:..\Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:..\Source/tasks.c **** 			}
3696:..\Source/tasks.c **** 		}
3697:..\Source/tasks.c **** 
3698:..\Source/tasks.c **** 		return xReturn;
3699:..\Source/tasks.c **** 	}
3700:..\Source/tasks.c **** 
3701:..\Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3703:..\Source/tasks.c **** 
3704:..\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:..\Source/tasks.c **** 
3706:..\Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:..\Source/tasks.c **** 	{
 4602              		.loc 1 3707 0
 4603              		.cfi_startproc
 4604              		@ args = 0, pretend = 0, frame = 16
 4605              		@ frame_needed = 1, uses_anonymous_args = 0
 4606 0000 80B5     		push	{r7, lr}
 4607              		.cfi_def_cfa_offset 8
 4608              		.cfi_offset 7, -8
 4609              		.cfi_offset 14, -4
 4610 0002 84B0     		sub	sp, sp, #16
 4611              		.cfi_def_cfa_offset 24
 4612 0004 00AF     		add	r7, sp, #0
 4613              		.cfi_def_cfa_register 7
 4614 0006 7860     		str	r0, [r7, #4]
3708:..\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4615              		.loc 1 3708 0
 4616 0008 7B68     		ldr	r3, [r7, #4]
 4617 000a FB60     		str	r3, [r7, #12]
3709:..\Source/tasks.c **** 
3710:..\Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:..\Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:..\Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4618              		.loc 1 3712 0
 4619 000c 7B68     		ldr	r3, [r7, #4]
 4620 000e 002B     		cmp	r3, #0
 4621 0010 7BD0     		beq	.L308
3713:..\Source/tasks.c **** 		{
3714:..\Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:..\Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:..\Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 153


3717:..\Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4622              		.loc 1 3717 0
 4623 0012 FB68     		ldr	r3, [r7, #12]
 4624 0014 DA6A     		ldr	r2, [r3, #44]
 4625 0016 3F4B     		ldr	r3, .L309
 4626 0018 1B68     		ldr	r3, [r3]
 4627 001a DB6A     		ldr	r3, [r3, #44]
 4628 001c 9A42     		cmp	r2, r3
 4629 001e 74D2     		bcs	.L308
3718:..\Source/tasks.c **** 			{
3719:..\Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:..\Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:..\Source/tasks.c **** 				not	being used for anything else. */
3722:..\Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4630              		.loc 1 3722 0
 4631 0020 FB68     		ldr	r3, [r7, #12]
 4632 0022 9B69     		ldr	r3, [r3, #24]
 4633 0024 002B     		cmp	r3, #0
 4634 0026 06DB     		blt	.L301
3723:..\Source/tasks.c **** 				{
3724:..\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4635              		.loc 1 3724 0
 4636 0028 3A4B     		ldr	r3, .L309
 4637 002a 1B68     		ldr	r3, [r3]
 4638 002c DB6A     		ldr	r3, [r3, #44]
 4639 002e C3F10502 		rsb	r2, r3, #5
 4640 0032 FB68     		ldr	r3, [r7, #12]
 4641 0034 9A61     		str	r2, [r3, #24]
 4642              	.L301:
3725:..\Source/tasks.c **** 				}
3726:..\Source/tasks.c **** 				else
3727:..\Source/tasks.c **** 				{
3728:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:..\Source/tasks.c **** 				}
3730:..\Source/tasks.c **** 
3731:..\Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:..\Source/tasks.c **** 				to be moved into a new list. */
3733:..\Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
 4643              		.loc 1 3733 0
 4644 0036 FB68     		ldr	r3, [r7, #12]
 4645 0038 5969     		ldr	r1, [r3, #20]
 4646 003a FB68     		ldr	r3, [r7, #12]
 4647 003c DA6A     		ldr	r2, [r3, #44]
 4648 003e 1346     		mov	r3, r2
 4649 0040 9B00     		lsls	r3, r3, #2
 4650 0042 1344     		add	r3, r3, r2
 4651 0044 9B00     		lsls	r3, r3, #2
 4652 0046 344A     		ldr	r2, .L309+4
 4653 0048 1344     		add	r3, r3, r2
 4654 004a 9942     		cmp	r1, r3
 4655 004c 01D1     		bne	.L302
 4656              		.loc 1 3733 0 is_stmt 0 discriminator 1
 4657 004e 0123     		movs	r3, #1
 4658 0050 00E0     		b	.L303
 4659              	.L302:
 4660              		.loc 1 3733 0 discriminator 2
 4661 0052 0023     		movs	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 154


 4662              	.L303:
 4663              		.loc 1 3733 0 discriminator 4
 4664 0054 002B     		cmp	r3, #0
 4665 0056 48D0     		beq	.L304
3734:..\Source/tasks.c **** 				{
3735:..\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4666              		.loc 1 3735 0 is_stmt 1
 4667 0058 FB68     		ldr	r3, [r7, #12]
 4668 005a 0433     		adds	r3, r3, #4
 4669 005c 1846     		mov	r0, r3
 4670 005e FFF7FEFF 		bl	uxListRemove
 4671 0062 0346     		mov	r3, r0
 4672 0064 002B     		cmp	r3, #0
 4673 0066 15D1     		bne	.L305
3736:..\Source/tasks.c **** 					{
3737:..\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4674              		.loc 1 3737 0
 4675 0068 FB68     		ldr	r3, [r7, #12]
 4676 006a DA6A     		ldr	r2, [r3, #44]
 4677 006c 2A49     		ldr	r1, .L309+4
 4678 006e 1346     		mov	r3, r2
 4679 0070 9B00     		lsls	r3, r3, #2
 4680 0072 1344     		add	r3, r3, r2
 4681 0074 9B00     		lsls	r3, r3, #2
 4682 0076 0B44     		add	r3, r3, r1
 4683 0078 1B68     		ldr	r3, [r3]
 4684 007a 002B     		cmp	r3, #0
 4685 007c 0AD1     		bne	.L305
 4686              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4687 007e FB68     		ldr	r3, [r7, #12]
 4688 0080 DB6A     		ldr	r3, [r3, #44]
 4689 0082 0122     		movs	r2, #1
 4690 0084 02FA03F3 		lsl	r3, r2, r3
 4691 0088 DA43     		mvns	r2, r3
 4692 008a 244B     		ldr	r3, .L309+8
 4693 008c 1B68     		ldr	r3, [r3]
 4694 008e 1340     		ands	r3, r3, r2
 4695 0090 224A     		ldr	r2, .L309+8
 4696 0092 1360     		str	r3, [r2]
 4697              	.L305:
3738:..\Source/tasks.c **** 					}
3739:..\Source/tasks.c **** 					else
3740:..\Source/tasks.c **** 					{
3741:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:..\Source/tasks.c **** 					}
3743:..\Source/tasks.c **** 
3744:..\Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:..\Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4698              		.loc 1 3745 0 is_stmt 1
 4699 0094 1F4B     		ldr	r3, .L309
 4700 0096 1B68     		ldr	r3, [r3]
 4701 0098 DA6A     		ldr	r2, [r3, #44]
 4702 009a FB68     		ldr	r3, [r7, #12]
 4703 009c DA62     		str	r2, [r3, #44]
3746:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4704              		.loc 1 3746 0
 4705 009e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 155


 4706 00a0 5B6C     		ldr	r3, [r3, #68]
 4707 00a2 DBB2     		uxtb	r3, r3
 4708 00a4 1946     		mov	r1, r3
 4709 00a6 0B20     		movs	r0, #11
 4710 00a8 FFF7FEFF 		bl	packPayload1
 4711 00ac FB68     		ldr	r3, [r7, #12]
 4712 00ae DB6A     		ldr	r3, [r3, #44]
 4713 00b0 0122     		movs	r2, #1
 4714 00b2 9A40     		lsls	r2, r2, r3
 4715 00b4 194B     		ldr	r3, .L309+8
 4716 00b6 1B68     		ldr	r3, [r3]
 4717 00b8 1343     		orrs	r3, r3, r2
 4718 00ba 184A     		ldr	r2, .L309+8
 4719 00bc 1360     		str	r3, [r2]
 4720 00be FB68     		ldr	r3, [r7, #12]
 4721 00c0 DA6A     		ldr	r2, [r3, #44]
 4722 00c2 1346     		mov	r3, r2
 4723 00c4 9B00     		lsls	r3, r3, #2
 4724 00c6 1344     		add	r3, r3, r2
 4725 00c8 9B00     		lsls	r3, r3, #2
 4726 00ca 134A     		ldr	r2, .L309+4
 4727 00cc 1A44     		add	r2, r2, r3
 4728 00ce FB68     		ldr	r3, [r7, #12]
 4729 00d0 0433     		adds	r3, r3, #4
 4730 00d2 1946     		mov	r1, r3
 4731 00d4 1046     		mov	r0, r2
 4732 00d6 FFF7FEFF 		bl	vListInsertEnd
 4733 00da FB68     		ldr	r3, [r7, #12]
 4734 00dc 5B6C     		ldr	r3, [r3, #68]
 4735 00de DBB2     		uxtb	r3, r3
 4736 00e0 1946     		mov	r1, r3
 4737 00e2 0C20     		movs	r0, #12
 4738 00e4 FFF7FEFF 		bl	packPayload1
 4739 00e8 04E0     		b	.L307
 4740              	.L304:
3747:..\Source/tasks.c **** 				}
3748:..\Source/tasks.c **** 				else
3749:..\Source/tasks.c **** 				{
3750:..\Source/tasks.c **** 					/* Just inherit the priority. */
3751:..\Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4741              		.loc 1 3751 0
 4742 00ea 0A4B     		ldr	r3, .L309
 4743 00ec 1B68     		ldr	r3, [r3]
 4744 00ee DA6A     		ldr	r2, [r3, #44]
 4745 00f0 FB68     		ldr	r3, [r7, #12]
 4746 00f2 DA62     		str	r2, [r3, #44]
 4747              	.L307:
3752:..\Source/tasks.c **** 				}
3753:..\Source/tasks.c **** 
3754:..\Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
 4748              		.loc 1 3754 0
 4749 00f4 FB68     		ldr	r3, [r7, #12]
 4750 00f6 5B6C     		ldr	r3, [r3, #68]
 4751 00f8 D9B2     		uxtb	r1, r3
 4752 00fa 064B     		ldr	r3, .L309
 4753 00fc 1B68     		ldr	r3, [r3]
 4754 00fe DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 156


 4755 0100 DBB2     		uxtb	r3, r3
 4756 0102 1A46     		mov	r2, r3
 4757 0104 0720     		movs	r0, #7
 4758 0106 FFF7FEFF 		bl	packPayload2
 4759              	.L308:
3755:..\Source/tasks.c **** 			}
3756:..\Source/tasks.c **** 			else
3757:..\Source/tasks.c **** 			{
3758:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:..\Source/tasks.c **** 			}
3760:..\Source/tasks.c **** 		}
3761:..\Source/tasks.c **** 		else
3762:..\Source/tasks.c **** 		{
3763:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:..\Source/tasks.c **** 		}
3765:..\Source/tasks.c **** 	}
 4760              		.loc 1 3765 0
 4761 010a 00BF     		nop
 4762 010c 1037     		adds	r7, r7, #16
 4763              		.cfi_def_cfa_offset 8
 4764 010e BD46     		mov	sp, r7
 4765              		.cfi_def_cfa_register 13
 4766              		@ sp needed
 4767 0110 80BD     		pop	{r7, pc}
 4768              	.L310:
 4769 0112 00BF     		.align	2
 4770              	.L309:
 4771 0114 00000000 		.word	pxCurrentTCB
 4772 0118 04000000 		.word	pxReadyTasksLists
 4773 011c E0000000 		.word	uxTopReadyPriority
 4774              		.cfi_endproc
 4775              	.LFE112:
 4776              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 4777              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4778              		.align	2
 4779              		.global	xTaskPriorityDisinherit
 4780              		.thumb
 4781              		.thumb_func
 4782              		.type	xTaskPriorityDisinherit, %function
 4783              	xTaskPriorityDisinherit:
 4784              	.LFB113:
3766:..\Source/tasks.c **** 
3767:..\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3769:..\Source/tasks.c **** 
3770:..\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:..\Source/tasks.c **** 
3772:..\Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:..\Source/tasks.c **** 	{
 4785              		.loc 1 3773 0
 4786              		.cfi_startproc
 4787              		@ args = 0, pretend = 0, frame = 16
 4788              		@ frame_needed = 1, uses_anonymous_args = 0
 4789 0000 80B5     		push	{r7, lr}
 4790              		.cfi_def_cfa_offset 8
 4791              		.cfi_offset 7, -8
 4792              		.cfi_offset 14, -4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 157


 4793 0002 84B0     		sub	sp, sp, #16
 4794              		.cfi_def_cfa_offset 24
 4795 0004 00AF     		add	r7, sp, #0
 4796              		.cfi_def_cfa_register 7
 4797 0006 7860     		str	r0, [r7, #4]
3774:..\Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4798              		.loc 1 3774 0
 4799 0008 7B68     		ldr	r3, [r7, #4]
 4800 000a BB60     		str	r3, [r7, #8]
3775:..\Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4801              		.loc 1 3775 0
 4802 000c 0023     		movs	r3, #0
 4803 000e FB60     		str	r3, [r7, #12]
3776:..\Source/tasks.c **** 
3777:..\Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4804              		.loc 1 3777 0
 4805 0010 7B68     		ldr	r3, [r7, #4]
 4806 0012 002B     		cmp	r3, #0
 4807 0014 67D0     		beq	.L312
3778:..\Source/tasks.c **** 		{
3779:..\Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:..\Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:..\Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:..\Source/tasks.c **** 			be the running state task. */
3783:..\Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:..\Source/tasks.c **** 
3785:..\Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:..\Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4808              		.loc 1 3786 0
 4809 0016 BB68     		ldr	r3, [r7, #8]
 4810 0018 DB6C     		ldr	r3, [r3, #76]
 4811 001a 5A1E     		subs	r2, r3, #1
 4812 001c BB68     		ldr	r3, [r7, #8]
 4813 001e DA64     		str	r2, [r3, #76]
3787:..\Source/tasks.c **** 
3788:..\Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:..\Source/tasks.c **** 			task? */
3790:..\Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4814              		.loc 1 3790 0
 4815 0020 BB68     		ldr	r3, [r7, #8]
 4816 0022 DA6A     		ldr	r2, [r3, #44]
 4817 0024 BB68     		ldr	r3, [r7, #8]
 4818 0026 9B6C     		ldr	r3, [r3, #72]
 4819 0028 9A42     		cmp	r2, r3
 4820 002a 5CD0     		beq	.L312
3791:..\Source/tasks.c **** 			{
3792:..\Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:..\Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4821              		.loc 1 3793 0
 4822 002c BB68     		ldr	r3, [r7, #8]
 4823 002e DB6C     		ldr	r3, [r3, #76]
 4824 0030 002B     		cmp	r3, #0
 4825 0032 58D1     		bne	.L312
3794:..\Source/tasks.c **** 				{
3795:..\Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:..\Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:..\Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 158


3798:..\Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:..\Source/tasks.c **** 					the	holding task from the ready	list. */
3800:..\Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4826              		.loc 1 3800 0
 4827 0034 BB68     		ldr	r3, [r7, #8]
 4828 0036 0433     		adds	r3, r3, #4
 4829 0038 1846     		mov	r0, r3
 4830 003a FFF7FEFF 		bl	uxListRemove
 4831 003e 0346     		mov	r3, r0
 4832 0040 002B     		cmp	r3, #0
 4833 0042 15D1     		bne	.L313
3801:..\Source/tasks.c **** 					{
3802:..\Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4834              		.loc 1 3802 0
 4835 0044 BB68     		ldr	r3, [r7, #8]
 4836 0046 DA6A     		ldr	r2, [r3, #44]
 4837 0048 2949     		ldr	r1, .L316
 4838 004a 1346     		mov	r3, r2
 4839 004c 9B00     		lsls	r3, r3, #2
 4840 004e 1344     		add	r3, r3, r2
 4841 0050 9B00     		lsls	r3, r3, #2
 4842 0052 0B44     		add	r3, r3, r1
 4843 0054 1B68     		ldr	r3, [r3]
 4844 0056 002B     		cmp	r3, #0
 4845 0058 0AD1     		bne	.L313
 4846              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4847 005a BB68     		ldr	r3, [r7, #8]
 4848 005c DB6A     		ldr	r3, [r3, #44]
 4849 005e 0122     		movs	r2, #1
 4850 0060 02FA03F3 		lsl	r3, r2, r3
 4851 0064 DA43     		mvns	r2, r3
 4852 0066 234B     		ldr	r3, .L316+4
 4853 0068 1B68     		ldr	r3, [r3]
 4854 006a 1340     		ands	r3, r3, r2
 4855 006c 214A     		ldr	r2, .L316+4
 4856 006e 1360     		str	r3, [r2]
 4857              	.L313:
3803:..\Source/tasks.c **** 					}
3804:..\Source/tasks.c **** 					else
3805:..\Source/tasks.c **** 					{
3806:..\Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:..\Source/tasks.c **** 					}
3808:..\Source/tasks.c **** 
3809:..\Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:..\Source/tasks.c **** 					new	ready list. */
3811:..\Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 4858              		.loc 1 3811 0 is_stmt 1
 4859 0070 BB68     		ldr	r3, [r7, #8]
 4860 0072 5B6C     		ldr	r3, [r3, #68]
 4861 0074 D9B2     		uxtb	r1, r3
 4862 0076 BB68     		ldr	r3, [r7, #8]
 4863 0078 9B6C     		ldr	r3, [r3, #72]
 4864 007a DBB2     		uxtb	r3, r3
 4865 007c 1A46     		mov	r2, r3
 4866 007e 0820     		movs	r0, #8
 4867 0080 FFF7FEFF 		bl	packPayload2
3812:..\Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 159


 4868              		.loc 1 3812 0
 4869 0084 BB68     		ldr	r3, [r7, #8]
 4870 0086 9A6C     		ldr	r2, [r3, #72]
 4871 0088 BB68     		ldr	r3, [r7, #8]
 4872 008a DA62     		str	r2, [r3, #44]
3813:..\Source/tasks.c **** 
3814:..\Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:..\Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:..\Source/tasks.c **** 					running to give back the mutex. */
3817:..\Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4873              		.loc 1 3817 0
 4874 008c BB68     		ldr	r3, [r7, #8]
 4875 008e DB6A     		ldr	r3, [r3, #44]
 4876 0090 C3F10502 		rsb	r2, r3, #5
 4877 0094 BB68     		ldr	r3, [r7, #8]
 4878 0096 9A61     		str	r2, [r3, #24]
3818:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4879              		.loc 1 3818 0
 4880 0098 BB68     		ldr	r3, [r7, #8]
 4881 009a 5B6C     		ldr	r3, [r3, #68]
 4882 009c DBB2     		uxtb	r3, r3
 4883 009e 1946     		mov	r1, r3
 4884 00a0 0B20     		movs	r0, #11
 4885 00a2 FFF7FEFF 		bl	packPayload1
 4886 00a6 BB68     		ldr	r3, [r7, #8]
 4887 00a8 DB6A     		ldr	r3, [r3, #44]
 4888 00aa 0122     		movs	r2, #1
 4889 00ac 9A40     		lsls	r2, r2, r3
 4890 00ae 114B     		ldr	r3, .L316+4
 4891 00b0 1B68     		ldr	r3, [r3]
 4892 00b2 1343     		orrs	r3, r3, r2
 4893 00b4 0F4A     		ldr	r2, .L316+4
 4894 00b6 1360     		str	r3, [r2]
 4895 00b8 BB68     		ldr	r3, [r7, #8]
 4896 00ba DA6A     		ldr	r2, [r3, #44]
 4897 00bc 1346     		mov	r3, r2
 4898 00be 9B00     		lsls	r3, r3, #2
 4899 00c0 1344     		add	r3, r3, r2
 4900 00c2 9B00     		lsls	r3, r3, #2
 4901 00c4 0A4A     		ldr	r2, .L316
 4902 00c6 1A44     		add	r2, r2, r3
 4903 00c8 BB68     		ldr	r3, [r7, #8]
 4904 00ca 0433     		adds	r3, r3, #4
 4905 00cc 1946     		mov	r1, r3
 4906 00ce 1046     		mov	r0, r2
 4907 00d0 FFF7FEFF 		bl	vListInsertEnd
 4908 00d4 BB68     		ldr	r3, [r7, #8]
 4909 00d6 5B6C     		ldr	r3, [r3, #68]
 4910 00d8 DBB2     		uxtb	r3, r3
 4911 00da 1946     		mov	r1, r3
 4912 00dc 0C20     		movs	r0, #12
 4913 00de FFF7FEFF 		bl	packPayload1
3819:..\Source/tasks.c **** 
3820:..\Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:..\Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:..\Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:..\Source/tasks.c **** 					in an order different to that in which they were taken.
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 160


3824:..\Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:..\Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:..\Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:..\Source/tasks.c **** 					a task is waiting on it or not. */
3828:..\Source/tasks.c **** 					xReturn = pdTRUE;
 4914              		.loc 1 3828 0
 4915 00e2 0123     		movs	r3, #1
 4916 00e4 FB60     		str	r3, [r7, #12]
 4917              	.L312:
3829:..\Source/tasks.c **** 				}
3830:..\Source/tasks.c **** 				else
3831:..\Source/tasks.c **** 				{
3832:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:..\Source/tasks.c **** 				}
3834:..\Source/tasks.c **** 			}
3835:..\Source/tasks.c **** 			else
3836:..\Source/tasks.c **** 			{
3837:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:..\Source/tasks.c **** 			}
3839:..\Source/tasks.c **** 		}
3840:..\Source/tasks.c **** 		else
3841:..\Source/tasks.c **** 		{
3842:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:..\Source/tasks.c **** 		}
3844:..\Source/tasks.c **** 
3845:..\Source/tasks.c **** 		return xReturn;
 4918              		.loc 1 3845 0
 4919 00e6 FB68     		ldr	r3, [r7, #12]
3846:..\Source/tasks.c **** 	}
 4920              		.loc 1 3846 0
 4921 00e8 1846     		mov	r0, r3
 4922 00ea 1037     		adds	r7, r7, #16
 4923              		.cfi_def_cfa_offset 8
 4924 00ec BD46     		mov	sp, r7
 4925              		.cfi_def_cfa_register 13
 4926              		@ sp needed
 4927 00ee 80BD     		pop	{r7, pc}
 4928              	.L317:
 4929              		.align	2
 4930              	.L316:
 4931 00f0 04000000 		.word	pxReadyTasksLists
 4932 00f4 E0000000 		.word	uxTopReadyPriority
 4933              		.cfi_endproc
 4934              	.LFE113:
 4935              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 4936              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4937              		.align	2
 4938              		.global	uxTaskResetEventItemValue
 4939              		.thumb
 4940              		.thumb_func
 4941              		.type	uxTaskResetEventItemValue, %function
 4942              	uxTaskResetEventItemValue:
 4943              	.LFB114:
3847:..\Source/tasks.c **** 
3848:..\Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3850:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 161


3851:..\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:..\Source/tasks.c **** 
3853:..\Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:..\Source/tasks.c **** 	{
3855:..\Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:..\Source/tasks.c **** 
3857:..\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:..\Source/tasks.c **** 		{
3859:..\Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:..\Source/tasks.c **** 
3861:..\Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:..\Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:..\Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:..\Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:..\Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:..\Source/tasks.c **** 			critical section. */
3867:..\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:..\Source/tasks.c **** 			{
3869:..\Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:..\Source/tasks.c **** 			}
3871:..\Source/tasks.c **** 		}
3872:..\Source/tasks.c **** 		else
3873:..\Source/tasks.c **** 		{
3874:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:..\Source/tasks.c **** 		}
3876:..\Source/tasks.c **** 	}
3877:..\Source/tasks.c **** 
3878:..\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3880:..\Source/tasks.c **** 
3881:..\Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:..\Source/tasks.c **** 
3883:..\Source/tasks.c **** 	void vTaskExitCritical( void )
3884:..\Source/tasks.c **** 	{
3885:..\Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:..\Source/tasks.c **** 		{
3887:..\Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:..\Source/tasks.c **** 			{
3889:..\Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:..\Source/tasks.c **** 
3891:..\Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:..\Source/tasks.c **** 				{
3893:..\Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:..\Source/tasks.c **** 				}
3895:..\Source/tasks.c **** 				else
3896:..\Source/tasks.c **** 				{
3897:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:..\Source/tasks.c **** 				}
3899:..\Source/tasks.c **** 			}
3900:..\Source/tasks.c **** 			else
3901:..\Source/tasks.c **** 			{
3902:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:..\Source/tasks.c **** 			}
3904:..\Source/tasks.c **** 		}
3905:..\Source/tasks.c **** 		else
3906:..\Source/tasks.c **** 		{
3907:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 162


3908:..\Source/tasks.c **** 		}
3909:..\Source/tasks.c **** 	}
3910:..\Source/tasks.c **** 
3911:..\Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3913:..\Source/tasks.c **** 
3914:..\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:..\Source/tasks.c **** 
3916:..\Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:..\Source/tasks.c **** 	{
3918:..\Source/tasks.c **** 	size_t x;
3919:..\Source/tasks.c **** 
3920:..\Source/tasks.c **** 		/* Start by copying the entire string. */
3921:..\Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:..\Source/tasks.c **** 
3923:..\Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:..\Source/tasks.c **** 		printed out. */
3925:..\Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:..\Source/tasks.c **** 		{
3927:..\Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:..\Source/tasks.c **** 		}
3929:..\Source/tasks.c **** 
3930:..\Source/tasks.c **** 		/* Terminate. */
3931:..\Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:..\Source/tasks.c **** 
3933:..\Source/tasks.c **** 		/* Return the new end of string. */
3934:..\Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:..\Source/tasks.c **** 	}
3936:..\Source/tasks.c **** 
3937:..\Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:..\Source/tasks.c **** /*-----------------------------------------------------------*/
3939:..\Source/tasks.c **** 
3940:..\Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:..\Source/tasks.c **** 
3942:..\Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:..\Source/tasks.c **** 	{
3944:..\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:..\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:..\Source/tasks.c **** 	char cStatus;
3947:..\Source/tasks.c **** 
3948:..\Source/tasks.c **** 		/*
3949:..\Source/tasks.c **** 		 * PLEASE NOTE:
3950:..\Source/tasks.c **** 		 *
3951:..\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:..\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:..\Source/tasks.c **** 		 * scheduler.
3954:..\Source/tasks.c **** 		 *
3955:..\Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:..\Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:..\Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:..\Source/tasks.c **** 		 *
3959:..\Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:..\Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:..\Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:..\Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:..\Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:..\Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 163


3965:..\Source/tasks.c **** 		 * snprintf() implementation!).
3966:..\Source/tasks.c **** 		 *
3967:..\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:..\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:..\Source/tasks.c **** 		 * through a call to vTaskList().
3970:..\Source/tasks.c **** 		 */
3971:..\Source/tasks.c **** 
3972:..\Source/tasks.c **** 
3973:..\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:..\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:..\Source/tasks.c **** 
3976:..\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:..\Source/tasks.c **** 		function is executing. */
3978:..\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:..\Source/tasks.c **** 
3980:..\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:..\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:..\Source/tasks.c **** 		equate to NULL. */
3983:..\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:..\Source/tasks.c **** 
3985:..\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:..\Source/tasks.c **** 		{
3987:..\Source/tasks.c **** 			/* Generate the (binary) data. */
3988:..\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:..\Source/tasks.c **** 
3990:..\Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:..\Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:..\Source/tasks.c **** 			{
3993:..\Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:..\Source/tasks.c **** 				{
3995:..\Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:..\Source/tasks.c **** 										break;
3997:..\Source/tasks.c **** 
3998:..\Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:..\Source/tasks.c **** 										break;
4000:..\Source/tasks.c **** 
4001:..\Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:..\Source/tasks.c **** 										break;
4003:..\Source/tasks.c **** 
4004:..\Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:..\Source/tasks.c **** 										break;
4006:..\Source/tasks.c **** 
4007:..\Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:..\Source/tasks.c **** 										to prevent static checking errors. */
4009:..\Source/tasks.c **** 										cStatus = 0x00;
4010:..\Source/tasks.c **** 										break;
4011:..\Source/tasks.c **** 				}
4012:..\Source/tasks.c **** 
4013:..\Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:..\Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:..\Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:..\Source/tasks.c **** 
4017:..\Source/tasks.c **** 				/* Write the rest of the string. */
4018:..\Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:..\Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:..\Source/tasks.c **** 			}
4021:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 164


4022:..\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:..\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:..\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:..\Source/tasks.c **** 		}
4026:..\Source/tasks.c **** 		else
4027:..\Source/tasks.c **** 		{
4028:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:..\Source/tasks.c **** 		}
4030:..\Source/tasks.c **** 	}
4031:..\Source/tasks.c **** 
4032:..\Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:..\Source/tasks.c **** /*----------------------------------------------------------*/
4034:..\Source/tasks.c **** 
4035:..\Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:..\Source/tasks.c **** 
4037:..\Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:..\Source/tasks.c **** 	{
4039:..\Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:..\Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:..\Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:..\Source/tasks.c **** 
4043:..\Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:..\Source/tasks.c **** 		{
4045:..\Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:..\Source/tasks.c **** 		}
4047:..\Source/tasks.c **** 		#endif
4048:..\Source/tasks.c **** 
4049:..\Source/tasks.c **** 		/*
4050:..\Source/tasks.c **** 		 * PLEASE NOTE:
4051:..\Source/tasks.c **** 		 *
4052:..\Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:..\Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:..\Source/tasks.c **** 		 * scheduler.
4055:..\Source/tasks.c **** 		 *
4056:..\Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:..\Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:..\Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:..\Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:..\Source/tasks.c **** 		 *
4061:..\Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:..\Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:..\Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:..\Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:..\Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:..\Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:..\Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:..\Source/tasks.c **** 		 *
4069:..\Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:..\Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:..\Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:..\Source/tasks.c **** 		 */
4073:..\Source/tasks.c **** 
4074:..\Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:..\Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:..\Source/tasks.c **** 
4077:..\Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:..\Source/tasks.c **** 		function is executing. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 165


4079:..\Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:..\Source/tasks.c **** 
4081:..\Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:..\Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:..\Source/tasks.c **** 		equate to NULL. */
4084:..\Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:..\Source/tasks.c **** 
4086:..\Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:..\Source/tasks.c **** 		{
4088:..\Source/tasks.c **** 			/* Generate the (binary) data. */
4089:..\Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:..\Source/tasks.c **** 
4091:..\Source/tasks.c **** 			/* For percentage calculations. */
4092:..\Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:..\Source/tasks.c **** 
4094:..\Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:..\Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:..\Source/tasks.c **** 			{
4097:..\Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:..\Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:..\Source/tasks.c **** 				{
4100:..\Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:..\Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:..\Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:..\Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:..\Source/tasks.c **** 
4105:..\Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:..\Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:..\Source/tasks.c **** 					easily. */
4108:..\Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:..\Source/tasks.c **** 
4110:..\Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:..\Source/tasks.c **** 					{
4112:..\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:..\Source/tasks.c **** 						{
4114:..\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:..\Source/tasks.c **** 						}
4116:..\Source/tasks.c **** 						#else
4117:..\Source/tasks.c **** 						{
4118:..\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:..\Source/tasks.c **** 							printf() library can be used. */
4120:..\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:..\Source/tasks.c **** 						}
4122:..\Source/tasks.c **** 						#endif
4123:..\Source/tasks.c **** 					}
4124:..\Source/tasks.c **** 					else
4125:..\Source/tasks.c **** 					{
4126:..\Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:..\Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:..\Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:..\Source/tasks.c **** 						{
4130:..\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:..\Source/tasks.c **** 						}
4132:..\Source/tasks.c **** 						#else
4133:..\Source/tasks.c **** 						{
4134:..\Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:..\Source/tasks.c **** 							printf() library can be used. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 166


4136:..\Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:..\Source/tasks.c **** 						}
4138:..\Source/tasks.c **** 						#endif
4139:..\Source/tasks.c **** 					}
4140:..\Source/tasks.c **** 
4141:..\Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:..\Source/tasks.c **** 				}
4143:..\Source/tasks.c **** 			}
4144:..\Source/tasks.c **** 			else
4145:..\Source/tasks.c **** 			{
4146:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:..\Source/tasks.c **** 			}
4148:..\Source/tasks.c **** 
4149:..\Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:..\Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:..\Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:..\Source/tasks.c **** 		}
4153:..\Source/tasks.c **** 		else
4154:..\Source/tasks.c **** 		{
4155:..\Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:..\Source/tasks.c **** 		}
4157:..\Source/tasks.c **** 	}
4158:..\Source/tasks.c **** 
4159:..\Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4161:..\Source/tasks.c **** 
4162:..\Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:..\Source/tasks.c **** {
 4944              		.loc 1 4163 0
 4945              		.cfi_startproc
 4946              		@ args = 0, pretend = 0, frame = 8
 4947              		@ frame_needed = 1, uses_anonymous_args = 0
 4948              		@ link register save eliminated.
 4949 0000 80B4     		push	{r7}
 4950              		.cfi_def_cfa_offset 4
 4951              		.cfi_offset 7, -4
 4952 0002 83B0     		sub	sp, sp, #12
 4953              		.cfi_def_cfa_offset 16
 4954 0004 00AF     		add	r7, sp, #0
 4955              		.cfi_def_cfa_register 7
4164:..\Source/tasks.c **** TickType_t uxReturn;
4165:..\Source/tasks.c **** 
4166:..\Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4956              		.loc 1 4166 0
 4957 0006 094B     		ldr	r3, .L320
 4958 0008 1B68     		ldr	r3, [r3]
 4959 000a 9B69     		ldr	r3, [r3, #24]
 4960 000c 7B60     		str	r3, [r7, #4]
4167:..\Source/tasks.c **** 
4168:..\Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:..\Source/tasks.c **** 	queues and semaphores. */
4170:..\Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4961              		.loc 1 4170 0
 4962 000e 074B     		ldr	r3, .L320
 4963 0010 1B68     		ldr	r3, [r3]
 4964 0012 064A     		ldr	r2, .L320
 4965 0014 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 167


 4966 0016 D26A     		ldr	r2, [r2, #44]
 4967 0018 C2F10502 		rsb	r2, r2, #5
 4968 001c 9A61     		str	r2, [r3, #24]
4171:..\Source/tasks.c **** 
4172:..\Source/tasks.c **** 	return uxReturn;
 4969              		.loc 1 4172 0
 4970 001e 7B68     		ldr	r3, [r7, #4]
4173:..\Source/tasks.c **** }
 4971              		.loc 1 4173 0
 4972 0020 1846     		mov	r0, r3
 4973 0022 0C37     		adds	r7, r7, #12
 4974              		.cfi_def_cfa_offset 4
 4975 0024 BD46     		mov	sp, r7
 4976              		.cfi_def_cfa_register 13
 4977              		@ sp needed
 4978 0026 80BC     		pop	{r7}
 4979              		.cfi_restore 7
 4980              		.cfi_def_cfa_offset 0
 4981 0028 7047     		bx	lr
 4982              	.L321:
 4983 002a 00BF     		.align	2
 4984              	.L320:
 4985 002c 00000000 		.word	pxCurrentTCB
 4986              		.cfi_endproc
 4987              	.LFE114:
 4988              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4989              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4990              		.align	2
 4991              		.global	pvTaskIncrementMutexHeldCount
 4992              		.thumb
 4993              		.thumb_func
 4994              		.type	pvTaskIncrementMutexHeldCount, %function
 4995              	pvTaskIncrementMutexHeldCount:
 4996              	.LFB115:
4174:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4175:..\Source/tasks.c **** 
4176:..\Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:..\Source/tasks.c **** 
4178:..\Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:..\Source/tasks.c **** 	{
 4997              		.loc 1 4179 0
 4998              		.cfi_startproc
 4999              		@ args = 0, pretend = 0, frame = 0
 5000              		@ frame_needed = 1, uses_anonymous_args = 0
 5001              		@ link register save eliminated.
 5002 0000 80B4     		push	{r7}
 5003              		.cfi_def_cfa_offset 4
 5004              		.cfi_offset 7, -4
 5005 0002 00AF     		add	r7, sp, #0
 5006              		.cfi_def_cfa_register 7
4180:..\Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:..\Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:..\Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 5007              		.loc 1 4182 0
 5008 0004 074B     		ldr	r3, .L325
 5009 0006 1B68     		ldr	r3, [r3]
 5010 0008 002B     		cmp	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 168


 5011 000a 04D0     		beq	.L323
4183:..\Source/tasks.c **** 		{
4184:..\Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5012              		.loc 1 4184 0
 5013 000c 054B     		ldr	r3, .L325
 5014 000e 1B68     		ldr	r3, [r3]
 5015 0010 DA6C     		ldr	r2, [r3, #76]
 5016 0012 0132     		adds	r2, r2, #1
 5017 0014 DA64     		str	r2, [r3, #76]
 5018              	.L323:
4185:..\Source/tasks.c **** 		}
4186:..\Source/tasks.c **** 
4187:..\Source/tasks.c **** 		return pxCurrentTCB;
 5019              		.loc 1 4187 0
 5020 0016 034B     		ldr	r3, .L325
 5021 0018 1B68     		ldr	r3, [r3]
4188:..\Source/tasks.c **** 	}
 5022              		.loc 1 4188 0
 5023 001a 1846     		mov	r0, r3
 5024 001c BD46     		mov	sp, r7
 5025              		.cfi_def_cfa_register 13
 5026              		@ sp needed
 5027 001e 80BC     		pop	{r7}
 5028              		.cfi_restore 7
 5029              		.cfi_def_cfa_offset 0
 5030 0020 7047     		bx	lr
 5031              	.L326:
 5032 0022 00BF     		.align	2
 5033              	.L325:
 5034 0024 00000000 		.word	pxCurrentTCB
 5035              		.cfi_endproc
 5036              	.LFE115:
 5037              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 5038              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5039              		.align	2
 5040              		.global	ulTaskNotifyTake
 5041              		.thumb
 5042              		.thumb_func
 5043              		.type	ulTaskNotifyTake, %function
 5044              	ulTaskNotifyTake:
 5045              	.LFB116:
4189:..\Source/tasks.c **** 
4190:..\Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4192:..\Source/tasks.c **** 
4193:..\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:..\Source/tasks.c **** 
4195:..\Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:..\Source/tasks.c **** 	{
 5046              		.loc 1 4196 0
 5047              		.cfi_startproc
 5048              		@ args = 0, pretend = 0, frame = 16
 5049              		@ frame_needed = 1, uses_anonymous_args = 0
 5050 0000 80B5     		push	{r7, lr}
 5051              		.cfi_def_cfa_offset 8
 5052              		.cfi_offset 7, -8
 5053              		.cfi_offset 14, -4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 169


 5054 0002 84B0     		sub	sp, sp, #16
 5055              		.cfi_def_cfa_offset 24
 5056 0004 00AF     		add	r7, sp, #0
 5057              		.cfi_def_cfa_register 7
 5058 0006 7860     		str	r0, [r7, #4]
 5059 0008 3960     		str	r1, [r7]
4197:..\Source/tasks.c **** 	uint32_t ulReturn;
4198:..\Source/tasks.c **** 
4199:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 5060              		.loc 1 4199 0
 5061 000a FFF7FEFF 		bl	vPortEnterCritical
4200:..\Source/tasks.c **** 		{
4201:..\Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:..\Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 5062              		.loc 1 4202 0
 5063 000e 1E4B     		ldr	r3, .L333
 5064 0010 1B68     		ldr	r3, [r3]
 5065 0012 1B6D     		ldr	r3, [r3, #80]
 5066 0014 002B     		cmp	r3, #0
 5067 0016 13D1     		bne	.L328
4203:..\Source/tasks.c **** 			{
4204:..\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:..\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5068              		.loc 1 4205 0
 5069 0018 1B4B     		ldr	r3, .L333
 5070 001a 1B68     		ldr	r3, [r3]
 5071 001c 0122     		movs	r2, #1
 5072 001e 83F85420 		strb	r2, [r3, #84]
4206:..\Source/tasks.c **** 
4207:..\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5073              		.loc 1 4207 0
 5074 0022 3B68     		ldr	r3, [r7]
 5075 0024 002B     		cmp	r3, #0
 5076 0026 0BD0     		beq	.L328
4208:..\Source/tasks.c **** 				{
4209:..\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5077              		.loc 1 4209 0
 5078 0028 0121     		movs	r1, #1
 5079 002a 3868     		ldr	r0, [r7]
 5080 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4210:..\Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:..\Source/tasks.c **** 
4212:..\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:..\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:..\Source/tasks.c **** 					critical section exits) - but it is not something that
4215:..\Source/tasks.c **** 					application code should ever do. */
4216:..\Source/tasks.c **** 					portYIELD_WITHIN_API();
 5081              		.loc 1 4216 0
 5082 0030 164B     		ldr	r3, .L333+4
 5083 0032 4FF08052 		mov	r2, #268435456
 5084 0036 1A60     		str	r2, [r3]
 5085              		.syntax unified
 5086              	@ 4216 "..\Source\tasks.c" 1
 5087 0038 BFF34F8F 		dsb
 5088              	@ 0 "" 2
 5089              	@ 4216 "..\Source\tasks.c" 1
 5090 003c BFF36F8F 		isb
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 170


 5091              	@ 0 "" 2
 5092              		.thumb
 5093              		.syntax unified
 5094              	.L328:
4217:..\Source/tasks.c **** 				}
4218:..\Source/tasks.c **** 				else
4219:..\Source/tasks.c **** 				{
4220:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:..\Source/tasks.c **** 				}
4222:..\Source/tasks.c **** 			}
4223:..\Source/tasks.c **** 			else
4224:..\Source/tasks.c **** 			{
4225:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:..\Source/tasks.c **** 			}
4227:..\Source/tasks.c **** 		}
4228:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5095              		.loc 1 4228 0
 5096 0040 FFF7FEFF 		bl	vPortExitCritical
4229:..\Source/tasks.c **** 
4230:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 5097              		.loc 1 4230 0
 5098 0044 FFF7FEFF 		bl	vPortEnterCritical
4231:..\Source/tasks.c **** 		{
4232:..\Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:..\Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5099              		.loc 1 4233 0
 5100 0048 0F4B     		ldr	r3, .L333
 5101 004a 1B68     		ldr	r3, [r3]
 5102 004c 1B6D     		ldr	r3, [r3, #80]
 5103 004e FB60     		str	r3, [r7, #12]
4234:..\Source/tasks.c **** 
4235:..\Source/tasks.c **** 			if( ulReturn != 0UL )
 5104              		.loc 1 4235 0
 5105 0050 FB68     		ldr	r3, [r7, #12]
 5106 0052 002B     		cmp	r3, #0
 5107 0054 0CD0     		beq	.L329
4236:..\Source/tasks.c **** 			{
4237:..\Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 5108              		.loc 1 4237 0
 5109 0056 7B68     		ldr	r3, [r7, #4]
 5110 0058 002B     		cmp	r3, #0
 5111 005a 04D0     		beq	.L330
4238:..\Source/tasks.c **** 				{
4239:..\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 5112              		.loc 1 4239 0
 5113 005c 0A4B     		ldr	r3, .L333
 5114 005e 1B68     		ldr	r3, [r3]
 5115 0060 0022     		movs	r2, #0
 5116 0062 1A65     		str	r2, [r3, #80]
 5117 0064 04E0     		b	.L329
 5118              	.L330:
4240:..\Source/tasks.c **** 				}
4241:..\Source/tasks.c **** 				else
4242:..\Source/tasks.c **** 				{
4243:..\Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
 5119              		.loc 1 4243 0
 5120 0066 084B     		ldr	r3, .L333
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 171


 5121 0068 1B68     		ldr	r3, [r3]
 5122 006a FA68     		ldr	r2, [r7, #12]
 5123 006c 013A     		subs	r2, r2, #1
 5124 006e 1A65     		str	r2, [r3, #80]
 5125              	.L329:
4244:..\Source/tasks.c **** 				}
4245:..\Source/tasks.c **** 			}
4246:..\Source/tasks.c **** 			else
4247:..\Source/tasks.c **** 			{
4248:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:..\Source/tasks.c **** 			}
4250:..\Source/tasks.c **** 
4251:..\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5126              		.loc 1 4251 0
 5127 0070 054B     		ldr	r3, .L333
 5128 0072 1B68     		ldr	r3, [r3]
 5129 0074 0022     		movs	r2, #0
 5130 0076 83F85420 		strb	r2, [r3, #84]
4252:..\Source/tasks.c **** 		}
4253:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5131              		.loc 1 4253 0
 5132 007a FFF7FEFF 		bl	vPortExitCritical
4254:..\Source/tasks.c **** 
4255:..\Source/tasks.c **** 		return ulReturn;
 5133              		.loc 1 4255 0
 5134 007e FB68     		ldr	r3, [r7, #12]
4256:..\Source/tasks.c **** 	}
 5135              		.loc 1 4256 0
 5136 0080 1846     		mov	r0, r3
 5137 0082 1037     		adds	r7, r7, #16
 5138              		.cfi_def_cfa_offset 8
 5139 0084 BD46     		mov	sp, r7
 5140              		.cfi_def_cfa_register 13
 5141              		@ sp needed
 5142 0086 80BD     		pop	{r7, pc}
 5143              	.L334:
 5144              		.align	2
 5145              	.L333:
 5146 0088 00000000 		.word	pxCurrentTCB
 5147 008c 04ED00E0 		.word	-536810236
 5148              		.cfi_endproc
 5149              	.LFE116:
 5150              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 5151              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5152              		.align	2
 5153              		.global	xTaskNotifyWait
 5154              		.thumb
 5155              		.thumb_func
 5156              		.type	xTaskNotifyWait, %function
 5157              	xTaskNotifyWait:
 5158              	.LFB117:
4257:..\Source/tasks.c **** 
4258:..\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4260:..\Source/tasks.c **** 
4261:..\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:..\Source/tasks.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 172


4263:..\Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:..\Source/tasks.c **** 	{
 5159              		.loc 1 4264 0
 5160              		.cfi_startproc
 5161              		@ args = 0, pretend = 0, frame = 24
 5162              		@ frame_needed = 1, uses_anonymous_args = 0
 5163 0000 80B5     		push	{r7, lr}
 5164              		.cfi_def_cfa_offset 8
 5165              		.cfi_offset 7, -8
 5166              		.cfi_offset 14, -4
 5167 0002 86B0     		sub	sp, sp, #24
 5168              		.cfi_def_cfa_offset 32
 5169 0004 00AF     		add	r7, sp, #0
 5170              		.cfi_def_cfa_register 7
 5171 0006 F860     		str	r0, [r7, #12]
 5172 0008 B960     		str	r1, [r7, #8]
 5173 000a 7A60     		str	r2, [r7, #4]
 5174 000c 3B60     		str	r3, [r7]
4265:..\Source/tasks.c **** 	BaseType_t xReturn;
4266:..\Source/tasks.c **** 
4267:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 5175              		.loc 1 4267 0
 5176 000e FFF7FEFF 		bl	vPortEnterCritical
4268:..\Source/tasks.c **** 		{
4269:..\Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:..\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 5177              		.loc 1 4270 0
 5178 0012 264B     		ldr	r3, .L341
 5179 0014 1B68     		ldr	r3, [r3]
 5180 0016 93F85430 		ldrb	r3, [r3, #84]
 5181 001a DBB2     		uxtb	r3, r3
 5182 001c 022B     		cmp	r3, #2
 5183 001e 1AD0     		beq	.L336
4271:..\Source/tasks.c **** 			{
4272:..\Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:..\Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:..\Source/tasks.c **** 				clear the value to zero. */
4275:..\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 5184              		.loc 1 4275 0
 5185 0020 224B     		ldr	r3, .L341
 5186 0022 1B68     		ldr	r3, [r3]
 5187 0024 196D     		ldr	r1, [r3, #80]
 5188 0026 FA68     		ldr	r2, [r7, #12]
 5189 0028 D243     		mvns	r2, r2
 5190 002a 0A40     		ands	r2, r2, r1
 5191 002c 1A65     		str	r2, [r3, #80]
4276:..\Source/tasks.c **** 
4277:..\Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:..\Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 5192              		.loc 1 4278 0
 5193 002e 1F4B     		ldr	r3, .L341
 5194 0030 1B68     		ldr	r3, [r3]
 5195 0032 0122     		movs	r2, #1
 5196 0034 83F85420 		strb	r2, [r3, #84]
4279:..\Source/tasks.c **** 
4280:..\Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 5197              		.loc 1 4280 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 173


 5198 0038 3B68     		ldr	r3, [r7]
 5199 003a 002B     		cmp	r3, #0
 5200 003c 0BD0     		beq	.L336
4281:..\Source/tasks.c **** 				{
4282:..\Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 5201              		.loc 1 4282 0
 5202 003e 0121     		movs	r1, #1
 5203 0040 3868     		ldr	r0, [r7]
 5204 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4283:..\Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:..\Source/tasks.c **** 
4285:..\Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:..\Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:..\Source/tasks.c **** 					critical section exits) - but it is not something that
4288:..\Source/tasks.c **** 					application code should ever do. */
4289:..\Source/tasks.c **** 					portYIELD_WITHIN_API();
 5205              		.loc 1 4289 0
 5206 0046 1A4B     		ldr	r3, .L341+4
 5207 0048 4FF08052 		mov	r2, #268435456
 5208 004c 1A60     		str	r2, [r3]
 5209              		.syntax unified
 5210              	@ 4289 "..\Source\tasks.c" 1
 5211 004e BFF34F8F 		dsb
 5212              	@ 0 "" 2
 5213              	@ 4289 "..\Source\tasks.c" 1
 5214 0052 BFF36F8F 		isb
 5215              	@ 0 "" 2
 5216              		.thumb
 5217              		.syntax unified
 5218              	.L336:
4290:..\Source/tasks.c **** 				}
4291:..\Source/tasks.c **** 				else
4292:..\Source/tasks.c **** 				{
4293:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:..\Source/tasks.c **** 				}
4295:..\Source/tasks.c **** 			}
4296:..\Source/tasks.c **** 			else
4297:..\Source/tasks.c **** 			{
4298:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:..\Source/tasks.c **** 			}
4300:..\Source/tasks.c **** 		}
4301:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5219              		.loc 1 4301 0
 5220 0056 FFF7FEFF 		bl	vPortExitCritical
4302:..\Source/tasks.c **** 
4303:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 5221              		.loc 1 4303 0
 5222 005a FFF7FEFF 		bl	vPortEnterCritical
4304:..\Source/tasks.c **** 		{
4305:..\Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:..\Source/tasks.c **** 
4307:..\Source/tasks.c **** 			if( pulNotificationValue != NULL )
 5223              		.loc 1 4307 0
 5224 005e 7B68     		ldr	r3, [r7, #4]
 5225 0060 002B     		cmp	r3, #0
 5226 0062 04D0     		beq	.L337
4308:..\Source/tasks.c **** 			{
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 174


4309:..\Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:..\Source/tasks.c **** 				have changed. */
4311:..\Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 5227              		.loc 1 4311 0
 5228 0064 114B     		ldr	r3, .L341
 5229 0066 1B68     		ldr	r3, [r3]
 5230 0068 1A6D     		ldr	r2, [r3, #80]
 5231 006a 7B68     		ldr	r3, [r7, #4]
 5232 006c 1A60     		str	r2, [r3]
 5233              	.L337:
4312:..\Source/tasks.c **** 			}
4313:..\Source/tasks.c **** 
4314:..\Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:..\Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:..\Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:..\Source/tasks.c **** 			unblocked because of a timeout. */
4318:..\Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 5234              		.loc 1 4318 0
 5235 006e 0F4B     		ldr	r3, .L341
 5236 0070 1B68     		ldr	r3, [r3]
 5237 0072 93F85430 		ldrb	r3, [r3, #84]
 5238 0076 DBB2     		uxtb	r3, r3
 5239 0078 012B     		cmp	r3, #1
 5240 007a 02D1     		bne	.L338
4319:..\Source/tasks.c **** 			{
4320:..\Source/tasks.c **** 				/* A notification was not received. */
4321:..\Source/tasks.c **** 				xReturn = pdFALSE;
 5241              		.loc 1 4321 0
 5242 007c 0023     		movs	r3, #0
 5243 007e 7B61     		str	r3, [r7, #20]
 5244 0080 08E0     		b	.L339
 5245              	.L338:
4322:..\Source/tasks.c **** 			}
4323:..\Source/tasks.c **** 			else
4324:..\Source/tasks.c **** 			{
4325:..\Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:..\Source/tasks.c **** 				received while the task was waiting. */
4327:..\Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 5246              		.loc 1 4327 0
 5247 0082 0A4B     		ldr	r3, .L341
 5248 0084 1B68     		ldr	r3, [r3]
 5249 0086 196D     		ldr	r1, [r3, #80]
 5250 0088 BA68     		ldr	r2, [r7, #8]
 5251 008a D243     		mvns	r2, r2
 5252 008c 0A40     		ands	r2, r2, r1
 5253 008e 1A65     		str	r2, [r3, #80]
4328:..\Source/tasks.c **** 				xReturn = pdTRUE;
 5254              		.loc 1 4328 0
 5255 0090 0123     		movs	r3, #1
 5256 0092 7B61     		str	r3, [r7, #20]
 5257              	.L339:
4329:..\Source/tasks.c **** 			}
4330:..\Source/tasks.c **** 
4331:..\Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5258              		.loc 1 4331 0
 5259 0094 054B     		ldr	r3, .L341
 5260 0096 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 175


 5261 0098 0022     		movs	r2, #0
 5262 009a 83F85420 		strb	r2, [r3, #84]
4332:..\Source/tasks.c **** 		}
4333:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5263              		.loc 1 4333 0
 5264 009e FFF7FEFF 		bl	vPortExitCritical
4334:..\Source/tasks.c **** 
4335:..\Source/tasks.c **** 		return xReturn;
 5265              		.loc 1 4335 0
 5266 00a2 7B69     		ldr	r3, [r7, #20]
4336:..\Source/tasks.c **** 	}
 5267              		.loc 1 4336 0
 5268 00a4 1846     		mov	r0, r3
 5269 00a6 1837     		adds	r7, r7, #24
 5270              		.cfi_def_cfa_offset 8
 5271 00a8 BD46     		mov	sp, r7
 5272              		.cfi_def_cfa_register 13
 5273              		@ sp needed
 5274 00aa 80BD     		pop	{r7, pc}
 5275              	.L342:
 5276              		.align	2
 5277              	.L341:
 5278 00ac 00000000 		.word	pxCurrentTCB
 5279 00b0 04ED00E0 		.word	-536810236
 5280              		.cfi_endproc
 5281              	.LFE117:
 5282              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 5283              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5284              		.align	2
 5285              		.global	xTaskGenericNotify
 5286              		.thumb
 5287              		.thumb_func
 5288              		.type	xTaskGenericNotify, %function
 5289              	xTaskGenericNotify:
 5290              	.LFB118:
4337:..\Source/tasks.c **** 
4338:..\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4340:..\Source/tasks.c **** 
4341:..\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:..\Source/tasks.c **** 
4343:..\Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:..\Source/tasks.c **** 	{
 5291              		.loc 1 4344 0
 5292              		.cfi_startproc
 5293              		@ args = 0, pretend = 0, frame = 32
 5294              		@ frame_needed = 1, uses_anonymous_args = 0
 5295 0000 80B5     		push	{r7, lr}
 5296              		.cfi_def_cfa_offset 8
 5297              		.cfi_offset 7, -8
 5298              		.cfi_offset 14, -4
 5299 0002 88B0     		sub	sp, sp, #32
 5300              		.cfi_def_cfa_offset 40
 5301 0004 00AF     		add	r7, sp, #0
 5302              		.cfi_def_cfa_register 7
 5303 0006 F860     		str	r0, [r7, #12]
 5304 0008 B960     		str	r1, [r7, #8]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 176


 5305 000a 3B60     		str	r3, [r7]
 5306 000c 1346     		mov	r3, r2
 5307 000e FB71     		strb	r3, [r7, #7]
4345:..\Source/tasks.c **** 	TCB_t * pxTCB;
4346:..\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5308              		.loc 1 4346 0
 5309 0010 0123     		movs	r3, #1
 5310 0012 FB61     		str	r3, [r7, #28]
4347:..\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:..\Source/tasks.c **** 
4349:..\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:..\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5311              		.loc 1 4350 0
 5312 0014 FB68     		ldr	r3, [r7, #12]
 5313 0016 BB61     		str	r3, [r7, #24]
4351:..\Source/tasks.c **** 
4352:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 5314              		.loc 1 4352 0
 5315 0018 FFF7FEFF 		bl	vPortEnterCritical
4353:..\Source/tasks.c **** 		{
4354:..\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5316              		.loc 1 4354 0
 5317 001c 3B68     		ldr	r3, [r7]
 5318 001e 002B     		cmp	r3, #0
 5319 0020 03D0     		beq	.L344
4355:..\Source/tasks.c **** 			{
4356:..\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5320              		.loc 1 4356 0
 5321 0022 BB69     		ldr	r3, [r7, #24]
 5322 0024 1A6D     		ldr	r2, [r3, #80]
 5323 0026 3B68     		ldr	r3, [r7]
 5324 0028 1A60     		str	r2, [r3]
 5325              	.L344:
4357:..\Source/tasks.c **** 			}
4358:..\Source/tasks.c **** 
4359:..\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5326              		.loc 1 4359 0
 5327 002a BB69     		ldr	r3, [r7, #24]
 5328 002c 93F85430 		ldrb	r3, [r3, #84]
 5329 0030 FB75     		strb	r3, [r7, #23]
4360:..\Source/tasks.c **** 
4361:..\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5330              		.loc 1 4361 0
 5331 0032 BB69     		ldr	r3, [r7, #24]
 5332 0034 0222     		movs	r2, #2
 5333 0036 83F85420 		strb	r2, [r3, #84]
4362:..\Source/tasks.c **** 
4363:..\Source/tasks.c **** 			switch( eAction )
 5334              		.loc 1 4363 0
 5335 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5336 003c 042B     		cmp	r3, #4
 5337 003e 28D8     		bhi	.L345
 5338 0040 01A2     		adr	r2, .L347
 5339 0042 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5340 0046 00BF     		.p2align 2
 5341              	.L347:
 5342 0048 93000000 		.word	.L345+1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 177


 5343 004c 5D000000 		.word	.L348+1
 5344 0050 6B000000 		.word	.L349+1
 5345 0054 77000000 		.word	.L350+1
 5346 0058 7F000000 		.word	.L351+1
 5347              		.p2align 1
 5348              	.L348:
4364:..\Source/tasks.c **** 			{
4365:..\Source/tasks.c **** 				case eSetBits	:
4366:..\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5349              		.loc 1 4366 0
 5350 005c BB69     		ldr	r3, [r7, #24]
 5351 005e 1A6D     		ldr	r2, [r3, #80]
 5352 0060 BB68     		ldr	r3, [r7, #8]
 5353 0062 1A43     		orrs	r2, r2, r3
 5354 0064 BB69     		ldr	r3, [r7, #24]
 5355 0066 1A65     		str	r2, [r3, #80]
4367:..\Source/tasks.c **** 					break;
 5356              		.loc 1 4367 0
 5357 0068 13E0     		b	.L345
 5358              	.L349:
4368:..\Source/tasks.c **** 
4369:..\Source/tasks.c **** 				case eIncrement	:
4370:..\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5359              		.loc 1 4370 0
 5360 006a BB69     		ldr	r3, [r7, #24]
 5361 006c 1B6D     		ldr	r3, [r3, #80]
 5362 006e 5A1C     		adds	r2, r3, #1
 5363 0070 BB69     		ldr	r3, [r7, #24]
 5364 0072 1A65     		str	r2, [r3, #80]
4371:..\Source/tasks.c **** 					break;
 5365              		.loc 1 4371 0
 5366 0074 0DE0     		b	.L345
 5367              	.L350:
4372:..\Source/tasks.c **** 
4373:..\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:..\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5368              		.loc 1 4374 0
 5369 0076 BB69     		ldr	r3, [r7, #24]
 5370 0078 BA68     		ldr	r2, [r7, #8]
 5371 007a 1A65     		str	r2, [r3, #80]
4375:..\Source/tasks.c **** 					break;
 5372              		.loc 1 4375 0
 5373 007c 09E0     		b	.L345
 5374              	.L351:
4376:..\Source/tasks.c **** 
4377:..\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:..\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5375              		.loc 1 4378 0
 5376 007e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5377 0080 022B     		cmp	r3, #2
 5378 0082 03D0     		beq	.L352
4379:..\Source/tasks.c **** 					{
4380:..\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 5379              		.loc 1 4380 0
 5380 0084 BB69     		ldr	r3, [r7, #24]
 5381 0086 BA68     		ldr	r2, [r7, #8]
 5382 0088 1A65     		str	r2, [r3, #80]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 178


4381:..\Source/tasks.c **** 					}
4382:..\Source/tasks.c **** 					else
4383:..\Source/tasks.c **** 					{
4384:..\Source/tasks.c **** 						/* The value could not be written to the task. */
4385:..\Source/tasks.c **** 						xReturn = pdFAIL;
4386:..\Source/tasks.c **** 					}
4387:..\Source/tasks.c **** 					break;
 5383              		.loc 1 4387 0
 5384 008a 01E0     		b	.L356
 5385              	.L352:
4385:..\Source/tasks.c **** 					}
 5386              		.loc 1 4385 0
 5387 008c 0023     		movs	r3, #0
 5388 008e FB61     		str	r3, [r7, #28]
 5389              	.L356:
 5390              		.loc 1 4387 0
 5391 0090 00BF     		nop
 5392              	.L345:
4388:..\Source/tasks.c **** 
4389:..\Source/tasks.c **** 				case eNoAction:
4390:..\Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:..\Source/tasks.c **** 					updated. */
4392:..\Source/tasks.c **** 					break;
4393:..\Source/tasks.c **** 			}
4394:..\Source/tasks.c **** 
4395:..\Source/tasks.c **** 			traceTASK_NOTIFY();
4396:..\Source/tasks.c **** 
4397:..\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:..\Source/tasks.c **** 			notification then unblock it now. */
4399:..\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5393              		.loc 1 4399 0
 5394 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5395 0094 012B     		cmp	r3, #1
 5396 0096 38D1     		bne	.L354
4400:..\Source/tasks.c **** 			{
4401:..\Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5397              		.loc 1 4401 0
 5398 0098 BB69     		ldr	r3, [r7, #24]
 5399 009a 0433     		adds	r3, r3, #4
 5400 009c 1846     		mov	r0, r3
 5401 009e FFF7FEFF 		bl	uxListRemove
4402:..\Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5402              		.loc 1 4402 0
 5403 00a2 BB69     		ldr	r3, [r7, #24]
 5404 00a4 5B6C     		ldr	r3, [r3, #68]
 5405 00a6 DBB2     		uxtb	r3, r3
 5406 00a8 1946     		mov	r1, r3
 5407 00aa 0B20     		movs	r0, #11
 5408 00ac FFF7FEFF 		bl	packPayload1
 5409 00b0 BB69     		ldr	r3, [r7, #24]
 5410 00b2 DB6A     		ldr	r3, [r3, #44]
 5411 00b4 0122     		movs	r2, #1
 5412 00b6 9A40     		lsls	r2, r2, r3
 5413 00b8 174B     		ldr	r3, .L357
 5414 00ba 1B68     		ldr	r3, [r3]
 5415 00bc 1343     		orrs	r3, r3, r2
 5416 00be 164A     		ldr	r2, .L357
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 179


 5417 00c0 1360     		str	r3, [r2]
 5418 00c2 BB69     		ldr	r3, [r7, #24]
 5419 00c4 DA6A     		ldr	r2, [r3, #44]
 5420 00c6 1346     		mov	r3, r2
 5421 00c8 9B00     		lsls	r3, r3, #2
 5422 00ca 1344     		add	r3, r3, r2
 5423 00cc 9B00     		lsls	r3, r3, #2
 5424 00ce 134A     		ldr	r2, .L357+4
 5425 00d0 1A44     		add	r2, r2, r3
 5426 00d2 BB69     		ldr	r3, [r7, #24]
 5427 00d4 0433     		adds	r3, r3, #4
 5428 00d6 1946     		mov	r1, r3
 5429 00d8 1046     		mov	r0, r2
 5430 00da FFF7FEFF 		bl	vListInsertEnd
 5431 00de BB69     		ldr	r3, [r7, #24]
 5432 00e0 5B6C     		ldr	r3, [r3, #68]
 5433 00e2 DBB2     		uxtb	r3, r3
 5434 00e4 1946     		mov	r1, r3
 5435 00e6 0C20     		movs	r0, #12
 5436 00e8 FFF7FEFF 		bl	packPayload1
4403:..\Source/tasks.c **** 
4404:..\Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:..\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:..\Source/tasks.c **** 
4407:..\Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:..\Source/tasks.c **** 				{
4409:..\Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:..\Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:..\Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:..\Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:..\Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:..\Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:..\Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:..\Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:..\Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:..\Source/tasks.c **** 					earliest possible time. */
4419:..\Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:..\Source/tasks.c **** 				}
4421:..\Source/tasks.c **** 				#endif
4422:..\Source/tasks.c **** 
4423:..\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5437              		.loc 1 4423 0
 5438 00ec BB69     		ldr	r3, [r7, #24]
 5439 00ee DA6A     		ldr	r2, [r3, #44]
 5440 00f0 0B4B     		ldr	r3, .L357+8
 5441 00f2 1B68     		ldr	r3, [r3]
 5442 00f4 DB6A     		ldr	r3, [r3, #44]
 5443 00f6 9A42     		cmp	r2, r3
 5444 00f8 07D9     		bls	.L354
4424:..\Source/tasks.c **** 				{
4425:..\Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:..\Source/tasks.c **** 					executing task so a yield is required. */
4427:..\Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 5445              		.loc 1 4427 0
 5446 00fa 0A4B     		ldr	r3, .L357+12
 5447 00fc 4FF08052 		mov	r2, #268435456
 5448 0100 1A60     		str	r2, [r3]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 180


 5449              		.syntax unified
 5450              	@ 4427 "..\Source\tasks.c" 1
 5451 0102 BFF34F8F 		dsb
 5452              	@ 0 "" 2
 5453              	@ 4427 "..\Source\tasks.c" 1
 5454 0106 BFF36F8F 		isb
 5455              	@ 0 "" 2
 5456              		.thumb
 5457              		.syntax unified
 5458              	.L354:
4428:..\Source/tasks.c **** 				}
4429:..\Source/tasks.c **** 				else
4430:..\Source/tasks.c **** 				{
4431:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:..\Source/tasks.c **** 				}
4433:..\Source/tasks.c **** 			}
4434:..\Source/tasks.c **** 			else
4435:..\Source/tasks.c **** 			{
4436:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:..\Source/tasks.c **** 			}
4438:..\Source/tasks.c **** 		}
4439:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5459              		.loc 1 4439 0
 5460 010a FFF7FEFF 		bl	vPortExitCritical
4440:..\Source/tasks.c **** 
4441:..\Source/tasks.c **** 		return xReturn;
 5461              		.loc 1 4441 0
 5462 010e FB69     		ldr	r3, [r7, #28]
4442:..\Source/tasks.c **** 	}
 5463              		.loc 1 4442 0
 5464 0110 1846     		mov	r0, r3
 5465 0112 2037     		adds	r7, r7, #32
 5466              		.cfi_def_cfa_offset 8
 5467 0114 BD46     		mov	sp, r7
 5468              		.cfi_def_cfa_register 13
 5469              		@ sp needed
 5470 0116 80BD     		pop	{r7, pc}
 5471              	.L358:
 5472              		.align	2
 5473              	.L357:
 5474 0118 E0000000 		.word	uxTopReadyPriority
 5475 011c 04000000 		.word	pxReadyTasksLists
 5476 0120 00000000 		.word	pxCurrentTCB
 5477 0124 04ED00E0 		.word	-536810236
 5478              		.cfi_endproc
 5479              	.LFE118:
 5480              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 5481              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5482              		.align	2
 5483              		.global	xTaskGenericNotifyFromISR
 5484              		.thumb
 5485              		.thumb_func
 5486              		.type	xTaskGenericNotifyFromISR, %function
 5487              	xTaskGenericNotifyFromISR:
 5488              	.LFB119:
4443:..\Source/tasks.c **** 
4444:..\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 181


4445:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4446:..\Source/tasks.c **** 
4447:..\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:..\Source/tasks.c **** 
4449:..\Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:..\Source/tasks.c **** 	{
 5489              		.loc 1 4450 0
 5490              		.cfi_startproc
 5491              		@ args = 4, pretend = 0, frame = 48
 5492              		@ frame_needed = 1, uses_anonymous_args = 0
 5493 0000 80B5     		push	{r7, lr}
 5494              		.cfi_def_cfa_offset 8
 5495              		.cfi_offset 7, -8
 5496              		.cfi_offset 14, -4
 5497 0002 8CB0     		sub	sp, sp, #48
 5498              		.cfi_def_cfa_offset 56
 5499 0004 00AF     		add	r7, sp, #0
 5500              		.cfi_def_cfa_register 7
 5501 0006 F860     		str	r0, [r7, #12]
 5502 0008 B960     		str	r1, [r7, #8]
 5503 000a 3B60     		str	r3, [r7]
 5504 000c 1346     		mov	r3, r2
 5505 000e FB71     		strb	r3, [r7, #7]
4451:..\Source/tasks.c **** 	TCB_t * pxTCB;
4452:..\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:..\Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5506              		.loc 1 4453 0
 5507 0010 0123     		movs	r3, #1
 5508 0012 FB62     		str	r3, [r7, #44]
4454:..\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:..\Source/tasks.c **** 
4456:..\Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:..\Source/tasks.c **** 
4458:..\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:..\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:..\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:..\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:..\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:..\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:..\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:..\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:..\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:..\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:..\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:..\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:..\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:..\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:..\Source/tasks.c **** 		provided on the following link:
4473:..\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:..\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:..\Source/tasks.c **** 
4476:..\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5509              		.loc 1 4476 0
 5510 0014 FB68     		ldr	r3, [r7, #12]
 5511 0016 BB62     		str	r3, [r7, #40]
 5512              	.LBB54:
 5513              	.LBB55:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 182


 253:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 5514              		.loc 2 253 0
 5515              		.syntax unified
 5516              	@ 253 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5517 0018 EFF31182 			mrs r2, basepri											
 5518 001c 4FF0A003 		mov r3, #160												
 5519 0020 83F31188 		msr basepri, r3											
 5520 0024 BFF36F8F 		isb														
 5521 0028 BFF34F8F 		dsb														
 5522              	
 5523              	@ 0 "" 2
 5524              		.thumb
 5525              		.syntax unified
 5526 002c BA61     		str	r2, [r7, #24]
 5527 002e 7B61     		str	r3, [r7, #20]
 265:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 5528              		.loc 2 265 0
 5529 0030 BB69     		ldr	r3, [r7, #24]
 5530              	.LBE55:
 5531              	.LBE54:
4477:..\Source/tasks.c **** 
4478:..\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5532              		.loc 1 4478 0
 5533 0032 3B62     		str	r3, [r7, #32]
4479:..\Source/tasks.c **** 		{
4480:..\Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 5534              		.loc 1 4480 0
 5535 0034 3B68     		ldr	r3, [r7]
 5536 0036 002B     		cmp	r3, #0
 5537 0038 03D0     		beq	.L361
4481:..\Source/tasks.c **** 			{
4482:..\Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 5538              		.loc 1 4482 0
 5539 003a BB6A     		ldr	r3, [r7, #40]
 5540 003c 1A6D     		ldr	r2, [r3, #80]
 5541 003e 3B68     		ldr	r3, [r7]
 5542 0040 1A60     		str	r2, [r3]
 5543              	.L361:
4483:..\Source/tasks.c **** 			}
4484:..\Source/tasks.c **** 
4485:..\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5544              		.loc 1 4485 0
 5545 0042 BB6A     		ldr	r3, [r7, #40]
 5546 0044 93F85430 		ldrb	r3, [r3, #84]
 5547 0048 FB77     		strb	r3, [r7, #31]
4486:..\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5548              		.loc 1 4486 0
 5549 004a BB6A     		ldr	r3, [r7, #40]
 5550 004c 0222     		movs	r2, #2
 5551 004e 83F85420 		strb	r2, [r3, #84]
4487:..\Source/tasks.c **** 
4488:..\Source/tasks.c **** 			switch( eAction )
 5552              		.loc 1 4488 0
 5553 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5554 0054 042B     		cmp	r3, #4
 5555 0056 28D8     		bhi	.L362
 5556 0058 01A2     		adr	r2, .L364
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 183


 5557 005a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 5558 005e 00BF     		.p2align 2
 5559              	.L364:
 5560 0060 AB000000 		.word	.L362+1
 5561 0064 75000000 		.word	.L365+1
 5562 0068 83000000 		.word	.L366+1
 5563 006c 8F000000 		.word	.L367+1
 5564 0070 97000000 		.word	.L368+1
 5565              		.p2align 1
 5566              	.L365:
4489:..\Source/tasks.c **** 			{
4490:..\Source/tasks.c **** 				case eSetBits	:
4491:..\Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 5567              		.loc 1 4491 0
 5568 0074 BB6A     		ldr	r3, [r7, #40]
 5569 0076 1A6D     		ldr	r2, [r3, #80]
 5570 0078 BB68     		ldr	r3, [r7, #8]
 5571 007a 1A43     		orrs	r2, r2, r3
 5572 007c BB6A     		ldr	r3, [r7, #40]
 5573 007e 1A65     		str	r2, [r3, #80]
4492:..\Source/tasks.c **** 					break;
 5574              		.loc 1 4492 0
 5575 0080 13E0     		b	.L362
 5576              	.L366:
4493:..\Source/tasks.c **** 
4494:..\Source/tasks.c **** 				case eIncrement	:
4495:..\Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 5577              		.loc 1 4495 0
 5578 0082 BB6A     		ldr	r3, [r7, #40]
 5579 0084 1B6D     		ldr	r3, [r3, #80]
 5580 0086 5A1C     		adds	r2, r3, #1
 5581 0088 BB6A     		ldr	r3, [r7, #40]
 5582 008a 1A65     		str	r2, [r3, #80]
4496:..\Source/tasks.c **** 					break;
 5583              		.loc 1 4496 0
 5584 008c 0DE0     		b	.L362
 5585              	.L367:
4497:..\Source/tasks.c **** 
4498:..\Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:..\Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 5586              		.loc 1 4499 0
 5587 008e BB6A     		ldr	r3, [r7, #40]
 5588 0090 BA68     		ldr	r2, [r7, #8]
 5589 0092 1A65     		str	r2, [r3, #80]
4500:..\Source/tasks.c **** 					break;
 5590              		.loc 1 4500 0
 5591 0094 09E0     		b	.L362
 5592              	.L368:
4501:..\Source/tasks.c **** 
4502:..\Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:..\Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 5593              		.loc 1 4503 0
 5594 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5595 0098 022B     		cmp	r3, #2
 5596 009a 03D0     		beq	.L369
4504:..\Source/tasks.c **** 					{
4505:..\Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 184


 5597              		.loc 1 4505 0
 5598 009c BB6A     		ldr	r3, [r7, #40]
 5599 009e BA68     		ldr	r2, [r7, #8]
 5600 00a0 1A65     		str	r2, [r3, #80]
4506:..\Source/tasks.c **** 					}
4507:..\Source/tasks.c **** 					else
4508:..\Source/tasks.c **** 					{
4509:..\Source/tasks.c **** 						/* The value could not be written to the task. */
4510:..\Source/tasks.c **** 						xReturn = pdFAIL;
4511:..\Source/tasks.c **** 					}
4512:..\Source/tasks.c **** 					break;
 5601              		.loc 1 4512 0
 5602 00a2 01E0     		b	.L377
 5603              	.L369:
4510:..\Source/tasks.c **** 					}
 5604              		.loc 1 4510 0
 5605 00a4 0023     		movs	r3, #0
 5606 00a6 FB62     		str	r3, [r7, #44]
 5607              	.L377:
 5608              		.loc 1 4512 0
 5609 00a8 00BF     		nop
 5610              	.L362:
4513:..\Source/tasks.c **** 
4514:..\Source/tasks.c **** 				case eNoAction :
4515:..\Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:..\Source/tasks.c **** 					updated. */
4517:..\Source/tasks.c **** 					break;
4518:..\Source/tasks.c **** 			}
4519:..\Source/tasks.c **** 
4520:..\Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:..\Source/tasks.c **** 
4522:..\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:..\Source/tasks.c **** 			notification then unblock it now. */
4524:..\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5611              		.loc 1 4524 0
 5612 00aa FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5613 00ac 012B     		cmp	r3, #1
 5614 00ae 45D1     		bne	.L371
4525:..\Source/tasks.c **** 			{
4526:..\Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:..\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:..\Source/tasks.c **** 
4529:..\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5615              		.loc 1 4529 0
 5616 00b0 274B     		ldr	r3, .L378
 5617 00b2 1B68     		ldr	r3, [r3]
 5618 00b4 002B     		cmp	r3, #0
 5619 00b6 2AD1     		bne	.L372
4530:..\Source/tasks.c **** 				{
4531:..\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5620              		.loc 1 4531 0
 5621 00b8 BB6A     		ldr	r3, [r7, #40]
 5622 00ba 0433     		adds	r3, r3, #4
 5623 00bc 1846     		mov	r0, r3
 5624 00be FFF7FEFF 		bl	uxListRemove
4532:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5625              		.loc 1 4532 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 185


 5626 00c2 BB6A     		ldr	r3, [r7, #40]
 5627 00c4 5B6C     		ldr	r3, [r3, #68]
 5628 00c6 DBB2     		uxtb	r3, r3
 5629 00c8 1946     		mov	r1, r3
 5630 00ca 0B20     		movs	r0, #11
 5631 00cc FFF7FEFF 		bl	packPayload1
 5632 00d0 BB6A     		ldr	r3, [r7, #40]
 5633 00d2 DB6A     		ldr	r3, [r3, #44]
 5634 00d4 0122     		movs	r2, #1
 5635 00d6 9A40     		lsls	r2, r2, r3
 5636 00d8 1E4B     		ldr	r3, .L378+4
 5637 00da 1B68     		ldr	r3, [r3]
 5638 00dc 1343     		orrs	r3, r3, r2
 5639 00de 1D4A     		ldr	r2, .L378+4
 5640 00e0 1360     		str	r3, [r2]
 5641 00e2 BB6A     		ldr	r3, [r7, #40]
 5642 00e4 DA6A     		ldr	r2, [r3, #44]
 5643 00e6 1346     		mov	r3, r2
 5644 00e8 9B00     		lsls	r3, r3, #2
 5645 00ea 1344     		add	r3, r3, r2
 5646 00ec 9B00     		lsls	r3, r3, #2
 5647 00ee 1A4A     		ldr	r2, .L378+8
 5648 00f0 1A44     		add	r2, r2, r3
 5649 00f2 BB6A     		ldr	r3, [r7, #40]
 5650 00f4 0433     		adds	r3, r3, #4
 5651 00f6 1946     		mov	r1, r3
 5652 00f8 1046     		mov	r0, r2
 5653 00fa FFF7FEFF 		bl	vListInsertEnd
 5654 00fe BB6A     		ldr	r3, [r7, #40]
 5655 0100 5B6C     		ldr	r3, [r3, #68]
 5656 0102 DBB2     		uxtb	r3, r3
 5657 0104 1946     		mov	r1, r3
 5658 0106 0C20     		movs	r0, #12
 5659 0108 FFF7FEFF 		bl	packPayload1
 5660 010c 05E0     		b	.L373
 5661              	.L372:
4533:..\Source/tasks.c **** 				}
4534:..\Source/tasks.c **** 				else
4535:..\Source/tasks.c **** 				{
4536:..\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:..\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:..\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5662              		.loc 1 4538 0
 5663 010e BB6A     		ldr	r3, [r7, #40]
 5664 0110 1833     		adds	r3, r3, #24
 5665 0112 1946     		mov	r1, r3
 5666 0114 1148     		ldr	r0, .L378+12
 5667 0116 FFF7FEFF 		bl	vListInsertEnd
 5668              	.L373:
4539:..\Source/tasks.c **** 				}
4540:..\Source/tasks.c **** 
4541:..\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5669              		.loc 1 4541 0
 5670 011a BB6A     		ldr	r3, [r7, #40]
 5671 011c DA6A     		ldr	r2, [r3, #44]
 5672 011e 104B     		ldr	r3, .L378+16
 5673 0120 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 186


 5674 0122 DB6A     		ldr	r3, [r3, #44]
 5675 0124 9A42     		cmp	r2, r3
 5676 0126 09D9     		bls	.L371
4542:..\Source/tasks.c **** 				{
4543:..\Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:..\Source/tasks.c **** 					executing task so a yield is required. */
4545:..\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5677              		.loc 1 4545 0
 5678 0128 BB6B     		ldr	r3, [r7, #56]
 5679 012a 002B     		cmp	r3, #0
 5680 012c 03D0     		beq	.L374
4546:..\Source/tasks.c **** 					{
4547:..\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5681              		.loc 1 4547 0
 5682 012e BB6B     		ldr	r3, [r7, #56]
 5683 0130 0122     		movs	r2, #1
 5684 0132 1A60     		str	r2, [r3]
 5685 0134 02E0     		b	.L371
 5686              	.L374:
4548:..\Source/tasks.c **** 					}
4549:..\Source/tasks.c **** 					else
4550:..\Source/tasks.c **** 					{
4551:..\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:..\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:..\Source/tasks.c **** 						safe FreeRTOS function. */
4554:..\Source/tasks.c **** 						xYieldPending = pdTRUE;
 5687              		.loc 1 4554 0
 5688 0136 0B4B     		ldr	r3, .L378+20
 5689 0138 0122     		movs	r2, #1
 5690 013a 1A60     		str	r2, [r3]
 5691              	.L371:
 5692 013c 3B6A     		ldr	r3, [r7, #32]
 5693 013e 7B62     		str	r3, [r7, #36]
 5694              	.LBB56:
 5695              	.LBB57:
 5696              		.loc 2 271 0
 5697 0140 7B6A     		ldr	r3, [r7, #36]
 5698              		.syntax unified
 5699              	@ 271 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5700 0142 83F31188 			msr basepri, r3	
 5701              	@ 0 "" 2
 5702              		.thumb
 5703              		.syntax unified
 5704              	.LBE57:
 5705              	.LBE56:
4555:..\Source/tasks.c **** 					}
4556:..\Source/tasks.c **** 				}
4557:..\Source/tasks.c **** 				else
4558:..\Source/tasks.c **** 				{
4559:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:..\Source/tasks.c **** 				}
4561:..\Source/tasks.c **** 			}
4562:..\Source/tasks.c **** 		}
4563:..\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:..\Source/tasks.c **** 
4565:..\Source/tasks.c **** 		return xReturn;
 5706              		.loc 1 4565 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 187


 5707 0146 FB6A     		ldr	r3, [r7, #44]
4566:..\Source/tasks.c **** 	}
 5708              		.loc 1 4566 0
 5709 0148 1846     		mov	r0, r3
 5710 014a 3037     		adds	r7, r7, #48
 5711              		.cfi_def_cfa_offset 8
 5712 014c BD46     		mov	sp, r7
 5713              		.cfi_def_cfa_register 13
 5714              		@ sp needed
 5715 014e 80BD     		pop	{r7, pc}
 5716              	.L379:
 5717              		.align	2
 5718              	.L378:
 5719 0150 00010000 		.word	uxSchedulerSuspended
 5720 0154 E0000000 		.word	uxTopReadyPriority
 5721 0158 04000000 		.word	pxReadyTasksLists
 5722 015c 98000000 		.word	xPendingReadyList
 5723 0160 00000000 		.word	pxCurrentTCB
 5724 0164 EC000000 		.word	xYieldPending
 5725              		.cfi_endproc
 5726              	.LFE119:
 5727              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 5728              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5729              		.align	2
 5730              		.global	vTaskNotifyGiveFromISR
 5731              		.thumb
 5732              		.thumb_func
 5733              		.type	vTaskNotifyGiveFromISR, %function
 5734              	vTaskNotifyGiveFromISR:
 5735              	.LFB120:
4567:..\Source/tasks.c **** 
4568:..\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4570:..\Source/tasks.c **** 
4571:..\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:..\Source/tasks.c **** 
4573:..\Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:..\Source/tasks.c **** 	{
 5736              		.loc 1 4574 0
 5737              		.cfi_startproc
 5738              		@ args = 0, pretend = 0, frame = 32
 5739              		@ frame_needed = 1, uses_anonymous_args = 0
 5740 0000 80B5     		push	{r7, lr}
 5741              		.cfi_def_cfa_offset 8
 5742              		.cfi_offset 7, -8
 5743              		.cfi_offset 14, -4
 5744 0002 88B0     		sub	sp, sp, #32
 5745              		.cfi_def_cfa_offset 40
 5746 0004 00AF     		add	r7, sp, #0
 5747              		.cfi_def_cfa_register 7
 5748 0006 7860     		str	r0, [r7, #4]
 5749 0008 3960     		str	r1, [r7]
4575:..\Source/tasks.c **** 	TCB_t * pxTCB;
4576:..\Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:..\Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:..\Source/tasks.c **** 
4579:..\Source/tasks.c **** 		configASSERT( xTaskToNotify );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 188


4580:..\Source/tasks.c **** 
4581:..\Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:..\Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:..\Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:..\Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:..\Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:..\Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:..\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:..\Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:..\Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:..\Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:..\Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:..\Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:..\Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:..\Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:..\Source/tasks.c **** 		provided on the following link:
4596:..\Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:..\Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:..\Source/tasks.c **** 
4599:..\Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5750              		.loc 1 4599 0
 5751 000a 7B68     		ldr	r3, [r7, #4]
 5752 000c FB61     		str	r3, [r7, #28]
 5753              	.LBB58:
 5754              	.LBB59:
 253:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 5755              		.loc 2 253 0
 5756              		.syntax unified
 5757              	@ 253 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5758 000e EFF31182 			mrs r2, basepri											
 5759 0012 4FF0A003 		mov r3, #160												
 5760 0016 83F31188 		msr basepri, r3											
 5761 001a BFF36F8F 		isb														
 5762 001e BFF34F8F 		dsb														
 5763              	
 5764              	@ 0 "" 2
 5765              		.thumb
 5766              		.syntax unified
 5767 0022 FA60     		str	r2, [r7, #12]
 5768 0024 BB60     		str	r3, [r7, #8]
 265:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 5769              		.loc 2 265 0
 5770 0026 FB68     		ldr	r3, [r7, #12]
 5771              	.LBE59:
 5772              	.LBE58:
4600:..\Source/tasks.c **** 
4601:..\Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5773              		.loc 1 4601 0
 5774 0028 7B61     		str	r3, [r7, #20]
4602:..\Source/tasks.c **** 		{
4603:..\Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5775              		.loc 1 4603 0
 5776 002a FB69     		ldr	r3, [r7, #28]
 5777 002c 93F85430 		ldrb	r3, [r3, #84]
 5778 0030 FB74     		strb	r3, [r7, #19]
4604:..\Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5779              		.loc 1 4604 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 189


 5780 0032 FB69     		ldr	r3, [r7, #28]
 5781 0034 0222     		movs	r2, #2
 5782 0036 83F85420 		strb	r2, [r3, #84]
4605:..\Source/tasks.c **** 
4606:..\Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:..\Source/tasks.c **** 			semaphore. */
4608:..\Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5783              		.loc 1 4608 0
 5784 003a FB69     		ldr	r3, [r7, #28]
 5785 003c 1B6D     		ldr	r3, [r3, #80]
 5786 003e 5A1C     		adds	r2, r3, #1
 5787 0040 FB69     		ldr	r3, [r7, #28]
 5788 0042 1A65     		str	r2, [r3, #80]
4609:..\Source/tasks.c **** 
4610:..\Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:..\Source/tasks.c **** 
4612:..\Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:..\Source/tasks.c **** 			notification then unblock it now. */
4614:..\Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5789              		.loc 1 4614 0
 5790 0044 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 5791 0046 012B     		cmp	r3, #1
 5792 0048 45D1     		bne	.L382
4615:..\Source/tasks.c **** 			{
4616:..\Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:..\Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:..\Source/tasks.c **** 
4619:..\Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5793              		.loc 1 4619 0
 5794 004a 274B     		ldr	r3, .L387
 5795 004c 1B68     		ldr	r3, [r3]
 5796 004e 002B     		cmp	r3, #0
 5797 0050 2AD1     		bne	.L383
4620:..\Source/tasks.c **** 				{
4621:..\Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5798              		.loc 1 4621 0
 5799 0052 FB69     		ldr	r3, [r7, #28]
 5800 0054 0433     		adds	r3, r3, #4
 5801 0056 1846     		mov	r0, r3
 5802 0058 FFF7FEFF 		bl	uxListRemove
4622:..\Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5803              		.loc 1 4622 0
 5804 005c FB69     		ldr	r3, [r7, #28]
 5805 005e 5B6C     		ldr	r3, [r3, #68]
 5806 0060 DBB2     		uxtb	r3, r3
 5807 0062 1946     		mov	r1, r3
 5808 0064 0B20     		movs	r0, #11
 5809 0066 FFF7FEFF 		bl	packPayload1
 5810 006a FB69     		ldr	r3, [r7, #28]
 5811 006c DB6A     		ldr	r3, [r3, #44]
 5812 006e 0122     		movs	r2, #1
 5813 0070 9A40     		lsls	r2, r2, r3
 5814 0072 1E4B     		ldr	r3, .L387+4
 5815 0074 1B68     		ldr	r3, [r3]
 5816 0076 1343     		orrs	r3, r3, r2
 5817 0078 1C4A     		ldr	r2, .L387+4
 5818 007a 1360     		str	r3, [r2]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 190


 5819 007c FB69     		ldr	r3, [r7, #28]
 5820 007e DA6A     		ldr	r2, [r3, #44]
 5821 0080 1346     		mov	r3, r2
 5822 0082 9B00     		lsls	r3, r3, #2
 5823 0084 1344     		add	r3, r3, r2
 5824 0086 9B00     		lsls	r3, r3, #2
 5825 0088 194A     		ldr	r2, .L387+8
 5826 008a 1A44     		add	r2, r2, r3
 5827 008c FB69     		ldr	r3, [r7, #28]
 5828 008e 0433     		adds	r3, r3, #4
 5829 0090 1946     		mov	r1, r3
 5830 0092 1046     		mov	r0, r2
 5831 0094 FFF7FEFF 		bl	vListInsertEnd
 5832 0098 FB69     		ldr	r3, [r7, #28]
 5833 009a 5B6C     		ldr	r3, [r3, #68]
 5834 009c DBB2     		uxtb	r3, r3
 5835 009e 1946     		mov	r1, r3
 5836 00a0 0C20     		movs	r0, #12
 5837 00a2 FFF7FEFF 		bl	packPayload1
 5838 00a6 05E0     		b	.L384
 5839              	.L383:
4623:..\Source/tasks.c **** 				}
4624:..\Source/tasks.c **** 				else
4625:..\Source/tasks.c **** 				{
4626:..\Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:..\Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:..\Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5840              		.loc 1 4628 0
 5841 00a8 FB69     		ldr	r3, [r7, #28]
 5842 00aa 1833     		adds	r3, r3, #24
 5843 00ac 1946     		mov	r1, r3
 5844 00ae 1148     		ldr	r0, .L387+12
 5845 00b0 FFF7FEFF 		bl	vListInsertEnd
 5846              	.L384:
4629:..\Source/tasks.c **** 				}
4630:..\Source/tasks.c **** 
4631:..\Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5847              		.loc 1 4631 0
 5848 00b4 FB69     		ldr	r3, [r7, #28]
 5849 00b6 DA6A     		ldr	r2, [r3, #44]
 5850 00b8 0F4B     		ldr	r3, .L387+16
 5851 00ba 1B68     		ldr	r3, [r3]
 5852 00bc DB6A     		ldr	r3, [r3, #44]
 5853 00be 9A42     		cmp	r2, r3
 5854 00c0 09D9     		bls	.L382
4632:..\Source/tasks.c **** 				{
4633:..\Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:..\Source/tasks.c **** 					executing task so a yield is required. */
4635:..\Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5855              		.loc 1 4635 0
 5856 00c2 3B68     		ldr	r3, [r7]
 5857 00c4 002B     		cmp	r3, #0
 5858 00c6 03D0     		beq	.L385
4636:..\Source/tasks.c **** 					{
4637:..\Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5859              		.loc 1 4637 0
 5860 00c8 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 191


 5861 00ca 0122     		movs	r2, #1
 5862 00cc 1A60     		str	r2, [r3]
 5863 00ce 02E0     		b	.L382
 5864              	.L385:
4638:..\Source/tasks.c **** 					}
4639:..\Source/tasks.c **** 					else
4640:..\Source/tasks.c **** 					{
4641:..\Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:..\Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:..\Source/tasks.c **** 						safe FreeRTOS function. */
4644:..\Source/tasks.c **** 						xYieldPending = pdTRUE;
 5865              		.loc 1 4644 0
 5866 00d0 0A4B     		ldr	r3, .L387+20
 5867 00d2 0122     		movs	r2, #1
 5868 00d4 1A60     		str	r2, [r3]
 5869              	.L382:
 5870 00d6 7B69     		ldr	r3, [r7, #20]
 5871 00d8 BB61     		str	r3, [r7, #24]
 5872              	.LBB60:
 5873              	.LBB61:
 5874              		.loc 2 271 0
 5875 00da BB69     		ldr	r3, [r7, #24]
 5876              		.syntax unified
 5877              	@ 271 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5878 00dc 83F31188 			msr basepri, r3	
 5879              	@ 0 "" 2
 5880              		.thumb
 5881              		.syntax unified
 5882              	.LBE61:
 5883              	.LBE60:
4645:..\Source/tasks.c **** 					}
4646:..\Source/tasks.c **** 				}
4647:..\Source/tasks.c **** 				else
4648:..\Source/tasks.c **** 				{
4649:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:..\Source/tasks.c **** 				}
4651:..\Source/tasks.c **** 			}
4652:..\Source/tasks.c **** 		}
4653:..\Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:..\Source/tasks.c **** 	}
 5884              		.loc 1 4654 0
 5885 00e0 00BF     		nop
 5886 00e2 2037     		adds	r7, r7, #32
 5887              		.cfi_def_cfa_offset 8
 5888 00e4 BD46     		mov	sp, r7
 5889              		.cfi_def_cfa_register 13
 5890              		@ sp needed
 5891 00e6 80BD     		pop	{r7, pc}
 5892              	.L388:
 5893              		.align	2
 5894              	.L387:
 5895 00e8 00010000 		.word	uxSchedulerSuspended
 5896 00ec E0000000 		.word	uxTopReadyPriority
 5897 00f0 04000000 		.word	pxReadyTasksLists
 5898 00f4 98000000 		.word	xPendingReadyList
 5899 00f8 00000000 		.word	pxCurrentTCB
 5900 00fc EC000000 		.word	xYieldPending
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 192


 5901              		.cfi_endproc
 5902              	.LFE120:
 5903              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5904              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5905              		.align	2
 5906              		.global	xTaskNotifyStateClear
 5907              		.thumb
 5908              		.thumb_func
 5909              		.type	xTaskNotifyStateClear, %function
 5910              	xTaskNotifyStateClear:
 5911              	.LFB121:
4655:..\Source/tasks.c **** 
4656:..\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:..\Source/tasks.c **** 
4658:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4659:..\Source/tasks.c **** 
4660:..\Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:..\Source/tasks.c **** 
4662:..\Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:..\Source/tasks.c **** 	{
 5912              		.loc 1 4663 0
 5913              		.cfi_startproc
 5914              		@ args = 0, pretend = 0, frame = 16
 5915              		@ frame_needed = 1, uses_anonymous_args = 0
 5916 0000 80B5     		push	{r7, lr}
 5917              		.cfi_def_cfa_offset 8
 5918              		.cfi_offset 7, -8
 5919              		.cfi_offset 14, -4
 5920 0002 84B0     		sub	sp, sp, #16
 5921              		.cfi_def_cfa_offset 24
 5922 0004 00AF     		add	r7, sp, #0
 5923              		.cfi_def_cfa_register 7
 5924 0006 7860     		str	r0, [r7, #4]
4664:..\Source/tasks.c **** 	TCB_t *pxTCB;
4665:..\Source/tasks.c **** 	BaseType_t xReturn;
4666:..\Source/tasks.c **** 
4667:..\Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:..\Source/tasks.c **** 		its notification state cleared. */
4669:..\Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5925              		.loc 1 4669 0
 5926 0008 7B68     		ldr	r3, [r7, #4]
 5927 000a 002B     		cmp	r3, #0
 5928 000c 02D1     		bne	.L390
 5929              		.loc 1 4669 0 is_stmt 0 discriminator 1
 5930 000e 0E4B     		ldr	r3, .L395
 5931 0010 1B68     		ldr	r3, [r3]
 5932 0012 00E0     		b	.L391
 5933              	.L390:
 5934              		.loc 1 4669 0 discriminator 2
 5935 0014 7B68     		ldr	r3, [r7, #4]
 5936              	.L391:
 5937              		.loc 1 4669 0 discriminator 4
 5938 0016 BB60     		str	r3, [r7, #8]
4670:..\Source/tasks.c **** 
4671:..\Source/tasks.c **** 		taskENTER_CRITICAL();
 5939              		.loc 1 4671 0 is_stmt 1 discriminator 4
 5940 0018 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 193


4672:..\Source/tasks.c **** 		{
4673:..\Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5941              		.loc 1 4673 0 discriminator 4
 5942 001c BB68     		ldr	r3, [r7, #8]
 5943 001e 93F85430 		ldrb	r3, [r3, #84]
 5944 0022 DBB2     		uxtb	r3, r3
 5945 0024 022B     		cmp	r3, #2
 5946 0026 06D1     		bne	.L392
4674:..\Source/tasks.c **** 			{
4675:..\Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5947              		.loc 1 4675 0
 5948 0028 BB68     		ldr	r3, [r7, #8]
 5949 002a 0022     		movs	r2, #0
 5950 002c 83F85420 		strb	r2, [r3, #84]
4676:..\Source/tasks.c **** 				xReturn = pdPASS;
 5951              		.loc 1 4676 0
 5952 0030 0123     		movs	r3, #1
 5953 0032 FB60     		str	r3, [r7, #12]
 5954 0034 01E0     		b	.L393
 5955              	.L392:
4677:..\Source/tasks.c **** 			}
4678:..\Source/tasks.c **** 			else
4679:..\Source/tasks.c **** 			{
4680:..\Source/tasks.c **** 				xReturn = pdFAIL;
 5956              		.loc 1 4680 0
 5957 0036 0023     		movs	r3, #0
 5958 0038 FB60     		str	r3, [r7, #12]
 5959              	.L393:
4681:..\Source/tasks.c **** 			}
4682:..\Source/tasks.c **** 		}
4683:..\Source/tasks.c **** 		taskEXIT_CRITICAL();
 5960              		.loc 1 4683 0
 5961 003a FFF7FEFF 		bl	vPortExitCritical
4684:..\Source/tasks.c **** 
4685:..\Source/tasks.c **** 		return xReturn;
 5962              		.loc 1 4685 0
 5963 003e FB68     		ldr	r3, [r7, #12]
4686:..\Source/tasks.c **** 	}
 5964              		.loc 1 4686 0
 5965 0040 1846     		mov	r0, r3
 5966 0042 1037     		adds	r7, r7, #16
 5967              		.cfi_def_cfa_offset 8
 5968 0044 BD46     		mov	sp, r7
 5969              		.cfi_def_cfa_register 13
 5970              		@ sp needed
 5971 0046 80BD     		pop	{r7, pc}
 5972              	.L396:
 5973              		.align	2
 5974              	.L395:
 5975 0048 00000000 		.word	pxCurrentTCB
 5976              		.cfi_endproc
 5977              	.LFE121:
 5978              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5979              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5980              		.align	2
 5981              		.thumb
 5982              		.thumb_func
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 194


 5983              		.type	prvAddCurrentTaskToDelayedList, %function
 5984              	prvAddCurrentTaskToDelayedList:
 5985              	.LFB122:
4687:..\Source/tasks.c **** 
4688:..\Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:..\Source/tasks.c **** /*-----------------------------------------------------------*/
4690:..\Source/tasks.c **** 
4691:..\Source/tasks.c **** 
4692:..\Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:..\Source/tasks.c **** {
 5986              		.loc 1 4693 0
 5987              		.cfi_startproc
 5988              		@ args = 0, pretend = 0, frame = 16
 5989              		@ frame_needed = 1, uses_anonymous_args = 0
 5990 0000 80B5     		push	{r7, lr}
 5991              		.cfi_def_cfa_offset 8
 5992              		.cfi_offset 7, -8
 5993              		.cfi_offset 14, -4
 5994 0002 84B0     		sub	sp, sp, #16
 5995              		.cfi_def_cfa_offset 24
 5996 0004 00AF     		add	r7, sp, #0
 5997              		.cfi_def_cfa_register 7
 5998 0006 7860     		str	r0, [r7, #4]
 5999 0008 3960     		str	r1, [r7]
4694:..\Source/tasks.c **** TickType_t xTimeToWake;
4695:..\Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 6000              		.loc 1 4695 0
 6001 000a 294B     		ldr	r3, .L403
 6002 000c 1B68     		ldr	r3, [r3]
 6003 000e FB60     		str	r3, [r7, #12]
4696:..\Source/tasks.c **** 
4697:..\Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:..\Source/tasks.c **** 	{
4699:..\Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:..\Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:..\Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:..\Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:..\Source/tasks.c **** 	}
4704:..\Source/tasks.c **** 	#endif
4705:..\Source/tasks.c **** 
4706:..\Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:..\Source/tasks.c **** 	as the same list item is used for both lists. */
4708:..\Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6004              		.loc 1 4708 0
 6005 0010 284B     		ldr	r3, .L403+4
 6006 0012 1B68     		ldr	r3, [r3]
 6007 0014 0433     		adds	r3, r3, #4
 6008 0016 1846     		mov	r0, r3
 6009 0018 FFF7FEFF 		bl	uxListRemove
 6010 001c 0346     		mov	r3, r0
 6011 001e 002B     		cmp	r3, #0
 6012 0020 0BD1     		bne	.L398
4709:..\Source/tasks.c **** 	{
4710:..\Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:..\Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:..\Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 6013              		.loc 1 4712 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 195


 6014 0022 244B     		ldr	r3, .L403+4
 6015 0024 1B68     		ldr	r3, [r3]
 6016 0026 DB6A     		ldr	r3, [r3, #44]
 6017 0028 0122     		movs	r2, #1
 6018 002a 02FA03F3 		lsl	r3, r2, r3
 6019 002e DA43     		mvns	r2, r3
 6020 0030 214B     		ldr	r3, .L403+8
 6021 0032 1B68     		ldr	r3, [r3]
 6022 0034 1340     		ands	r3, r3, r2
 6023 0036 204A     		ldr	r2, .L403+8
 6024 0038 1360     		str	r3, [r2]
 6025              	.L398:
4713:..\Source/tasks.c **** 	}
4714:..\Source/tasks.c **** 	else
4715:..\Source/tasks.c **** 	{
4716:..\Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:..\Source/tasks.c **** 	}
4718:..\Source/tasks.c **** 
4719:..\Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:..\Source/tasks.c **** 	{
4721:..\Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 6026              		.loc 1 4721 0
 6027 003a 7B68     		ldr	r3, [r7, #4]
 6028 003c B3F1FF3F 		cmp	r3, #-1
 6029 0040 0AD1     		bne	.L399
 6030              		.loc 1 4721 0 is_stmt 0 discriminator 1
 6031 0042 3B68     		ldr	r3, [r7]
 6032 0044 002B     		cmp	r3, #0
 6033 0046 07D0     		beq	.L399
4722:..\Source/tasks.c **** 		{
4723:..\Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:..\Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:..\Source/tasks.c **** 			indefinitely. */
4726:..\Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 6034              		.loc 1 4726 0 is_stmt 1
 6035 0048 1A4B     		ldr	r3, .L403+4
 6036 004a 1B68     		ldr	r3, [r3]
 6037 004c 0433     		adds	r3, r3, #4
 6038 004e 1946     		mov	r1, r3
 6039 0050 1A48     		ldr	r0, .L403+12
 6040 0052 FFF7FEFF 		bl	vListInsertEnd
4727:..\Source/tasks.c **** 		}
4728:..\Source/tasks.c **** 		else
4729:..\Source/tasks.c **** 		{
4730:..\Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:..\Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:..\Source/tasks.c **** 			kernel will manage it correctly. */
4733:..\Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4734:..\Source/tasks.c **** 
4735:..\Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:..\Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4737:..\Source/tasks.c **** 
4738:..\Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4739:..\Source/tasks.c **** 			{
4740:..\Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:..\Source/tasks.c **** 				list. */
4742:..\Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 196


4743:..\Source/tasks.c **** 			}
4744:..\Source/tasks.c **** 			else
4745:..\Source/tasks.c **** 			{
4746:..\Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:..\Source/tasks.c **** 				is used. */
4748:..\Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:..\Source/tasks.c **** 
4750:..\Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:..\Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:..\Source/tasks.c **** 				needs to be updated too. */
4753:..\Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:..\Source/tasks.c **** 				{
4755:..\Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:..\Source/tasks.c **** 				}
4757:..\Source/tasks.c **** 				else
4758:..\Source/tasks.c **** 				{
4759:..\Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:..\Source/tasks.c **** 				}
4761:..\Source/tasks.c **** 			}
4762:..\Source/tasks.c **** 		}
4763:..\Source/tasks.c **** 	}
4764:..\Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:..\Source/tasks.c **** 	{
4766:..\Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:..\Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:..\Source/tasks.c **** 		will manage it correctly. */
4769:..\Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:..\Source/tasks.c **** 
4771:..\Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:..\Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:..\Source/tasks.c **** 
4774:..\Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:..\Source/tasks.c **** 		{
4776:..\Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:..\Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:..\Source/tasks.c **** 		}
4779:..\Source/tasks.c **** 		else
4780:..\Source/tasks.c **** 		{
4781:..\Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:..\Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:..\Source/tasks.c **** 
4784:..\Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:..\Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:..\Source/tasks.c **** 			too. */
4787:..\Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:..\Source/tasks.c **** 			{
4789:..\Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:..\Source/tasks.c **** 			}
4791:..\Source/tasks.c **** 			else
4792:..\Source/tasks.c **** 			{
4793:..\Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:..\Source/tasks.c **** 			}
4795:..\Source/tasks.c **** 		}
4796:..\Source/tasks.c **** 
4797:..\Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:..\Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:..\Source/tasks.c **** 	}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 197


4800:..\Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:..\Source/tasks.c **** }
 6041              		.loc 1 4801 0
 6042 0056 26E0     		b	.L402
 6043              	.L399:
4733:..\Source/tasks.c **** 
 6044              		.loc 1 4733 0
 6045 0058 FA68     		ldr	r2, [r7, #12]
 6046 005a 7B68     		ldr	r3, [r7, #4]
 6047 005c 1344     		add	r3, r3, r2
 6048 005e BB60     		str	r3, [r7, #8]
4736:..\Source/tasks.c **** 
 6049              		.loc 1 4736 0
 6050 0060 144B     		ldr	r3, .L403+4
 6051 0062 1B68     		ldr	r3, [r3]
 6052 0064 BA68     		ldr	r2, [r7, #8]
 6053 0066 5A60     		str	r2, [r3, #4]
4738:..\Source/tasks.c **** 			{
 6054              		.loc 1 4738 0
 6055 0068 BA68     		ldr	r2, [r7, #8]
 6056 006a FB68     		ldr	r3, [r7, #12]
 6057 006c 9A42     		cmp	r2, r3
 6058 006e 09D2     		bcs	.L401
4742:..\Source/tasks.c **** 			}
 6059              		.loc 1 4742 0
 6060 0070 134B     		ldr	r3, .L403+16
 6061 0072 1A68     		ldr	r2, [r3]
 6062 0074 0F4B     		ldr	r3, .L403+4
 6063 0076 1B68     		ldr	r3, [r3]
 6064 0078 0433     		adds	r3, r3, #4
 6065 007a 1946     		mov	r1, r3
 6066 007c 1046     		mov	r0, r2
 6067 007e FFF7FEFF 		bl	vListInsert
 6068              		.loc 1 4801 0
 6069 0082 10E0     		b	.L402
 6070              	.L401:
4748:..\Source/tasks.c **** 
 6071              		.loc 1 4748 0
 6072 0084 0F4B     		ldr	r3, .L403+20
 6073 0086 1A68     		ldr	r2, [r3]
 6074 0088 0A4B     		ldr	r3, .L403+4
 6075 008a 1B68     		ldr	r3, [r3]
 6076 008c 0433     		adds	r3, r3, #4
 6077 008e 1946     		mov	r1, r3
 6078 0090 1046     		mov	r0, r2
 6079 0092 FFF7FEFF 		bl	vListInsert
4753:..\Source/tasks.c **** 				{
 6080              		.loc 1 4753 0
 6081 0096 0C4B     		ldr	r3, .L403+24
 6082 0098 1B68     		ldr	r3, [r3]
 6083 009a BA68     		ldr	r2, [r7, #8]
 6084 009c 9A42     		cmp	r2, r3
 6085 009e 02D2     		bcs	.L402
4755:..\Source/tasks.c **** 				}
 6086              		.loc 1 4755 0
 6087 00a0 094A     		ldr	r2, .L403+24
 6088 00a2 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 198


 6089 00a4 1360     		str	r3, [r2]
 6090              	.L402:
 6091              		.loc 1 4801 0
 6092 00a6 00BF     		nop
 6093 00a8 1037     		adds	r7, r7, #16
 6094              		.cfi_def_cfa_offset 8
 6095 00aa BD46     		mov	sp, r7
 6096              		.cfi_def_cfa_register 13
 6097              		@ sp needed
 6098 00ac 80BD     		pop	{r7, pc}
 6099              	.L404:
 6100 00ae 00BF     		.align	2
 6101              	.L403:
 6102 00b0 DC000000 		.word	xTickCount
 6103 00b4 00000000 		.word	pxCurrentTCB
 6104 00b8 E0000000 		.word	uxTopReadyPriority
 6105 00bc C4000000 		.word	xSuspendedTaskList
 6106 00c0 94000000 		.word	pxOverflowDelayedTaskList
 6107 00c4 90000000 		.word	pxDelayedTaskList
 6108 00c8 F8000000 		.word	xNextTaskUnblockTime
 6109              		.cfi_endproc
 6110              	.LFE122:
 6111              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 6112              		.text
 6113              	.Letext0:
 6114              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 6115              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 6116              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 6117              		.file 6 ".\\Tracer/sniffPayload.h"
 6118              		.file 7 ".\\Tracer/selfFIFO.h"
 6119              		.file 8 "..\\Source\\include/projdefs.h"
 6120              		.file 9 "..\\Source\\include/list.h"
 6121              		.file 10 "..\\Source\\include/task.h"
 6122              		.file 11 "Generated_Source\\PSoC5/core_cm3.h"
 6123              		.file 12 ".\\Tracer/sniffTask.h"
 6124              		.section	.debug_info,"",%progbits
 6125              	.Ldebug_info0:
 6126 0000 771C0000 		.4byte	0x1c77
 6127 0004 0400     		.2byte	0x4
 6128 0006 00000000 		.4byte	.Ldebug_abbrev0
 6129 000a 04       		.byte	0x4
 6130 000b 01       		.uleb128 0x1
 6131 000c 3D0A0000 		.4byte	.LASF353
 6132 0010 0C       		.byte	0xc
 6133 0011 6B160000 		.4byte	.LASF354
 6134 0015 31070000 		.4byte	.LASF355
 6135 0019 00000000 		.4byte	.Ldebug_ranges0+0
 6136 001d 00000000 		.4byte	0
 6137 0021 00000000 		.4byte	.Ldebug_line0
 6138 0025 02       		.uleb128 0x2
 6139 0026 24000000 		.4byte	.LASF4
 6140 002a 03       		.byte	0x3
 6141 002b D8       		.byte	0xd8
 6142 002c 30000000 		.4byte	0x30
 6143 0030 03       		.uleb128 0x3
 6144 0031 04       		.byte	0x4
 6145 0032 07       		.byte	0x7
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 199


 6146 0033 150C0000 		.4byte	.LASF0
 6147 0037 04       		.uleb128 0x4
 6148 0038 04       		.byte	0x4
 6149 0039 05       		.byte	0x5
 6150 003a 696E7400 		.ascii	"int\000"
 6151 003e 03       		.uleb128 0x3
 6152 003f 08       		.byte	0x8
 6153 0040 05       		.byte	0x5
 6154 0041 180B0000 		.4byte	.LASF1
 6155 0045 03       		.uleb128 0x3
 6156 0046 08       		.byte	0x8
 6157 0047 04       		.byte	0x4
 6158 0048 C30E0000 		.4byte	.LASF2
 6159 004c 03       		.uleb128 0x3
 6160 004d 01       		.byte	0x1
 6161 004e 06       		.byte	0x6
 6162 004f 20040000 		.4byte	.LASF3
 6163 0053 02       		.uleb128 0x2
 6164 0054 38020000 		.4byte	.LASF5
 6165 0058 04       		.byte	0x4
 6166 0059 1D       		.byte	0x1d
 6167 005a 5E000000 		.4byte	0x5e
 6168 005e 03       		.uleb128 0x3
 6169 005f 01       		.byte	0x1
 6170 0060 08       		.byte	0x8
 6171 0061 92040000 		.4byte	.LASF6
 6172 0065 03       		.uleb128 0x3
 6173 0066 02       		.byte	0x2
 6174 0067 05       		.byte	0x5
 6175 0068 8F130000 		.4byte	.LASF7
 6176 006c 02       		.uleb128 0x2
 6177 006d 19060000 		.4byte	.LASF8
 6178 0071 04       		.byte	0x4
 6179 0072 2B       		.byte	0x2b
 6180 0073 77000000 		.4byte	0x77
 6181 0077 03       		.uleb128 0x3
 6182 0078 02       		.byte	0x2
 6183 0079 07       		.byte	0x7
 6184 007a 0E160000 		.4byte	.LASF9
 6185 007e 02       		.uleb128 0x2
 6186 007f 7D160000 		.4byte	.LASF10
 6187 0083 04       		.byte	0x4
 6188 0084 3F       		.byte	0x3f
 6189 0085 89000000 		.4byte	0x89
 6190 0089 03       		.uleb128 0x3
 6191 008a 04       		.byte	0x4
 6192 008b 05       		.byte	0x5
 6193 008c 08030000 		.4byte	.LASF11
 6194 0090 02       		.uleb128 0x2
 6195 0091 F60A0000 		.4byte	.LASF12
 6196 0095 04       		.byte	0x4
 6197 0096 41       		.byte	0x41
 6198 0097 9B000000 		.4byte	0x9b
 6199 009b 03       		.uleb128 0x3
 6200 009c 04       		.byte	0x4
 6201 009d 07       		.byte	0x7
 6202 009e 07090000 		.4byte	.LASF13
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 200


 6203 00a2 03       		.uleb128 0x3
 6204 00a3 08       		.byte	0x8
 6205 00a4 07       		.byte	0x7
 6206 00a5 15100000 		.4byte	.LASF14
 6207 00a9 03       		.uleb128 0x3
 6208 00aa 04       		.byte	0x4
 6209 00ab 07       		.byte	0x7
 6210 00ac 37000000 		.4byte	.LASF15
 6211 00b0 05       		.uleb128 0x5
 6212 00b1 04       		.byte	0x4
 6213 00b2 06       		.uleb128 0x6
 6214 00b3 04       		.byte	0x4
 6215 00b4 B8000000 		.4byte	0xb8
 6216 00b8 03       		.uleb128 0x3
 6217 00b9 01       		.byte	0x1
 6218 00ba 08       		.byte	0x8
 6219 00bb FA050000 		.4byte	.LASF16
 6220 00bf 06       		.uleb128 0x6
 6221 00c0 04       		.byte	0x4
 6222 00c1 C5000000 		.4byte	0xc5
 6223 00c5 07       		.uleb128 0x7
 6224 00c6 B8000000 		.4byte	0xb8
 6225 00ca 02       		.uleb128 0x2
 6226 00cb 37040000 		.4byte	.LASF17
 6227 00cf 05       		.byte	0x5
 6228 00d0 18       		.byte	0x18
 6229 00d1 53000000 		.4byte	0x53
 6230 00d5 02       		.uleb128 0x2
 6231 00d6 5B100000 		.4byte	.LASF18
 6232 00da 05       		.byte	0x5
 6233 00db 24       		.byte	0x24
 6234 00dc 6C000000 		.4byte	0x6c
 6235 00e0 02       		.uleb128 0x2
 6236 00e1 CE000000 		.4byte	.LASF19
 6237 00e5 05       		.byte	0x5
 6238 00e6 2C       		.byte	0x2c
 6239 00e7 7E000000 		.4byte	0x7e
 6240 00eb 02       		.uleb128 0x2
 6241 00ec 85150000 		.4byte	.LASF20
 6242 00f0 05       		.byte	0x5
 6243 00f1 30       		.byte	0x30
 6244 00f2 90000000 		.4byte	0x90
 6245 00f6 03       		.uleb128 0x3
 6246 00f7 04       		.byte	0x4
 6247 00f8 04       		.byte	0x4
 6248 00f9 E60B0000 		.4byte	.LASF21
 6249 00fd 03       		.uleb128 0x3
 6250 00fe 08       		.byte	0x8
 6251 00ff 04       		.byte	0x4
 6252 0100 4C0B0000 		.4byte	.LASF22
 6253 0104 08       		.uleb128 0x8
 6254 0105 EB000000 		.4byte	0xeb
 6255 0109 08       		.uleb128 0x8
 6256 010a CA000000 		.4byte	0xca
 6257 010e 09       		.uleb128 0x9
 6258 010f 01       		.byte	0x1
 6259 0110 5E000000 		.4byte	0x5e
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 201


 6260 0114 06       		.byte	0x6
 6261 0115 10       		.byte	0x10
 6262 0116 45010000 		.4byte	0x145
 6263 011a 0A       		.uleb128 0xa
 6264 011b E20F0000 		.4byte	.LASF23
 6265 011f 00       		.byte	0
 6266 0120 0A       		.uleb128 0xa
 6267 0121 6F130000 		.4byte	.LASF24
 6268 0125 01       		.byte	0x1
 6269 0126 0A       		.uleb128 0xa
 6270 0127 140A0000 		.4byte	.LASF25
 6271 012b 02       		.byte	0x2
 6272 012c 0A       		.uleb128 0xa
 6273 012d 31090000 		.4byte	.LASF26
 6274 0131 03       		.byte	0x3
 6275 0132 0A       		.uleb128 0xa
 6276 0133 64100000 		.4byte	.LASF27
 6277 0137 04       		.byte	0x4
 6278 0138 0A       		.uleb128 0xa
 6279 0139 C6070000 		.4byte	.LASF28
 6280 013d 05       		.byte	0x5
 6281 013e 0A       		.uleb128 0xa
 6282 013f E5080000 		.4byte	.LASF29
 6283 0143 06       		.byte	0x6
 6284 0144 00       		.byte	0
 6285 0145 02       		.uleb128 0x2
 6286 0146 59060000 		.4byte	.LASF30
 6287 014a 06       		.byte	0x6
 6288 014b 10       		.byte	0x10
 6289 014c 0E010000 		.4byte	0x10e
 6290 0150 09       		.uleb128 0x9
 6291 0151 01       		.byte	0x1
 6292 0152 5E000000 		.4byte	0x5e
 6293 0156 06       		.byte	0x6
 6294 0157 15       		.byte	0x15
 6295 0158 31030000 		.4byte	0x331
 6296 015c 0A       		.uleb128 0xa
 6297 015d 64170000 		.4byte	.LASF31
 6298 0161 00       		.byte	0
 6299 0162 0A       		.uleb128 0xa
 6300 0163 0F000000 		.4byte	.LASF32
 6301 0167 01       		.byte	0x1
 6302 0168 0A       		.uleb128 0xa
 6303 0169 28150000 		.4byte	.LASF33
 6304 016d 02       		.byte	0x2
 6305 016e 0A       		.uleb128 0xa
 6306 016f 99130000 		.4byte	.LASF34
 6307 0173 03       		.byte	0x3
 6308 0174 0A       		.uleb128 0xa
 6309 0175 260B0000 		.4byte	.LASF35
 6310 0179 04       		.byte	0x4
 6311 017a 0A       		.uleb128 0xa
 6312 017b 7B060000 		.4byte	.LASF36
 6313 017f 05       		.byte	0x5
 6314 0180 0A       		.uleb128 0xa
 6315 0181 F3020000 		.4byte	.LASF37
 6316 0185 06       		.byte	0x6
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 202


 6317 0186 0A       		.uleb128 0xa
 6318 0187 CC080000 		.4byte	.LASF38
 6319 018b 07       		.byte	0x7
 6320 018c 0A       		.uleb128 0xa
 6321 018d EA160000 		.4byte	.LASF39
 6322 0191 08       		.byte	0x8
 6323 0192 0A       		.uleb128 0xa
 6324 0193 B0040000 		.4byte	.LASF40
 6325 0197 09       		.byte	0x9
 6326 0198 0A       		.uleb128 0xa
 6327 0199 89030000 		.4byte	.LASF41
 6328 019d 0A       		.byte	0xa
 6329 019e 0A       		.uleb128 0xa
 6330 019f E80F0000 		.4byte	.LASF42
 6331 01a3 0B       		.byte	0xb
 6332 01a4 0A       		.uleb128 0xa
 6333 01a5 10140000 		.4byte	.LASF43
 6334 01a9 0C       		.byte	0xc
 6335 01aa 0A       		.uleb128 0xa
 6336 01ab D8070000 		.4byte	.LASF44
 6337 01af 0D       		.byte	0xd
 6338 01b0 0A       		.uleb128 0xa
 6339 01b1 300E0000 		.4byte	.LASF45
 6340 01b5 0E       		.byte	0xe
 6341 01b6 0A       		.uleb128 0xa
 6342 01b7 EB030000 		.4byte	.LASF46
 6343 01bb 0F       		.byte	0xf
 6344 01bc 0A       		.uleb128 0xa
 6345 01bd 1C0D0000 		.4byte	.LASF47
 6346 01c1 10       		.byte	0x10
 6347 01c2 0A       		.uleb128 0xa
 6348 01c3 A2060000 		.4byte	.LASF48
 6349 01c7 11       		.byte	0x11
 6350 01c8 0A       		.uleb128 0xa
 6351 01c9 6A0D0000 		.4byte	.LASF49
 6352 01cd 12       		.byte	0x12
 6353 01ce 0A       		.uleb128 0xa
 6354 01cf F1000000 		.4byte	.LASF50
 6355 01d3 13       		.byte	0x13
 6356 01d4 0A       		.uleb128 0xa
 6357 01d5 83000000 		.4byte	.LASF51
 6358 01d9 14       		.byte	0x14
 6359 01da 0A       		.uleb128 0xa
 6360 01db 92020000 		.4byte	.LASF52
 6361 01df 15       		.byte	0x15
 6362 01e0 0A       		.uleb128 0xa
 6363 01e1 88140000 		.4byte	.LASF53
 6364 01e5 16       		.byte	0x16
 6365 01e6 0A       		.uleb128 0xa
 6366 01e7 3E0B0000 		.4byte	.LASF54
 6367 01eb 17       		.byte	0x17
 6368 01ec 0A       		.uleb128 0xa
 6369 01ed AF0D0000 		.4byte	.LASF55
 6370 01f1 18       		.byte	0x18
 6371 01f2 0A       		.uleb128 0xa
 6372 01f3 F8090000 		.4byte	.LASF56
 6373 01f7 19       		.byte	0x19
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 203


 6374 01f8 0A       		.uleb128 0xa
 6375 01f9 46100000 		.4byte	.LASF57
 6376 01fd 1A       		.byte	0x1a
 6377 01fe 0A       		.uleb128 0xa
 6378 01ff 64060000 		.4byte	.LASF58
 6379 0203 1B       		.byte	0x1b
 6380 0204 0A       		.uleb128 0xa
 6381 0205 DF150000 		.4byte	.LASF59
 6382 0209 1C       		.byte	0x1c
 6383 020a 0A       		.uleb128 0xa
 6384 020b 69050000 		.4byte	.LASF60
 6385 020f 1D       		.byte	0x1d
 6386 0210 0A       		.uleb128 0xa
 6387 0211 D3130000 		.4byte	.LASF61
 6388 0215 1E       		.byte	0x1e
 6389 0216 0A       		.uleb128 0xa
 6390 0217 50020000 		.4byte	.LASF62
 6391 021b 1F       		.byte	0x1f
 6392 021c 0A       		.uleb128 0xa
 6393 021d 4C0C0000 		.4byte	.LASF63
 6394 0221 20       		.byte	0x20
 6395 0222 0A       		.uleb128 0xa
 6396 0223 77120000 		.4byte	.LASF64
 6397 0227 21       		.byte	0x21
 6398 0228 0A       		.uleb128 0xa
 6399 0229 0A0F0000 		.4byte	.LASF65
 6400 022d 22       		.byte	0x22
 6401 022e 0A       		.uleb128 0xa
 6402 022f C2160000 		.4byte	.LASF66
 6403 0233 23       		.byte	0x23
 6404 0234 0A       		.uleb128 0xa
 6405 0235 820B0000 		.4byte	.LASF67
 6406 0239 24       		.byte	0x24
 6407 023a 0A       		.uleb128 0xa
 6408 023b 21160000 		.4byte	.LASF68
 6409 023f 25       		.byte	0x25
 6410 0240 0A       		.uleb128 0xa
 6411 0241 3A0D0000 		.4byte	.LASF69
 6412 0245 26       		.byte	0x26
 6413 0246 0A       		.uleb128 0xa
 6414 0247 06170000 		.4byte	.LASF70
 6415 024b 27       		.byte	0x27
 6416 024c 0A       		.uleb128 0xa
 6417 024d 910E0000 		.4byte	.LASF71
 6418 0251 28       		.byte	0x28
 6419 0252 0A       		.uleb128 0xa
 6420 0253 05100000 		.4byte	.LASF72
 6421 0257 29       		.byte	0x29
 6422 0258 0A       		.uleb128 0xa
 6423 0259 74100000 		.4byte	.LASF73
 6424 025d 2A       		.byte	0x2a
 6425 025e 0A       		.uleb128 0xa
 6426 025f 220C0000 		.4byte	.LASF74
 6427 0263 2B       		.byte	0x2b
 6428 0264 0A       		.uleb128 0xa
 6429 0265 34050000 		.4byte	.LASF75
 6430 0269 2C       		.byte	0x2c
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 204


 6431 026a 0A       		.uleb128 0xa
 6432 026b 73040000 		.4byte	.LASF76
 6433 026f 2D       		.byte	0x2d
 6434 0270 0A       		.uleb128 0xa
 6435 0271 05070000 		.4byte	.LASF77
 6436 0275 2E       		.byte	0x2e
 6437 0276 0A       		.uleb128 0xa
 6438 0277 420F0000 		.4byte	.LASF78
 6439 027b 2F       		.byte	0x2f
 6440 027c 0A       		.uleb128 0xa
 6441 027d 26030000 		.4byte	.LASF79
 6442 0281 30       		.byte	0x30
 6443 0282 0A       		.uleb128 0xa
 6444 0283 950D0000 		.4byte	.LASF80
 6445 0287 31       		.byte	0x31
 6446 0288 0A       		.uleb128 0xa
 6447 0289 45120000 		.4byte	.LASF81
 6448 028d 32       		.byte	0x32
 6449 028e 0A       		.uleb128 0xa
 6450 028f 11030000 		.4byte	.LASF82
 6451 0293 33       		.byte	0x33
 6452 0294 0A       		.uleb128 0xa
 6453 0295 DF110000 		.4byte	.LASF83
 6454 0299 34       		.byte	0x34
 6455 029a 0A       		.uleb128 0xa
 6456 029b A60E0000 		.4byte	.LASF84
 6457 029f 35       		.byte	0x35
 6458 02a0 0A       		.uleb128 0xa
 6459 02a1 8C110000 		.4byte	.LASF85
 6460 02a5 36       		.byte	0x36
 6461 02a6 0A       		.uleb128 0xa
 6462 02a7 26170000 		.4byte	.LASF86
 6463 02ab 37       		.byte	0x37
 6464 02ac 0A       		.uleb128 0xa
 6465 02ad 32140000 		.4byte	.LASF87
 6466 02b1 38       		.byte	0x38
 6467 02b2 0A       		.uleb128 0xa
 6468 02b3 C40D0000 		.4byte	.LASF88
 6469 02b7 39       		.byte	0x39
 6470 02b8 0A       		.uleb128 0xa
 6471 02b9 6E090000 		.4byte	.LASF89
 6472 02bd 3A       		.byte	0x3a
 6473 02be 0A       		.uleb128 0xa
 6474 02bf BE140000 		.4byte	.LASF90
 6475 02c3 3B       		.byte	0x3b
 6476 02c4 0A       		.uleb128 0xa
 6477 02c5 48000000 		.4byte	.LASF91
 6478 02c9 3C       		.byte	0x3c
 6479 02ca 0A       		.uleb128 0xa
 6480 02cb 2D130000 		.4byte	.LASF92
 6481 02cf 3D       		.byte	0x3d
 6482 02d0 0A       		.uleb128 0xa
 6483 02d1 3A110000 		.4byte	.LASF93
 6484 02d5 3E       		.byte	0x3e
 6485 02d6 0A       		.uleb128 0xa
 6486 02d7 3A0C0000 		.4byte	.LASF94
 6487 02db 3F       		.byte	0x3f
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 205


 6488 02dc 0A       		.uleb128 0xa
 6489 02dd 51150000 		.4byte	.LASF95
 6490 02e1 40       		.byte	0x40
 6491 02e2 0A       		.uleb128 0xa
 6492 02e3 3E170000 		.4byte	.LASF96
 6493 02e7 41       		.byte	0x41
 6494 02e8 0A       		.uleb128 0xa
 6495 02e9 E1140000 		.4byte	.LASF97
 6496 02ed 42       		.byte	0x42
 6497 02ee 0A       		.uleb128 0xa
 6498 02ef 6E0B0000 		.4byte	.LASF98
 6499 02f3 43       		.byte	0x43
 6500 02f4 0A       		.uleb128 0xa
 6501 02f5 AF020000 		.4byte	.LASF99
 6502 02f9 44       		.byte	0x44
 6503 02fa 0A       		.uleb128 0xa
 6504 02fb 6D170000 		.4byte	.LASF100
 6505 02ff 45       		.byte	0x45
 6506 0300 0A       		.uleb128 0xa
 6507 0301 D5040000 		.4byte	.LASF101
 6508 0305 46       		.byte	0x46
 6509 0306 0A       		.uleb128 0xa
 6510 0307 AA0F0000 		.4byte	.LASF102
 6511 030b 47       		.byte	0x47
 6512 030c 0A       		.uleb128 0xa
 6513 030d C1100000 		.4byte	.LASF103
 6514 0311 48       		.byte	0x48
 6515 0312 0A       		.uleb128 0xa
 6516 0313 A2120000 		.4byte	.LASF104
 6517 0317 49       		.byte	0x49
 6518 0318 0A       		.uleb128 0xa
 6519 0319 B5120000 		.4byte	.LASF105
 6520 031d 4A       		.byte	0x4a
 6521 031e 0A       		.uleb128 0xa
 6522 031f C8120000 		.4byte	.LASF106
 6523 0323 4B       		.byte	0x4b
 6524 0324 0A       		.uleb128 0xa
 6525 0325 DB120000 		.4byte	.LASF107
 6526 0329 4C       		.byte	0x4c
 6527 032a 0A       		.uleb128 0xa
 6528 032b EE120000 		.4byte	.LASF108
 6529 032f 4D       		.byte	0x4d
 6530 0330 00       		.byte	0
 6531 0331 0B       		.uleb128 0xb
 6532 0332 04       		.byte	0x4
 6533 0333 06       		.byte	0x6
 6534 0334 86       		.byte	0x86
 6535 0335 6A030000 		.4byte	0x36a
 6536 0339 0C       		.uleb128 0xc
 6537 033a C9020000 		.4byte	.LASF109
 6538 033e 06       		.byte	0x6
 6539 033f 87       		.byte	0x87
 6540 0340 CA000000 		.4byte	0xca
 6541 0344 00       		.byte	0
 6542 0345 0C       		.uleb128 0xc
 6543 0346 38100000 		.4byte	.LASF110
 6544 034a 06       		.byte	0x6
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 206


 6545 034b 88       		.byte	0x88
 6546 034c CA000000 		.4byte	0xca
 6547 0350 01       		.byte	0x1
 6548 0351 0C       		.uleb128 0xc
 6549 0352 09150000 		.4byte	.LASF111
 6550 0356 06       		.byte	0x6
 6551 0357 89       		.byte	0x89
 6552 0358 45010000 		.4byte	0x145
 6553 035c 02       		.byte	0x2
 6554 035d 0C       		.uleb128 0xc
 6555 035e 54100000 		.4byte	.LASF112
 6556 0362 06       		.byte	0x6
 6557 0363 8A       		.byte	0x8a
 6558 0364 CA000000 		.4byte	0xca
 6559 0368 03       		.byte	0x3
 6560 0369 00       		.byte	0
 6561 036a 02       		.uleb128 0x2
 6562 036b 07020000 		.4byte	.LASF113
 6563 036f 06       		.byte	0x6
 6564 0370 8B       		.byte	0x8b
 6565 0371 31030000 		.4byte	0x331
 6566 0375 0B       		.uleb128 0xb
 6567 0376 0E       		.byte	0xe
 6568 0377 06       		.byte	0x6
 6569 0378 95       		.byte	0x95
 6570 0379 A2030000 		.4byte	0x3a2
 6571 037d 0C       		.uleb128 0xc
 6572 037e BC030000 		.4byte	.LASF114
 6573 0382 06       		.byte	0x6
 6574 0383 96       		.byte	0x96
 6575 0384 CA000000 		.4byte	0xca
 6576 0388 00       		.byte	0
 6577 0389 0C       		.uleb128 0xc
 6578 038a 42020000 		.4byte	.LASF115
 6579 038e 06       		.byte	0x6
 6580 038f 97       		.byte	0x97
 6581 0390 CA000000 		.4byte	0xca
 6582 0394 01       		.byte	0x1
 6583 0395 0C       		.uleb128 0xc
 6584 0396 D4150000 		.4byte	.LASF116
 6585 039a 06       		.byte	0x6
 6586 039b 98       		.byte	0x98
 6587 039c A2030000 		.4byte	0x3a2
 6588 03a0 02       		.byte	0x2
 6589 03a1 00       		.byte	0
 6590 03a2 0D       		.uleb128 0xd
 6591 03a3 B8000000 		.4byte	0xb8
 6592 03a7 B2030000 		.4byte	0x3b2
 6593 03ab 0E       		.uleb128 0xe
 6594 03ac A9000000 		.4byte	0xa9
 6595 03b0 0B       		.byte	0xb
 6596 03b1 00       		.byte	0
 6597 03b2 02       		.uleb128 0x2
 6598 03b3 2A090000 		.4byte	.LASF117
 6599 03b7 06       		.byte	0x6
 6600 03b8 99       		.byte	0x99
 6601 03b9 75030000 		.4byte	0x375
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 207


 6602 03bd 0F       		.uleb128 0xf
 6603 03be 1C01     		.2byte	0x11c
 6604 03c0 06       		.byte	0x6
 6605 03c1 A3       		.byte	0xa3
 6606 03c2 DF030000 		.4byte	0x3df
 6607 03c6 0C       		.uleb128 0xc
 6608 03c7 580F0000 		.4byte	.LASF118
 6609 03cb 06       		.byte	0x6
 6610 03cc A4       		.byte	0xa4
 6611 03cd 6A030000 		.4byte	0x36a
 6612 03d1 00       		.byte	0
 6613 03d2 0C       		.uleb128 0xc
 6614 03d3 2B000000 		.4byte	.LASF119
 6615 03d7 06       		.byte	0x6
 6616 03d8 A5       		.byte	0xa5
 6617 03d9 DF030000 		.4byte	0x3df
 6618 03dd 04       		.byte	0x4
 6619 03de 00       		.byte	0
 6620 03df 0D       		.uleb128 0xd
 6621 03e0 B2030000 		.4byte	0x3b2
 6622 03e4 EF030000 		.4byte	0x3ef
 6623 03e8 0E       		.uleb128 0xe
 6624 03e9 A9000000 		.4byte	0xa9
 6625 03ed 13       		.byte	0x13
 6626 03ee 00       		.byte	0
 6627 03ef 02       		.uleb128 0x2
 6628 03f0 E8020000 		.4byte	.LASF120
 6629 03f4 06       		.byte	0x6
 6630 03f5 A6       		.byte	0xa6
 6631 03f6 BD030000 		.4byte	0x3bd
 6632 03fa 10       		.uleb128 0x10
 6633 03fb 42090000 		.4byte	.LASF129
 6634 03ff 0210     		.2byte	0x1002
 6635 0401 07       		.byte	0x7
 6636 0402 0C       		.byte	0xc
 6637 0403 2E040000 		.4byte	0x42e
 6638 0407 0C       		.uleb128 0xc
 6639 0408 21170000 		.4byte	.LASF121
 6640 040c 07       		.byte	0x7
 6641 040d 0D       		.byte	0xd
 6642 040e 2E040000 		.4byte	0x42e
 6643 0412 00       		.byte	0
 6644 0413 11       		.uleb128 0x11
 6645 0414 040C0000 		.4byte	.LASF122
 6646 0418 07       		.byte	0x7
 6647 0419 0E       		.byte	0xe
 6648 041a CA000000 		.4byte	0xca
 6649 041e 0010     		.2byte	0x1000
 6650 0420 11       		.uleb128 0x11
 6651 0421 64010000 		.4byte	.LASF123
 6652 0425 07       		.byte	0x7
 6653 0426 0F       		.byte	0xf
 6654 0427 CA000000 		.4byte	0xca
 6655 042b 0110     		.2byte	0x1001
 6656 042d 00       		.byte	0
 6657 042e 0D       		.uleb128 0xd
 6658 042f CA000000 		.4byte	0xca
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 208


 6659 0433 3F040000 		.4byte	0x43f
 6660 0437 12       		.uleb128 0x12
 6661 0438 A9000000 		.4byte	0xa9
 6662 043c FF0F     		.2byte	0xfff
 6663 043e 00       		.byte	0
 6664 043f 02       		.uleb128 0x2
 6665 0440 F50B0000 		.4byte	.LASF124
 6666 0444 08       		.byte	0x8
 6667 0445 4D       		.byte	0x4d
 6668 0446 4A040000 		.4byte	0x44a
 6669 044a 06       		.uleb128 0x6
 6670 044b 04       		.byte	0x4
 6671 044c 50040000 		.4byte	0x450
 6672 0450 13       		.uleb128 0x13
 6673 0451 5B040000 		.4byte	0x45b
 6674 0455 14       		.uleb128 0x14
 6675 0456 B0000000 		.4byte	0xb0
 6676 045a 00       		.byte	0
 6677 045b 02       		.uleb128 0x2
 6678 045c C8150000 		.4byte	.LASF125
 6679 0460 02       		.byte	0x2
 6680 0461 61       		.byte	0x61
 6681 0462 EB000000 		.4byte	0xeb
 6682 0466 02       		.uleb128 0x2
 6683 0467 7D010000 		.4byte	.LASF126
 6684 046b 02       		.byte	0x2
 6685 046c 62       		.byte	0x62
 6686 046d 89000000 		.4byte	0x89
 6687 0471 02       		.uleb128 0x2
 6688 0472 B5100000 		.4byte	.LASF127
 6689 0476 02       		.byte	0x2
 6690 0477 63       		.byte	0x63
 6691 0478 9B000000 		.4byte	0x9b
 6692 047c 02       		.uleb128 0x2
 6693 047d 2F110000 		.4byte	.LASF128
 6694 0481 02       		.byte	0x2
 6695 0482 69       		.byte	0x69
 6696 0483 EB000000 		.4byte	0xeb
 6697 0487 06       		.uleb128 0x6
 6698 0488 04       		.byte	0x4
 6699 0489 CA000000 		.4byte	0xca
 6700 048d 15       		.uleb128 0x15
 6701 048e 630B0000 		.4byte	.LASF130
 6702 0492 14       		.byte	0x14
 6703 0493 09       		.byte	0x9
 6704 0494 B5       		.byte	0xb5
 6705 0495 D6040000 		.4byte	0x4d6
 6706 0499 0C       		.uleb128 0xc
 6707 049a 81170000 		.4byte	.LASF131
 6708 049e 09       		.byte	0x9
 6709 049f B8       		.byte	0xb8
 6710 04a0 7C040000 		.4byte	0x47c
 6711 04a4 00       		.byte	0
 6712 04a5 0C       		.uleb128 0xc
 6713 04a6 21020000 		.4byte	.LASF132
 6714 04aa 09       		.byte	0x9
 6715 04ab B9       		.byte	0xb9
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 209


 6716 04ac D6040000 		.4byte	0x4d6
 6717 04b0 04       		.byte	0x4
 6718 04b1 0C       		.uleb128 0xc
 6719 04b2 DE100000 		.4byte	.LASF133
 6720 04b6 09       		.byte	0x9
 6721 04b7 BA       		.byte	0xba
 6722 04b8 D6040000 		.4byte	0x4d6
 6723 04bc 08       		.byte	0x8
 6724 04bd 0C       		.uleb128 0xc
 6725 04be 1A0F0000 		.4byte	.LASF134
 6726 04c2 09       		.byte	0x9
 6727 04c3 BB       		.byte	0xbb
 6728 04c4 B0000000 		.4byte	0xb0
 6729 04c8 0C       		.byte	0xc
 6730 04c9 0C       		.uleb128 0xc
 6731 04ca EA0A0000 		.4byte	.LASF135
 6732 04ce 09       		.byte	0x9
 6733 04cf BC       		.byte	0xbc
 6734 04d0 B0000000 		.4byte	0xb0
 6735 04d4 10       		.byte	0x10
 6736 04d5 00       		.byte	0
 6737 04d6 06       		.uleb128 0x6
 6738 04d7 04       		.byte	0x4
 6739 04d8 8D040000 		.4byte	0x48d
 6740 04dc 02       		.uleb128 0x2
 6741 04dd 6A140000 		.4byte	.LASF136
 6742 04e1 09       		.byte	0x9
 6743 04e2 BF       		.byte	0xbf
 6744 04e3 8D040000 		.4byte	0x48d
 6745 04e7 15       		.uleb128 0x15
 6746 04e8 09060000 		.4byte	.LASF137
 6747 04ec 0C       		.byte	0xc
 6748 04ed 09       		.byte	0x9
 6749 04ee C1       		.byte	0xc1
 6750 04ef 18050000 		.4byte	0x518
 6751 04f3 0C       		.uleb128 0xc
 6752 04f4 81170000 		.4byte	.LASF131
 6753 04f8 09       		.byte	0x9
 6754 04f9 C4       		.byte	0xc4
 6755 04fa 7C040000 		.4byte	0x47c
 6756 04fe 00       		.byte	0
 6757 04ff 0C       		.uleb128 0xc
 6758 0500 21020000 		.4byte	.LASF132
 6759 0504 09       		.byte	0x9
 6760 0505 C5       		.byte	0xc5
 6761 0506 D6040000 		.4byte	0x4d6
 6762 050a 04       		.byte	0x4
 6763 050b 0C       		.uleb128 0xc
 6764 050c DE100000 		.4byte	.LASF133
 6765 0510 09       		.byte	0x9
 6766 0511 C6       		.byte	0xc6
 6767 0512 D6040000 		.4byte	0x4d6
 6768 0516 08       		.byte	0x8
 6769 0517 00       		.byte	0
 6770 0518 02       		.uleb128 0x2
 6771 0519 E4040000 		.4byte	.LASF138
 6772 051d 09       		.byte	0x9
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 210


 6773 051e C8       		.byte	0xc8
 6774 051f E7040000 		.4byte	0x4e7
 6775 0523 15       		.uleb128 0x15
 6776 0524 37030000 		.4byte	.LASF139
 6777 0528 14       		.byte	0x14
 6778 0529 09       		.byte	0x9
 6779 052a CD       		.byte	0xcd
 6780 052b 54050000 		.4byte	0x554
 6781 052f 0C       		.uleb128 0xc
 6782 0530 9B0C0000 		.4byte	.LASF140
 6783 0534 09       		.byte	0x9
 6784 0535 D0       		.byte	0xd0
 6785 0536 71040000 		.4byte	0x471
 6786 053a 00       		.byte	0
 6787 053b 0C       		.uleb128 0xc
 6788 053c BC050000 		.4byte	.LASF141
 6789 0540 09       		.byte	0x9
 6790 0541 D1       		.byte	0xd1
 6791 0542 54050000 		.4byte	0x554
 6792 0546 04       		.byte	0x4
 6793 0547 0C       		.uleb128 0xc
 6794 0548 170E0000 		.4byte	.LASF142
 6795 054c 09       		.byte	0x9
 6796 054d D2       		.byte	0xd2
 6797 054e 18050000 		.4byte	0x518
 6798 0552 08       		.byte	0x8
 6799 0553 00       		.byte	0
 6800 0554 06       		.uleb128 0x6
 6801 0555 04       		.byte	0x4
 6802 0556 DC040000 		.4byte	0x4dc
 6803 055a 02       		.uleb128 0x2
 6804 055b 330D0000 		.4byte	.LASF143
 6805 055f 09       		.byte	0x9
 6806 0560 D4       		.byte	0xd4
 6807 0561 23050000 		.4byte	0x523
 6808 0565 02       		.uleb128 0x2
 6809 0566 0F0D0000 		.4byte	.LASF144
 6810 056a 0A       		.byte	0xa
 6811 056b 67       		.byte	0x67
 6812 056c B0000000 		.4byte	0xb0
 6813 0570 09       		.uleb128 0x9
 6814 0571 01       		.byte	0x1
 6815 0572 5E000000 		.4byte	0x5e
 6816 0576 0A       		.byte	0xa
 6817 0577 71       		.byte	0x71
 6818 0578 A1050000 		.4byte	0x5a1
 6819 057c 0A       		.uleb128 0xa
 6820 057d EC0B0000 		.4byte	.LASF145
 6821 0581 00       		.byte	0
 6822 0582 0A       		.uleb128 0xa
 6823 0583 52060000 		.4byte	.LASF146
 6824 0587 01       		.byte	0x1
 6825 0588 0A       		.uleb128 0xa
 6826 0589 470E0000 		.4byte	.LASF147
 6827 058d 02       		.byte	0x2
 6828 058e 0A       		.uleb128 0xa
 6829 058f 2C040000 		.4byte	.LASF148
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 211


 6830 0593 03       		.byte	0x3
 6831 0594 0A       		.uleb128 0xa
 6832 0595 91010000 		.4byte	.LASF149
 6833 0599 04       		.byte	0x4
 6834 059a 0A       		.uleb128 0xa
 6835 059b 18120000 		.4byte	.LASF150
 6836 059f 05       		.byte	0x5
 6837 05a0 00       		.byte	0
 6838 05a1 02       		.uleb128 0x2
 6839 05a2 D6000000 		.4byte	.LASF151
 6840 05a6 0A       		.byte	0xa
 6841 05a7 78       		.byte	0x78
 6842 05a8 70050000 		.4byte	0x570
 6843 05ac 09       		.uleb128 0x9
 6844 05ad 01       		.byte	0x1
 6845 05ae 5E000000 		.4byte	0x5e
 6846 05b2 0A       		.byte	0xa
 6847 05b3 7C       		.byte	0x7c
 6848 05b4 D7050000 		.4byte	0x5d7
 6849 05b8 0A       		.uleb128 0xa
 6850 05b9 87160000 		.4byte	.LASF152
 6851 05bd 00       		.byte	0
 6852 05be 0A       		.uleb128 0xa
 6853 05bf 80030000 		.4byte	.LASF153
 6854 05c3 01       		.byte	0x1
 6855 05c4 0A       		.uleb128 0xa
 6856 05c5 DB0E0000 		.4byte	.LASF154
 6857 05c9 02       		.byte	0x2
 6858 05ca 0A       		.uleb128 0xa
 6859 05cb F30E0000 		.4byte	.LASF155
 6860 05cf 03       		.byte	0x3
 6861 05d0 0A       		.uleb128 0xa
 6862 05d1 24060000 		.4byte	.LASF156
 6863 05d5 04       		.byte	0x4
 6864 05d6 00       		.byte	0
 6865 05d7 02       		.uleb128 0x2
 6866 05d8 A5150000 		.4byte	.LASF157
 6867 05dc 0A       		.byte	0xa
 6868 05dd 82       		.byte	0x82
 6869 05de AC050000 		.4byte	0x5ac
 6870 05e2 15       		.uleb128 0x15
 6871 05e3 7E140000 		.4byte	.LASF158
 6872 05e7 08       		.byte	0x8
 6873 05e8 0A       		.byte	0xa
 6874 05e9 87       		.byte	0x87
 6875 05ea 07060000 		.4byte	0x607
 6876 05ee 0C       		.uleb128 0xc
 6877 05ef B3080000 		.4byte	.LASF159
 6878 05f3 0A       		.byte	0xa
 6879 05f4 89       		.byte	0x89
 6880 05f5 66040000 		.4byte	0x466
 6881 05f9 00       		.byte	0
 6882 05fa 0C       		.uleb128 0xc
 6883 05fb 4B050000 		.4byte	.LASF160
 6884 05ff 0A       		.byte	0xa
 6885 0600 8A       		.byte	0x8a
 6886 0601 7C040000 		.4byte	0x47c
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 212


 6887 0605 04       		.byte	0x4
 6888 0606 00       		.byte	0
 6889 0607 02       		.uleb128 0x2
 6890 0608 FF050000 		.4byte	.LASF161
 6891 060c 0A       		.byte	0xa
 6892 060d 8B       		.byte	0x8b
 6893 060e E2050000 		.4byte	0x5e2
 6894 0612 15       		.uleb128 0x15
 6895 0613 B9090000 		.4byte	.LASF162
 6896 0617 0C       		.byte	0xc
 6897 0618 0A       		.byte	0xa
 6898 0619 90       		.byte	0x90
 6899 061a 43060000 		.4byte	0x643
 6900 061e 0C       		.uleb128 0xc
 6901 061f 7D080000 		.4byte	.LASF163
 6902 0623 0A       		.byte	0xa
 6903 0624 92       		.byte	0x92
 6904 0625 B0000000 		.4byte	0xb0
 6905 0629 00       		.byte	0
 6906 062a 0C       		.uleb128 0xc
 6907 062b A50B0000 		.4byte	.LASF164
 6908 062f 0A       		.byte	0xa
 6909 0630 93       		.byte	0x93
 6910 0631 EB000000 		.4byte	0xeb
 6911 0635 04       		.byte	0x4
 6912 0636 0C       		.uleb128 0xc
 6913 0637 A8160000 		.4byte	.LASF165
 6914 063b 0A       		.byte	0xa
 6915 063c 94       		.byte	0x94
 6916 063d EB000000 		.4byte	0xeb
 6917 0641 08       		.byte	0x8
 6918 0642 00       		.byte	0
 6919 0643 02       		.uleb128 0x2
 6920 0644 B0000000 		.4byte	.LASF166
 6921 0648 0A       		.byte	0xa
 6922 0649 95       		.byte	0x95
 6923 064a 12060000 		.4byte	0x612
 6924 064e 07       		.uleb128 0x7
 6925 064f BF000000 		.4byte	0xbf
 6926 0653 06       		.uleb128 0x6
 6927 0654 04       		.byte	0x4
 6928 0655 5B040000 		.4byte	0x45b
 6929 0659 15       		.uleb128 0x15
 6930 065a 88090000 		.4byte	.LASF167
 6931 065e 24       		.byte	0x24
 6932 065f 0A       		.byte	0xa
 6933 0660 A7       		.byte	0xa7
 6934 0661 D2060000 		.4byte	0x6d2
 6935 0665 0C       		.uleb128 0xc
 6936 0666 AE010000 		.4byte	.LASF168
 6937 066a 0A       		.byte	0xa
 6938 066b A9       		.byte	0xa9
 6939 066c 65050000 		.4byte	0x565
 6940 0670 00       		.byte	0
 6941 0671 0C       		.uleb128 0xc
 6942 0672 370F0000 		.4byte	.LASF169
 6943 0676 0A       		.byte	0xa
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 213


 6944 0677 AA       		.byte	0xaa
 6945 0678 BF000000 		.4byte	0xbf
 6946 067c 04       		.byte	0x4
 6947 067d 0C       		.uleb128 0xc
 6948 067e CF0E0000 		.4byte	.LASF170
 6949 0682 0A       		.byte	0xa
 6950 0683 AB       		.byte	0xab
 6951 0684 71040000 		.4byte	0x471
 6952 0688 08       		.byte	0x8
 6953 0689 0C       		.uleb128 0xc
 6954 068a 4F120000 		.4byte	.LASF171
 6955 068e 0A       		.byte	0xa
 6956 068f AC       		.byte	0xac
 6957 0690 A1050000 		.4byte	0x5a1
 6958 0694 0C       		.byte	0xc
 6959 0695 0C       		.uleb128 0xc
 6960 0696 80020000 		.4byte	.LASF172
 6961 069a 0A       		.byte	0xa
 6962 069b AD       		.byte	0xad
 6963 069c 71040000 		.4byte	0x471
 6964 06a0 10       		.byte	0x10
 6965 06a1 0C       		.uleb128 0xc
 6966 06a2 6A020000 		.4byte	.LASF173
 6967 06a6 0A       		.byte	0xa
 6968 06a7 AE       		.byte	0xae
 6969 06a8 71040000 		.4byte	0x471
 6970 06ac 14       		.byte	0x14
 6971 06ad 0C       		.uleb128 0xc
 6972 06ae 91060000 		.4byte	.LASF174
 6973 06b2 0A       		.byte	0xa
 6974 06b3 AF       		.byte	0xaf
 6975 06b4 EB000000 		.4byte	0xeb
 6976 06b8 18       		.byte	0x18
 6977 06b9 0C       		.uleb128 0xc
 6978 06ba 2C100000 		.4byte	.LASF175
 6979 06be 0A       		.byte	0xa
 6980 06bf B0       		.byte	0xb0
 6981 06c0 53060000 		.4byte	0x653
 6982 06c4 1C       		.byte	0x1c
 6983 06c5 0C       		.uleb128 0xc
 6984 06c6 620E0000 		.4byte	.LASF176
 6985 06ca 0A       		.byte	0xa
 6986 06cb B1       		.byte	0xb1
 6987 06cc D5000000 		.4byte	0xd5
 6988 06d0 20       		.byte	0x20
 6989 06d1 00       		.byte	0
 6990 06d2 02       		.uleb128 0x2
 6991 06d3 E5010000 		.4byte	.LASF177
 6992 06d7 0A       		.byte	0xa
 6993 06d8 B2       		.byte	0xb2
 6994 06d9 59060000 		.4byte	0x659
 6995 06dd 16       		.uleb128 0x16
 6996 06de 650F0000 		.4byte	.LASF178
 6997 06e2 58       		.byte	0x58
 6998 06e3 01       		.byte	0x1
 6999 06e4 2501     		.2byte	0x125
 7000 06e6 87070000 		.4byte	0x787
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 214


 7001 06ea 17       		.uleb128 0x17
 7002 06eb C4050000 		.4byte	.LASF179
 7003 06ef 01       		.byte	0x1
 7004 06f0 2701     		.2byte	0x127
 7005 06f2 87070000 		.4byte	0x787
 7006 06f6 00       		.byte	0
 7007 06f7 17       		.uleb128 0x17
 7008 06f8 9B0F0000 		.4byte	.LASF180
 7009 06fc 01       		.byte	0x1
 7010 06fd 2D01     		.2byte	0x12d
 7011 06ff DC040000 		.4byte	0x4dc
 7012 0703 04       		.byte	0x4
 7013 0704 17       		.uleb128 0x17
 7014 0705 BF000000 		.4byte	.LASF181
 7015 0709 01       		.byte	0x1
 7016 070a 2E01     		.2byte	0x12e
 7017 070c DC040000 		.4byte	0x4dc
 7018 0710 18       		.byte	0x18
 7019 0711 17       		.uleb128 0x17
 7020 0712 92170000 		.4byte	.LASF182
 7021 0716 01       		.byte	0x1
 7022 0717 2F01     		.2byte	0x12f
 7023 0719 71040000 		.4byte	0x471
 7024 071d 2C       		.byte	0x2c
 7025 071e 17       		.uleb128 0x17
 7026 071f 9A010000 		.4byte	.LASF183
 7027 0723 01       		.byte	0x1
 7028 0724 3001     		.2byte	0x130
 7029 0726 53060000 		.4byte	0x653
 7030 072a 30       		.byte	0x30
 7031 072b 17       		.uleb128 0x17
 7032 072c 370F0000 		.4byte	.LASF169
 7033 0730 01       		.byte	0x1
 7034 0731 3101     		.2byte	0x131
 7035 0733 A2030000 		.4byte	0x3a2
 7036 0737 34       		.byte	0x34
 7037 0738 17       		.uleb128 0x17
 7038 0739 AC140000 		.4byte	.LASF184
 7039 073d 01       		.byte	0x1
 7040 073e 3C01     		.2byte	0x13c
 7041 0740 71040000 		.4byte	0x471
 7042 0744 40       		.byte	0x40
 7043 0745 17       		.uleb128 0x17
 7044 0746 36010000 		.4byte	.LASF185
 7045 074a 01       		.byte	0x1
 7046 074b 3D01     		.2byte	0x13d
 7047 074d 71040000 		.4byte	0x471
 7048 0751 44       		.byte	0x44
 7049 0752 17       		.uleb128 0x17
 7050 0753 6A020000 		.4byte	.LASF173
 7051 0757 01       		.byte	0x1
 7052 0758 4101     		.2byte	0x141
 7053 075a 71040000 		.4byte	0x471
 7054 075e 48       		.byte	0x48
 7055 075f 17       		.uleb128 0x17
 7056 0760 E50C0000 		.4byte	.LASF186
 7057 0764 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 215


 7058 0765 4201     		.2byte	0x142
 7059 0767 71040000 		.4byte	0x471
 7060 076b 4C       		.byte	0x4c
 7061 076c 17       		.uleb128 0x17
 7062 076d B6070000 		.4byte	.LASF187
 7063 0771 01       		.byte	0x1
 7064 0772 5D01     		.2byte	0x15d
 7065 0774 04010000 		.4byte	0x104
 7066 0778 50       		.byte	0x50
 7067 0779 17       		.uleb128 0x17
 7068 077a 7E110000 		.4byte	.LASF188
 7069 077e 01       		.byte	0x1
 7070 077f 5E01     		.2byte	0x15e
 7071 0781 09010000 		.4byte	0x109
 7072 0785 54       		.byte	0x54
 7073 0786 00       		.byte	0
 7074 0787 06       		.uleb128 0x6
 7075 0788 04       		.byte	0x4
 7076 0789 8D070000 		.4byte	0x78d
 7077 078d 08       		.uleb128 0x8
 7078 078e 5B040000 		.4byte	0x45b
 7079 0792 18       		.uleb128 0x18
 7080 0793 79020000 		.4byte	.LASF189
 7081 0797 01       		.byte	0x1
 7082 0798 6B01     		.2byte	0x16b
 7083 079a DD060000 		.4byte	0x6dd
 7084 079e 18       		.uleb128 0x18
 7085 079f B8140000 		.4byte	.LASF190
 7086 07a3 01       		.byte	0x1
 7087 07a4 6F01     		.2byte	0x16f
 7088 07a6 92070000 		.4byte	0x792
 7089 07aa 19       		.uleb128 0x19
 7090 07ab 09080000 		.4byte	.LASF195
 7091 07af 02       		.byte	0x2
 7092 07b0 F9       		.byte	0xf9
 7093 07b1 EB000000 		.4byte	0xeb
 7094 07b5 03       		.byte	0x3
 7095 07b6 D1070000 		.4byte	0x7d1
 7096 07ba 1A       		.uleb128 0x1a
 7097 07bb 6D0C0000 		.4byte	.LASF191
 7098 07bf 02       		.byte	0x2
 7099 07c0 FB       		.byte	0xfb
 7100 07c1 EB000000 		.4byte	0xeb
 7101 07c5 1A       		.uleb128 0x1a
 7102 07c6 770E0000 		.4byte	.LASF192
 7103 07ca 02       		.byte	0x2
 7104 07cb FB       		.byte	0xfb
 7105 07cc EB000000 		.4byte	0xeb
 7106 07d0 00       		.byte	0
 7107 07d1 1B       		.uleb128 0x1b
 7108 07d2 F3040000 		.4byte	.LASF193
 7109 07d6 02       		.byte	0x2
 7110 07d7 0D01     		.2byte	0x10d
 7111 07d9 03       		.byte	0x3
 7112 07da EB070000 		.4byte	0x7eb
 7113 07de 1C       		.uleb128 0x1c
 7114 07df 83040000 		.4byte	.LASF197
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 216


 7115 07e3 02       		.byte	0x2
 7116 07e4 0D01     		.2byte	0x10d
 7117 07e6 EB000000 		.4byte	0xeb
 7118 07ea 00       		.byte	0
 7119 07eb 1D       		.uleb128 0x1d
 7120 07ec FE130000 		.4byte	.LASF194
 7121 07f0 02       		.byte	0x2
 7122 07f1 E9       		.byte	0xe9
 7123 07f2 03       		.byte	0x3
 7124 07f3 03080000 		.4byte	0x803
 7125 07f7 1A       		.uleb128 0x1a
 7126 07f8 770E0000 		.4byte	.LASF192
 7127 07fc 02       		.byte	0x2
 7128 07fd EB       		.byte	0xeb
 7129 07fe EB000000 		.4byte	0xeb
 7130 0802 00       		.byte	0
 7131 0803 19       		.uleb128 0x19
 7132 0804 9E070000 		.4byte	.LASF196
 7133 0808 02       		.byte	0x2
 7134 0809 AC       		.byte	0xac
 7135 080a CA000000 		.4byte	0xca
 7136 080e 03       		.byte	0x3
 7137 080f 2A080000 		.4byte	0x82a
 7138 0813 1E       		.uleb128 0x1e
 7139 0814 F7150000 		.4byte	.LASF198
 7140 0818 02       		.byte	0x2
 7141 0819 AC       		.byte	0xac
 7142 081a EB000000 		.4byte	0xeb
 7143 081e 1A       		.uleb128 0x1a
 7144 081f 88010000 		.4byte	.LASF199
 7145 0823 02       		.byte	0x2
 7146 0824 AE       		.byte	0xae
 7147 0825 CA000000 		.4byte	0xca
 7148 0829 00       		.byte	0
 7149 082a 1F       		.uleb128 0x1f
 7150 082b 890D0000 		.4byte	.LASF223
 7151 082f 01       		.byte	0x1
 7152 0830 A402     		.2byte	0x2a4
 7153 0832 66040000 		.4byte	0x466
 7154 0836 00000000 		.4byte	.LFB68
 7155 083a 82000000 		.4byte	.LFE68-.LFB68
 7156 083e 01       		.uleb128 0x1
 7157 083f 9C       		.byte	0x9c
 7158 0840 D6080000 		.4byte	0x8d6
 7159 0844 20       		.uleb128 0x20
 7160 0845 43010000 		.4byte	.LASF200
 7161 0849 01       		.byte	0x1
 7162 084a A402     		.2byte	0x2a4
 7163 084c 3F040000 		.4byte	0x43f
 7164 0850 02       		.uleb128 0x2
 7165 0851 91       		.byte	0x91
 7166 0852 64       		.sleb128 -28
 7167 0853 20       		.uleb128 0x20
 7168 0854 E4030000 		.4byte	.LASF201
 7169 0858 01       		.byte	0x1
 7170 0859 A502     		.2byte	0x2a5
 7171 085b 4E060000 		.4byte	0x64e
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 217


 7172 085f 02       		.uleb128 0x2
 7173 0860 91       		.byte	0x91
 7174 0861 60       		.sleb128 -32
 7175 0862 20       		.uleb128 0x20
 7176 0863 60000000 		.4byte	.LASF202
 7177 0867 01       		.byte	0x1
 7178 0868 A602     		.2byte	0x2a6
 7179 086a D6080000 		.4byte	0x8d6
 7180 086e 02       		.uleb128 0x2
 7181 086f 91       		.byte	0x91
 7182 0870 5E       		.sleb128 -34
 7183 0871 20       		.uleb128 0x20
 7184 0872 14150000 		.4byte	.LASF203
 7185 0876 01       		.byte	0x1
 7186 0877 A702     		.2byte	0x2a7
 7187 0879 DB080000 		.4byte	0x8db
 7188 087d 02       		.uleb128 0x2
 7189 087e 91       		.byte	0x91
 7190 087f 58       		.sleb128 -40
 7191 0880 20       		.uleb128 0x20
 7192 0881 92170000 		.4byte	.LASF182
 7193 0885 01       		.byte	0x1
 7194 0886 A802     		.2byte	0x2a8
 7195 0888 71040000 		.4byte	0x471
 7196 088c 02       		.uleb128 0x2
 7197 088d 91       		.byte	0x91
 7198 088e 00       		.sleb128 0
 7199 088f 20       		.uleb128 0x20
 7200 0890 28080000 		.4byte	.LASF204
 7201 0894 01       		.byte	0x1
 7202 0895 A902     		.2byte	0x2a9
 7203 0897 E6080000 		.4byte	0x8e6
 7204 089b 02       		.uleb128 0x2
 7205 089c 91       		.byte	0x91
 7206 089d 04       		.sleb128 4
 7207 089e 21       		.uleb128 0x21
 7208 089f 2F020000 		.4byte	.LASF205
 7209 08a3 01       		.byte	0x1
 7210 08a4 AB02     		.2byte	0x2ab
 7211 08a6 EB080000 		.4byte	0x8eb
 7212 08aa 02       		.uleb128 0x2
 7213 08ab 91       		.byte	0x91
 7214 08ac 74       		.sleb128 -12
 7215 08ad 21       		.uleb128 0x21
 7216 08ae CD040000 		.4byte	.LASF206
 7217 08b2 01       		.byte	0x1
 7218 08b3 AC02     		.2byte	0x2ac
 7219 08b5 66040000 		.4byte	0x466
 7220 08b9 02       		.uleb128 0x2
 7221 08ba 91       		.byte	0x91
 7222 08bb 70       		.sleb128 -16
 7223 08bc 22       		.uleb128 0x22
 7224 08bd 10000000 		.4byte	.LBB27
 7225 08c1 34000000 		.4byte	.LBE27-.LBB27
 7226 08c5 21       		.uleb128 0x21
 7227 08c6 9A010000 		.4byte	.LASF183
 7228 08ca 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 218


 7229 08cb C902     		.2byte	0x2c9
 7230 08cd 53060000 		.4byte	0x653
 7231 08d1 02       		.uleb128 0x2
 7232 08d2 91       		.byte	0x91
 7233 08d3 6C       		.sleb128 -20
 7234 08d4 00       		.byte	0
 7235 08d5 00       		.byte	0
 7236 08d6 07       		.uleb128 0x7
 7237 08d7 D5000000 		.4byte	0xd5
 7238 08db 07       		.uleb128 0x7
 7239 08dc B0000000 		.4byte	0xb0
 7240 08e0 06       		.uleb128 0x6
 7241 08e1 04       		.byte	0x4
 7242 08e2 65050000 		.4byte	0x565
 7243 08e6 07       		.uleb128 0x7
 7244 08e7 E0080000 		.4byte	0x8e0
 7245 08eb 06       		.uleb128 0x6
 7246 08ec 04       		.byte	0x4
 7247 08ed 9E070000 		.4byte	0x79e
 7248 08f1 23       		.uleb128 0x23
 7249 08f2 1F050000 		.4byte	.LASF209
 7250 08f6 01       		.byte	0x1
 7251 08f7 FF02     		.2byte	0x2ff
 7252 08f9 00000000 		.4byte	.LFB69
 7253 08fd EE000000 		.4byte	.LFE69-.LFB69
 7254 0901 01       		.uleb128 0x1
 7255 0902 9C       		.byte	0x9c
 7256 0903 9C090000 		.4byte	0x99c
 7257 0907 20       		.uleb128 0x20
 7258 0908 43010000 		.4byte	.LASF200
 7259 090c 01       		.byte	0x1
 7260 090d FF02     		.2byte	0x2ff
 7261 090f 3F040000 		.4byte	0x43f
 7262 0913 02       		.uleb128 0x2
 7263 0914 91       		.byte	0x91
 7264 0915 6C       		.sleb128 -20
 7265 0916 20       		.uleb128 0x20
 7266 0917 E4030000 		.4byte	.LASF201
 7267 091b 01       		.byte	0x1
 7268 091c 0003     		.2byte	0x300
 7269 091e 4E060000 		.4byte	0x64e
 7270 0922 02       		.uleb128 0x2
 7271 0923 91       		.byte	0x91
 7272 0924 68       		.sleb128 -24
 7273 0925 20       		.uleb128 0x20
 7274 0926 EB090000 		.4byte	.LASF207
 7275 092a 01       		.byte	0x1
 7276 092b 0103     		.2byte	0x301
 7277 092d 9C090000 		.4byte	0x99c
 7278 0931 02       		.uleb128 0x2
 7279 0932 91       		.byte	0x91
 7280 0933 64       		.sleb128 -28
 7281 0934 20       		.uleb128 0x20
 7282 0935 14150000 		.4byte	.LASF203
 7283 0939 01       		.byte	0x1
 7284 093a 0203     		.2byte	0x302
 7285 093c DB080000 		.4byte	0x8db
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 219


 7286 0940 02       		.uleb128 0x2
 7287 0941 91       		.byte	0x91
 7288 0942 60       		.sleb128 -32
 7289 0943 20       		.uleb128 0x20
 7290 0944 92170000 		.4byte	.LASF182
 7291 0948 01       		.byte	0x1
 7292 0949 0303     		.2byte	0x303
 7293 094b 71040000 		.4byte	0x471
 7294 094f 02       		.uleb128 0x2
 7295 0950 91       		.byte	0x91
 7296 0951 00       		.sleb128 0
 7297 0952 20       		.uleb128 0x20
 7298 0953 28080000 		.4byte	.LASF204
 7299 0957 01       		.byte	0x1
 7300 0958 0403     		.2byte	0x304
 7301 095a E6080000 		.4byte	0x8e6
 7302 095e 02       		.uleb128 0x2
 7303 095f 91       		.byte	0x91
 7304 0960 04       		.sleb128 4
 7305 0961 20       		.uleb128 0x20
 7306 0962 2F020000 		.4byte	.LASF205
 7307 0966 01       		.byte	0x1
 7308 0967 0503     		.2byte	0x305
 7309 0969 EB080000 		.4byte	0x8eb
 7310 096d 02       		.uleb128 0x2
 7311 096e 91       		.byte	0x91
 7312 096f 08       		.sleb128 8
 7313 0970 20       		.uleb128 0x20
 7314 0971 9C150000 		.4byte	.LASF208
 7315 0975 01       		.byte	0x1
 7316 0976 0603     		.2byte	0x306
 7317 0978 AC090000 		.4byte	0x9ac
 7318 097c 02       		.uleb128 0x2
 7319 097d 91       		.byte	0x91
 7320 097e 0C       		.sleb128 12
 7321 097f 21       		.uleb128 0x21
 7322 0980 C4050000 		.4byte	.LASF179
 7323 0984 01       		.byte	0x1
 7324 0985 0803     		.2byte	0x308
 7325 0987 53060000 		.4byte	0x653
 7326 098b 02       		.uleb128 0x2
 7327 098c 91       		.byte	0x91
 7328 098d 70       		.sleb128 -16
 7329 098e 24       		.uleb128 0x24
 7330 098f 7800     		.ascii	"x\000"
 7331 0991 01       		.byte	0x1
 7332 0992 0903     		.2byte	0x309
 7333 0994 71040000 		.4byte	0x471
 7334 0998 02       		.uleb128 0x2
 7335 0999 91       		.byte	0x91
 7336 099a 74       		.sleb128 -12
 7337 099b 00       		.byte	0
 7338 099c 07       		.uleb128 0x7
 7339 099d EB000000 		.4byte	0xeb
 7340 09a1 06       		.uleb128 0x6
 7341 09a2 04       		.byte	0x4
 7342 09a3 A7090000 		.4byte	0x9a7
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 220


 7343 09a7 07       		.uleb128 0x7
 7344 09a8 43060000 		.4byte	0x643
 7345 09ac 07       		.uleb128 0x7
 7346 09ad A1090000 		.4byte	0x9a1
 7347 09b1 23       		.uleb128 0x23
 7348 09b2 A3030000 		.4byte	.LASF210
 7349 09b6 01       		.byte	0x1
 7350 09b7 C303     		.2byte	0x3c3
 7351 09b9 00000000 		.4byte	.LFB70
 7352 09bd 18010000 		.4byte	.LFE70-.LFB70
 7353 09c1 01       		.uleb128 0x1
 7354 09c2 9C       		.byte	0x9c
 7355 09c3 D7090000 		.4byte	0x9d7
 7356 09c7 20       		.uleb128 0x20
 7357 09c8 2F020000 		.4byte	.LASF205
 7358 09cc 01       		.byte	0x1
 7359 09cd C303     		.2byte	0x3c3
 7360 09cf EB080000 		.4byte	0x8eb
 7361 09d3 02       		.uleb128 0x2
 7362 09d4 91       		.byte	0x91
 7363 09d5 74       		.sleb128 -12
 7364 09d6 00       		.byte	0
 7365 09d7 25       		.uleb128 0x25
 7366 09d8 3E060000 		.4byte	.LASF213
 7367 09dc 01       		.byte	0x1
 7368 09dd 1804     		.2byte	0x418
 7369 09df 00000000 		.4byte	.LFB71
 7370 09e3 28010000 		.4byte	.LFE71-.LFB71
 7371 09e7 01       		.uleb128 0x1
 7372 09e8 9C       		.byte	0x9c
 7373 09e9 0C0A0000 		.4byte	0xa0c
 7374 09ed 20       		.uleb128 0x20
 7375 09ee 00160000 		.4byte	.LASF211
 7376 09f2 01       		.byte	0x1
 7377 09f3 1804     		.2byte	0x418
 7378 09f5 65050000 		.4byte	0x565
 7379 09f9 02       		.uleb128 0x2
 7380 09fa 91       		.byte	0x91
 7381 09fb 6C       		.sleb128 -20
 7382 09fc 21       		.uleb128 0x21
 7383 09fd 8C170000 		.4byte	.LASF212
 7384 0a01 01       		.byte	0x1
 7385 0a02 1A04     		.2byte	0x41a
 7386 0a04 EB080000 		.4byte	0x8eb
 7387 0a08 02       		.uleb128 0x2
 7388 0a09 91       		.byte	0x91
 7389 0a0a 74       		.sleb128 -12
 7390 0a0b 00       		.byte	0
 7391 0a0c 25       		.uleb128 0x25
 7392 0a0d E9100000 		.4byte	.LASF214
 7393 0a11 01       		.byte	0x1
 7394 0a12 7404     		.2byte	0x474
 7395 0a14 00000000 		.4byte	.LFB72
 7396 0a18 BC000000 		.4byte	.LFE72-.LFB72
 7397 0a1c 01       		.uleb128 0x1
 7398 0a1d 9C       		.byte	0x9c
 7399 0a1e 870A0000 		.4byte	0xa87
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 221


 7400 0a22 20       		.uleb128 0x20
 7401 0a23 A6110000 		.4byte	.LASF215
 7402 0a27 01       		.byte	0x1
 7403 0a28 7404     		.2byte	0x474
 7404 0a2a 8D0A0000 		.4byte	0xa8d
 7405 0a2e 02       		.uleb128 0x2
 7406 0a2f 91       		.byte	0x91
 7407 0a30 64       		.sleb128 -28
 7408 0a31 20       		.uleb128 0x20
 7409 0a32 790F0000 		.4byte	.LASF216
 7410 0a36 01       		.byte	0x1
 7411 0a37 7404     		.2byte	0x474
 7412 0a39 920A0000 		.4byte	0xa92
 7413 0a3d 02       		.uleb128 0x2
 7414 0a3e 91       		.byte	0x91
 7415 0a3f 60       		.sleb128 -32
 7416 0a40 21       		.uleb128 0x21
 7417 0a41 090C0000 		.4byte	.LASF217
 7418 0a45 01       		.byte	0x1
 7419 0a46 7604     		.2byte	0x476
 7420 0a48 7C040000 		.4byte	0x47c
 7421 0a4c 02       		.uleb128 0x2
 7422 0a4d 91       		.byte	0x91
 7423 0a4e 6C       		.sleb128 -20
 7424 0a4f 21       		.uleb128 0x21
 7425 0a50 08120000 		.4byte	.LASF218
 7426 0a54 01       		.byte	0x1
 7427 0a55 7704     		.2byte	0x477
 7428 0a57 66040000 		.4byte	0x466
 7429 0a5b 02       		.uleb128 0x2
 7430 0a5c 91       		.byte	0x91
 7431 0a5d 68       		.sleb128 -24
 7432 0a5e 21       		.uleb128 0x21
 7433 0a5f 840E0000 		.4byte	.LASF219
 7434 0a63 01       		.byte	0x1
 7435 0a64 7704     		.2byte	0x477
 7436 0a66 66040000 		.4byte	0x466
 7437 0a6a 02       		.uleb128 0x2
 7438 0a6b 91       		.byte	0x91
 7439 0a6c 74       		.sleb128 -12
 7440 0a6d 22       		.uleb128 0x22
 7441 0a6e 12000000 		.4byte	.LBB28
 7442 0a72 7A000000 		.4byte	.LBE28-.LBB28
 7443 0a76 21       		.uleb128 0x21
 7444 0a77 200E0000 		.4byte	.LASF220
 7445 0a7b 01       		.byte	0x1
 7446 0a7c 8104     		.2byte	0x481
 7447 0a7e 920A0000 		.4byte	0xa92
 7448 0a82 02       		.uleb128 0x2
 7449 0a83 91       		.byte	0x91
 7450 0a84 70       		.sleb128 -16
 7451 0a85 00       		.byte	0
 7452 0a86 00       		.byte	0
 7453 0a87 06       		.uleb128 0x6
 7454 0a88 04       		.byte	0x4
 7455 0a89 7C040000 		.4byte	0x47c
 7456 0a8d 07       		.uleb128 0x7
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 222


 7457 0a8e 870A0000 		.4byte	0xa87
 7458 0a92 07       		.uleb128 0x7
 7459 0a93 7C040000 		.4byte	0x47c
 7460 0a97 25       		.uleb128 0x25
 7461 0a98 900F0000 		.4byte	.LASF221
 7462 0a9c 01       		.byte	0x1
 7463 0a9d C804     		.2byte	0x4c8
 7464 0a9f 00000000 		.4byte	.LFB73
 7465 0aa3 64000000 		.4byte	.LFE73-.LFB73
 7466 0aa7 01       		.uleb128 0x1
 7467 0aa8 9C       		.byte	0x9c
 7468 0aa9 CC0A0000 		.4byte	0xacc
 7469 0aad 20       		.uleb128 0x20
 7470 0aae A2000000 		.4byte	.LASF222
 7471 0ab2 01       		.byte	0x1
 7472 0ab3 C804     		.2byte	0x4c8
 7473 0ab5 920A0000 		.4byte	0xa92
 7474 0ab9 02       		.uleb128 0x2
 7475 0aba 91       		.byte	0x91
 7476 0abb 6C       		.sleb128 -20
 7477 0abc 21       		.uleb128 0x21
 7478 0abd 08120000 		.4byte	.LASF218
 7479 0ac1 01       		.byte	0x1
 7480 0ac2 CA04     		.2byte	0x4ca
 7481 0ac4 66040000 		.4byte	0x466
 7482 0ac8 02       		.uleb128 0x2
 7483 0ac9 91       		.byte	0x91
 7484 0aca 74       		.sleb128 -12
 7485 0acb 00       		.byte	0
 7486 0acc 1F       		.uleb128 0x1f
 7487 0acd 70110000 		.4byte	.LASF224
 7488 0ad1 01       		.byte	0x1
 7489 0ad2 F504     		.2byte	0x4f5
 7490 0ad4 A1050000 		.4byte	0x5a1
 7491 0ad8 00000000 		.4byte	.LFB74
 7492 0adc 98000000 		.4byte	.LFE74-.LFB74
 7493 0ae0 01       		.uleb128 0x1
 7494 0ae1 9C       		.byte	0x9c
 7495 0ae2 230B0000 		.4byte	0xb23
 7496 0ae6 20       		.uleb128 0x20
 7497 0ae7 01020000 		.4byte	.LASF225
 7498 0aeb 01       		.byte	0x1
 7499 0aec F504     		.2byte	0x4f5
 7500 0aee 65050000 		.4byte	0x565
 7501 0af2 02       		.uleb128 0x2
 7502 0af3 91       		.byte	0x91
 7503 0af4 64       		.sleb128 -28
 7504 0af5 21       		.uleb128 0x21
 7505 0af6 D1160000 		.4byte	.LASF226
 7506 0afa 01       		.byte	0x1
 7507 0afb F704     		.2byte	0x4f7
 7508 0afd A1050000 		.4byte	0x5a1
 7509 0b01 02       		.uleb128 0x2
 7510 0b02 91       		.byte	0x91
 7511 0b03 77       		.sleb128 -9
 7512 0b04 21       		.uleb128 0x21
 7513 0b05 6A080000 		.4byte	.LASF227
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 223


 7514 0b09 01       		.byte	0x1
 7515 0b0a F804     		.2byte	0x4f8
 7516 0b0c 230B0000 		.4byte	0xb23
 7517 0b10 02       		.uleb128 0x2
 7518 0b11 91       		.byte	0x91
 7519 0b12 6C       		.sleb128 -20
 7520 0b13 21       		.uleb128 0x21
 7521 0b14 8C170000 		.4byte	.LASF212
 7522 0b18 01       		.byte	0x1
 7523 0b19 F904     		.2byte	0x4f9
 7524 0b1b 340B0000 		.4byte	0xb34
 7525 0b1f 02       		.uleb128 0x2
 7526 0b20 91       		.byte	0x91
 7527 0b21 70       		.sleb128 -16
 7528 0b22 00       		.byte	0
 7529 0b23 06       		.uleb128 0x6
 7530 0b24 04       		.byte	0x4
 7531 0b25 5A050000 		.4byte	0x55a
 7532 0b29 06       		.uleb128 0x6
 7533 0b2a 04       		.byte	0x4
 7534 0b2b 2F0B0000 		.4byte	0xb2f
 7535 0b2f 07       		.uleb128 0x7
 7536 0b30 9E070000 		.4byte	0x79e
 7537 0b34 07       		.uleb128 0x7
 7538 0b35 290B0000 		.4byte	0xb29
 7539 0b39 1F       		.uleb128 0x1f
 7540 0b3a 500E0000 		.4byte	.LASF228
 7541 0b3e 01       		.byte	0x1
 7542 0b3f 3C05     		.2byte	0x53c
 7543 0b41 71040000 		.4byte	0x471
 7544 0b45 00000000 		.4byte	.LFB75
 7545 0b49 34000000 		.4byte	.LFE75-.LFB75
 7546 0b4d 01       		.uleb128 0x1
 7547 0b4e 9C       		.byte	0x9c
 7548 0b4f 810B0000 		.4byte	0xb81
 7549 0b53 20       		.uleb128 0x20
 7550 0b54 01020000 		.4byte	.LASF225
 7551 0b58 01       		.byte	0x1
 7552 0b59 3C05     		.2byte	0x53c
 7553 0b5b 65050000 		.4byte	0x565
 7554 0b5f 02       		.uleb128 0x2
 7555 0b60 91       		.byte	0x91
 7556 0b61 6C       		.sleb128 -20
 7557 0b62 21       		.uleb128 0x21
 7558 0b63 8C170000 		.4byte	.LASF212
 7559 0b67 01       		.byte	0x1
 7560 0b68 3E05     		.2byte	0x53e
 7561 0b6a EB080000 		.4byte	0x8eb
 7562 0b6e 02       		.uleb128 0x2
 7563 0b6f 91       		.byte	0x91
 7564 0b70 74       		.sleb128 -12
 7565 0b71 21       		.uleb128 0x21
 7566 0b72 18020000 		.4byte	.LASF229
 7567 0b76 01       		.byte	0x1
 7568 0b77 3F05     		.2byte	0x53f
 7569 0b79 71040000 		.4byte	0x471
 7570 0b7d 02       		.uleb128 0x2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 224


 7571 0b7e 91       		.byte	0x91
 7572 0b7f 70       		.sleb128 -16
 7573 0b80 00       		.byte	0
 7574 0b81 26       		.uleb128 0x26
 7575 0b82 6C150000 		.4byte	.LASF230
 7576 0b86 01       		.byte	0x1
 7577 0b87 5205     		.2byte	0x552
 7578 0b89 71040000 		.4byte	0x471
 7579 0b8d 00000000 		.4byte	.LFB76
 7580 0b91 54000000 		.4byte	.LFE76-.LFB76
 7581 0b95 01       		.uleb128 0x1
 7582 0b96 9C       		.byte	0x9c
 7583 0b97 200C0000 		.4byte	0xc20
 7584 0b9b 20       		.uleb128 0x20
 7585 0b9c 01020000 		.4byte	.LASF225
 7586 0ba0 01       		.byte	0x1
 7587 0ba1 5205     		.2byte	0x552
 7588 0ba3 65050000 		.4byte	0x565
 7589 0ba7 02       		.uleb128 0x2
 7590 0ba8 91       		.byte	0x91
 7591 0ba9 5C       		.sleb128 -36
 7592 0baa 21       		.uleb128 0x21
 7593 0bab 8C170000 		.4byte	.LASF212
 7594 0baf 01       		.byte	0x1
 7595 0bb0 5405     		.2byte	0x554
 7596 0bb2 EB080000 		.4byte	0x8eb
 7597 0bb6 02       		.uleb128 0x2
 7598 0bb7 91       		.byte	0x91
 7599 0bb8 6C       		.sleb128 -20
 7600 0bb9 21       		.uleb128 0x21
 7601 0bba 18020000 		.4byte	.LASF229
 7602 0bbe 01       		.byte	0x1
 7603 0bbf 5505     		.2byte	0x555
 7604 0bc1 71040000 		.4byte	0x471
 7605 0bc5 02       		.uleb128 0x2
 7606 0bc6 91       		.byte	0x91
 7607 0bc7 68       		.sleb128 -24
 7608 0bc8 21       		.uleb128 0x21
 7609 0bc9 4E010000 		.4byte	.LASF231
 7610 0bcd 01       		.byte	0x1
 7611 0bce 5505     		.2byte	0x555
 7612 0bd0 71040000 		.4byte	0x471
 7613 0bd4 02       		.uleb128 0x2
 7614 0bd5 91       		.byte	0x91
 7615 0bd6 70       		.sleb128 -16
 7616 0bd7 27       		.uleb128 0x27
 7617 0bd8 AA070000 		.4byte	0x7aa
 7618 0bdc 08000000 		.4byte	.LBB29
 7619 0be0 1A000000 		.4byte	.LBE29-.LBB29
 7620 0be4 01       		.byte	0x1
 7621 0be5 6905     		.2byte	0x569
 7622 0be7 060C0000 		.4byte	0xc06
 7623 0beb 22       		.uleb128 0x22
 7624 0bec 08000000 		.4byte	.LBB30
 7625 0bf0 1A000000 		.4byte	.LBE30-.LBB30
 7626 0bf4 28       		.uleb128 0x28
 7627 0bf5 BA070000 		.4byte	0x7ba
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 225


 7628 0bf9 02       		.uleb128 0x2
 7629 0bfa 91       		.byte	0x91
 7630 0bfb 64       		.sleb128 -28
 7631 0bfc 28       		.uleb128 0x28
 7632 0bfd C5070000 		.4byte	0x7c5
 7633 0c01 02       		.uleb128 0x2
 7634 0c02 91       		.byte	0x91
 7635 0c03 60       		.sleb128 -32
 7636 0c04 00       		.byte	0
 7637 0c05 00       		.byte	0
 7638 0c06 29       		.uleb128 0x29
 7639 0c07 D1070000 		.4byte	0x7d1
 7640 0c0b 3E000000 		.4byte	.LBB31
 7641 0c0f 06000000 		.4byte	.LBE31-.LBB31
 7642 0c13 01       		.byte	0x1
 7643 0c14 7005     		.2byte	0x570
 7644 0c16 2A       		.uleb128 0x2a
 7645 0c17 DE070000 		.4byte	0x7de
 7646 0c1b 02       		.uleb128 0x2
 7647 0c1c 91       		.byte	0x91
 7648 0c1d 74       		.sleb128 -12
 7649 0c1e 00       		.byte	0
 7650 0c1f 00       		.byte	0
 7651 0c20 25       		.uleb128 0x25
 7652 0c21 A2080000 		.4byte	.LASF232
 7653 0c25 01       		.byte	0x1
 7654 0c26 7A05     		.2byte	0x57a
 7655 0c28 00000000 		.4byte	.LFB77
 7656 0c2c 70010000 		.4byte	.LFE77-.LFB77
 7657 0c30 01       		.uleb128 0x1
 7658 0c31 9C       		.byte	0x9c
 7659 0c32 910C0000 		.4byte	0xc91
 7660 0c36 20       		.uleb128 0x20
 7661 0c37 01020000 		.4byte	.LASF225
 7662 0c3b 01       		.byte	0x1
 7663 0c3c 7A05     		.2byte	0x57a
 7664 0c3e 65050000 		.4byte	0x565
 7665 0c42 02       		.uleb128 0x2
 7666 0c43 91       		.byte	0x91
 7667 0c44 64       		.sleb128 -28
 7668 0c45 20       		.uleb128 0x20
 7669 0c46 B0130000 		.4byte	.LASF233
 7670 0c4a 01       		.byte	0x1
 7671 0c4b 7A05     		.2byte	0x57a
 7672 0c4d 71040000 		.4byte	0x471
 7673 0c51 02       		.uleb128 0x2
 7674 0c52 91       		.byte	0x91
 7675 0c53 60       		.sleb128 -32
 7676 0c54 21       		.uleb128 0x21
 7677 0c55 8C170000 		.4byte	.LASF212
 7678 0c59 01       		.byte	0x1
 7679 0c5a 7C05     		.2byte	0x57c
 7680 0c5c EB080000 		.4byte	0x8eb
 7681 0c60 02       		.uleb128 0x2
 7682 0c61 91       		.byte	0x91
 7683 0c62 70       		.sleb128 -16
 7684 0c63 21       		.uleb128 0x21
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 226


 7685 0c64 D2020000 		.4byte	.LASF234
 7686 0c68 01       		.byte	0x1
 7687 0c69 7D05     		.2byte	0x57d
 7688 0c6b 71040000 		.4byte	0x471
 7689 0c6f 02       		.uleb128 0x2
 7690 0c70 91       		.byte	0x91
 7691 0c71 6C       		.sleb128 -20
 7692 0c72 21       		.uleb128 0x21
 7693 0c73 A3090000 		.4byte	.LASF235
 7694 0c77 01       		.byte	0x1
 7695 0c78 7D05     		.2byte	0x57d
 7696 0c7a 71040000 		.4byte	0x471
 7697 0c7e 02       		.uleb128 0x2
 7698 0c7f 91       		.byte	0x91
 7699 0c80 68       		.sleb128 -24
 7700 0c81 21       		.uleb128 0x21
 7701 0c82 8C0C0000 		.4byte	.LASF236
 7702 0c86 01       		.byte	0x1
 7703 0c87 7E05     		.2byte	0x57e
 7704 0c89 66040000 		.4byte	0x466
 7705 0c8d 02       		.uleb128 0x2
 7706 0c8e 91       		.byte	0x91
 7707 0c8f 74       		.sleb128 -12
 7708 0c90 00       		.byte	0
 7709 0c91 25       		.uleb128 0x25
 7710 0c92 E60E0000 		.4byte	.LASF237
 7711 0c96 01       		.byte	0x1
 7712 0c97 1E06     		.2byte	0x61e
 7713 0c99 00000000 		.4byte	.LFB78
 7714 0c9d FC000000 		.4byte	.LFE78-.LFB78
 7715 0ca1 01       		.uleb128 0x1
 7716 0ca2 9C       		.byte	0x9c
 7717 0ca3 C60C0000 		.4byte	0xcc6
 7718 0ca7 20       		.uleb128 0x20
 7719 0ca8 F2010000 		.4byte	.LASF238
 7720 0cac 01       		.byte	0x1
 7721 0cad 1E06     		.2byte	0x61e
 7722 0caf 65050000 		.4byte	0x565
 7723 0cb3 02       		.uleb128 0x2
 7724 0cb4 91       		.byte	0x91
 7725 0cb5 6C       		.sleb128 -20
 7726 0cb6 21       		.uleb128 0x21
 7727 0cb7 8C170000 		.4byte	.LASF212
 7728 0cbb 01       		.byte	0x1
 7729 0cbc 2006     		.2byte	0x620
 7730 0cbe EB080000 		.4byte	0x8eb
 7731 0cc2 02       		.uleb128 0x2
 7732 0cc3 91       		.byte	0x91
 7733 0cc4 74       		.sleb128 -12
 7734 0cc5 00       		.byte	0
 7735 0cc6 2B       		.uleb128 0x2b
 7736 0cc7 E3050000 		.4byte	.LASF291
 7737 0ccb 01       		.byte	0x1
 7738 0ccc 7806     		.2byte	0x678
 7739 0cce 66040000 		.4byte	0x466
 7740 0cd2 00000000 		.4byte	.LFB79
 7741 0cd6 58000000 		.4byte	.LFE79-.LFB79
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 227


 7742 0cda 01       		.uleb128 0x1
 7743 0cdb 9C       		.byte	0x9c
 7744 0cdc 0E0D0000 		.4byte	0xd0e
 7745 0ce0 20       		.uleb128 0x20
 7746 0ce1 01020000 		.4byte	.LASF225
 7747 0ce5 01       		.byte	0x1
 7748 0ce6 7806     		.2byte	0x678
 7749 0ce8 0E0D0000 		.4byte	0xd0e
 7750 0cec 02       		.uleb128 0x2
 7751 0ced 91       		.byte	0x91
 7752 0cee 6C       		.sleb128 -20
 7753 0cef 21       		.uleb128 0x21
 7754 0cf0 CD040000 		.4byte	.LASF206
 7755 0cf4 01       		.byte	0x1
 7756 0cf5 7A06     		.2byte	0x67a
 7757 0cf7 66040000 		.4byte	0x466
 7758 0cfb 02       		.uleb128 0x2
 7759 0cfc 91       		.byte	0x91
 7760 0cfd 74       		.sleb128 -12
 7761 0cfe 21       		.uleb128 0x21
 7762 0cff 8C170000 		.4byte	.LASF212
 7763 0d03 01       		.byte	0x1
 7764 0d04 7B06     		.2byte	0x67b
 7765 0d06 340B0000 		.4byte	0xb34
 7766 0d0a 02       		.uleb128 0x2
 7767 0d0b 91       		.byte	0x91
 7768 0d0c 70       		.sleb128 -16
 7769 0d0d 00       		.byte	0
 7770 0d0e 07       		.uleb128 0x7
 7771 0d0f 65050000 		.4byte	0x565
 7772 0d13 25       		.uleb128 0x25
 7773 0d14 A2010000 		.4byte	.LASF239
 7774 0d18 01       		.byte	0x1
 7775 0d19 A606     		.2byte	0x6a6
 7776 0d1b 00000000 		.4byte	.LFB80
 7777 0d1f C8000000 		.4byte	.LFE80-.LFB80
 7778 0d23 01       		.uleb128 0x1
 7779 0d24 9C       		.byte	0x9c
 7780 0d25 480D0000 		.4byte	0xd48
 7781 0d29 20       		.uleb128 0x20
 7782 0d2a 54080000 		.4byte	.LASF240
 7783 0d2e 01       		.byte	0x1
 7784 0d2f A606     		.2byte	0x6a6
 7785 0d31 65050000 		.4byte	0x565
 7786 0d35 02       		.uleb128 0x2
 7787 0d36 91       		.byte	0x91
 7788 0d37 6C       		.sleb128 -20
 7789 0d38 21       		.uleb128 0x21
 7790 0d39 8C170000 		.4byte	.LASF212
 7791 0d3d 01       		.byte	0x1
 7792 0d3e A806     		.2byte	0x6a8
 7793 0d40 480D0000 		.4byte	0xd48
 7794 0d44 02       		.uleb128 0x2
 7795 0d45 91       		.byte	0x91
 7796 0d46 74       		.sleb128 -12
 7797 0d47 00       		.byte	0
 7798 0d48 07       		.uleb128 0x7
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 228


 7799 0d49 EB080000 		.4byte	0x8eb
 7800 0d4d 1F       		.uleb128 0x1f
 7801 0d4e D4060000 		.4byte	.LASF241
 7802 0d52 01       		.byte	0x1
 7803 0d53 DC06     		.2byte	0x6dc
 7804 0d55 66040000 		.4byte	0x466
 7805 0d59 00000000 		.4byte	.LFB81
 7806 0d5d EC000000 		.4byte	.LFE81-.LFB81
 7807 0d61 01       		.uleb128 0x1
 7808 0d62 9C       		.byte	0x9c
 7809 0d63 EC0D0000 		.4byte	0xdec
 7810 0d67 20       		.uleb128 0x20
 7811 0d68 54080000 		.4byte	.LASF240
 7812 0d6c 01       		.byte	0x1
 7813 0d6d DC06     		.2byte	0x6dc
 7814 0d6f 65050000 		.4byte	0x565
 7815 0d73 02       		.uleb128 0x2
 7816 0d74 91       		.byte	0x91
 7817 0d75 5C       		.sleb128 -36
 7818 0d76 21       		.uleb128 0x21
 7819 0d77 8C0C0000 		.4byte	.LASF236
 7820 0d7b 01       		.byte	0x1
 7821 0d7c DE06     		.2byte	0x6de
 7822 0d7e 66040000 		.4byte	0x466
 7823 0d82 02       		.uleb128 0x2
 7824 0d83 91       		.byte	0x91
 7825 0d84 74       		.sleb128 -12
 7826 0d85 21       		.uleb128 0x21
 7827 0d86 8C170000 		.4byte	.LASF212
 7828 0d8a 01       		.byte	0x1
 7829 0d8b DF06     		.2byte	0x6df
 7830 0d8d 480D0000 		.4byte	0xd48
 7831 0d91 02       		.uleb128 0x2
 7832 0d92 91       		.byte	0x91
 7833 0d93 70       		.sleb128 -16
 7834 0d94 21       		.uleb128 0x21
 7835 0d95 010B0000 		.4byte	.LASF242
 7836 0d99 01       		.byte	0x1
 7837 0d9a E006     		.2byte	0x6e0
 7838 0d9c 71040000 		.4byte	0x471
 7839 0da0 02       		.uleb128 0x2
 7840 0da1 91       		.byte	0x91
 7841 0da2 68       		.sleb128 -24
 7842 0da3 27       		.uleb128 0x27
 7843 0da4 AA070000 		.4byte	0x7aa
 7844 0da8 10000000 		.4byte	.LBB33
 7845 0dac 1A000000 		.4byte	.LBE33-.LBB33
 7846 0db0 01       		.byte	0x1
 7847 0db1 F606     		.2byte	0x6f6
 7848 0db3 D20D0000 		.4byte	0xdd2
 7849 0db7 22       		.uleb128 0x22
 7850 0db8 10000000 		.4byte	.LBB34
 7851 0dbc 1A000000 		.4byte	.LBE34-.LBB34
 7852 0dc0 28       		.uleb128 0x28
 7853 0dc1 BA070000 		.4byte	0x7ba
 7854 0dc5 02       		.uleb128 0x2
 7855 0dc6 91       		.byte	0x91
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 229


 7856 0dc7 64       		.sleb128 -28
 7857 0dc8 28       		.uleb128 0x28
 7858 0dc9 C5070000 		.4byte	0x7c5
 7859 0dcd 02       		.uleb128 0x2
 7860 0dce 91       		.byte	0x91
 7861 0dcf 60       		.sleb128 -32
 7862 0dd0 00       		.byte	0
 7863 0dd1 00       		.byte	0
 7864 0dd2 29       		.uleb128 0x29
 7865 0dd3 D1070000 		.4byte	0x7d1
 7866 0dd7 C6000000 		.4byte	.LBB35
 7867 0ddb 06000000 		.4byte	.LBE35-.LBB35
 7868 0ddf 01       		.byte	0x1
 7869 0de0 1A07     		.2byte	0x71a
 7870 0de2 2A       		.uleb128 0x2a
 7871 0de3 DE070000 		.4byte	0x7de
 7872 0de7 02       		.uleb128 0x2
 7873 0de8 91       		.byte	0x91
 7874 0de9 6C       		.sleb128 -20
 7875 0dea 00       		.byte	0
 7876 0deb 00       		.byte	0
 7877 0dec 25       		.uleb128 0x25
 7878 0ded 6C030000 		.4byte	.LASF243
 7879 0df1 01       		.byte	0x1
 7880 0df2 2207     		.2byte	0x722
 7881 0df4 00000000 		.4byte	.LFB82
 7882 0df8 6C000000 		.4byte	.LFE82-.LFB82
 7883 0dfc 01       		.uleb128 0x1
 7884 0dfd 9C       		.byte	0x9c
 7885 0dfe 350E0000 		.4byte	0xe35
 7886 0e02 21       		.uleb128 0x21
 7887 0e03 CD040000 		.4byte	.LASF206
 7888 0e07 01       		.byte	0x1
 7889 0e08 2407     		.2byte	0x724
 7890 0e0a 66040000 		.4byte	0x466
 7891 0e0e 02       		.uleb128 0x2
 7892 0e0f 91       		.byte	0x91
 7893 0e10 74       		.sleb128 -12
 7894 0e11 29       		.uleb128 0x29
 7895 0e12 EB070000 		.4byte	0x7eb
 7896 0e16 22000000 		.4byte	.LBB37
 7897 0e1a 12000000 		.4byte	.LBE37-.LBB37
 7898 0e1e 01       		.byte	0x1
 7899 0e1f 6007     		.2byte	0x760
 7900 0e21 22       		.uleb128 0x22
 7901 0e22 22000000 		.4byte	.LBB38
 7902 0e26 12000000 		.4byte	.LBE38-.LBB38
 7903 0e2a 28       		.uleb128 0x28
 7904 0e2b F7070000 		.4byte	0x7f7
 7905 0e2f 02       		.uleb128 0x2
 7906 0e30 91       		.byte	0x91
 7907 0e31 70       		.sleb128 -16
 7908 0e32 00       		.byte	0
 7909 0e33 00       		.byte	0
 7910 0e34 00       		.byte	0
 7911 0e35 25       		.uleb128 0x25
 7912 0e36 12110000 		.4byte	.LASF244
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 230


 7913 0e3a 01       		.byte	0x1
 7914 0e3b 8D07     		.2byte	0x78d
 7915 0e3d 00000000 		.4byte	.LFB83
 7916 0e41 30000000 		.4byte	.LFE83-.LFB83
 7917 0e45 01       		.uleb128 0x1
 7918 0e46 9C       		.byte	0x9c
 7919 0e47 6F0E0000 		.4byte	0xe6f
 7920 0e4b 29       		.uleb128 0x29
 7921 0e4c EB070000 		.4byte	0x7eb
 7922 0e50 06000000 		.4byte	.LBB39
 7923 0e54 12000000 		.4byte	.LBE39-.LBB39
 7924 0e58 01       		.byte	0x1
 7925 0e59 9207     		.2byte	0x792
 7926 0e5b 22       		.uleb128 0x22
 7927 0e5c 06000000 		.4byte	.LBB40
 7928 0e60 12000000 		.4byte	.LBE40-.LBB40
 7929 0e64 28       		.uleb128 0x28
 7930 0e65 F7070000 		.4byte	0x7f7
 7931 0e69 02       		.uleb128 0x2
 7932 0e6a 91       		.byte	0x91
 7933 0e6b 74       		.sleb128 -12
 7934 0e6c 00       		.byte	0
 7935 0e6d 00       		.byte	0
 7936 0e6e 00       		.byte	0
 7937 0e6f 2C       		.uleb128 0x2c
 7938 0e70 AB0C0000 		.4byte	.LASF278
 7939 0e74 01       		.byte	0x1
 7940 0e75 9807     		.2byte	0x798
 7941 0e77 00000000 		.4byte	.LFB84
 7942 0e7b 1C000000 		.4byte	.LFE84-.LFB84
 7943 0e7f 01       		.uleb128 0x1
 7944 0e80 9C       		.byte	0x9c
 7945 0e81 1F       		.uleb128 0x1f
 7946 0e82 5B0D0000 		.4byte	.LASF245
 7947 0e86 01       		.byte	0x1
 7948 0e87 E107     		.2byte	0x7e1
 7949 0e89 66040000 		.4byte	0x466
 7950 0e8d 00000000 		.4byte	.LFB85
 7951 0e91 38010000 		.4byte	.LFE85-.LFB85
 7952 0e95 01       		.uleb128 0x1
 7953 0e96 9C       		.byte	0x9c
 7954 0e97 D30E0000 		.4byte	0xed3
 7955 0e9b 21       		.uleb128 0x21
 7956 0e9c 8C170000 		.4byte	.LASF212
 7957 0ea0 01       		.byte	0x1
 7958 0ea1 E307     		.2byte	0x7e3
 7959 0ea3 EB080000 		.4byte	0x8eb
 7960 0ea7 02       		.uleb128 0x2
 7961 0ea8 91       		.byte	0x91
 7962 0ea9 74       		.sleb128 -12
 7963 0eaa 21       		.uleb128 0x21
 7964 0eab 08120000 		.4byte	.LASF218
 7965 0eaf 01       		.byte	0x1
 7966 0eb0 E407     		.2byte	0x7e4
 7967 0eb2 66040000 		.4byte	0x466
 7968 0eb6 02       		.uleb128 0x2
 7969 0eb7 91       		.byte	0x91
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 231


 7970 0eb8 70       		.sleb128 -16
 7971 0eb9 22       		.uleb128 0x22
 7972 0eba BA000000 		.4byte	.LBB41
 7973 0ebe 2E000000 		.4byte	.LBE41-.LBB41
 7974 0ec2 21       		.uleb128 0x21
 7975 0ec3 00000000 		.4byte	.LASF246
 7976 0ec7 01       		.byte	0x1
 7977 0ec8 1C08     		.2byte	0x81c
 7978 0eca 71040000 		.4byte	0x471
 7979 0ece 02       		.uleb128 0x2
 7980 0ecf 91       		.byte	0x91
 7981 0ed0 6C       		.sleb128 -20
 7982 0ed1 00       		.byte	0
 7983 0ed2 00       		.byte	0
 7984 0ed3 26       		.uleb128 0x26
 7985 0ed4 5A030000 		.4byte	.LASF247
 7986 0ed8 01       		.byte	0x1
 7987 0ed9 4F08     		.2byte	0x84f
 7988 0edb 7C040000 		.4byte	0x47c
 7989 0edf 00000000 		.4byte	.LFB86
 7990 0ee3 1C000000 		.4byte	.LFE86-.LFB86
 7991 0ee7 01       		.uleb128 0x1
 7992 0ee8 9C       		.byte	0x9c
 7993 0ee9 FD0E0000 		.4byte	0xefd
 7994 0eed 21       		.uleb128 0x21
 7995 0eee 76080000 		.4byte	.LASF248
 7996 0ef2 01       		.byte	0x1
 7997 0ef3 5108     		.2byte	0x851
 7998 0ef5 7C040000 		.4byte	0x47c
 7999 0ef9 02       		.uleb128 0x2
 8000 0efa 91       		.byte	0x91
 8001 0efb 74       		.sleb128 -12
 8002 0efc 00       		.byte	0
 8003 0efd 26       		.uleb128 0x26
 8004 0efe F9100000 		.4byte	.LASF249
 8005 0f02 01       		.byte	0x1
 8006 0f03 5E08     		.2byte	0x85e
 8007 0f05 7C040000 		.4byte	0x47c
 8008 0f09 00000000 		.4byte	.LFB87
 8009 0f0d 20000000 		.4byte	.LFE87-.LFB87
 8010 0f11 01       		.uleb128 0x1
 8011 0f12 9C       		.byte	0x9c
 8012 0f13 360F0000 		.4byte	0xf36
 8013 0f17 21       		.uleb128 0x21
 8014 0f18 CD040000 		.4byte	.LASF206
 8015 0f1c 01       		.byte	0x1
 8016 0f1d 6008     		.2byte	0x860
 8017 0f1f 7C040000 		.4byte	0x47c
 8018 0f23 02       		.uleb128 0x2
 8019 0f24 91       		.byte	0x91
 8020 0f25 70       		.sleb128 -16
 8021 0f26 21       		.uleb128 0x21
 8022 0f27 010B0000 		.4byte	.LASF242
 8023 0f2b 01       		.byte	0x1
 8024 0f2c 6108     		.2byte	0x861
 8025 0f2e 71040000 		.4byte	0x471
 8026 0f32 02       		.uleb128 0x2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 232


 8027 0f33 91       		.byte	0x91
 8028 0f34 74       		.sleb128 -12
 8029 0f35 00       		.byte	0
 8030 0f36 2D       		.uleb128 0x2d
 8031 0f37 B6010000 		.4byte	.LASF308
 8032 0f3b 01       		.byte	0x1
 8033 0f3c 7D08     		.2byte	0x87d
 8034 0f3e 71040000 		.4byte	0x471
 8035 0f42 00000000 		.4byte	.LFB88
 8036 0f46 14000000 		.4byte	.LFE88-.LFB88
 8037 0f4a 01       		.uleb128 0x1
 8038 0f4b 9C       		.byte	0x9c
 8039 0f4c 26       		.uleb128 0x26
 8040 0f4d 95090000 		.4byte	.LASF250
 8041 0f51 01       		.byte	0x1
 8042 0f52 8508     		.2byte	0x885
 8043 0f54 B2000000 		.4byte	0xb2
 8044 0f58 00000000 		.4byte	.LFB89
 8045 0f5c 2C000000 		.4byte	.LFE89-.LFB89
 8046 0f60 01       		.uleb128 0x1
 8047 0f61 9C       		.byte	0x9c
 8048 0f62 850F0000 		.4byte	0xf85
 8049 0f66 20       		.uleb128 0x20
 8050 0f67 F1130000 		.4byte	.LASF251
 8051 0f6b 01       		.byte	0x1
 8052 0f6c 8508     		.2byte	0x885
 8053 0f6e 65050000 		.4byte	0x565
 8054 0f72 02       		.uleb128 0x2
 8055 0f73 91       		.byte	0x91
 8056 0f74 6C       		.sleb128 -20
 8057 0f75 21       		.uleb128 0x21
 8058 0f76 8C170000 		.4byte	.LASF212
 8059 0f7a 01       		.byte	0x1
 8060 0f7b 8708     		.2byte	0x887
 8061 0f7d EB080000 		.4byte	0x8eb
 8062 0f81 02       		.uleb128 0x2
 8063 0f82 91       		.byte	0x91
 8064 0f83 74       		.sleb128 -12
 8065 0f84 00       		.byte	0
 8066 0f85 1F       		.uleb128 0x1f
 8067 0f86 3C150000 		.4byte	.LASF252
 8068 0f8a 01       		.byte	0x1
 8069 0f8b 1109     		.2byte	0x911
 8070 0f8d 71040000 		.4byte	0x471
 8071 0f91 00000000 		.4byte	.LFB90
 8072 0f95 1C010000 		.4byte	.LFE90-.LFB90
 8073 0f99 01       		.uleb128 0x1
 8074 0f9a 9C       		.byte	0x9c
 8075 0f9b EB0F0000 		.4byte	0xfeb
 8076 0f9f 20       		.uleb128 0x20
 8077 0fa0 D00F0000 		.4byte	.LASF253
 8078 0fa4 01       		.byte	0x1
 8079 0fa5 1109     		.2byte	0x911
 8080 0fa7 F10F0000 		.4byte	0xff1
 8081 0fab 02       		.uleb128 0x2
 8082 0fac 91       		.byte	0x91
 8083 0fad 6C       		.sleb128 -20
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 233


 8084 0fae 20       		.uleb128 0x20
 8085 0faf C80B0000 		.4byte	.LASF254
 8086 0fb3 01       		.byte	0x1
 8087 0fb4 1109     		.2byte	0x911
 8088 0fb6 F60F0000 		.4byte	0xff6
 8089 0fba 02       		.uleb128 0x2
 8090 0fbb 91       		.byte	0x91
 8091 0fbc 68       		.sleb128 -24
 8092 0fbd 20       		.uleb128 0x20
 8093 0fbe E1000000 		.4byte	.LASF255
 8094 0fc2 01       		.byte	0x1
 8095 0fc3 1109     		.2byte	0x911
 8096 0fc5 01100000 		.4byte	0x1001
 8097 0fc9 02       		.uleb128 0x2
 8098 0fca 91       		.byte	0x91
 8099 0fcb 64       		.sleb128 -28
 8100 0fcc 21       		.uleb128 0x21
 8101 0fcd 21150000 		.4byte	.LASF256
 8102 0fd1 01       		.byte	0x1
 8103 0fd2 1309     		.2byte	0x913
 8104 0fd4 71040000 		.4byte	0x471
 8105 0fd8 02       		.uleb128 0x2
 8106 0fd9 91       		.byte	0x91
 8107 0fda 74       		.sleb128 -12
 8108 0fdb 21       		.uleb128 0x21
 8109 0fdc 40000000 		.4byte	.LASF257
 8110 0fe0 01       		.byte	0x1
 8111 0fe1 1309     		.2byte	0x913
 8112 0fe3 71040000 		.4byte	0x471
 8113 0fe7 02       		.uleb128 0x2
 8114 0fe8 91       		.byte	0x91
 8115 0fe9 70       		.sleb128 -16
 8116 0fea 00       		.byte	0
 8117 0feb 06       		.uleb128 0x6
 8118 0fec 04       		.byte	0x4
 8119 0fed D2060000 		.4byte	0x6d2
 8120 0ff1 07       		.uleb128 0x7
 8121 0ff2 EB0F0000 		.4byte	0xfeb
 8122 0ff6 07       		.uleb128 0x7
 8123 0ff7 71040000 		.4byte	0x471
 8124 0ffb 06       		.uleb128 0x6
 8125 0ffc 04       		.byte	0x4
 8126 0ffd EB000000 		.4byte	0xeb
 8127 1001 07       		.uleb128 0x7
 8128 1002 FB0F0000 		.4byte	0xffb
 8129 1006 1F       		.uleb128 0x1f
 8130 1007 83100000 		.4byte	.LASF258
 8131 100b 01       		.byte	0x1
 8132 100c C309     		.2byte	0x9c3
 8133 100e 66040000 		.4byte	0x466
 8134 1012 00000000 		.4byte	.LFB91
 8135 1016 7C010000 		.4byte	.LFE91-.LFB91
 8136 101a 01       		.uleb128 0x1
 8137 101b 9C       		.byte	0x9c
 8138 101c 80100000 		.4byte	0x1080
 8139 1020 21       		.uleb128 0x21
 8140 1021 8C170000 		.4byte	.LASF212
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 234


 8141 1025 01       		.byte	0x1
 8142 1026 C509     		.2byte	0x9c5
 8143 1028 EB080000 		.4byte	0x8eb
 8144 102c 02       		.uleb128 0x2
 8145 102d 91       		.byte	0x91
 8146 102e 68       		.sleb128 -24
 8147 102f 21       		.uleb128 0x21
 8148 1030 81170000 		.4byte	.LASF131
 8149 1034 01       		.byte	0x1
 8150 1035 C609     		.2byte	0x9c6
 8151 1037 7C040000 		.4byte	0x47c
 8152 103b 02       		.uleb128 0x2
 8153 103c 91       		.byte	0x91
 8154 103d 64       		.sleb128 -28
 8155 103e 21       		.uleb128 0x21
 8156 103f B9110000 		.4byte	.LASF259
 8157 1043 01       		.byte	0x1
 8158 1044 C709     		.2byte	0x9c7
 8159 1046 66040000 		.4byte	0x466
 8160 104a 02       		.uleb128 0x2
 8161 104b 91       		.byte	0x91
 8162 104c 74       		.sleb128 -12
 8163 104d 22       		.uleb128 0x22
 8164 104e 1A000000 		.4byte	.LBB42
 8165 1052 16010000 		.4byte	.LBE42-.LBB42
 8166 1056 21       		.uleb128 0x21
 8167 1057 200E0000 		.4byte	.LASF220
 8168 105b 01       		.byte	0x1
 8169 105c D109     		.2byte	0x9d1
 8170 105e 920A0000 		.4byte	0xa92
 8171 1062 02       		.uleb128 0x2
 8172 1063 91       		.byte	0x91
 8173 1064 70       		.sleb128 -16
 8174 1065 22       		.uleb128 0x22
 8175 1066 2E000000 		.4byte	.LBB43
 8176 106a 22000000 		.4byte	.LBE43-.LBB43
 8177 106e 21       		.uleb128 0x21
 8178 106f 3E120000 		.4byte	.LASF260
 8179 1073 01       		.byte	0x1
 8180 1074 D909     		.2byte	0x9d9
 8181 1076 230B0000 		.4byte	0xb23
 8182 107a 02       		.uleb128 0x2
 8183 107b 91       		.byte	0x91
 8184 107c 6C       		.sleb128 -20
 8185 107d 00       		.byte	0
 8186 107e 00       		.byte	0
 8187 107f 00       		.byte	0
 8188 1080 25       		.uleb128 0x25
 8189 1081 E8070000 		.4byte	.LASF261
 8190 1085 01       		.byte	0x1
 8191 1086 C90A     		.2byte	0xac9
 8192 1088 00000000 		.4byte	.LFB92
 8193 108c F8000000 		.4byte	.LFE92-.LFB92
 8194 1090 01       		.uleb128 0x1
 8195 1091 9C       		.byte	0x9c
 8196 1092 24110000 		.4byte	0x1124
 8197 1096 2E       		.uleb128 0x2e
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 235


 8198 1097 2C000000 		.4byte	.LBB44
 8199 109b 4E000000 		.4byte	.LBE44-.LBB44
 8200 109f C2100000 		.4byte	0x10c2
 8201 10a3 21       		.uleb128 0x21
 8202 10a4 FC060000 		.4byte	.LASF262
 8203 10a8 01       		.byte	0x1
 8204 10a9 F20A     		.2byte	0xaf2
 8205 10ab 2A110000 		.4byte	0x112a
 8206 10af 02       		.uleb128 0x2
 8207 10b0 91       		.byte	0x91
 8208 10b1 74       		.sleb128 -12
 8209 10b2 21       		.uleb128 0x21
 8210 10b3 CB070000 		.4byte	.LASF263
 8211 10b7 01       		.byte	0x1
 8212 10b8 F20A     		.2byte	0xaf2
 8213 10ba 9C090000 		.4byte	0x99c
 8214 10be 02       		.uleb128 0x2
 8215 10bf 91       		.byte	0x91
 8216 10c0 70       		.sleb128 -16
 8217 10c1 00       		.byte	0
 8218 10c2 22       		.uleb128 0x22
 8219 10c3 7A000000 		.4byte	.LBB45
 8220 10c7 50000000 		.4byte	.LBE45-.LBB45
 8221 10cb 21       		.uleb128 0x21
 8222 10cc C20F0000 		.4byte	.LASF264
 8223 10d0 01       		.byte	0x1
 8224 10d1 F60A     		.2byte	0xaf6
 8225 10d3 71040000 		.4byte	0x471
 8226 10d7 02       		.uleb128 0x2
 8227 10d8 91       		.byte	0x91
 8228 10d9 6C       		.sleb128 -20
 8229 10da 27       		.uleb128 0x27
 8230 10db 03080000 		.4byte	0x803
 8231 10df 80000000 		.4byte	.LBB46
 8232 10e3 0A000000 		.4byte	.LBE46-.LBB46
 8233 10e7 01       		.byte	0x1
 8234 10e8 F60A     		.2byte	0xaf6
 8235 10ea 09110000 		.4byte	0x1109
 8236 10ee 2A       		.uleb128 0x2a
 8237 10ef 13080000 		.4byte	0x813
 8238 10f3 02       		.uleb128 0x2
 8239 10f4 91       		.byte	0x91
 8240 10f5 64       		.sleb128 -28
 8241 10f6 22       		.uleb128 0x22
 8242 10f7 80000000 		.4byte	.LBB47
 8243 10fb 0A000000 		.4byte	.LBE47-.LBB47
 8244 10ff 28       		.uleb128 0x28
 8245 1100 1E080000 		.4byte	0x81e
 8246 1104 02       		.uleb128 0x2
 8247 1105 91       		.byte	0x91
 8248 1106 63       		.sleb128 -29
 8249 1107 00       		.byte	0
 8250 1108 00       		.byte	0
 8251 1109 22       		.uleb128 0x22
 8252 110a 90000000 		.4byte	.LBB48
 8253 110e 3A000000 		.4byte	.LBE48-.LBB48
 8254 1112 21       		.uleb128 0x21
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 236


 8255 1113 1C080000 		.4byte	.LASF265
 8256 1117 01       		.byte	0x1
 8257 1118 F60A     		.2byte	0xaf6
 8258 111a 2F110000 		.4byte	0x112f
 8259 111e 02       		.uleb128 0x2
 8260 111f 91       		.byte	0x91
 8261 1120 68       		.sleb128 -24
 8262 1121 00       		.byte	0
 8263 1122 00       		.byte	0
 8264 1123 00       		.byte	0
 8265 1124 06       		.uleb128 0x6
 8266 1125 04       		.byte	0x4
 8267 1126 9C090000 		.4byte	0x99c
 8268 112a 07       		.uleb128 0x7
 8269 112b 24110000 		.4byte	0x1124
 8270 112f 07       		.uleb128 0x7
 8271 1130 230B0000 		.4byte	0xb23
 8272 1134 25       		.uleb128 0x25
 8273 1135 270A0000 		.4byte	.LASF266
 8274 1139 01       		.byte	0x1
 8275 113a 040B     		.2byte	0xb04
 8276 113c 00000000 		.4byte	.LFB93
 8277 1140 2C000000 		.4byte	.LFE93-.LFB93
 8278 1144 01       		.uleb128 0x1
 8279 1145 9C       		.byte	0x9c
 8280 1146 69110000 		.4byte	0x1169
 8281 114a 20       		.uleb128 0x20
 8282 114b FB080000 		.4byte	.LASF267
 8283 114f 01       		.byte	0x1
 8284 1150 040B     		.2byte	0xb04
 8285 1152 2F110000 		.4byte	0x112f
 8286 1156 02       		.uleb128 0x2
 8287 1157 91       		.byte	0x91
 8288 1158 74       		.sleb128 -12
 8289 1159 20       		.uleb128 0x20
 8290 115a 4E0D0000 		.4byte	.LASF268
 8291 115e 01       		.byte	0x1
 8292 115f 040B     		.2byte	0xb04
 8293 1161 920A0000 		.4byte	0xa92
 8294 1165 02       		.uleb128 0x2
 8295 1166 91       		.byte	0x91
 8296 1167 70       		.sleb128 -16
 8297 1168 00       		.byte	0
 8298 1169 25       		.uleb128 0x25
 8299 116a 80050000 		.4byte	.LASF269
 8300 116e 01       		.byte	0x1
 8301 116f 150B     		.2byte	0xb15
 8302 1171 00000000 		.4byte	.LFB94
 8303 1175 3C000000 		.4byte	.LFE94-.LFB94
 8304 1179 01       		.uleb128 0x1
 8305 117a 9C       		.byte	0x9c
 8306 117b AD110000 		.4byte	0x11ad
 8307 117f 20       		.uleb128 0x20
 8308 1180 FB080000 		.4byte	.LASF267
 8309 1184 01       		.byte	0x1
 8310 1185 150B     		.2byte	0xb15
 8311 1187 230B0000 		.4byte	0xb23
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 237


 8312 118b 02       		.uleb128 0x2
 8313 118c 91       		.byte	0x91
 8314 118d 74       		.sleb128 -12
 8315 118e 20       		.uleb128 0x20
 8316 118f 81170000 		.4byte	.LASF131
 8317 1193 01       		.byte	0x1
 8318 1194 150B     		.2byte	0xb15
 8319 1196 920A0000 		.4byte	0xa92
 8320 119a 02       		.uleb128 0x2
 8321 119b 91       		.byte	0x91
 8322 119c 70       		.sleb128 -16
 8323 119d 20       		.uleb128 0x20
 8324 119e 4E0D0000 		.4byte	.LASF268
 8325 11a2 01       		.byte	0x1
 8326 11a3 150B     		.2byte	0xb15
 8327 11a5 920A0000 		.4byte	0xa92
 8328 11a9 02       		.uleb128 0x2
 8329 11aa 91       		.byte	0x91
 8330 11ab 6C       		.sleb128 -20
 8331 11ac 00       		.byte	0
 8332 11ad 1F       		.uleb128 0x1f
 8333 11ae E10D0000 		.4byte	.LASF270
 8334 11b2 01       		.byte	0x1
 8335 11b3 4E0B     		.2byte	0xb4e
 8336 11b5 66040000 		.4byte	0x466
 8337 11b9 00000000 		.4byte	.LFB95
 8338 11bd C4000000 		.4byte	.LFE95-.LFB95
 8339 11c1 01       		.uleb128 0x1
 8340 11c2 9C       		.byte	0x9c
 8341 11c3 F5110000 		.4byte	0x11f5
 8342 11c7 20       		.uleb128 0x20
 8343 11c8 FB080000 		.4byte	.LASF267
 8344 11cc 01       		.byte	0x1
 8345 11cd 4E0B     		.2byte	0xb4e
 8346 11cf 00120000 		.4byte	0x1200
 8347 11d3 02       		.uleb128 0x2
 8348 11d4 91       		.byte	0x91
 8349 11d5 6C       		.sleb128 -20
 8350 11d6 21       		.uleb128 0x21
 8351 11d7 D60C0000 		.4byte	.LASF271
 8352 11db 01       		.byte	0x1
 8353 11dc 500B     		.2byte	0xb50
 8354 11de EB080000 		.4byte	0x8eb
 8355 11e2 02       		.uleb128 0x2
 8356 11e3 91       		.byte	0x91
 8357 11e4 70       		.sleb128 -16
 8358 11e5 21       		.uleb128 0x21
 8359 11e6 CD040000 		.4byte	.LASF206
 8360 11ea 01       		.byte	0x1
 8361 11eb 510B     		.2byte	0xb51
 8362 11ed 66040000 		.4byte	0x466
 8363 11f1 02       		.uleb128 0x2
 8364 11f2 91       		.byte	0x91
 8365 11f3 74       		.sleb128 -12
 8366 11f4 00       		.byte	0
 8367 11f5 06       		.uleb128 0x6
 8368 11f6 04       		.byte	0x4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 238


 8369 11f7 FB110000 		.4byte	0x11fb
 8370 11fb 07       		.uleb128 0x7
 8371 11fc 5A050000 		.4byte	0x55a
 8372 1200 07       		.uleb128 0x7
 8373 1201 F5110000 		.4byte	0x11f5
 8374 1205 1F       		.uleb128 0x1f
 8375 1206 09010000 		.4byte	.LASF272
 8376 120a 01       		.byte	0x1
 8377 120b 920B     		.2byte	0xb92
 8378 120d 66040000 		.4byte	0x466
 8379 1211 00000000 		.4byte	.LFB96
 8380 1215 AC000000 		.4byte	.LFE96-.LFB96
 8381 1219 01       		.uleb128 0x1
 8382 121a 9C       		.byte	0x9c
 8383 121b 5C120000 		.4byte	0x125c
 8384 121f 20       		.uleb128 0x20
 8385 1220 530B0000 		.4byte	.LASF273
 8386 1224 01       		.byte	0x1
 8387 1225 920B     		.2byte	0xb92
 8388 1227 54050000 		.4byte	0x554
 8389 122b 02       		.uleb128 0x2
 8390 122c 91       		.byte	0x91
 8391 122d 6C       		.sleb128 -20
 8392 122e 20       		.uleb128 0x20
 8393 122f 81170000 		.4byte	.LASF131
 8394 1233 01       		.byte	0x1
 8395 1234 920B     		.2byte	0xb92
 8396 1236 920A0000 		.4byte	0xa92
 8397 123a 02       		.uleb128 0x2
 8398 123b 91       		.byte	0x91
 8399 123c 68       		.sleb128 -24
 8400 123d 21       		.uleb128 0x21
 8401 123e D60C0000 		.4byte	.LASF271
 8402 1242 01       		.byte	0x1
 8403 1243 940B     		.2byte	0xb94
 8404 1245 EB080000 		.4byte	0x8eb
 8405 1249 02       		.uleb128 0x2
 8406 124a 91       		.byte	0x91
 8407 124b 70       		.sleb128 -16
 8408 124c 21       		.uleb128 0x21
 8409 124d CD040000 		.4byte	.LASF206
 8410 1251 01       		.byte	0x1
 8411 1252 950B     		.2byte	0xb95
 8412 1254 66040000 		.4byte	0x466
 8413 1258 02       		.uleb128 0x2
 8414 1259 91       		.byte	0x91
 8415 125a 74       		.sleb128 -12
 8416 125b 00       		.byte	0
 8417 125c 2F       		.uleb128 0x2f
 8418 125d 59090000 		.4byte	.LASF274
 8419 1261 01       		.byte	0x1
 8420 1262 BF0B     		.2byte	0xbbf
 8421 1264 00000000 		.4byte	.LFB97
 8422 1268 2C000000 		.4byte	.LFE97-.LFB97
 8423 126c 01       		.uleb128 0x1
 8424 126d 9C       		.byte	0x9c
 8425 126e 82120000 		.4byte	0x1282
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 239


 8426 1272 20       		.uleb128 0x20
 8427 1273 C2080000 		.4byte	.LASF275
 8428 1277 01       		.byte	0x1
 8429 1278 BF0B     		.2byte	0xbbf
 8430 127a 88120000 		.4byte	0x1288
 8431 127e 02       		.uleb128 0x2
 8432 127f 91       		.byte	0x91
 8433 1280 74       		.sleb128 -12
 8434 1281 00       		.byte	0
 8435 1282 06       		.uleb128 0x6
 8436 1283 04       		.byte	0x4
 8437 1284 07060000 		.4byte	0x607
 8438 1288 07       		.uleb128 0x7
 8439 1289 82120000 		.4byte	0x1282
 8440 128d 1F       		.uleb128 0x1f
 8441 128e C8090000 		.4byte	.LASF276
 8442 1292 01       		.byte	0x1
 8443 1293 C70B     		.2byte	0xbc7
 8444 1295 66040000 		.4byte	0x466
 8445 1299 00000000 		.4byte	.LFB98
 8446 129d 88000000 		.4byte	.LFE98-.LFB98
 8447 12a1 01       		.uleb128 0x1
 8448 12a2 9C       		.byte	0x9c
 8449 12a3 EE120000 		.4byte	0x12ee
 8450 12a7 20       		.uleb128 0x20
 8451 12a8 C2080000 		.4byte	.LASF275
 8452 12ac 01       		.byte	0x1
 8453 12ad C70B     		.2byte	0xbc7
 8454 12af 88120000 		.4byte	0x1288
 8455 12b3 02       		.uleb128 0x2
 8456 12b4 91       		.byte	0x91
 8457 12b5 6C       		.sleb128 -20
 8458 12b6 20       		.uleb128 0x20
 8459 12b7 C9030000 		.4byte	.LASF277
 8460 12bb 01       		.byte	0x1
 8461 12bc C70B     		.2byte	0xbc7
 8462 12be 8D0A0000 		.4byte	0xa8d
 8463 12c2 02       		.uleb128 0x2
 8464 12c3 91       		.byte	0x91
 8465 12c4 68       		.sleb128 -24
 8466 12c5 21       		.uleb128 0x21
 8467 12c6 CD040000 		.4byte	.LASF206
 8468 12ca 01       		.byte	0x1
 8469 12cb C90B     		.2byte	0xbc9
 8470 12cd 66040000 		.4byte	0x466
 8471 12d1 02       		.uleb128 0x2
 8472 12d2 91       		.byte	0x91
 8473 12d3 74       		.sleb128 -12
 8474 12d4 22       		.uleb128 0x22
 8475 12d5 0E000000 		.4byte	.LBB49
 8476 12d9 64000000 		.4byte	.LBE49-.LBB49
 8477 12dd 21       		.uleb128 0x21
 8478 12de 200E0000 		.4byte	.LASF220
 8479 12e2 01       		.byte	0x1
 8480 12e3 D10B     		.2byte	0xbd1
 8481 12e5 920A0000 		.4byte	0xa92
 8482 12e9 02       		.uleb128 0x2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 240


 8483 12ea 91       		.byte	0x91
 8484 12eb 70       		.sleb128 -16
 8485 12ec 00       		.byte	0
 8486 12ed 00       		.byte	0
 8487 12ee 2C       		.uleb128 0x2c
 8488 12ef 19090000 		.4byte	.LASF279
 8489 12f3 01       		.byte	0x1
 8490 12f4 040C     		.2byte	0xc04
 8491 12f6 00000000 		.4byte	.LFB99
 8492 12fa 18000000 		.4byte	.LFE99-.LFB99
 8493 12fe 01       		.uleb128 0x1
 8494 12ff 9C       		.byte	0x9c
 8495 1300 26       		.uleb128 0x26
 8496 1301 3F040000 		.4byte	.LASF280
 8497 1305 01       		.byte	0x1
 8498 1306 0C0C     		.2byte	0xc0c
 8499 1308 71040000 		.4byte	0x471
 8500 130c 00000000 		.4byte	.LFB100
 8501 1310 2A000000 		.4byte	.LFE100-.LFB100
 8502 1314 01       		.uleb128 0x1
 8503 1315 9C       		.byte	0x9c
 8504 1316 48130000 		.4byte	0x1348
 8505 131a 20       		.uleb128 0x20
 8506 131b 01020000 		.4byte	.LASF225
 8507 131f 01       		.byte	0x1
 8508 1320 0C0C     		.2byte	0xc0c
 8509 1322 65050000 		.4byte	0x565
 8510 1326 02       		.uleb128 0x2
 8511 1327 91       		.byte	0x91
 8512 1328 6C       		.sleb128 -20
 8513 1329 21       		.uleb128 0x21
 8514 132a 18020000 		.4byte	.LASF229
 8515 132e 01       		.byte	0x1
 8516 132f 0E0C     		.2byte	0xc0e
 8517 1331 71040000 		.4byte	0x471
 8518 1335 02       		.uleb128 0x2
 8519 1336 91       		.byte	0x91
 8520 1337 74       		.sleb128 -12
 8521 1338 21       		.uleb128 0x21
 8522 1339 8C170000 		.4byte	.LASF212
 8523 133d 01       		.byte	0x1
 8524 133e 0F0C     		.2byte	0xc0f
 8525 1340 EB080000 		.4byte	0x8eb
 8526 1344 02       		.uleb128 0x2
 8527 1345 91       		.byte	0x91
 8528 1346 70       		.sleb128 -16
 8529 1347 00       		.byte	0
 8530 1348 2F       		.uleb128 0x2f
 8531 1349 CB0A0000 		.4byte	.LASF281
 8532 134d 01       		.byte	0x1
 8533 134e 230C     		.2byte	0xc23
 8534 1350 00000000 		.4byte	.LFB101
 8535 1354 24000000 		.4byte	.LFE101-.LFB101
 8536 1358 01       		.uleb128 0x1
 8537 1359 9C       		.byte	0x9c
 8538 135a 8C130000 		.4byte	0x138c
 8539 135e 20       		.uleb128 0x20
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 241


 8540 135f 01020000 		.4byte	.LASF225
 8541 1363 01       		.byte	0x1
 8542 1364 230C     		.2byte	0xc23
 8543 1366 65050000 		.4byte	0x565
 8544 136a 02       		.uleb128 0x2
 8545 136b 91       		.byte	0x91
 8546 136c 6C       		.sleb128 -20
 8547 136d 20       		.uleb128 0x20
 8548 136e FA0D0000 		.4byte	.LASF282
 8549 1372 01       		.byte	0x1
 8550 1373 230C     		.2byte	0xc23
 8551 1375 F60F0000 		.4byte	0xff6
 8552 1379 02       		.uleb128 0x2
 8553 137a 91       		.byte	0x91
 8554 137b 68       		.sleb128 -24
 8555 137c 21       		.uleb128 0x21
 8556 137d 8C170000 		.4byte	.LASF212
 8557 1381 01       		.byte	0x1
 8558 1382 250C     		.2byte	0xc25
 8559 1384 EB080000 		.4byte	0x8eb
 8560 1388 02       		.uleb128 0x2
 8561 1389 91       		.byte	0x91
 8562 138a 74       		.sleb128 -12
 8563 138b 00       		.byte	0
 8564 138c 23       		.uleb128 0x23
 8565 138d DE0A0000 		.4byte	.LASF283
 8566 1391 01       		.byte	0x1
 8567 1392 3B0C     		.2byte	0xc3b
 8568 1394 00000000 		.4byte	.LFB102
 8569 1398 0E000000 		.4byte	.LFE102-.LFB102
 8570 139c 01       		.uleb128 0x1
 8571 139d 9C       		.byte	0x9c
 8572 139e B2130000 		.4byte	0x13b2
 8573 13a2 20       		.uleb128 0x20
 8574 13a3 14150000 		.4byte	.LASF203
 8575 13a7 01       		.byte	0x1
 8576 13a8 3B0C     		.2byte	0xc3b
 8577 13aa B0000000 		.4byte	0xb0
 8578 13ae 02       		.uleb128 0x2
 8579 13af 91       		.byte	0x91
 8580 13b0 74       		.sleb128 -12
 8581 13b1 00       		.byte	0
 8582 13b2 23       		.uleb128 0x23
 8583 13b3 30160000 		.4byte	.LASF284
 8584 13b7 01       		.byte	0x1
 8585 13b8 050D     		.2byte	0xd05
 8586 13ba 00000000 		.4byte	.LFB103
 8587 13be 80000000 		.4byte	.LFE103-.LFB103
 8588 13c2 01       		.uleb128 0x1
 8589 13c3 9C       		.byte	0x9c
 8590 13c4 D8130000 		.4byte	0x13d8
 8591 13c8 21       		.uleb128 0x21
 8592 13c9 92170000 		.4byte	.LASF182
 8593 13cd 01       		.byte	0x1
 8594 13ce 070D     		.2byte	0xd07
 8595 13d0 71040000 		.4byte	0x471
 8596 13d4 02       		.uleb128 0x2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 242


 8597 13d5 91       		.byte	0x91
 8598 13d6 74       		.sleb128 -12
 8599 13d7 00       		.byte	0
 8600 13d8 23       		.uleb128 0x23
 8601 13d9 50110000 		.4byte	.LASF285
 8602 13dd 01       		.byte	0x1
 8603 13de 250D     		.2byte	0xd25
 8604 13e0 00000000 		.4byte	.LFB104
 8605 13e4 78000000 		.4byte	.LFE104-.LFB104
 8606 13e8 01       		.uleb128 0x1
 8607 13e9 9C       		.byte	0x9c
 8608 13ea 21140000 		.4byte	0x1421
 8609 13ee 22       		.uleb128 0x22
 8610 13ef 06000000 		.4byte	.LBB50
 8611 13f3 5C000000 		.4byte	.LBE50-.LBB50
 8612 13f7 21       		.uleb128 0x21
 8613 13f8 14170000 		.4byte	.LASF286
 8614 13fc 01       		.byte	0x1
 8615 13fd 2C0D     		.2byte	0xd2c
 8616 13ff 66040000 		.4byte	0x466
 8617 1403 02       		.uleb128 0x2
 8618 1404 91       		.byte	0x91
 8619 1405 74       		.sleb128 -12
 8620 1406 22       		.uleb128 0x22
 8621 1407 26000000 		.4byte	.LBB51
 8622 140b 34000000 		.4byte	.LBE51-.LBB51
 8623 140f 21       		.uleb128 0x21
 8624 1410 8C170000 		.4byte	.LASF212
 8625 1414 01       		.byte	0x1
 8626 1415 3A0D     		.2byte	0xd3a
 8627 1417 EB080000 		.4byte	0x8eb
 8628 141b 02       		.uleb128 0x2
 8629 141c 91       		.byte	0x91
 8630 141d 70       		.sleb128 -16
 8631 141e 00       		.byte	0
 8632 141f 00       		.byte	0
 8633 1420 00       		.byte	0
 8634 1421 25       		.uleb128 0x25
 8635 1422 B5160000 		.4byte	.LASF287
 8636 1426 01       		.byte	0x1
 8637 1427 530D     		.2byte	0xd53
 8638 1429 00000000 		.4byte	.LFB105
 8639 142d BC000000 		.4byte	.LFE105-.LFB105
 8640 1431 01       		.uleb128 0x1
 8641 1432 9C       		.byte	0x9c
 8642 1433 83140000 		.4byte	0x1483
 8643 1437 20       		.uleb128 0x20
 8644 1438 01020000 		.4byte	.LASF225
 8645 143c 01       		.byte	0x1
 8646 143d 530D     		.2byte	0xd53
 8647 143f 65050000 		.4byte	0x565
 8648 1443 02       		.uleb128 0x2
 8649 1444 91       		.byte	0x91
 8650 1445 6C       		.sleb128 -20
 8651 1446 20       		.uleb128 0x20
 8652 1447 D7030000 		.4byte	.LASF288
 8653 144b 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 243


 8654 144c 530D     		.2byte	0xd53
 8655 144e EB0F0000 		.4byte	0xfeb
 8656 1452 02       		.uleb128 0x2
 8657 1453 91       		.byte	0x91
 8658 1454 68       		.sleb128 -24
 8659 1455 20       		.uleb128 0x20
 8660 1456 B50B0000 		.4byte	.LASF289
 8661 145a 01       		.byte	0x1
 8662 145b 530D     		.2byte	0xd53
 8663 145d 66040000 		.4byte	0x466
 8664 1461 02       		.uleb128 0x2
 8665 1462 91       		.byte	0x91
 8666 1463 64       		.sleb128 -28
 8667 1464 20       		.uleb128 0x20
 8668 1465 28020000 		.4byte	.LASF290
 8669 1469 01       		.byte	0x1
 8670 146a 530D     		.2byte	0xd53
 8671 146c A1050000 		.4byte	0x5a1
 8672 1470 02       		.uleb128 0x2
 8673 1471 91       		.byte	0x91
 8674 1472 63       		.sleb128 -29
 8675 1473 21       		.uleb128 0x21
 8676 1474 8C170000 		.4byte	.LASF212
 8677 1478 01       		.byte	0x1
 8678 1479 550D     		.2byte	0xd55
 8679 147b EB080000 		.4byte	0x8eb
 8680 147f 02       		.uleb128 0x2
 8681 1480 91       		.byte	0x91
 8682 1481 74       		.sleb128 -12
 8683 1482 00       		.byte	0
 8684 1483 30       		.uleb128 0x30
 8685 1484 21120000 		.4byte	.LASF292
 8686 1488 01       		.byte	0x1
 8687 1489 AC0D     		.2byte	0xdac
 8688 148b 71040000 		.4byte	0x471
 8689 148f 00000000 		.4byte	.LFB106
 8690 1493 A4000000 		.4byte	.LFE106-.LFB106
 8691 1497 01       		.uleb128 0x1
 8692 1498 9C       		.byte	0x9c
 8693 1499 2E150000 		.4byte	0x152e
 8694 149d 20       		.uleb128 0x20
 8695 149e D00F0000 		.4byte	.LASF253
 8696 14a2 01       		.byte	0x1
 8697 14a3 AC0D     		.2byte	0xdac
 8698 14a5 EB0F0000 		.4byte	0xfeb
 8699 14a9 02       		.uleb128 0x2
 8700 14aa 91       		.byte	0x91
 8701 14ab 5C       		.sleb128 -36
 8702 14ac 20       		.uleb128 0x20
 8703 14ad 9D170000 		.4byte	.LASF293
 8704 14b1 01       		.byte	0x1
 8705 14b2 AC0D     		.2byte	0xdac
 8706 14b4 230B0000 		.4byte	0xb23
 8707 14b8 02       		.uleb128 0x2
 8708 14b9 91       		.byte	0x91
 8709 14ba 58       		.sleb128 -40
 8710 14bb 20       		.uleb128 0x20
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 244


 8711 14bc 28020000 		.4byte	.LASF290
 8712 14c0 01       		.byte	0x1
 8713 14c1 AC0D     		.2byte	0xdac
 8714 14c3 A1050000 		.4byte	0x5a1
 8715 14c7 02       		.uleb128 0x2
 8716 14c8 91       		.byte	0x91
 8717 14c9 57       		.sleb128 -41
 8718 14ca 21       		.uleb128 0x21
 8719 14cb 53040000 		.4byte	.LASF294
 8720 14cf 01       		.byte	0x1
 8721 14d0 AE0D     		.2byte	0xdae
 8722 14d2 2E150000 		.4byte	0x152e
 8723 14d6 02       		.uleb128 0x2
 8724 14d7 91       		.byte	0x91
 8725 14d8 64       		.sleb128 -28
 8726 14d9 21       		.uleb128 0x21
 8727 14da 090A0000 		.4byte	.LASF295
 8728 14de 01       		.byte	0x1
 8729 14df AE0D     		.2byte	0xdae
 8730 14e1 2E150000 		.4byte	0x152e
 8731 14e5 02       		.uleb128 0x2
 8732 14e6 91       		.byte	0x91
 8733 14e7 6C       		.sleb128 -20
 8734 14e8 21       		.uleb128 0x21
 8735 14e9 21150000 		.4byte	.LASF256
 8736 14ed 01       		.byte	0x1
 8737 14ee AF0D     		.2byte	0xdaf
 8738 14f0 71040000 		.4byte	0x471
 8739 14f4 02       		.uleb128 0x2
 8740 14f5 91       		.byte	0x91
 8741 14f6 74       		.sleb128 -12
 8742 14f7 2E       		.uleb128 0x2e
 8743 14f8 1A000000 		.4byte	.LBB52
 8744 14fc 2C000000 		.4byte	.LBE52-.LBB52
 8745 1500 14150000 		.4byte	0x1514
 8746 1504 21       		.uleb128 0x21
 8747 1505 1C080000 		.4byte	.LASF265
 8748 1509 01       		.byte	0x1
 8749 150a B30D     		.2byte	0xdb3
 8750 150c 2F110000 		.4byte	0x112f
 8751 1510 02       		.uleb128 0x2
 8752 1511 91       		.byte	0x91
 8753 1512 70       		.sleb128 -16
 8754 1513 00       		.byte	0
 8755 1514 22       		.uleb128 0x22
 8756 1515 46000000 		.4byte	.LBB53
 8757 1519 2C000000 		.4byte	.LBE53-.LBB53
 8758 151d 21       		.uleb128 0x21
 8759 151e 1C080000 		.4byte	.LASF265
 8760 1522 01       		.byte	0x1
 8761 1523 BB0D     		.2byte	0xdbb
 8762 1525 2F110000 		.4byte	0x112f
 8763 1529 02       		.uleb128 0x2
 8764 152a 91       		.byte	0x91
 8765 152b 68       		.sleb128 -24
 8766 152c 00       		.byte	0
 8767 152d 00       		.byte	0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 245


 8768 152e 06       		.uleb128 0x6
 8769 152f 04       		.byte	0x4
 8770 1530 34150000 		.4byte	0x1534
 8771 1534 08       		.uleb128 0x8
 8772 1535 9E070000 		.4byte	0x79e
 8773 1539 2B       		.uleb128 0x2b
 8774 153a BB0C0000 		.4byte	.LASF296
 8775 153e 01       		.byte	0x1
 8776 153f CD0D     		.2byte	0xdcd
 8777 1541 D5000000 		.4byte	0xd5
 8778 1545 00000000 		.4byte	.LFB107
 8779 1549 36000000 		.4byte	.LFE107-.LFB107
 8780 154d 01       		.uleb128 0x1
 8781 154e 9C       		.byte	0x9c
 8782 154f 72150000 		.4byte	0x1572
 8783 1553 20       		.uleb128 0x20
 8784 1554 95120000 		.4byte	.LASF297
 8785 1558 01       		.byte	0x1
 8786 1559 CD0D     		.2byte	0xdcd
 8787 155b 72150000 		.4byte	0x1572
 8788 155f 02       		.uleb128 0x2
 8789 1560 91       		.byte	0x91
 8790 1561 6C       		.sleb128 -20
 8791 1562 21       		.uleb128 0x21
 8792 1563 4A060000 		.4byte	.LASF298
 8793 1567 01       		.byte	0x1
 8794 1568 CF0D     		.2byte	0xdcf
 8795 156a EB000000 		.4byte	0xeb
 8796 156e 02       		.uleb128 0x2
 8797 156f 91       		.byte	0x91
 8798 1570 74       		.sleb128 -12
 8799 1571 00       		.byte	0
 8800 1572 06       		.uleb128 0x6
 8801 1573 04       		.byte	0x4
 8802 1574 78150000 		.4byte	0x1578
 8803 1578 07       		.uleb128 0x7
 8804 1579 CA000000 		.4byte	0xca
 8805 157d 1F       		.uleb128 0x1f
 8806 157e F30C0000 		.4byte	.LASF299
 8807 1582 01       		.byte	0x1
 8808 1583 E10D     		.2byte	0xde1
 8809 1585 71040000 		.4byte	0x471
 8810 1589 00000000 		.4byte	.LFB108
 8811 158d 38000000 		.4byte	.LFE108-.LFB108
 8812 1591 01       		.uleb128 0x1
 8813 1592 9C       		.byte	0x9c
 8814 1593 D4150000 		.4byte	0x15d4
 8815 1597 20       		.uleb128 0x20
 8816 1598 01020000 		.4byte	.LASF225
 8817 159c 01       		.byte	0x1
 8818 159d E10D     		.2byte	0xde1
 8819 159f 65050000 		.4byte	0x565
 8820 15a3 02       		.uleb128 0x2
 8821 15a4 91       		.byte	0x91
 8822 15a5 64       		.sleb128 -28
 8823 15a6 21       		.uleb128 0x21
 8824 15a7 8C170000 		.4byte	.LASF212
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 246


 8825 15ab 01       		.byte	0x1
 8826 15ac E30D     		.2byte	0xde3
 8827 15ae EB080000 		.4byte	0x8eb
 8828 15b2 02       		.uleb128 0x2
 8829 15b3 91       		.byte	0x91
 8830 15b4 74       		.sleb128 -12
 8831 15b5 21       		.uleb128 0x21
 8832 15b6 FB070000 		.4byte	.LASF300
 8833 15ba 01       		.byte	0x1
 8834 15bb E40D     		.2byte	0xde4
 8835 15bd 87040000 		.4byte	0x487
 8836 15c1 02       		.uleb128 0x2
 8837 15c2 91       		.byte	0x91
 8838 15c3 70       		.sleb128 -16
 8839 15c4 21       		.uleb128 0x21
 8840 15c5 18020000 		.4byte	.LASF229
 8841 15c9 01       		.byte	0x1
 8842 15ca E50D     		.2byte	0xde5
 8843 15cc 71040000 		.4byte	0x471
 8844 15d0 02       		.uleb128 0x2
 8845 15d1 91       		.byte	0x91
 8846 15d2 6C       		.sleb128 -20
 8847 15d3 00       		.byte	0
 8848 15d4 23       		.uleb128 0x23
 8849 15d5 7F0C0000 		.4byte	.LASF301
 8850 15d9 01       		.byte	0x1
 8851 15da FD0D     		.2byte	0xdfd
 8852 15dc 00000000 		.4byte	.LFB109
 8853 15e0 20000000 		.4byte	.LFE109-.LFB109
 8854 15e4 01       		.uleb128 0x1
 8855 15e5 9C       		.byte	0x9c
 8856 15e6 FA150000 		.4byte	0x15fa
 8857 15ea 20       		.uleb128 0x20
 8858 15eb 8C170000 		.4byte	.LASF212
 8859 15ef 01       		.byte	0x1
 8860 15f0 FD0D     		.2byte	0xdfd
 8861 15f2 EB080000 		.4byte	0x8eb
 8862 15f6 02       		.uleb128 0x2
 8863 15f7 91       		.byte	0x91
 8864 15f8 74       		.sleb128 -12
 8865 15f9 00       		.byte	0
 8866 15fa 31       		.uleb128 0x31
 8867 15fb 03050000 		.4byte	.LASF302
 8868 15ff 01       		.byte	0x1
 8869 1600 330E     		.2byte	0xe33
 8870 1602 00000000 		.4byte	.LFB110
 8871 1606 48000000 		.4byte	.LFE110-.LFB110
 8872 160a 01       		.uleb128 0x1
 8873 160b 9C       		.byte	0x9c
 8874 160c 20160000 		.4byte	0x1620
 8875 1610 21       		.uleb128 0x21
 8876 1611 8C170000 		.4byte	.LASF212
 8877 1615 01       		.byte	0x1
 8878 1616 350E     		.2byte	0xe35
 8879 1618 EB080000 		.4byte	0x8eb
 8880 161c 02       		.uleb128 0x2
 8881 161d 91       		.byte	0x91
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 247


 8882 161e 74       		.sleb128 -12
 8883 161f 00       		.byte	0
 8884 1620 26       		.uleb128 0x26
 8885 1621 01130000 		.4byte	.LASF303
 8886 1625 01       		.byte	0x1
 8887 1626 4D0E     		.2byte	0xe4d
 8888 1628 65050000 		.4byte	0x565
 8889 162c 00000000 		.4byte	.LFB111
 8890 1630 1C000000 		.4byte	.LFE111-.LFB111
 8891 1634 01       		.uleb128 0x1
 8892 1635 9C       		.byte	0x9c
 8893 1636 4A160000 		.4byte	0x164a
 8894 163a 21       		.uleb128 0x21
 8895 163b CD040000 		.4byte	.LASF206
 8896 163f 01       		.byte	0x1
 8897 1640 4F0E     		.2byte	0xe4f
 8898 1642 65050000 		.4byte	0x565
 8899 1646 02       		.uleb128 0x2
 8900 1647 91       		.byte	0x91
 8901 1648 74       		.sleb128 -12
 8902 1649 00       		.byte	0
 8903 164a 25       		.uleb128 0x25
 8904 164b 220F0000 		.4byte	.LASF304
 8905 164f 01       		.byte	0x1
 8906 1650 7A0E     		.2byte	0xe7a
 8907 1652 00000000 		.4byte	.LFB112
 8908 1656 20010000 		.4byte	.LFE112-.LFB112
 8909 165a 01       		.uleb128 0x1
 8910 165b 9C       		.byte	0x9c
 8911 165c 7F160000 		.4byte	0x167f
 8912 1660 20       		.uleb128 0x20
 8913 1661 DD090000 		.4byte	.LASF305
 8914 1665 01       		.byte	0x1
 8915 1666 7A0E     		.2byte	0xe7a
 8916 1668 0E0D0000 		.4byte	0xd0e
 8917 166c 02       		.uleb128 0x2
 8918 166d 91       		.byte	0x91
 8919 166e 6C       		.sleb128 -20
 8920 166f 21       		.uleb128 0x21
 8921 1670 8C170000 		.4byte	.LASF212
 8922 1674 01       		.byte	0x1
 8923 1675 7C0E     		.2byte	0xe7c
 8924 1677 480D0000 		.4byte	0xd48
 8925 167b 02       		.uleb128 0x2
 8926 167c 91       		.byte	0x91
 8927 167d 74       		.sleb128 -12
 8928 167e 00       		.byte	0
 8929 167f 1F       		.uleb128 0x1f
 8930 1680 CD010000 		.4byte	.LASF306
 8931 1684 01       		.byte	0x1
 8932 1685 BC0E     		.2byte	0xebc
 8933 1687 66040000 		.4byte	0x466
 8934 168b 00000000 		.4byte	.LFB113
 8935 168f F8000000 		.4byte	.LFE113-.LFB113
 8936 1693 01       		.uleb128 0x1
 8937 1694 9C       		.byte	0x9c
 8938 1695 C7160000 		.4byte	0x16c7
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 248


 8939 1699 20       		.uleb128 0x20
 8940 169a DD090000 		.4byte	.LASF305
 8941 169e 01       		.byte	0x1
 8942 169f BC0E     		.2byte	0xebc
 8943 16a1 0E0D0000 		.4byte	0xd0e
 8944 16a5 02       		.uleb128 0x2
 8945 16a6 91       		.byte	0x91
 8946 16a7 6C       		.sleb128 -20
 8947 16a8 21       		.uleb128 0x21
 8948 16a9 8C170000 		.4byte	.LASF212
 8949 16ad 01       		.byte	0x1
 8950 16ae BE0E     		.2byte	0xebe
 8951 16b0 480D0000 		.4byte	0xd48
 8952 16b4 02       		.uleb128 0x2
 8953 16b5 91       		.byte	0x91
 8954 16b6 70       		.sleb128 -16
 8955 16b7 21       		.uleb128 0x21
 8956 16b8 CD040000 		.4byte	.LASF206
 8957 16bc 01       		.byte	0x1
 8958 16bd BF0E     		.2byte	0xebf
 8959 16bf 66040000 		.4byte	0x466
 8960 16c3 02       		.uleb128 0x2
 8961 16c4 91       		.byte	0x91
 8962 16c5 74       		.sleb128 -12
 8963 16c6 00       		.byte	0
 8964 16c7 26       		.uleb128 0x26
 8965 16c8 BA060000 		.4byte	.LASF307
 8966 16cc 01       		.byte	0x1
 8967 16cd 4210     		.2byte	0x1042
 8968 16cf 7C040000 		.4byte	0x47c
 8969 16d3 00000000 		.4byte	.LFB114
 8970 16d7 30000000 		.4byte	.LFE114-.LFB114
 8971 16db 01       		.uleb128 0x1
 8972 16dc 9C       		.byte	0x9c
 8973 16dd F1160000 		.4byte	0x16f1
 8974 16e1 21       		.uleb128 0x21
 8975 16e2 18020000 		.4byte	.LASF229
 8976 16e6 01       		.byte	0x1
 8977 16e7 4410     		.2byte	0x1044
 8978 16e9 7C040000 		.4byte	0x47c
 8979 16ed 02       		.uleb128 0x2
 8980 16ee 91       		.byte	0x91
 8981 16ef 74       		.sleb128 -12
 8982 16f0 00       		.byte	0
 8983 16f1 2D       		.uleb128 0x2d
 8984 16f2 36080000 		.4byte	.LASF309
 8985 16f6 01       		.byte	0x1
 8986 16f7 5210     		.2byte	0x1052
 8987 16f9 B0000000 		.4byte	0xb0
 8988 16fd 00000000 		.4byte	.LFB115
 8989 1701 28000000 		.4byte	.LFE115-.LFB115
 8990 1705 01       		.uleb128 0x1
 8991 1706 9C       		.byte	0x9c
 8992 1707 1F       		.uleb128 0x1f
 8993 1708 D9160000 		.4byte	.LASF310
 8994 170c 01       		.byte	0x1
 8995 170d 6310     		.2byte	0x1063
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 249


 8996 170f EB000000 		.4byte	0xeb
 8997 1713 00000000 		.4byte	.LFB116
 8998 1717 90000000 		.4byte	.LFE116-.LFB116
 8999 171b 01       		.uleb128 0x1
 9000 171c 9C       		.byte	0x9c
 9001 171d 4F170000 		.4byte	0x174f
 9002 1721 20       		.uleb128 0x20
 9003 1722 0E040000 		.4byte	.LASF311
 9004 1726 01       		.byte	0x1
 9005 1727 6310     		.2byte	0x1063
 9006 1729 66040000 		.4byte	0x466
 9007 172d 02       		.uleb128 0x2
 9008 172e 91       		.byte	0x91
 9009 172f 6C       		.sleb128 -20
 9010 1730 20       		.uleb128 0x20
 9011 1731 4E0D0000 		.4byte	.LASF268
 9012 1735 01       		.byte	0x1
 9013 1736 6310     		.2byte	0x1063
 9014 1738 7C040000 		.4byte	0x47c
 9015 173c 02       		.uleb128 0x2
 9016 173d 91       		.byte	0x91
 9017 173e 68       		.sleb128 -24
 9018 173f 21       		.uleb128 0x21
 9019 1740 75140000 		.4byte	.LASF312
 9020 1744 01       		.byte	0x1
 9021 1745 6510     		.2byte	0x1065
 9022 1747 EB000000 		.4byte	0xeb
 9023 174b 02       		.uleb128 0x2
 9024 174c 91       		.byte	0x91
 9025 174d 74       		.sleb128 -12
 9026 174e 00       		.byte	0
 9027 174f 1F       		.uleb128 0x1f
 9028 1750 54170000 		.4byte	.LASF313
 9029 1754 01       		.byte	0x1
 9030 1755 A710     		.2byte	0x10a7
 9031 1757 66040000 		.4byte	0x466
 9032 175b 00000000 		.4byte	.LFB117
 9033 175f B4000000 		.4byte	.LFE117-.LFB117
 9034 1763 01       		.uleb128 0x1
 9035 1764 9C       		.byte	0x9c
 9036 1765 B5170000 		.4byte	0x17b5
 9037 1769 20       		.uleb128 0x20
 9038 176a B3150000 		.4byte	.LASF314
 9039 176e 01       		.byte	0x1
 9040 176f A710     		.2byte	0x10a7
 9041 1771 EB000000 		.4byte	0xeb
 9042 1775 02       		.uleb128 0x2
 9043 1776 91       		.byte	0x91
 9044 1777 6C       		.sleb128 -20
 9045 1778 20       		.uleb128 0x20
 9046 1779 030E0000 		.4byte	.LASF315
 9047 177d 01       		.byte	0x1
 9048 177e A710     		.2byte	0x10a7
 9049 1780 EB000000 		.4byte	0xeb
 9050 1784 02       		.uleb128 0x2
 9051 1785 91       		.byte	0x91
 9052 1786 68       		.sleb128 -24
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 250


 9053 1787 20       		.uleb128 0x20
 9054 1788 BE130000 		.4byte	.LASF316
 9055 178c 01       		.byte	0x1
 9056 178d A710     		.2byte	0x10a7
 9057 178f FB0F0000 		.4byte	0xffb
 9058 1793 02       		.uleb128 0x2
 9059 1794 91       		.byte	0x91
 9060 1795 64       		.sleb128 -28
 9061 1796 20       		.uleb128 0x20
 9062 1797 4E0D0000 		.4byte	.LASF268
 9063 179b 01       		.byte	0x1
 9064 179c A710     		.2byte	0x10a7
 9065 179e 7C040000 		.4byte	0x47c
 9066 17a2 02       		.uleb128 0x2
 9067 17a3 91       		.byte	0x91
 9068 17a4 60       		.sleb128 -32
 9069 17a5 21       		.uleb128 0x21
 9070 17a6 CD040000 		.4byte	.LASF206
 9071 17aa 01       		.byte	0x1
 9072 17ab A910     		.2byte	0x10a9
 9073 17ad 66040000 		.4byte	0x466
 9074 17b1 02       		.uleb128 0x2
 9075 17b2 91       		.byte	0x91
 9076 17b3 74       		.sleb128 -12
 9077 17b4 00       		.byte	0
 9078 17b5 1F       		.uleb128 0x1f
 9079 17b6 6A010000 		.4byte	.LASF317
 9080 17ba 01       		.byte	0x1
 9081 17bb F710     		.2byte	0x10f7
 9082 17bd 66040000 		.4byte	0x466
 9083 17c1 00000000 		.4byte	.LFB118
 9084 17c5 28010000 		.4byte	.LFE118-.LFB118
 9085 17c9 01       		.uleb128 0x1
 9086 17ca 9C       		.byte	0x9c
 9087 17cb 39180000 		.4byte	0x1839
 9088 17cf 20       		.uleb128 0x20
 9089 17d0 8E150000 		.4byte	.LASF318
 9090 17d4 01       		.byte	0x1
 9091 17d5 F710     		.2byte	0x10f7
 9092 17d7 65050000 		.4byte	0x565
 9093 17db 02       		.uleb128 0x2
 9094 17dc 91       		.byte	0x91
 9095 17dd 64       		.sleb128 -28
 9096 17de 20       		.uleb128 0x20
 9097 17df 62080000 		.4byte	.LASF319
 9098 17e3 01       		.byte	0x1
 9099 17e4 F710     		.2byte	0x10f7
 9100 17e6 EB000000 		.4byte	0xeb
 9101 17ea 02       		.uleb128 0x2
 9102 17eb 91       		.byte	0x91
 9103 17ec 60       		.sleb128 -32
 9104 17ed 20       		.uleb128 0x20
 9105 17ee 880F0000 		.4byte	.LASF320
 9106 17f2 01       		.byte	0x1
 9107 17f3 F710     		.2byte	0x10f7
 9108 17f5 D7050000 		.4byte	0x5d7
 9109 17f9 02       		.uleb128 0x2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 251


 9110 17fa 91       		.byte	0x91
 9111 17fb 5F       		.sleb128 -33
 9112 17fc 20       		.uleb128 0x20
 9113 17fd 9F050000 		.4byte	.LASF321
 9114 1801 01       		.byte	0x1
 9115 1802 F710     		.2byte	0x10f7
 9116 1804 FB0F0000 		.4byte	0xffb
 9117 1808 02       		.uleb128 0x2
 9118 1809 91       		.byte	0x91
 9119 180a 58       		.sleb128 -40
 9120 180b 21       		.uleb128 0x21
 9121 180c 8C170000 		.4byte	.LASF212
 9122 1810 01       		.byte	0x1
 9123 1811 F910     		.2byte	0x10f9
 9124 1813 EB080000 		.4byte	0x8eb
 9125 1817 02       		.uleb128 0x2
 9126 1818 91       		.byte	0x91
 9127 1819 70       		.sleb128 -16
 9128 181a 21       		.uleb128 0x21
 9129 181b CD040000 		.4byte	.LASF206
 9130 181f 01       		.byte	0x1
 9131 1820 FA10     		.2byte	0x10fa
 9132 1822 66040000 		.4byte	0x466
 9133 1826 02       		.uleb128 0x2
 9134 1827 91       		.byte	0x91
 9135 1828 74       		.sleb128 -12
 9136 1829 21       		.uleb128 0x21
 9137 182a 5D040000 		.4byte	.LASF322
 9138 182e 01       		.byte	0x1
 9139 182f FB10     		.2byte	0x10fb
 9140 1831 CA000000 		.4byte	0xca
 9141 1835 02       		.uleb128 0x2
 9142 1836 91       		.byte	0x91
 9143 1837 6F       		.sleb128 -17
 9144 1838 00       		.byte	0
 9145 1839 1F       		.uleb128 0x1f
 9146 183a 5D120000 		.4byte	.LASF323
 9147 183e 01       		.byte	0x1
 9148 183f 6111     		.2byte	0x1161
 9149 1841 66040000 		.4byte	0x466
 9150 1845 00000000 		.4byte	.LFB119
 9151 1849 68010000 		.4byte	.LFE119-.LFB119
 9152 184d 01       		.uleb128 0x1
 9153 184e 9C       		.byte	0x9c
 9154 184f 23190000 		.4byte	0x1923
 9155 1853 20       		.uleb128 0x20
 9156 1854 8E150000 		.4byte	.LASF318
 9157 1858 01       		.byte	0x1
 9158 1859 6111     		.2byte	0x1161
 9159 185b 65050000 		.4byte	0x565
 9160 185f 02       		.uleb128 0x2
 9161 1860 91       		.byte	0x91
 9162 1861 54       		.sleb128 -44
 9163 1862 20       		.uleb128 0x20
 9164 1863 62080000 		.4byte	.LASF319
 9165 1867 01       		.byte	0x1
 9166 1868 6111     		.2byte	0x1161
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 252


 9167 186a EB000000 		.4byte	0xeb
 9168 186e 02       		.uleb128 0x2
 9169 186f 91       		.byte	0x91
 9170 1870 50       		.sleb128 -48
 9171 1871 20       		.uleb128 0x20
 9172 1872 880F0000 		.4byte	.LASF320
 9173 1876 01       		.byte	0x1
 9174 1877 6111     		.2byte	0x1161
 9175 1879 D7050000 		.4byte	0x5d7
 9176 187d 02       		.uleb128 0x2
 9177 187e 91       		.byte	0x91
 9178 187f 4F       		.sleb128 -49
 9179 1880 20       		.uleb128 0x20
 9180 1881 9F050000 		.4byte	.LASF321
 9181 1885 01       		.byte	0x1
 9182 1886 6111     		.2byte	0x1161
 9183 1888 FB0F0000 		.4byte	0xffb
 9184 188c 02       		.uleb128 0x2
 9185 188d 91       		.byte	0x91
 9186 188e 48       		.sleb128 -56
 9187 188f 20       		.uleb128 0x20
 9188 1890 4E130000 		.4byte	.LASF324
 9189 1894 01       		.byte	0x1
 9190 1895 6111     		.2byte	0x1161
 9191 1897 23190000 		.4byte	0x1923
 9192 189b 02       		.uleb128 0x2
 9193 189c 91       		.byte	0x91
 9194 189d 00       		.sleb128 0
 9195 189e 21       		.uleb128 0x21
 9196 189f 8C170000 		.4byte	.LASF212
 9197 18a3 01       		.byte	0x1
 9198 18a4 6311     		.2byte	0x1163
 9199 18a6 EB080000 		.4byte	0x8eb
 9200 18aa 02       		.uleb128 0x2
 9201 18ab 91       		.byte	0x91
 9202 18ac 70       		.sleb128 -16
 9203 18ad 21       		.uleb128 0x21
 9204 18ae 5D040000 		.4byte	.LASF322
 9205 18b2 01       		.byte	0x1
 9206 18b3 6411     		.2byte	0x1164
 9207 18b5 CA000000 		.4byte	0xca
 9208 18b9 02       		.uleb128 0x2
 9209 18ba 91       		.byte	0x91
 9210 18bb 67       		.sleb128 -25
 9211 18bc 21       		.uleb128 0x21
 9212 18bd CD040000 		.4byte	.LASF206
 9213 18c1 01       		.byte	0x1
 9214 18c2 6511     		.2byte	0x1165
 9215 18c4 66040000 		.4byte	0x466
 9216 18c8 02       		.uleb128 0x2
 9217 18c9 91       		.byte	0x91
 9218 18ca 74       		.sleb128 -12
 9219 18cb 21       		.uleb128 0x21
 9220 18cc 010B0000 		.4byte	.LASF242
 9221 18d0 01       		.byte	0x1
 9222 18d1 6611     		.2byte	0x1166
 9223 18d3 71040000 		.4byte	0x471
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 253


 9224 18d7 02       		.uleb128 0x2
 9225 18d8 91       		.byte	0x91
 9226 18d9 68       		.sleb128 -24
 9227 18da 27       		.uleb128 0x27
 9228 18db AA070000 		.4byte	0x7aa
 9229 18df 18000000 		.4byte	.LBB54
 9230 18e3 1A000000 		.4byte	.LBE54-.LBB54
 9231 18e7 01       		.byte	0x1
 9232 18e8 7E11     		.2byte	0x117e
 9233 18ea 09190000 		.4byte	0x1909
 9234 18ee 22       		.uleb128 0x22
 9235 18ef 18000000 		.4byte	.LBB55
 9236 18f3 1A000000 		.4byte	.LBE55-.LBB55
 9237 18f7 28       		.uleb128 0x28
 9238 18f8 BA070000 		.4byte	0x7ba
 9239 18fc 02       		.uleb128 0x2
 9240 18fd 91       		.byte	0x91
 9241 18fe 60       		.sleb128 -32
 9242 18ff 28       		.uleb128 0x28
 9243 1900 C5070000 		.4byte	0x7c5
 9244 1904 02       		.uleb128 0x2
 9245 1905 91       		.byte	0x91
 9246 1906 5C       		.sleb128 -36
 9247 1907 00       		.byte	0
 9248 1908 00       		.byte	0
 9249 1909 29       		.uleb128 0x29
 9250 190a D1070000 		.4byte	0x7d1
 9251 190e 40010000 		.4byte	.LBB56
 9252 1912 06000000 		.4byte	.LBE56-.LBB56
 9253 1916 01       		.byte	0x1
 9254 1917 D311     		.2byte	0x11d3
 9255 1919 2A       		.uleb128 0x2a
 9256 191a DE070000 		.4byte	0x7de
 9257 191e 02       		.uleb128 0x2
 9258 191f 91       		.byte	0x91
 9259 1920 6C       		.sleb128 -20
 9260 1921 00       		.byte	0
 9261 1922 00       		.byte	0
 9262 1923 06       		.uleb128 0x6
 9263 1924 04       		.byte	0x4
 9264 1925 66040000 		.4byte	0x466
 9265 1929 25       		.uleb128 0x25
 9266 192a 91160000 		.4byte	.LASF325
 9267 192e 01       		.byte	0x1
 9268 192f DD11     		.2byte	0x11dd
 9269 1931 00000000 		.4byte	.LFB120
 9270 1935 00010000 		.4byte	.LFE120-.LFB120
 9271 1939 01       		.uleb128 0x1
 9272 193a 9C       		.byte	0x9c
 9273 193b D3190000 		.4byte	0x19d3
 9274 193f 20       		.uleb128 0x20
 9275 1940 8E150000 		.4byte	.LASF318
 9276 1944 01       		.byte	0x1
 9277 1945 DD11     		.2byte	0x11dd
 9278 1947 65050000 		.4byte	0x565
 9279 194b 02       		.uleb128 0x2
 9280 194c 91       		.byte	0x91
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 254


 9281 194d 5C       		.sleb128 -36
 9282 194e 20       		.uleb128 0x20
 9283 194f 4E130000 		.4byte	.LASF324
 9284 1953 01       		.byte	0x1
 9285 1954 DD11     		.2byte	0x11dd
 9286 1956 23190000 		.4byte	0x1923
 9287 195a 02       		.uleb128 0x2
 9288 195b 91       		.byte	0x91
 9289 195c 58       		.sleb128 -40
 9290 195d 21       		.uleb128 0x21
 9291 195e 8C170000 		.4byte	.LASF212
 9292 1962 01       		.byte	0x1
 9293 1963 DF11     		.2byte	0x11df
 9294 1965 EB080000 		.4byte	0x8eb
 9295 1969 02       		.uleb128 0x2
 9296 196a 91       		.byte	0x91
 9297 196b 74       		.sleb128 -12
 9298 196c 21       		.uleb128 0x21
 9299 196d 5D040000 		.4byte	.LASF322
 9300 1971 01       		.byte	0x1
 9301 1972 E011     		.2byte	0x11e0
 9302 1974 CA000000 		.4byte	0xca
 9303 1978 02       		.uleb128 0x2
 9304 1979 91       		.byte	0x91
 9305 197a 6B       		.sleb128 -21
 9306 197b 21       		.uleb128 0x21
 9307 197c 010B0000 		.4byte	.LASF242
 9308 1980 01       		.byte	0x1
 9309 1981 E111     		.2byte	0x11e1
 9310 1983 71040000 		.4byte	0x471
 9311 1987 02       		.uleb128 0x2
 9312 1988 91       		.byte	0x91
 9313 1989 6C       		.sleb128 -20
 9314 198a 27       		.uleb128 0x27
 9315 198b AA070000 		.4byte	0x7aa
 9316 198f 0E000000 		.4byte	.LBB58
 9317 1993 1A000000 		.4byte	.LBE58-.LBB58
 9318 1997 01       		.byte	0x1
 9319 1998 F911     		.2byte	0x11f9
 9320 199a B9190000 		.4byte	0x19b9
 9321 199e 22       		.uleb128 0x22
 9322 199f 0E000000 		.4byte	.LBB59
 9323 19a3 1A000000 		.4byte	.LBE59-.LBB59
 9324 19a7 28       		.uleb128 0x28
 9325 19a8 BA070000 		.4byte	0x7ba
 9326 19ac 02       		.uleb128 0x2
 9327 19ad 91       		.byte	0x91
 9328 19ae 64       		.sleb128 -28
 9329 19af 28       		.uleb128 0x28
 9330 19b0 C5070000 		.4byte	0x7c5
 9331 19b4 02       		.uleb128 0x2
 9332 19b5 91       		.byte	0x91
 9333 19b6 60       		.sleb128 -32
 9334 19b7 00       		.byte	0
 9335 19b8 00       		.byte	0
 9336 19b9 29       		.uleb128 0x29
 9337 19ba D1070000 		.4byte	0x7d1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 255


 9338 19be DA000000 		.4byte	.LBB60
 9339 19c2 06000000 		.4byte	.LBE60-.LBB60
 9340 19c6 01       		.byte	0x1
 9341 19c7 2D12     		.2byte	0x122d
 9342 19c9 2A       		.uleb128 0x2a
 9343 19ca DE070000 		.4byte	0x7de
 9344 19ce 02       		.uleb128 0x2
 9345 19cf 91       		.byte	0x91
 9346 19d0 70       		.sleb128 -16
 9347 19d1 00       		.byte	0
 9348 19d2 00       		.byte	0
 9349 19d3 1F       		.uleb128 0x1f
 9350 19d4 C9110000 		.4byte	.LASF326
 9351 19d8 01       		.byte	0x1
 9352 19d9 3612     		.2byte	0x1236
 9353 19db 66040000 		.4byte	0x466
 9354 19df 00000000 		.4byte	.LFB121
 9355 19e3 4C000000 		.4byte	.LFE121-.LFB121
 9356 19e7 01       		.uleb128 0x1
 9357 19e8 9C       		.byte	0x9c
 9358 19e9 1B1A0000 		.4byte	0x1a1b
 9359 19ed 20       		.uleb128 0x20
 9360 19ee 01020000 		.4byte	.LASF225
 9361 19f2 01       		.byte	0x1
 9362 19f3 3612     		.2byte	0x1236
 9363 19f5 65050000 		.4byte	0x565
 9364 19f9 02       		.uleb128 0x2
 9365 19fa 91       		.byte	0x91
 9366 19fb 6C       		.sleb128 -20
 9367 19fc 21       		.uleb128 0x21
 9368 19fd 8C170000 		.4byte	.LASF212
 9369 1a01 01       		.byte	0x1
 9370 1a02 3812     		.2byte	0x1238
 9371 1a04 EB080000 		.4byte	0x8eb
 9372 1a08 02       		.uleb128 0x2
 9373 1a09 91       		.byte	0x91
 9374 1a0a 70       		.sleb128 -16
 9375 1a0b 21       		.uleb128 0x21
 9376 1a0c CD040000 		.4byte	.LASF206
 9377 1a10 01       		.byte	0x1
 9378 1a11 3912     		.2byte	0x1239
 9379 1a13 66040000 		.4byte	0x466
 9380 1a17 02       		.uleb128 0x2
 9381 1a18 91       		.byte	0x91
 9382 1a19 74       		.sleb128 -12
 9383 1a1a 00       		.byte	0
 9384 1a1b 23       		.uleb128 0x23
 9385 1a1c 96100000 		.4byte	.LASF327
 9386 1a20 01       		.byte	0x1
 9387 1a21 5412     		.2byte	0x1254
 9388 1a23 00000000 		.4byte	.LFB122
 9389 1a27 CC000000 		.4byte	.LFE122-.LFB122
 9390 1a2b 01       		.uleb128 0x1
 9391 1a2c 9C       		.byte	0x9c
 9392 1a2d 6E1A0000 		.4byte	0x1a6e
 9393 1a31 20       		.uleb128 0x20
 9394 1a32 4E0D0000 		.4byte	.LASF268
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 256


 9395 1a36 01       		.byte	0x1
 9396 1a37 5412     		.2byte	0x1254
 9397 1a39 7C040000 		.4byte	0x47c
 9398 1a3d 02       		.uleb128 0x2
 9399 1a3e 91       		.byte	0x91
 9400 1a3f 6C       		.sleb128 -20
 9401 1a40 20       		.uleb128 0x20
 9402 1a41 6D000000 		.4byte	.LASF328
 9403 1a45 01       		.byte	0x1
 9404 1a46 5412     		.2byte	0x1254
 9405 1a48 6E1A0000 		.4byte	0x1a6e
 9406 1a4c 02       		.uleb128 0x2
 9407 1a4d 91       		.byte	0x91
 9408 1a4e 68       		.sleb128 -24
 9409 1a4f 21       		.uleb128 0x21
 9410 1a50 090C0000 		.4byte	.LASF217
 9411 1a54 01       		.byte	0x1
 9412 1a55 5612     		.2byte	0x1256
 9413 1a57 7C040000 		.4byte	0x47c
 9414 1a5b 02       		.uleb128 0x2
 9415 1a5c 91       		.byte	0x91
 9416 1a5d 70       		.sleb128 -16
 9417 1a5e 21       		.uleb128 0x21
 9418 1a5f 200E0000 		.4byte	.LASF220
 9419 1a63 01       		.byte	0x1
 9420 1a64 5712     		.2byte	0x1257
 9421 1a66 920A0000 		.4byte	0xa92
 9422 1a6a 02       		.uleb128 0x2
 9423 1a6b 91       		.byte	0x91
 9424 1a6c 74       		.sleb128 -12
 9425 1a6d 00       		.byte	0
 9426 1a6e 07       		.uleb128 0x7
 9427 1a6f 66040000 		.4byte	0x466
 9428 1a73 0D       		.uleb128 0xd
 9429 1a74 5A050000 		.4byte	0x55a
 9430 1a78 831A0000 		.4byte	0x1a83
 9431 1a7c 0E       		.uleb128 0xe
 9432 1a7d A9000000 		.4byte	0xa9
 9433 1a81 04       		.byte	0x4
 9434 1a82 00       		.byte	0
 9435 1a83 21       		.uleb128 0x21
 9436 1a84 D40B0000 		.4byte	.LASF329
 9437 1a88 01       		.byte	0x1
 9438 1a89 7701     		.2byte	0x177
 9439 1a8b 731A0000 		.4byte	0x1a73
 9440 1a8f 05       		.uleb128 0x5
 9441 1a90 03       		.byte	0x3
 9442 1a91 04000000 		.4byte	pxReadyTasksLists
 9443 1a95 21       		.uleb128 0x21
 9444 1a96 47160000 		.4byte	.LASF330
 9445 1a9a 01       		.byte	0x1
 9446 1a9b 7801     		.2byte	0x178
 9447 1a9d 5A050000 		.4byte	0x55a
 9448 1aa1 05       		.uleb128 0x5
 9449 1aa2 03       		.byte	0x3
 9450 1aa3 68000000 		.4byte	xDelayedTaskList1
 9451 1aa7 21       		.uleb128 0x21
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 257


 9452 1aa8 59160000 		.4byte	.LASF331
 9453 1aac 01       		.byte	0x1
 9454 1aad 7901     		.2byte	0x179
 9455 1aaf 5A050000 		.4byte	0x55a
 9456 1ab3 05       		.uleb128 0x5
 9457 1ab4 03       		.byte	0x3
 9458 1ab5 7C000000 		.4byte	xDelayedTaskList2
 9459 1ab9 21       		.uleb128 0x21
 9460 1aba 1B130000 		.4byte	.LASF332
 9461 1abe 01       		.byte	0x1
 9462 1abf 7A01     		.2byte	0x17a
 9463 1ac1 CB1A0000 		.4byte	0x1acb
 9464 1ac5 05       		.uleb128 0x5
 9465 1ac6 03       		.byte	0x3
 9466 1ac7 90000000 		.4byte	pxDelayedTaskList
 9467 1acb 08       		.uleb128 0x8
 9468 1acc 230B0000 		.4byte	0xb23
 9469 1ad0 21       		.uleb128 0x21
 9470 1ad1 75130000 		.4byte	.LASF333
 9471 1ad5 01       		.byte	0x1
 9472 1ad6 7B01     		.2byte	0x17b
 9473 1ad8 CB1A0000 		.4byte	0x1acb
 9474 1adc 05       		.uleb128 0x5
 9475 1add 03       		.byte	0x3
 9476 1ade 94000000 		.4byte	pxOverflowDelayedTaskList
 9477 1ae2 21       		.uleb128 0x21
 9478 1ae3 8C070000 		.4byte	.LASF334
 9479 1ae7 01       		.byte	0x1
 9480 1ae8 7C01     		.2byte	0x17c
 9481 1aea 5A050000 		.4byte	0x55a
 9482 1aee 05       		.uleb128 0x5
 9483 1aef 03       		.byte	0x3
 9484 1af0 98000000 		.4byte	xPendingReadyList
 9485 1af4 21       		.uleb128 0x21
 9486 1af5 51140000 		.4byte	.LASF335
 9487 1af9 01       		.byte	0x1
 9488 1afa 8001     		.2byte	0x180
 9489 1afc 5A050000 		.4byte	0x55a
 9490 1b00 05       		.uleb128 0x5
 9491 1b01 03       		.byte	0x3
 9492 1b02 AC000000 		.4byte	xTasksWaitingTermination
 9493 1b06 21       		.uleb128 0x21
 9494 1b07 3D030000 		.4byte	.LASF336
 9495 1b0b 01       		.byte	0x1
 9496 1b0c 8101     		.2byte	0x181
 9497 1b0e 181B0000 		.4byte	0x1b18
 9498 1b12 05       		.uleb128 0x5
 9499 1b13 03       		.byte	0x3
 9500 1b14 C0000000 		.4byte	uxDeletedTasksWaitingCleanUp
 9501 1b18 08       		.uleb128 0x8
 9502 1b19 71040000 		.4byte	0x471
 9503 1b1d 21       		.uleb128 0x21
 9504 1b1e FB030000 		.4byte	.LASF337
 9505 1b22 01       		.byte	0x1
 9506 1b23 8701     		.2byte	0x187
 9507 1b25 5A050000 		.4byte	0x55a
 9508 1b29 05       		.uleb128 0x5
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 258


 9509 1b2a 03       		.byte	0x3
 9510 1b2b C4000000 		.4byte	xSuspendedTaskList
 9511 1b2f 21       		.uleb128 0x21
 9512 1b30 8B080000 		.4byte	.LASF338
 9513 1b34 01       		.byte	0x1
 9514 1b35 8C01     		.2byte	0x18c
 9515 1b37 181B0000 		.4byte	0x1b18
 9516 1b3b 05       		.uleb128 0x5
 9517 1b3c 03       		.byte	0x3
 9518 1b3d D8000000 		.4byte	uxCurrentNumberOfTasks
 9519 1b41 21       		.uleb128 0x21
 9520 1b42 2B010000 		.4byte	.LASF339
 9521 1b46 01       		.byte	0x1
 9522 1b47 8D01     		.2byte	0x18d
 9523 1b49 531B0000 		.4byte	0x1b53
 9524 1b4d 05       		.uleb128 0x5
 9525 1b4e 03       		.byte	0x3
 9526 1b4f DC000000 		.4byte	xTickCount
 9527 1b53 08       		.uleb128 0x8
 9528 1b54 7C040000 		.4byte	0x47c
 9529 1b58 21       		.uleb128 0x21
 9530 1b59 F5110000 		.4byte	.LASF340
 9531 1b5d 01       		.byte	0x1
 9532 1b5e 8E01     		.2byte	0x18e
 9533 1b60 181B0000 		.4byte	0x1b18
 9534 1b64 05       		.uleb128 0x5
 9535 1b65 03       		.byte	0x3
 9536 1b66 E0000000 		.4byte	uxTopReadyPriority
 9537 1b6a 21       		.uleb128 0x21
 9538 1b6b D1050000 		.4byte	.LASF341
 9539 1b6f 01       		.byte	0x1
 9540 1b70 8F01     		.2byte	0x18f
 9541 1b72 7C1B0000 		.4byte	0x1b7c
 9542 1b76 05       		.uleb128 0x5
 9543 1b77 03       		.byte	0x3
 9544 1b78 E4000000 		.4byte	xSchedulerRunning
 9545 1b7c 08       		.uleb128 0x8
 9546 1b7d 66040000 		.4byte	0x466
 9547 1b81 21       		.uleb128 0x21
 9548 1b82 5B050000 		.4byte	.LASF342
 9549 1b86 01       		.byte	0x1
 9550 1b87 9001     		.2byte	0x190
 9551 1b89 181B0000 		.4byte	0x1b18
 9552 1b8d 05       		.uleb128 0x5
 9553 1b8e 03       		.byte	0x3
 9554 1b8f E8000000 		.4byte	uxPendedTicks
 9555 1b93 21       		.uleb128 0x21
 9556 1b94 16000000 		.4byte	.LASF343
 9557 1b98 01       		.byte	0x1
 9558 1b99 9101     		.2byte	0x191
 9559 1b9b 7C1B0000 		.4byte	0x1b7c
 9560 1b9f 05       		.uleb128 0x5
 9561 1ba0 03       		.byte	0x3
 9562 1ba1 EC000000 		.4byte	xYieldPending
 9563 1ba5 21       		.uleb128 0x21
 9564 1ba6 A0040000 		.4byte	.LASF344
 9565 1baa 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 259


 9566 1bab 9201     		.2byte	0x192
 9567 1bad 7C1B0000 		.4byte	0x1b7c
 9568 1bb1 05       		.uleb128 0x5
 9569 1bb2 03       		.byte	0x3
 9570 1bb3 F0000000 		.4byte	xNumOfOverflows
 9571 1bb7 21       		.uleb128 0x21
 9572 1bb8 36010000 		.4byte	.LASF185
 9573 1bbc 01       		.byte	0x1
 9574 1bbd 9301     		.2byte	0x193
 9575 1bbf 71040000 		.4byte	0x471
 9576 1bc3 05       		.uleb128 0x5
 9577 1bc4 03       		.byte	0x3
 9578 1bc5 F4000000 		.4byte	uxTaskNumber
 9579 1bc9 21       		.uleb128 0x21
 9580 1bca 1C070000 		.4byte	.LASF345
 9581 1bce 01       		.byte	0x1
 9582 1bcf 9401     		.2byte	0x194
 9583 1bd1 531B0000 		.4byte	0x1b53
 9584 1bd5 05       		.uleb128 0x5
 9585 1bd6 03       		.byte	0x3
 9586 1bd7 F8000000 		.4byte	xNextTaskUnblockTime
 9587 1bdb 21       		.uleb128 0x21
 9588 1bdc 49090000 		.4byte	.LASF346
 9589 1be0 01       		.byte	0x1
 9590 1be1 9501     		.2byte	0x195
 9591 1be3 65050000 		.4byte	0x565
 9592 1be7 05       		.uleb128 0x5
 9593 1be8 03       		.byte	0x3
 9594 1be9 FC000000 		.4byte	xIdleTaskHandle
 9595 1bed 21       		.uleb128 0x21
 9596 1bee E7060000 		.4byte	.LASF347
 9597 1bf2 01       		.byte	0x1
 9598 1bf3 9F01     		.2byte	0x19f
 9599 1bf5 181B0000 		.4byte	0x1b18
 9600 1bf9 05       		.uleb128 0x5
 9601 1bfa 03       		.byte	0x3
 9602 1bfb 00010000 		.4byte	uxSchedulerSuspended
 9603 1bff 32       		.uleb128 0x32
 9604 1c00 980B0000 		.4byte	.LASF348
 9605 1c04 0B       		.byte	0xb
 9606 1c05 9606     		.2byte	0x696
 9607 1c07 0B1C0000 		.4byte	0x1c0b
 9608 1c0b 08       		.uleb128 0x8
 9609 1c0c E0000000 		.4byte	0xe0
 9610 1c10 0D       		.uleb128 0xd
 9611 1c11 CA000000 		.4byte	0xca
 9612 1c15 201C0000 		.4byte	0x1c20
 9613 1c19 0E       		.uleb128 0xe
 9614 1c1a A9000000 		.4byte	0xa9
 9615 1c1e 0C       		.byte	0xc
 9616 1c1f 00       		.byte	0
 9617 1c20 33       		.uleb128 0x33
 9618 1c21 FB140000 		.4byte	.LASF349
 9619 1c25 06       		.byte	0x6
 9620 1c26 12       		.byte	0x12
 9621 1c27 101C0000 		.4byte	0x1c10
 9622 1c2b 05       		.uleb128 0x5
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 260


 9623 1c2c 03       		.byte	0x3
 9624 1c2d 00000000 		.4byte	sniffIDFilter
 9625 1c31 33       		.uleb128 0x33
 9626 1c32 68130000 		.4byte	.LASF350
 9627 1c36 07       		.byte	0x7
 9628 1c37 10       		.byte	0x10
 9629 1c38 FA030000 		.4byte	0x3fa
 9630 1c3c 05       		.uleb128 0x5
 9631 1c3d 03       		.byte	0x3
 9632 1c3e 00000000 		.4byte	buffer
 9633 1c42 0D       		.uleb128 0xd
 9634 1c43 EF030000 		.4byte	0x3ef
 9635 1c47 521C0000 		.4byte	0x1c52
 9636 1c4b 0E       		.uleb128 0xe
 9637 1c4c A9000000 		.4byte	0xa9
 9638 1c50 05       		.byte	0x5
 9639 1c51 00       		.byte	0
 9640 1c52 33       		.uleb128 0x33
 9641 1c53 24110000 		.4byte	.LASF351
 9642 1c57 0C       		.byte	0xc
 9643 1c58 0D       		.byte	0xd
 9644 1c59 421C0000 		.4byte	0x1c42
 9645 1c5d 05       		.uleb128 0x5
 9646 1c5e 03       		.byte	0x3
 9647 1c5f 00000000 		.4byte	objectList
 9648 1c63 34       		.uleb128 0x34
 9649 1c64 19030000 		.4byte	.LASF352
 9650 1c68 01       		.byte	0x1
 9651 1c69 7401     		.2byte	0x174
 9652 1c6b 751C0000 		.4byte	0x1c75
 9653 1c6f 05       		.uleb128 0x5
 9654 1c70 03       		.byte	0x3
 9655 1c71 00000000 		.4byte	pxCurrentTCB
 9656 1c75 08       		.uleb128 0x8
 9657 1c76 EB080000 		.4byte	0x8eb
 9658 1c7a 00       		.byte	0
 9659              		.section	.debug_abbrev,"",%progbits
 9660              	.Ldebug_abbrev0:
 9661 0000 01       		.uleb128 0x1
 9662 0001 11       		.uleb128 0x11
 9663 0002 01       		.byte	0x1
 9664 0003 25       		.uleb128 0x25
 9665 0004 0E       		.uleb128 0xe
 9666 0005 13       		.uleb128 0x13
 9667 0006 0B       		.uleb128 0xb
 9668 0007 03       		.uleb128 0x3
 9669 0008 0E       		.uleb128 0xe
 9670 0009 1B       		.uleb128 0x1b
 9671 000a 0E       		.uleb128 0xe
 9672 000b 55       		.uleb128 0x55
 9673 000c 17       		.uleb128 0x17
 9674 000d 11       		.uleb128 0x11
 9675 000e 01       		.uleb128 0x1
 9676 000f 10       		.uleb128 0x10
 9677 0010 17       		.uleb128 0x17
 9678 0011 00       		.byte	0
 9679 0012 00       		.byte	0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 261


 9680 0013 02       		.uleb128 0x2
 9681 0014 16       		.uleb128 0x16
 9682 0015 00       		.byte	0
 9683 0016 03       		.uleb128 0x3
 9684 0017 0E       		.uleb128 0xe
 9685 0018 3A       		.uleb128 0x3a
 9686 0019 0B       		.uleb128 0xb
 9687 001a 3B       		.uleb128 0x3b
 9688 001b 0B       		.uleb128 0xb
 9689 001c 49       		.uleb128 0x49
 9690 001d 13       		.uleb128 0x13
 9691 001e 00       		.byte	0
 9692 001f 00       		.byte	0
 9693 0020 03       		.uleb128 0x3
 9694 0021 24       		.uleb128 0x24
 9695 0022 00       		.byte	0
 9696 0023 0B       		.uleb128 0xb
 9697 0024 0B       		.uleb128 0xb
 9698 0025 3E       		.uleb128 0x3e
 9699 0026 0B       		.uleb128 0xb
 9700 0027 03       		.uleb128 0x3
 9701 0028 0E       		.uleb128 0xe
 9702 0029 00       		.byte	0
 9703 002a 00       		.byte	0
 9704 002b 04       		.uleb128 0x4
 9705 002c 24       		.uleb128 0x24
 9706 002d 00       		.byte	0
 9707 002e 0B       		.uleb128 0xb
 9708 002f 0B       		.uleb128 0xb
 9709 0030 3E       		.uleb128 0x3e
 9710 0031 0B       		.uleb128 0xb
 9711 0032 03       		.uleb128 0x3
 9712 0033 08       		.uleb128 0x8
 9713 0034 00       		.byte	0
 9714 0035 00       		.byte	0
 9715 0036 05       		.uleb128 0x5
 9716 0037 0F       		.uleb128 0xf
 9717 0038 00       		.byte	0
 9718 0039 0B       		.uleb128 0xb
 9719 003a 0B       		.uleb128 0xb
 9720 003b 00       		.byte	0
 9721 003c 00       		.byte	0
 9722 003d 06       		.uleb128 0x6
 9723 003e 0F       		.uleb128 0xf
 9724 003f 00       		.byte	0
 9725 0040 0B       		.uleb128 0xb
 9726 0041 0B       		.uleb128 0xb
 9727 0042 49       		.uleb128 0x49
 9728 0043 13       		.uleb128 0x13
 9729 0044 00       		.byte	0
 9730 0045 00       		.byte	0
 9731 0046 07       		.uleb128 0x7
 9732 0047 26       		.uleb128 0x26
 9733 0048 00       		.byte	0
 9734 0049 49       		.uleb128 0x49
 9735 004a 13       		.uleb128 0x13
 9736 004b 00       		.byte	0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 262


 9737 004c 00       		.byte	0
 9738 004d 08       		.uleb128 0x8
 9739 004e 35       		.uleb128 0x35
 9740 004f 00       		.byte	0
 9741 0050 49       		.uleb128 0x49
 9742 0051 13       		.uleb128 0x13
 9743 0052 00       		.byte	0
 9744 0053 00       		.byte	0
 9745 0054 09       		.uleb128 0x9
 9746 0055 04       		.uleb128 0x4
 9747 0056 01       		.byte	0x1
 9748 0057 0B       		.uleb128 0xb
 9749 0058 0B       		.uleb128 0xb
 9750 0059 49       		.uleb128 0x49
 9751 005a 13       		.uleb128 0x13
 9752 005b 3A       		.uleb128 0x3a
 9753 005c 0B       		.uleb128 0xb
 9754 005d 3B       		.uleb128 0x3b
 9755 005e 0B       		.uleb128 0xb
 9756 005f 01       		.uleb128 0x1
 9757 0060 13       		.uleb128 0x13
 9758 0061 00       		.byte	0
 9759 0062 00       		.byte	0
 9760 0063 0A       		.uleb128 0xa
 9761 0064 28       		.uleb128 0x28
 9762 0065 00       		.byte	0
 9763 0066 03       		.uleb128 0x3
 9764 0067 0E       		.uleb128 0xe
 9765 0068 1C       		.uleb128 0x1c
 9766 0069 0B       		.uleb128 0xb
 9767 006a 00       		.byte	0
 9768 006b 00       		.byte	0
 9769 006c 0B       		.uleb128 0xb
 9770 006d 13       		.uleb128 0x13
 9771 006e 01       		.byte	0x1
 9772 006f 0B       		.uleb128 0xb
 9773 0070 0B       		.uleb128 0xb
 9774 0071 3A       		.uleb128 0x3a
 9775 0072 0B       		.uleb128 0xb
 9776 0073 3B       		.uleb128 0x3b
 9777 0074 0B       		.uleb128 0xb
 9778 0075 01       		.uleb128 0x1
 9779 0076 13       		.uleb128 0x13
 9780 0077 00       		.byte	0
 9781 0078 00       		.byte	0
 9782 0079 0C       		.uleb128 0xc
 9783 007a 0D       		.uleb128 0xd
 9784 007b 00       		.byte	0
 9785 007c 03       		.uleb128 0x3
 9786 007d 0E       		.uleb128 0xe
 9787 007e 3A       		.uleb128 0x3a
 9788 007f 0B       		.uleb128 0xb
 9789 0080 3B       		.uleb128 0x3b
 9790 0081 0B       		.uleb128 0xb
 9791 0082 49       		.uleb128 0x49
 9792 0083 13       		.uleb128 0x13
 9793 0084 38       		.uleb128 0x38
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 263


 9794 0085 0B       		.uleb128 0xb
 9795 0086 00       		.byte	0
 9796 0087 00       		.byte	0
 9797 0088 0D       		.uleb128 0xd
 9798 0089 01       		.uleb128 0x1
 9799 008a 01       		.byte	0x1
 9800 008b 49       		.uleb128 0x49
 9801 008c 13       		.uleb128 0x13
 9802 008d 01       		.uleb128 0x1
 9803 008e 13       		.uleb128 0x13
 9804 008f 00       		.byte	0
 9805 0090 00       		.byte	0
 9806 0091 0E       		.uleb128 0xe
 9807 0092 21       		.uleb128 0x21
 9808 0093 00       		.byte	0
 9809 0094 49       		.uleb128 0x49
 9810 0095 13       		.uleb128 0x13
 9811 0096 2F       		.uleb128 0x2f
 9812 0097 0B       		.uleb128 0xb
 9813 0098 00       		.byte	0
 9814 0099 00       		.byte	0
 9815 009a 0F       		.uleb128 0xf
 9816 009b 13       		.uleb128 0x13
 9817 009c 01       		.byte	0x1
 9818 009d 0B       		.uleb128 0xb
 9819 009e 05       		.uleb128 0x5
 9820 009f 3A       		.uleb128 0x3a
 9821 00a0 0B       		.uleb128 0xb
 9822 00a1 3B       		.uleb128 0x3b
 9823 00a2 0B       		.uleb128 0xb
 9824 00a3 01       		.uleb128 0x1
 9825 00a4 13       		.uleb128 0x13
 9826 00a5 00       		.byte	0
 9827 00a6 00       		.byte	0
 9828 00a7 10       		.uleb128 0x10
 9829 00a8 13       		.uleb128 0x13
 9830 00a9 01       		.byte	0x1
 9831 00aa 03       		.uleb128 0x3
 9832 00ab 0E       		.uleb128 0xe
 9833 00ac 0B       		.uleb128 0xb
 9834 00ad 05       		.uleb128 0x5
 9835 00ae 3A       		.uleb128 0x3a
 9836 00af 0B       		.uleb128 0xb
 9837 00b0 3B       		.uleb128 0x3b
 9838 00b1 0B       		.uleb128 0xb
 9839 00b2 01       		.uleb128 0x1
 9840 00b3 13       		.uleb128 0x13
 9841 00b4 00       		.byte	0
 9842 00b5 00       		.byte	0
 9843 00b6 11       		.uleb128 0x11
 9844 00b7 0D       		.uleb128 0xd
 9845 00b8 00       		.byte	0
 9846 00b9 03       		.uleb128 0x3
 9847 00ba 0E       		.uleb128 0xe
 9848 00bb 3A       		.uleb128 0x3a
 9849 00bc 0B       		.uleb128 0xb
 9850 00bd 3B       		.uleb128 0x3b
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 264


 9851 00be 0B       		.uleb128 0xb
 9852 00bf 49       		.uleb128 0x49
 9853 00c0 13       		.uleb128 0x13
 9854 00c1 38       		.uleb128 0x38
 9855 00c2 05       		.uleb128 0x5
 9856 00c3 00       		.byte	0
 9857 00c4 00       		.byte	0
 9858 00c5 12       		.uleb128 0x12
 9859 00c6 21       		.uleb128 0x21
 9860 00c7 00       		.byte	0
 9861 00c8 49       		.uleb128 0x49
 9862 00c9 13       		.uleb128 0x13
 9863 00ca 2F       		.uleb128 0x2f
 9864 00cb 05       		.uleb128 0x5
 9865 00cc 00       		.byte	0
 9866 00cd 00       		.byte	0
 9867 00ce 13       		.uleb128 0x13
 9868 00cf 15       		.uleb128 0x15
 9869 00d0 01       		.byte	0x1
 9870 00d1 27       		.uleb128 0x27
 9871 00d2 19       		.uleb128 0x19
 9872 00d3 01       		.uleb128 0x1
 9873 00d4 13       		.uleb128 0x13
 9874 00d5 00       		.byte	0
 9875 00d6 00       		.byte	0
 9876 00d7 14       		.uleb128 0x14
 9877 00d8 05       		.uleb128 0x5
 9878 00d9 00       		.byte	0
 9879 00da 49       		.uleb128 0x49
 9880 00db 13       		.uleb128 0x13
 9881 00dc 00       		.byte	0
 9882 00dd 00       		.byte	0
 9883 00de 15       		.uleb128 0x15
 9884 00df 13       		.uleb128 0x13
 9885 00e0 01       		.byte	0x1
 9886 00e1 03       		.uleb128 0x3
 9887 00e2 0E       		.uleb128 0xe
 9888 00e3 0B       		.uleb128 0xb
 9889 00e4 0B       		.uleb128 0xb
 9890 00e5 3A       		.uleb128 0x3a
 9891 00e6 0B       		.uleb128 0xb
 9892 00e7 3B       		.uleb128 0x3b
 9893 00e8 0B       		.uleb128 0xb
 9894 00e9 01       		.uleb128 0x1
 9895 00ea 13       		.uleb128 0x13
 9896 00eb 00       		.byte	0
 9897 00ec 00       		.byte	0
 9898 00ed 16       		.uleb128 0x16
 9899 00ee 13       		.uleb128 0x13
 9900 00ef 01       		.byte	0x1
 9901 00f0 03       		.uleb128 0x3
 9902 00f1 0E       		.uleb128 0xe
 9903 00f2 0B       		.uleb128 0xb
 9904 00f3 0B       		.uleb128 0xb
 9905 00f4 3A       		.uleb128 0x3a
 9906 00f5 0B       		.uleb128 0xb
 9907 00f6 3B       		.uleb128 0x3b
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 265


 9908 00f7 05       		.uleb128 0x5
 9909 00f8 01       		.uleb128 0x1
 9910 00f9 13       		.uleb128 0x13
 9911 00fa 00       		.byte	0
 9912 00fb 00       		.byte	0
 9913 00fc 17       		.uleb128 0x17
 9914 00fd 0D       		.uleb128 0xd
 9915 00fe 00       		.byte	0
 9916 00ff 03       		.uleb128 0x3
 9917 0100 0E       		.uleb128 0xe
 9918 0101 3A       		.uleb128 0x3a
 9919 0102 0B       		.uleb128 0xb
 9920 0103 3B       		.uleb128 0x3b
 9921 0104 05       		.uleb128 0x5
 9922 0105 49       		.uleb128 0x49
 9923 0106 13       		.uleb128 0x13
 9924 0107 38       		.uleb128 0x38
 9925 0108 0B       		.uleb128 0xb
 9926 0109 00       		.byte	0
 9927 010a 00       		.byte	0
 9928 010b 18       		.uleb128 0x18
 9929 010c 16       		.uleb128 0x16
 9930 010d 00       		.byte	0
 9931 010e 03       		.uleb128 0x3
 9932 010f 0E       		.uleb128 0xe
 9933 0110 3A       		.uleb128 0x3a
 9934 0111 0B       		.uleb128 0xb
 9935 0112 3B       		.uleb128 0x3b
 9936 0113 05       		.uleb128 0x5
 9937 0114 49       		.uleb128 0x49
 9938 0115 13       		.uleb128 0x13
 9939 0116 00       		.byte	0
 9940 0117 00       		.byte	0
 9941 0118 19       		.uleb128 0x19
 9942 0119 2E       		.uleb128 0x2e
 9943 011a 01       		.byte	0x1
 9944 011b 03       		.uleb128 0x3
 9945 011c 0E       		.uleb128 0xe
 9946 011d 3A       		.uleb128 0x3a
 9947 011e 0B       		.uleb128 0xb
 9948 011f 3B       		.uleb128 0x3b
 9949 0120 0B       		.uleb128 0xb
 9950 0121 27       		.uleb128 0x27
 9951 0122 19       		.uleb128 0x19
 9952 0123 49       		.uleb128 0x49
 9953 0124 13       		.uleb128 0x13
 9954 0125 20       		.uleb128 0x20
 9955 0126 0B       		.uleb128 0xb
 9956 0127 01       		.uleb128 0x1
 9957 0128 13       		.uleb128 0x13
 9958 0129 00       		.byte	0
 9959 012a 00       		.byte	0
 9960 012b 1A       		.uleb128 0x1a
 9961 012c 34       		.uleb128 0x34
 9962 012d 00       		.byte	0
 9963 012e 03       		.uleb128 0x3
 9964 012f 0E       		.uleb128 0xe
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 266


 9965 0130 3A       		.uleb128 0x3a
 9966 0131 0B       		.uleb128 0xb
 9967 0132 3B       		.uleb128 0x3b
 9968 0133 0B       		.uleb128 0xb
 9969 0134 49       		.uleb128 0x49
 9970 0135 13       		.uleb128 0x13
 9971 0136 00       		.byte	0
 9972 0137 00       		.byte	0
 9973 0138 1B       		.uleb128 0x1b
 9974 0139 2E       		.uleb128 0x2e
 9975 013a 01       		.byte	0x1
 9976 013b 03       		.uleb128 0x3
 9977 013c 0E       		.uleb128 0xe
 9978 013d 3A       		.uleb128 0x3a
 9979 013e 0B       		.uleb128 0xb
 9980 013f 3B       		.uleb128 0x3b
 9981 0140 05       		.uleb128 0x5
 9982 0141 27       		.uleb128 0x27
 9983 0142 19       		.uleb128 0x19
 9984 0143 20       		.uleb128 0x20
 9985 0144 0B       		.uleb128 0xb
 9986 0145 01       		.uleb128 0x1
 9987 0146 13       		.uleb128 0x13
 9988 0147 00       		.byte	0
 9989 0148 00       		.byte	0
 9990 0149 1C       		.uleb128 0x1c
 9991 014a 05       		.uleb128 0x5
 9992 014b 00       		.byte	0
 9993 014c 03       		.uleb128 0x3
 9994 014d 0E       		.uleb128 0xe
 9995 014e 3A       		.uleb128 0x3a
 9996 014f 0B       		.uleb128 0xb
 9997 0150 3B       		.uleb128 0x3b
 9998 0151 05       		.uleb128 0x5
 9999 0152 49       		.uleb128 0x49
 10000 0153 13       		.uleb128 0x13
 10001 0154 00       		.byte	0
 10002 0155 00       		.byte	0
 10003 0156 1D       		.uleb128 0x1d
 10004 0157 2E       		.uleb128 0x2e
 10005 0158 01       		.byte	0x1
 10006 0159 03       		.uleb128 0x3
 10007 015a 0E       		.uleb128 0xe
 10008 015b 3A       		.uleb128 0x3a
 10009 015c 0B       		.uleb128 0xb
 10010 015d 3B       		.uleb128 0x3b
 10011 015e 0B       		.uleb128 0xb
 10012 015f 27       		.uleb128 0x27
 10013 0160 19       		.uleb128 0x19
 10014 0161 20       		.uleb128 0x20
 10015 0162 0B       		.uleb128 0xb
 10016 0163 01       		.uleb128 0x1
 10017 0164 13       		.uleb128 0x13
 10018 0165 00       		.byte	0
 10019 0166 00       		.byte	0
 10020 0167 1E       		.uleb128 0x1e
 10021 0168 05       		.uleb128 0x5
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 267


 10022 0169 00       		.byte	0
 10023 016a 03       		.uleb128 0x3
 10024 016b 0E       		.uleb128 0xe
 10025 016c 3A       		.uleb128 0x3a
 10026 016d 0B       		.uleb128 0xb
 10027 016e 3B       		.uleb128 0x3b
 10028 016f 0B       		.uleb128 0xb
 10029 0170 49       		.uleb128 0x49
 10030 0171 13       		.uleb128 0x13
 10031 0172 00       		.byte	0
 10032 0173 00       		.byte	0
 10033 0174 1F       		.uleb128 0x1f
 10034 0175 2E       		.uleb128 0x2e
 10035 0176 01       		.byte	0x1
 10036 0177 3F       		.uleb128 0x3f
 10037 0178 19       		.uleb128 0x19
 10038 0179 03       		.uleb128 0x3
 10039 017a 0E       		.uleb128 0xe
 10040 017b 3A       		.uleb128 0x3a
 10041 017c 0B       		.uleb128 0xb
 10042 017d 3B       		.uleb128 0x3b
 10043 017e 05       		.uleb128 0x5
 10044 017f 27       		.uleb128 0x27
 10045 0180 19       		.uleb128 0x19
 10046 0181 49       		.uleb128 0x49
 10047 0182 13       		.uleb128 0x13
 10048 0183 11       		.uleb128 0x11
 10049 0184 01       		.uleb128 0x1
 10050 0185 12       		.uleb128 0x12
 10051 0186 06       		.uleb128 0x6
 10052 0187 40       		.uleb128 0x40
 10053 0188 18       		.uleb128 0x18
 10054 0189 9642     		.uleb128 0x2116
 10055 018b 19       		.uleb128 0x19
 10056 018c 01       		.uleb128 0x1
 10057 018d 13       		.uleb128 0x13
 10058 018e 00       		.byte	0
 10059 018f 00       		.byte	0
 10060 0190 20       		.uleb128 0x20
 10061 0191 05       		.uleb128 0x5
 10062 0192 00       		.byte	0
 10063 0193 03       		.uleb128 0x3
 10064 0194 0E       		.uleb128 0xe
 10065 0195 3A       		.uleb128 0x3a
 10066 0196 0B       		.uleb128 0xb
 10067 0197 3B       		.uleb128 0x3b
 10068 0198 05       		.uleb128 0x5
 10069 0199 49       		.uleb128 0x49
 10070 019a 13       		.uleb128 0x13
 10071 019b 02       		.uleb128 0x2
 10072 019c 18       		.uleb128 0x18
 10073 019d 00       		.byte	0
 10074 019e 00       		.byte	0
 10075 019f 21       		.uleb128 0x21
 10076 01a0 34       		.uleb128 0x34
 10077 01a1 00       		.byte	0
 10078 01a2 03       		.uleb128 0x3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 268


 10079 01a3 0E       		.uleb128 0xe
 10080 01a4 3A       		.uleb128 0x3a
 10081 01a5 0B       		.uleb128 0xb
 10082 01a6 3B       		.uleb128 0x3b
 10083 01a7 05       		.uleb128 0x5
 10084 01a8 49       		.uleb128 0x49
 10085 01a9 13       		.uleb128 0x13
 10086 01aa 02       		.uleb128 0x2
 10087 01ab 18       		.uleb128 0x18
 10088 01ac 00       		.byte	0
 10089 01ad 00       		.byte	0
 10090 01ae 22       		.uleb128 0x22
 10091 01af 0B       		.uleb128 0xb
 10092 01b0 01       		.byte	0x1
 10093 01b1 11       		.uleb128 0x11
 10094 01b2 01       		.uleb128 0x1
 10095 01b3 12       		.uleb128 0x12
 10096 01b4 06       		.uleb128 0x6
 10097 01b5 00       		.byte	0
 10098 01b6 00       		.byte	0
 10099 01b7 23       		.uleb128 0x23
 10100 01b8 2E       		.uleb128 0x2e
 10101 01b9 01       		.byte	0x1
 10102 01ba 03       		.uleb128 0x3
 10103 01bb 0E       		.uleb128 0xe
 10104 01bc 3A       		.uleb128 0x3a
 10105 01bd 0B       		.uleb128 0xb
 10106 01be 3B       		.uleb128 0x3b
 10107 01bf 05       		.uleb128 0x5
 10108 01c0 27       		.uleb128 0x27
 10109 01c1 19       		.uleb128 0x19
 10110 01c2 11       		.uleb128 0x11
 10111 01c3 01       		.uleb128 0x1
 10112 01c4 12       		.uleb128 0x12
 10113 01c5 06       		.uleb128 0x6
 10114 01c6 40       		.uleb128 0x40
 10115 01c7 18       		.uleb128 0x18
 10116 01c8 9642     		.uleb128 0x2116
 10117 01ca 19       		.uleb128 0x19
 10118 01cb 01       		.uleb128 0x1
 10119 01cc 13       		.uleb128 0x13
 10120 01cd 00       		.byte	0
 10121 01ce 00       		.byte	0
 10122 01cf 24       		.uleb128 0x24
 10123 01d0 34       		.uleb128 0x34
 10124 01d1 00       		.byte	0
 10125 01d2 03       		.uleb128 0x3
 10126 01d3 08       		.uleb128 0x8
 10127 01d4 3A       		.uleb128 0x3a
 10128 01d5 0B       		.uleb128 0xb
 10129 01d6 3B       		.uleb128 0x3b
 10130 01d7 05       		.uleb128 0x5
 10131 01d8 49       		.uleb128 0x49
 10132 01d9 13       		.uleb128 0x13
 10133 01da 02       		.uleb128 0x2
 10134 01db 18       		.uleb128 0x18
 10135 01dc 00       		.byte	0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 269


 10136 01dd 00       		.byte	0
 10137 01de 25       		.uleb128 0x25
 10138 01df 2E       		.uleb128 0x2e
 10139 01e0 01       		.byte	0x1
 10140 01e1 3F       		.uleb128 0x3f
 10141 01e2 19       		.uleb128 0x19
 10142 01e3 03       		.uleb128 0x3
 10143 01e4 0E       		.uleb128 0xe
 10144 01e5 3A       		.uleb128 0x3a
 10145 01e6 0B       		.uleb128 0xb
 10146 01e7 3B       		.uleb128 0x3b
 10147 01e8 05       		.uleb128 0x5
 10148 01e9 27       		.uleb128 0x27
 10149 01ea 19       		.uleb128 0x19
 10150 01eb 11       		.uleb128 0x11
 10151 01ec 01       		.uleb128 0x1
 10152 01ed 12       		.uleb128 0x12
 10153 01ee 06       		.uleb128 0x6
 10154 01ef 40       		.uleb128 0x40
 10155 01f0 18       		.uleb128 0x18
 10156 01f1 9642     		.uleb128 0x2116
 10157 01f3 19       		.uleb128 0x19
 10158 01f4 01       		.uleb128 0x1
 10159 01f5 13       		.uleb128 0x13
 10160 01f6 00       		.byte	0
 10161 01f7 00       		.byte	0
 10162 01f8 26       		.uleb128 0x26
 10163 01f9 2E       		.uleb128 0x2e
 10164 01fa 01       		.byte	0x1
 10165 01fb 3F       		.uleb128 0x3f
 10166 01fc 19       		.uleb128 0x19
 10167 01fd 03       		.uleb128 0x3
 10168 01fe 0E       		.uleb128 0xe
 10169 01ff 3A       		.uleb128 0x3a
 10170 0200 0B       		.uleb128 0xb
 10171 0201 3B       		.uleb128 0x3b
 10172 0202 05       		.uleb128 0x5
 10173 0203 27       		.uleb128 0x27
 10174 0204 19       		.uleb128 0x19
 10175 0205 49       		.uleb128 0x49
 10176 0206 13       		.uleb128 0x13
 10177 0207 11       		.uleb128 0x11
 10178 0208 01       		.uleb128 0x1
 10179 0209 12       		.uleb128 0x12
 10180 020a 06       		.uleb128 0x6
 10181 020b 40       		.uleb128 0x40
 10182 020c 18       		.uleb128 0x18
 10183 020d 9742     		.uleb128 0x2117
 10184 020f 19       		.uleb128 0x19
 10185 0210 01       		.uleb128 0x1
 10186 0211 13       		.uleb128 0x13
 10187 0212 00       		.byte	0
 10188 0213 00       		.byte	0
 10189 0214 27       		.uleb128 0x27
 10190 0215 1D       		.uleb128 0x1d
 10191 0216 01       		.byte	0x1
 10192 0217 31       		.uleb128 0x31
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 270


 10193 0218 13       		.uleb128 0x13
 10194 0219 11       		.uleb128 0x11
 10195 021a 01       		.uleb128 0x1
 10196 021b 12       		.uleb128 0x12
 10197 021c 06       		.uleb128 0x6
 10198 021d 58       		.uleb128 0x58
 10199 021e 0B       		.uleb128 0xb
 10200 021f 59       		.uleb128 0x59
 10201 0220 05       		.uleb128 0x5
 10202 0221 01       		.uleb128 0x1
 10203 0222 13       		.uleb128 0x13
 10204 0223 00       		.byte	0
 10205 0224 00       		.byte	0
 10206 0225 28       		.uleb128 0x28
 10207 0226 34       		.uleb128 0x34
 10208 0227 00       		.byte	0
 10209 0228 31       		.uleb128 0x31
 10210 0229 13       		.uleb128 0x13
 10211 022a 02       		.uleb128 0x2
 10212 022b 18       		.uleb128 0x18
 10213 022c 00       		.byte	0
 10214 022d 00       		.byte	0
 10215 022e 29       		.uleb128 0x29
 10216 022f 1D       		.uleb128 0x1d
 10217 0230 01       		.byte	0x1
 10218 0231 31       		.uleb128 0x31
 10219 0232 13       		.uleb128 0x13
 10220 0233 11       		.uleb128 0x11
 10221 0234 01       		.uleb128 0x1
 10222 0235 12       		.uleb128 0x12
 10223 0236 06       		.uleb128 0x6
 10224 0237 58       		.uleb128 0x58
 10225 0238 0B       		.uleb128 0xb
 10226 0239 59       		.uleb128 0x59
 10227 023a 05       		.uleb128 0x5
 10228 023b 00       		.byte	0
 10229 023c 00       		.byte	0
 10230 023d 2A       		.uleb128 0x2a
 10231 023e 05       		.uleb128 0x5
 10232 023f 00       		.byte	0
 10233 0240 31       		.uleb128 0x31
 10234 0241 13       		.uleb128 0x13
 10235 0242 02       		.uleb128 0x2
 10236 0243 18       		.uleb128 0x18
 10237 0244 00       		.byte	0
 10238 0245 00       		.byte	0
 10239 0246 2B       		.uleb128 0x2b
 10240 0247 2E       		.uleb128 0x2e
 10241 0248 01       		.byte	0x1
 10242 0249 03       		.uleb128 0x3
 10243 024a 0E       		.uleb128 0xe
 10244 024b 3A       		.uleb128 0x3a
 10245 024c 0B       		.uleb128 0xb
 10246 024d 3B       		.uleb128 0x3b
 10247 024e 05       		.uleb128 0x5
 10248 024f 27       		.uleb128 0x27
 10249 0250 19       		.uleb128 0x19
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 271


 10250 0251 49       		.uleb128 0x49
 10251 0252 13       		.uleb128 0x13
 10252 0253 11       		.uleb128 0x11
 10253 0254 01       		.uleb128 0x1
 10254 0255 12       		.uleb128 0x12
 10255 0256 06       		.uleb128 0x6
 10256 0257 40       		.uleb128 0x40
 10257 0258 18       		.uleb128 0x18
 10258 0259 9742     		.uleb128 0x2117
 10259 025b 19       		.uleb128 0x19
 10260 025c 01       		.uleb128 0x1
 10261 025d 13       		.uleb128 0x13
 10262 025e 00       		.byte	0
 10263 025f 00       		.byte	0
 10264 0260 2C       		.uleb128 0x2c
 10265 0261 2E       		.uleb128 0x2e
 10266 0262 00       		.byte	0
 10267 0263 3F       		.uleb128 0x3f
 10268 0264 19       		.uleb128 0x19
 10269 0265 03       		.uleb128 0x3
 10270 0266 0E       		.uleb128 0xe
 10271 0267 3A       		.uleb128 0x3a
 10272 0268 0B       		.uleb128 0xb
 10273 0269 3B       		.uleb128 0x3b
 10274 026a 05       		.uleb128 0x5
 10275 026b 27       		.uleb128 0x27
 10276 026c 19       		.uleb128 0x19
 10277 026d 11       		.uleb128 0x11
 10278 026e 01       		.uleb128 0x1
 10279 026f 12       		.uleb128 0x12
 10280 0270 06       		.uleb128 0x6
 10281 0271 40       		.uleb128 0x40
 10282 0272 18       		.uleb128 0x18
 10283 0273 9742     		.uleb128 0x2117
 10284 0275 19       		.uleb128 0x19
 10285 0276 00       		.byte	0
 10286 0277 00       		.byte	0
 10287 0278 2D       		.uleb128 0x2d
 10288 0279 2E       		.uleb128 0x2e
 10289 027a 00       		.byte	0
 10290 027b 3F       		.uleb128 0x3f
 10291 027c 19       		.uleb128 0x19
 10292 027d 03       		.uleb128 0x3
 10293 027e 0E       		.uleb128 0xe
 10294 027f 3A       		.uleb128 0x3a
 10295 0280 0B       		.uleb128 0xb
 10296 0281 3B       		.uleb128 0x3b
 10297 0282 05       		.uleb128 0x5
 10298 0283 27       		.uleb128 0x27
 10299 0284 19       		.uleb128 0x19
 10300 0285 49       		.uleb128 0x49
 10301 0286 13       		.uleb128 0x13
 10302 0287 11       		.uleb128 0x11
 10303 0288 01       		.uleb128 0x1
 10304 0289 12       		.uleb128 0x12
 10305 028a 06       		.uleb128 0x6
 10306 028b 40       		.uleb128 0x40
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 272


 10307 028c 18       		.uleb128 0x18
 10308 028d 9742     		.uleb128 0x2117
 10309 028f 19       		.uleb128 0x19
 10310 0290 00       		.byte	0
 10311 0291 00       		.byte	0
 10312 0292 2E       		.uleb128 0x2e
 10313 0293 0B       		.uleb128 0xb
 10314 0294 01       		.byte	0x1
 10315 0295 11       		.uleb128 0x11
 10316 0296 01       		.uleb128 0x1
 10317 0297 12       		.uleb128 0x12
 10318 0298 06       		.uleb128 0x6
 10319 0299 01       		.uleb128 0x1
 10320 029a 13       		.uleb128 0x13
 10321 029b 00       		.byte	0
 10322 029c 00       		.byte	0
 10323 029d 2F       		.uleb128 0x2f
 10324 029e 2E       		.uleb128 0x2e
 10325 029f 01       		.byte	0x1
 10326 02a0 3F       		.uleb128 0x3f
 10327 02a1 19       		.uleb128 0x19
 10328 02a2 03       		.uleb128 0x3
 10329 02a3 0E       		.uleb128 0xe
 10330 02a4 3A       		.uleb128 0x3a
 10331 02a5 0B       		.uleb128 0xb
 10332 02a6 3B       		.uleb128 0x3b
 10333 02a7 05       		.uleb128 0x5
 10334 02a8 27       		.uleb128 0x27
 10335 02a9 19       		.uleb128 0x19
 10336 02aa 11       		.uleb128 0x11
 10337 02ab 01       		.uleb128 0x1
 10338 02ac 12       		.uleb128 0x12
 10339 02ad 06       		.uleb128 0x6
 10340 02ae 40       		.uleb128 0x40
 10341 02af 18       		.uleb128 0x18
 10342 02b0 9742     		.uleb128 0x2117
 10343 02b2 19       		.uleb128 0x19
 10344 02b3 01       		.uleb128 0x1
 10345 02b4 13       		.uleb128 0x13
 10346 02b5 00       		.byte	0
 10347 02b6 00       		.byte	0
 10348 02b7 30       		.uleb128 0x30
 10349 02b8 2E       		.uleb128 0x2e
 10350 02b9 01       		.byte	0x1
 10351 02ba 03       		.uleb128 0x3
 10352 02bb 0E       		.uleb128 0xe
 10353 02bc 3A       		.uleb128 0x3a
 10354 02bd 0B       		.uleb128 0xb
 10355 02be 3B       		.uleb128 0x3b
 10356 02bf 05       		.uleb128 0x5
 10357 02c0 27       		.uleb128 0x27
 10358 02c1 19       		.uleb128 0x19
 10359 02c2 49       		.uleb128 0x49
 10360 02c3 13       		.uleb128 0x13
 10361 02c4 11       		.uleb128 0x11
 10362 02c5 01       		.uleb128 0x1
 10363 02c6 12       		.uleb128 0x12
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 273


 10364 02c7 06       		.uleb128 0x6
 10365 02c8 40       		.uleb128 0x40
 10366 02c9 18       		.uleb128 0x18
 10367 02ca 9642     		.uleb128 0x2116
 10368 02cc 19       		.uleb128 0x19
 10369 02cd 01       		.uleb128 0x1
 10370 02ce 13       		.uleb128 0x13
 10371 02cf 00       		.byte	0
 10372 02d0 00       		.byte	0
 10373 02d1 31       		.uleb128 0x31
 10374 02d2 2E       		.uleb128 0x2e
 10375 02d3 01       		.byte	0x1
 10376 02d4 03       		.uleb128 0x3
 10377 02d5 0E       		.uleb128 0xe
 10378 02d6 3A       		.uleb128 0x3a
 10379 02d7 0B       		.uleb128 0xb
 10380 02d8 3B       		.uleb128 0x3b
 10381 02d9 05       		.uleb128 0x5
 10382 02da 27       		.uleb128 0x27
 10383 02db 19       		.uleb128 0x19
 10384 02dc 11       		.uleb128 0x11
 10385 02dd 01       		.uleb128 0x1
 10386 02de 12       		.uleb128 0x12
 10387 02df 06       		.uleb128 0x6
 10388 02e0 40       		.uleb128 0x40
 10389 02e1 18       		.uleb128 0x18
 10390 02e2 9742     		.uleb128 0x2117
 10391 02e4 19       		.uleb128 0x19
 10392 02e5 01       		.uleb128 0x1
 10393 02e6 13       		.uleb128 0x13
 10394 02e7 00       		.byte	0
 10395 02e8 00       		.byte	0
 10396 02e9 32       		.uleb128 0x32
 10397 02ea 34       		.uleb128 0x34
 10398 02eb 00       		.byte	0
 10399 02ec 03       		.uleb128 0x3
 10400 02ed 0E       		.uleb128 0xe
 10401 02ee 3A       		.uleb128 0x3a
 10402 02ef 0B       		.uleb128 0xb
 10403 02f0 3B       		.uleb128 0x3b
 10404 02f1 05       		.uleb128 0x5
 10405 02f2 49       		.uleb128 0x49
 10406 02f3 13       		.uleb128 0x13
 10407 02f4 3F       		.uleb128 0x3f
 10408 02f5 19       		.uleb128 0x19
 10409 02f6 3C       		.uleb128 0x3c
 10410 02f7 19       		.uleb128 0x19
 10411 02f8 00       		.byte	0
 10412 02f9 00       		.byte	0
 10413 02fa 33       		.uleb128 0x33
 10414 02fb 34       		.uleb128 0x34
 10415 02fc 00       		.byte	0
 10416 02fd 03       		.uleb128 0x3
 10417 02fe 0E       		.uleb128 0xe
 10418 02ff 3A       		.uleb128 0x3a
 10419 0300 0B       		.uleb128 0xb
 10420 0301 3B       		.uleb128 0x3b
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 274


 10421 0302 0B       		.uleb128 0xb
 10422 0303 49       		.uleb128 0x49
 10423 0304 13       		.uleb128 0x13
 10424 0305 3F       		.uleb128 0x3f
 10425 0306 19       		.uleb128 0x19
 10426 0307 02       		.uleb128 0x2
 10427 0308 18       		.uleb128 0x18
 10428 0309 00       		.byte	0
 10429 030a 00       		.byte	0
 10430 030b 34       		.uleb128 0x34
 10431 030c 34       		.uleb128 0x34
 10432 030d 00       		.byte	0
 10433 030e 03       		.uleb128 0x3
 10434 030f 0E       		.uleb128 0xe
 10435 0310 3A       		.uleb128 0x3a
 10436 0311 0B       		.uleb128 0xb
 10437 0312 3B       		.uleb128 0x3b
 10438 0313 05       		.uleb128 0x5
 10439 0314 49       		.uleb128 0x49
 10440 0315 13       		.uleb128 0x13
 10441 0316 3F       		.uleb128 0x3f
 10442 0317 19       		.uleb128 0x19
 10443 0318 02       		.uleb128 0x2
 10444 0319 18       		.uleb128 0x18
 10445 031a 00       		.byte	0
 10446 031b 00       		.byte	0
 10447 031c 00       		.byte	0
 10448              		.section	.debug_aranges,"",%progbits
 10449 0000 CC010000 		.4byte	0x1cc
 10450 0004 0200     		.2byte	0x2
 10451 0006 00000000 		.4byte	.Ldebug_info0
 10452 000a 04       		.byte	0x4
 10453 000b 00       		.byte	0
 10454 000c 0000     		.2byte	0
 10455 000e 0000     		.2byte	0
 10456 0010 00000000 		.4byte	.LFB68
 10457 0014 82000000 		.4byte	.LFE68-.LFB68
 10458 0018 00000000 		.4byte	.LFB69
 10459 001c EE000000 		.4byte	.LFE69-.LFB69
 10460 0020 00000000 		.4byte	.LFB70
 10461 0024 18010000 		.4byte	.LFE70-.LFB70
 10462 0028 00000000 		.4byte	.LFB71
 10463 002c 28010000 		.4byte	.LFE71-.LFB71
 10464 0030 00000000 		.4byte	.LFB72
 10465 0034 BC000000 		.4byte	.LFE72-.LFB72
 10466 0038 00000000 		.4byte	.LFB73
 10467 003c 64000000 		.4byte	.LFE73-.LFB73
 10468 0040 00000000 		.4byte	.LFB74
 10469 0044 98000000 		.4byte	.LFE74-.LFB74
 10470 0048 00000000 		.4byte	.LFB75
 10471 004c 34000000 		.4byte	.LFE75-.LFB75
 10472 0050 00000000 		.4byte	.LFB76
 10473 0054 54000000 		.4byte	.LFE76-.LFB76
 10474 0058 00000000 		.4byte	.LFB77
 10475 005c 70010000 		.4byte	.LFE77-.LFB77
 10476 0060 00000000 		.4byte	.LFB78
 10477 0064 FC000000 		.4byte	.LFE78-.LFB78
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 275


 10478 0068 00000000 		.4byte	.LFB79
 10479 006c 58000000 		.4byte	.LFE79-.LFB79
 10480 0070 00000000 		.4byte	.LFB80
 10481 0074 C8000000 		.4byte	.LFE80-.LFB80
 10482 0078 00000000 		.4byte	.LFB81
 10483 007c EC000000 		.4byte	.LFE81-.LFB81
 10484 0080 00000000 		.4byte	.LFB82
 10485 0084 6C000000 		.4byte	.LFE82-.LFB82
 10486 0088 00000000 		.4byte	.LFB83
 10487 008c 30000000 		.4byte	.LFE83-.LFB83
 10488 0090 00000000 		.4byte	.LFB84
 10489 0094 1C000000 		.4byte	.LFE84-.LFB84
 10490 0098 00000000 		.4byte	.LFB85
 10491 009c 38010000 		.4byte	.LFE85-.LFB85
 10492 00a0 00000000 		.4byte	.LFB86
 10493 00a4 1C000000 		.4byte	.LFE86-.LFB86
 10494 00a8 00000000 		.4byte	.LFB87
 10495 00ac 20000000 		.4byte	.LFE87-.LFB87
 10496 00b0 00000000 		.4byte	.LFB88
 10497 00b4 14000000 		.4byte	.LFE88-.LFB88
 10498 00b8 00000000 		.4byte	.LFB89
 10499 00bc 2C000000 		.4byte	.LFE89-.LFB89
 10500 00c0 00000000 		.4byte	.LFB90
 10501 00c4 1C010000 		.4byte	.LFE90-.LFB90
 10502 00c8 00000000 		.4byte	.LFB91
 10503 00cc 7C010000 		.4byte	.LFE91-.LFB91
 10504 00d0 00000000 		.4byte	.LFB92
 10505 00d4 F8000000 		.4byte	.LFE92-.LFB92
 10506 00d8 00000000 		.4byte	.LFB93
 10507 00dc 2C000000 		.4byte	.LFE93-.LFB93
 10508 00e0 00000000 		.4byte	.LFB94
 10509 00e4 3C000000 		.4byte	.LFE94-.LFB94
 10510 00e8 00000000 		.4byte	.LFB95
 10511 00ec C4000000 		.4byte	.LFE95-.LFB95
 10512 00f0 00000000 		.4byte	.LFB96
 10513 00f4 AC000000 		.4byte	.LFE96-.LFB96
 10514 00f8 00000000 		.4byte	.LFB97
 10515 00fc 2C000000 		.4byte	.LFE97-.LFB97
 10516 0100 00000000 		.4byte	.LFB98
 10517 0104 88000000 		.4byte	.LFE98-.LFB98
 10518 0108 00000000 		.4byte	.LFB99
 10519 010c 18000000 		.4byte	.LFE99-.LFB99
 10520 0110 00000000 		.4byte	.LFB100
 10521 0114 2A000000 		.4byte	.LFE100-.LFB100
 10522 0118 00000000 		.4byte	.LFB101
 10523 011c 24000000 		.4byte	.LFE101-.LFB101
 10524 0120 00000000 		.4byte	.LFB102
 10525 0124 0E000000 		.4byte	.LFE102-.LFB102
 10526 0128 00000000 		.4byte	.LFB103
 10527 012c 80000000 		.4byte	.LFE103-.LFB103
 10528 0130 00000000 		.4byte	.LFB104
 10529 0134 78000000 		.4byte	.LFE104-.LFB104
 10530 0138 00000000 		.4byte	.LFB105
 10531 013c BC000000 		.4byte	.LFE105-.LFB105
 10532 0140 00000000 		.4byte	.LFB106
 10533 0144 A4000000 		.4byte	.LFE106-.LFB106
 10534 0148 00000000 		.4byte	.LFB107
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 276


 10535 014c 36000000 		.4byte	.LFE107-.LFB107
 10536 0150 00000000 		.4byte	.LFB108
 10537 0154 38000000 		.4byte	.LFE108-.LFB108
 10538 0158 00000000 		.4byte	.LFB109
 10539 015c 20000000 		.4byte	.LFE109-.LFB109
 10540 0160 00000000 		.4byte	.LFB110
 10541 0164 48000000 		.4byte	.LFE110-.LFB110
 10542 0168 00000000 		.4byte	.LFB111
 10543 016c 1C000000 		.4byte	.LFE111-.LFB111
 10544 0170 00000000 		.4byte	.LFB112
 10545 0174 20010000 		.4byte	.LFE112-.LFB112
 10546 0178 00000000 		.4byte	.LFB113
 10547 017c F8000000 		.4byte	.LFE113-.LFB113
 10548 0180 00000000 		.4byte	.LFB114
 10549 0184 30000000 		.4byte	.LFE114-.LFB114
 10550 0188 00000000 		.4byte	.LFB115
 10551 018c 28000000 		.4byte	.LFE115-.LFB115
 10552 0190 00000000 		.4byte	.LFB116
 10553 0194 90000000 		.4byte	.LFE116-.LFB116
 10554 0198 00000000 		.4byte	.LFB117
 10555 019c B4000000 		.4byte	.LFE117-.LFB117
 10556 01a0 00000000 		.4byte	.LFB118
 10557 01a4 28010000 		.4byte	.LFE118-.LFB118
 10558 01a8 00000000 		.4byte	.LFB119
 10559 01ac 68010000 		.4byte	.LFE119-.LFB119
 10560 01b0 00000000 		.4byte	.LFB120
 10561 01b4 00010000 		.4byte	.LFE120-.LFB120
 10562 01b8 00000000 		.4byte	.LFB121
 10563 01bc 4C000000 		.4byte	.LFE121-.LFB121
 10564 01c0 00000000 		.4byte	.LFB122
 10565 01c4 CC000000 		.4byte	.LFE122-.LFB122
 10566 01c8 00000000 		.4byte	0
 10567 01cc 00000000 		.4byte	0
 10568              		.section	.debug_ranges,"",%progbits
 10569              	.Ldebug_ranges0:
 10570 0000 00000000 		.4byte	.LFB68
 10571 0004 82000000 		.4byte	.LFE68
 10572 0008 00000000 		.4byte	.LFB69
 10573 000c EE000000 		.4byte	.LFE69
 10574 0010 00000000 		.4byte	.LFB70
 10575 0014 18010000 		.4byte	.LFE70
 10576 0018 00000000 		.4byte	.LFB71
 10577 001c 28010000 		.4byte	.LFE71
 10578 0020 00000000 		.4byte	.LFB72
 10579 0024 BC000000 		.4byte	.LFE72
 10580 0028 00000000 		.4byte	.LFB73
 10581 002c 64000000 		.4byte	.LFE73
 10582 0030 00000000 		.4byte	.LFB74
 10583 0034 98000000 		.4byte	.LFE74
 10584 0038 00000000 		.4byte	.LFB75
 10585 003c 34000000 		.4byte	.LFE75
 10586 0040 00000000 		.4byte	.LFB76
 10587 0044 54000000 		.4byte	.LFE76
 10588 0048 00000000 		.4byte	.LFB77
 10589 004c 70010000 		.4byte	.LFE77
 10590 0050 00000000 		.4byte	.LFB78
 10591 0054 FC000000 		.4byte	.LFE78
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 277


 10592 0058 00000000 		.4byte	.LFB79
 10593 005c 58000000 		.4byte	.LFE79
 10594 0060 00000000 		.4byte	.LFB80
 10595 0064 C8000000 		.4byte	.LFE80
 10596 0068 00000000 		.4byte	.LFB81
 10597 006c EC000000 		.4byte	.LFE81
 10598 0070 00000000 		.4byte	.LFB82
 10599 0074 6C000000 		.4byte	.LFE82
 10600 0078 00000000 		.4byte	.LFB83
 10601 007c 30000000 		.4byte	.LFE83
 10602 0080 00000000 		.4byte	.LFB84
 10603 0084 1C000000 		.4byte	.LFE84
 10604 0088 00000000 		.4byte	.LFB85
 10605 008c 38010000 		.4byte	.LFE85
 10606 0090 00000000 		.4byte	.LFB86
 10607 0094 1C000000 		.4byte	.LFE86
 10608 0098 00000000 		.4byte	.LFB87
 10609 009c 20000000 		.4byte	.LFE87
 10610 00a0 00000000 		.4byte	.LFB88
 10611 00a4 14000000 		.4byte	.LFE88
 10612 00a8 00000000 		.4byte	.LFB89
 10613 00ac 2C000000 		.4byte	.LFE89
 10614 00b0 00000000 		.4byte	.LFB90
 10615 00b4 1C010000 		.4byte	.LFE90
 10616 00b8 00000000 		.4byte	.LFB91
 10617 00bc 7C010000 		.4byte	.LFE91
 10618 00c0 00000000 		.4byte	.LFB92
 10619 00c4 F8000000 		.4byte	.LFE92
 10620 00c8 00000000 		.4byte	.LFB93
 10621 00cc 2C000000 		.4byte	.LFE93
 10622 00d0 00000000 		.4byte	.LFB94
 10623 00d4 3C000000 		.4byte	.LFE94
 10624 00d8 00000000 		.4byte	.LFB95
 10625 00dc C4000000 		.4byte	.LFE95
 10626 00e0 00000000 		.4byte	.LFB96
 10627 00e4 AC000000 		.4byte	.LFE96
 10628 00e8 00000000 		.4byte	.LFB97
 10629 00ec 2C000000 		.4byte	.LFE97
 10630 00f0 00000000 		.4byte	.LFB98
 10631 00f4 88000000 		.4byte	.LFE98
 10632 00f8 00000000 		.4byte	.LFB99
 10633 00fc 18000000 		.4byte	.LFE99
 10634 0100 00000000 		.4byte	.LFB100
 10635 0104 2A000000 		.4byte	.LFE100
 10636 0108 00000000 		.4byte	.LFB101
 10637 010c 24000000 		.4byte	.LFE101
 10638 0110 00000000 		.4byte	.LFB102
 10639 0114 0E000000 		.4byte	.LFE102
 10640 0118 00000000 		.4byte	.LFB103
 10641 011c 80000000 		.4byte	.LFE103
 10642 0120 00000000 		.4byte	.LFB104
 10643 0124 78000000 		.4byte	.LFE104
 10644 0128 00000000 		.4byte	.LFB105
 10645 012c BC000000 		.4byte	.LFE105
 10646 0130 00000000 		.4byte	.LFB106
 10647 0134 A4000000 		.4byte	.LFE106
 10648 0138 00000000 		.4byte	.LFB107
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 278


 10649 013c 36000000 		.4byte	.LFE107
 10650 0140 00000000 		.4byte	.LFB108
 10651 0144 38000000 		.4byte	.LFE108
 10652 0148 00000000 		.4byte	.LFB109
 10653 014c 20000000 		.4byte	.LFE109
 10654 0150 00000000 		.4byte	.LFB110
 10655 0154 48000000 		.4byte	.LFE110
 10656 0158 00000000 		.4byte	.LFB111
 10657 015c 1C000000 		.4byte	.LFE111
 10658 0160 00000000 		.4byte	.LFB112
 10659 0164 20010000 		.4byte	.LFE112
 10660 0168 00000000 		.4byte	.LFB113
 10661 016c F8000000 		.4byte	.LFE113
 10662 0170 00000000 		.4byte	.LFB114
 10663 0174 30000000 		.4byte	.LFE114
 10664 0178 00000000 		.4byte	.LFB115
 10665 017c 28000000 		.4byte	.LFE115
 10666 0180 00000000 		.4byte	.LFB116
 10667 0184 90000000 		.4byte	.LFE116
 10668 0188 00000000 		.4byte	.LFB117
 10669 018c B4000000 		.4byte	.LFE117
 10670 0190 00000000 		.4byte	.LFB118
 10671 0194 28010000 		.4byte	.LFE118
 10672 0198 00000000 		.4byte	.LFB119
 10673 019c 68010000 		.4byte	.LFE119
 10674 01a0 00000000 		.4byte	.LFB120
 10675 01a4 00010000 		.4byte	.LFE120
 10676 01a8 00000000 		.4byte	.LFB121
 10677 01ac 4C000000 		.4byte	.LFE121
 10678 01b0 00000000 		.4byte	.LFB122
 10679 01b4 CC000000 		.4byte	.LFE122
 10680 01b8 00000000 		.4byte	0
 10681 01bc 00000000 		.4byte	0
 10682              		.section	.debug_line,"",%progbits
 10683              	.Ldebug_line0:
 10684 0000 E30B0000 		.section	.debug_str,"MS",%progbits,1
 10684      02006602 
 10684      00000201 
 10684      FB0E0D00 
 10684      01010101 
 10685              	.LASF246:
 10686 0000 75785065 		.ascii	"uxPendedCounts\000"
 10686      6E646564 
 10686      436F756E 
 10686      747300
 10687              	.LASF32:
 10688 000f 49445F45 		.ascii	"ID_END\000"
 10688      4E4400
 10689              	.LASF343:
 10690 0016 78596965 		.ascii	"xYieldPending\000"
 10690      6C645065 
 10690      6E64696E 
 10690      6700
 10691              	.LASF4:
 10692 0024 73697A65 		.ascii	"size_t\000"
 10692      5F7400
 10693              	.LASF119:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 279


 10694 002b 6F626A65 		.ascii	"objectArray\000"
 10694      63744172 
 10694      72617900 
 10695              	.LASF15:
 10696 0037 73697A65 		.ascii	"sizetype\000"
 10696      74797065 
 10696      00
 10697              	.LASF257:
 10698 0040 75785175 		.ascii	"uxQueue\000"
 10698      65756500 
 10699              	.LASF91:
 10700 0048 49445F45 		.ascii	"ID_EVENT_GROUP_SET_BITS\000"
 10700      56454E54 
 10700      5F47524F 
 10700      55505F53 
 10700      45545F42 
 10701              	.LASF202:
 10702 0060 75735374 		.ascii	"usStackDepth\000"
 10702      61636B44 
 10702      65707468 
 10702      00
 10703              	.LASF328:
 10704 006d 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 10704      426C6F63 
 10704      6B496E64 
 10704      6566696E 
 10704      6974656C 
 10705              	.LASF51:
 10706 0083 49445F54 		.ascii	"ID_TAKE_MUTEX_RECURSIVE_FAILED\000"
 10706      414B455F 
 10706      4D555445 
 10706      585F5245 
 10706      43555253 
 10707              	.LASF222:
 10708 00a2 78546963 		.ascii	"xTicksToDelay\000"
 10708      6B73546F 
 10708      44656C61 
 10708      7900
 10709              	.LASF166:
 10710 00b0 4D656D6F 		.ascii	"MemoryRegion_t\000"
 10710      72795265 
 10710      67696F6E 
 10710      5F7400
 10711              	.LASF181:
 10712 00bf 78457665 		.ascii	"xEventListItem\000"
 10712      6E744C69 
 10712      73744974 
 10712      656D00
 10713              	.LASF19:
 10714 00ce 696E7433 		.ascii	"int32_t\000"
 10714      325F7400 
 10715              	.LASF151:
 10716 00d6 65546173 		.ascii	"eTaskState\000"
 10716      6B537461 
 10716      746500
 10717              	.LASF255:
 10718 00e1 70756C54 		.ascii	"pulTotalRunTime\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 280


 10718      6F74616C 
 10718      52756E54 
 10718      696D6500 
 10719              	.LASF50:
 10720 00f1 49445F54 		.ascii	"ID_TAKE_MUTEX_RECURSIVE\000"
 10720      414B455F 
 10720      4D555445 
 10720      585F5245 
 10720      43555253 
 10721              	.LASF272:
 10722 0109 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 10722      6B52656D 
 10722      6F766546 
 10722      726F6D55 
 10722      6E6F7264 
 10723              	.LASF339:
 10724 012b 78546963 		.ascii	"xTickCount\000"
 10724      6B436F75 
 10724      6E7400
 10725              	.LASF185:
 10726 0136 75785461 		.ascii	"uxTaskNumber\000"
 10726      736B4E75 
 10726      6D626572 
 10726      00
 10727              	.LASF200:
 10728 0143 70785461 		.ascii	"pxTaskCode\000"
 10728      736B436F 
 10728      646500
 10729              	.LASF231:
 10730 014e 75785361 		.ascii	"uxSavedInterruptState\000"
 10730      76656449 
 10730      6E746572 
 10730      72757074 
 10730      53746174 
 10731              	.LASF123:
 10732 0164 77726974 		.ascii	"write\000"
 10732      6500
 10733              	.LASF317:
 10734 016a 78546173 		.ascii	"xTaskGenericNotify\000"
 10734      6B47656E 
 10734      65726963 
 10734      4E6F7469 
 10734      667900
 10735              	.LASF126:
 10736 017d 42617365 		.ascii	"BaseType_t\000"
 10736      54797065 
 10736      5F7400
 10737              	.LASF199:
 10738 0188 75635265 		.ascii	"ucReturn\000"
 10738      7475726E 
 10738      00
 10739              	.LASF149:
 10740 0191 6544656C 		.ascii	"eDeleted\000"
 10740      65746564 
 10740      00
 10741              	.LASF183:
 10742 019a 70785374 		.ascii	"pxStack\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 281


 10742      61636B00 
 10743              	.LASF239:
 10744 01a2 76546173 		.ascii	"vTaskResume\000"
 10744      6B526573 
 10744      756D6500 
 10745              	.LASF168:
 10746 01ae 7848616E 		.ascii	"xHandle\000"
 10746      646C6500 
 10747              	.LASF308:
 10748 01b6 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 10748      736B4765 
 10748      744E756D 
 10748      6265724F 
 10748      66546173 
 10749              	.LASF306:
 10750 01cd 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 10750      6B507269 
 10750      6F726974 
 10750      79446973 
 10750      696E6865 
 10751              	.LASF177:
 10752 01e5 5461736B 		.ascii	"TaskStatus_t\000"
 10752      53746174 
 10752      75735F74 
 10752      00
 10753              	.LASF238:
 10754 01f2 78546173 		.ascii	"xTaskToSuspend\000"
 10754      6B546F53 
 10754      75737065 
 10754      6E6400
 10755              	.LASF225:
 10756 0201 78546173 		.ascii	"xTask\000"
 10756      6B00
 10757              	.LASF113:
 10758 0207 4F626A65 		.ascii	"ObjectListHeader\000"
 10758      63744C69 
 10758      73744865 
 10758      61646572 
 10758      00
 10759              	.LASF229:
 10760 0218 75785265 		.ascii	"uxReturn\000"
 10760      7475726E 
 10760      00
 10761              	.LASF132:
 10762 0221 70784E65 		.ascii	"pxNext\000"
 10762      787400
 10763              	.LASF290:
 10764 0228 65537461 		.ascii	"eState\000"
 10764      746500
 10765              	.LASF205:
 10766 022f 70784E65 		.ascii	"pxNewTCB\000"
 10766      77544342 
 10766      00
 10767              	.LASF5:
 10768 0238 5F5F7569 		.ascii	"__uint8_t\000"
 10768      6E74385F 
 10768      7400
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 282


 10769              	.LASF115:
 10770 0242 6C656E4F 		.ascii	"lenObjectName\000"
 10770      626A6563 
 10770      744E616D 
 10770      6500
 10771              	.LASF62:
 10772 0250 49445F51 		.ascii	"ID_QUEUE_RECEIVE_FROM_ISR\000"
 10772      55455545 
 10772      5F524543 
 10772      45495645 
 10772      5F46524F 
 10773              	.LASF173:
 10774 026a 75784261 		.ascii	"uxBasePriority\000"
 10774      73655072 
 10774      696F7269 
 10774      747900
 10775              	.LASF189:
 10776 0279 74736B54 		.ascii	"tskTCB\000"
 10776      434200
 10777              	.LASF172:
 10778 0280 75784375 		.ascii	"uxCurrentPriority\000"
 10778      7272656E 
 10778      74507269 
 10778      6F726974 
 10778      7900
 10779              	.LASF52:
 10780 0292 49445F43 		.ascii	"ID_CREATE_COUNTING_SEMAPHORE\000"
 10780      52454154 
 10780      455F434F 
 10780      554E5449 
 10780      4E475F53 
 10781              	.LASF99:
 10782 02af 49445F54 		.ascii	"ID_TASK_NOTIFY_WAIT_BLOCK\000"
 10782      41534B5F 
 10782      4E4F5449 
 10782      46595F57 
 10782      4149545F 
 10783              	.LASF109:
 10784 02c9 7061636B 		.ascii	"packetID\000"
 10784      65744944 
 10784      00
 10785              	.LASF234:
 10786 02d2 75784375 		.ascii	"uxCurrentBasePriority\000"
 10786      7272656E 
 10786      74426173 
 10786      65507269 
 10786      6F726974 
 10787              	.LASF120:
 10788 02e8 4F626A65 		.ascii	"ObjectList\000"
 10788      63744C69 
 10788      737400
 10789              	.LASF37:
 10790 02f3 49445F54 		.ascii	"ID_TASK_SWITCHED_OUT\000"
 10790      41534B5F 
 10790      53574954 
 10790      43484544 
 10790      5F4F5554 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 283


 10791              	.LASF11:
 10792 0308 6C6F6E67 		.ascii	"long int\000"
 10792      20696E74 
 10792      00
 10793              	.LASF82:
 10794 0311 49445F46 		.ascii	"ID_FREE\000"
 10794      52454500 
 10795              	.LASF352:
 10796 0319 70784375 		.ascii	"pxCurrentTCB\000"
 10796      7272656E 
 10796      74544342 
 10796      00
 10797              	.LASF79:
 10798 0326 49445F54 		.ascii	"ID_TIMER_EXPIRED\000"
 10798      494D4552 
 10798      5F455850 
 10798      49524544 
 10798      00
 10799              	.LASF139:
 10800 0337 784C4953 		.ascii	"xLIST\000"
 10800      5400
 10801              	.LASF336:
 10802 033d 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 10802      6C657465 
 10802      64546173 
 10802      6B735761 
 10802      6974696E 
 10803              	.LASF247:
 10804 035a 78546173 		.ascii	"xTaskGetTickCount\000"
 10804      6B476574 
 10804      5469636B 
 10804      436F756E 
 10804      7400
 10805              	.LASF243:
 10806 036c 76546173 		.ascii	"vTaskStartScheduler\000"
 10806      6B537461 
 10806      72745363 
 10806      68656475 
 10806      6C657200 
 10807              	.LASF153:
 10808 0380 65536574 		.ascii	"eSetBits\000"
 10808      42697473 
 10808      00
 10809              	.LASF41:
 10810 0389 49445F42 		.ascii	"ID_BLOCKING_ON_QUEUE_SEND\000"
 10810      4C4F434B 
 10810      494E475F 
 10810      4F4E5F51 
 10810      55455545 
 10811              	.LASF210:
 10812 03a3 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 10812      64644E65 
 10812      77546173 
 10812      6B546F52 
 10812      65616479 
 10813              	.LASF114:
 10814 03bc 6F626A65 		.ascii	"objectNumber\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 284


 10814      63744E75 
 10814      6D626572 
 10814      00
 10815              	.LASF277:
 10816 03c9 70785469 		.ascii	"pxTicksToWait\000"
 10816      636B7354 
 10816      6F576169 
 10816      7400
 10817              	.LASF288:
 10818 03d7 70785461 		.ascii	"pxTaskStatus\000"
 10818      736B5374 
 10818      61747573 
 10818      00
 10819              	.LASF201:
 10820 03e4 70634E61 		.ascii	"pcName\000"
 10820      6D6500
 10821              	.LASF46:
 10822 03eb 49445F43 		.ascii	"ID_CREATE_MUTEX\000"
 10822      52454154 
 10822      455F4D55 
 10822      54455800 
 10823              	.LASF337:
 10824 03fb 78537573 		.ascii	"xSuspendedTaskList\000"
 10824      70656E64 
 10824      65645461 
 10824      736B4C69 
 10824      737400
 10825              	.LASF311:
 10826 040e 78436C65 		.ascii	"xClearCountOnExit\000"
 10826      6172436F 
 10826      756E744F 
 10826      6E457869 
 10826      7400
 10827              	.LASF3:
 10828 0420 7369676E 		.ascii	"signed char\000"
 10828      65642063 
 10828      68617200 
 10829              	.LASF148:
 10830 042c 65537573 		.ascii	"eSuspended\000"
 10830      70656E64 
 10830      656400
 10831              	.LASF17:
 10832 0437 75696E74 		.ascii	"uint8_t\000"
 10832      385F7400 
 10833              	.LASF280:
 10834 043f 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 10834      736B4765 
 10834      74546173 
 10834      6B4E756D 
 10834      62657200 
 10835              	.LASF294:
 10836 0453 70784E65 		.ascii	"pxNextTCB\000"
 10836      78745443 
 10836      4200
 10837              	.LASF322:
 10838 045d 75634F72 		.ascii	"ucOriginalNotifyState\000"
 10838      6967696E 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 285


 10838      616C4E6F 
 10838      74696679 
 10838      53746174 
 10839              	.LASF76:
 10840 0473 49445F54 		.ascii	"ID_TIMER_CREATE\000"
 10840      494D4552 
 10840      5F435245 
 10840      41544500 
 10841              	.LASF197:
 10842 0483 756C4E65 		.ascii	"ulNewMaskValue\000"
 10842      774D6173 
 10842      6B56616C 
 10842      756500
 10843              	.LASF6:
 10844 0492 756E7369 		.ascii	"unsigned char\000"
 10844      676E6564 
 10844      20636861 
 10844      7200
 10845              	.LASF344:
 10846 04a0 784E756D 		.ascii	"xNumOfOverflows\000"
 10846      4F664F76 
 10846      6572666C 
 10846      6F777300 
 10847              	.LASF40:
 10848 04b0 49445F42 		.ascii	"ID_BLOCKING_ON_QUEUE_RECEIVE\000"
 10848      4C4F434B 
 10848      494E475F 
 10848      4F4E5F51 
 10848      55455545 
 10849              	.LASF206:
 10850 04cd 78526574 		.ascii	"xReturn\000"
 10850      75726E00 
 10851              	.LASF101:
 10852 04d5 49445F54 		.ascii	"ID_TASK_NOTIFY\000"
 10852      41534B5F 
 10852      4E4F5449 
 10852      465900
 10853              	.LASF138:
 10854 04e4 4D696E69 		.ascii	"MiniListItem_t\000"
 10854      4C697374 
 10854      4974656D 
 10854      5F7400
 10855              	.LASF193:
 10856 04f3 76506F72 		.ascii	"vPortSetBASEPRI\000"
 10856      74536574 
 10856      42415345 
 10856      50524900 
 10857              	.LASF302:
 10858 0503 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 10858      65736574 
 10858      4E657874 
 10858      5461736B 
 10858      556E626C 
 10859              	.LASF209:
 10860 051f 70727649 		.ascii	"prvInitialiseNewTask\000"
 10860      6E697469 
 10860      616C6973 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 286


 10860      654E6577 
 10860      5461736B 
 10861              	.LASF75:
 10862 0534 49445F54 		.ascii	"ID_TASK_INCREMENT_TICK\000"
 10862      41534B5F 
 10862      494E4352 
 10862      454D454E 
 10862      545F5449 
 10863              	.LASF160:
 10864 054b 7854696D 		.ascii	"xTimeOnEntering\000"
 10864      654F6E45 
 10864      6E746572 
 10864      696E6700 
 10865              	.LASF342:
 10866 055b 75785065 		.ascii	"uxPendedTicks\000"
 10866      6E646564 
 10866      5469636B 
 10866      7300
 10867              	.LASF60:
 10868 0569 49445F51 		.ascii	"ID_QUEUE_SEND_FROM_ISR\000"
 10868      55455545 
 10868      5F53454E 
 10868      445F4652 
 10868      4F4D5F49 
 10869              	.LASF269:
 10870 0580 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 10870      6B506C61 
 10870      63654F6E 
 10870      556E6F72 
 10870      64657265 
 10871              	.LASF321:
 10872 059f 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 10872      72657669 
 10872      6F75734E 
 10872      6F746966 
 10872      69636174 
 10873              	.LASF141:
 10874 05bc 7078496E 		.ascii	"pxIndex\000"
 10874      64657800 
 10875              	.LASF179:
 10876 05c4 7078546F 		.ascii	"pxTopOfStack\000"
 10876      704F6653 
 10876      7461636B 
 10876      00
 10877              	.LASF341:
 10878 05d1 78536368 		.ascii	"xSchedulerRunning\000"
 10878      6564756C 
 10878      65725275 
 10878      6E6E696E 
 10878      6700
 10879              	.LASF291:
 10880 05e3 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 10880      61736B49 
 10880      73546173 
 10880      6B537573 
 10880      70656E64 
 10881              	.LASF16:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 287


 10882 05fa 63686172 		.ascii	"char\000"
 10882      00
 10883              	.LASF161:
 10884 05ff 54696D65 		.ascii	"TimeOut_t\000"
 10884      4F75745F 
 10884      7400
 10885              	.LASF137:
 10886 0609 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 10886      495F4C49 
 10886      53545F49 
 10886      54454D00 
 10887              	.LASF8:
 10888 0619 5F5F7569 		.ascii	"__uint16_t\000"
 10888      6E743136 
 10888      5F7400
 10889              	.LASF156:
 10890 0624 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 10890      56616C75 
 10890      65576974 
 10890      686F7574 
 10890      4F766572 
 10891              	.LASF213:
 10892 063e 76546173 		.ascii	"vTaskDelete\000"
 10892      6B44656C 
 10892      65746500 
 10893              	.LASF298:
 10894 064a 756C436F 		.ascii	"ulCount\000"
 10894      756E7400 
 10895              	.LASF146:
 10896 0652 65526561 		.ascii	"eReady\000"
 10896      647900
 10897              	.LASF30:
 10898 0659 4F626A65 		.ascii	"ObjectType\000"
 10898      63745479 
 10898      706500
 10899              	.LASF58:
 10900 0664 49445F51 		.ascii	"ID_QUEUE_PEEK_FROM_ISR\000"
 10900      55455545 
 10900      5F504545 
 10900      4B5F4652 
 10900      4F4D5F49 
 10901              	.LASF36:
 10902 067b 49445F4C 		.ascii	"ID_LOW_POWER_IDLE_END\000"
 10902      4F575F50 
 10902      4F574552 
 10902      5F49444C 
 10902      455F454E 
 10903              	.LASF174:
 10904 0691 756C5275 		.ascii	"ulRunTimeCounter\000"
 10904      6E54696D 
 10904      65436F75 
 10904      6E746572 
 10904      00
 10905              	.LASF48:
 10906 06a2 49445F47 		.ascii	"ID_GIVE_MUTEX_RECURSIVE\000"
 10906      4956455F 
 10906      4D555445 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 288


 10906      585F5245 
 10906      43555253 
 10907              	.LASF307:
 10908 06ba 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 10908      736B5265 
 10908      73657445 
 10908      76656E74 
 10908      4974656D 
 10909              	.LASF241:
 10910 06d4 78546173 		.ascii	"xTaskResumeFromISR\000"
 10910      6B526573 
 10910      756D6546 
 10910      726F6D49 
 10910      535200
 10911              	.LASF347:
 10912 06e7 75785363 		.ascii	"uxSchedulerSuspended\000"
 10912      68656475 
 10912      6C657253 
 10912      75737065 
 10912      6E646564 
 10913              	.LASF262:
 10914 06fc 70756C53 		.ascii	"pulStack\000"
 10914      7461636B 
 10914      00
 10915              	.LASF77:
 10916 0705 49445F54 		.ascii	"ID_TIMER_CREATE_FAILED\000"
 10916      494D4552 
 10916      5F435245 
 10916      4154455F 
 10916      4641494C 
 10917              	.LASF345:
 10918 071c 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 10918      74546173 
 10918      6B556E62 
 10918      6C6F636B 
 10918      54696D65 
 10919              	.LASF355:
 10920 0731 463A5C50 		.ascii	"F:\\Programme_Scripts\\PSOC Creator\\FreeRTOS\\Free"
 10920      726F6772 
 10920      616D6D65 
 10920      5F536372 
 10920      69707473 
 10921 0760 52544F53 		.ascii	"RTOS_CY8CKIT_059-master\\FreeRTOS_Demo.cydsn\000"
 10921      5F435938 
 10921      434B4954 
 10921      5F303539 
 10921      2D6D6173 
 10922              	.LASF334:
 10923 078c 7850656E 		.ascii	"xPendingReadyList\000"
 10923      64696E67 
 10923      52656164 
 10923      794C6973 
 10923      7400
 10924              	.LASF196:
 10925 079e 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 10925      7274436F 
 10925      756E744C 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 289


 10925      65616469 
 10925      6E675A65 
 10926              	.LASF187:
 10927 07b6 756C4E6F 		.ascii	"ulNotifiedValue\000"
 10927      74696669 
 10927      65645661 
 10927      6C756500 
 10928              	.LASF28:
 10929 07c6 5441534B 		.ascii	"TASK\000"
 10929      00
 10930              	.LASF263:
 10931 07cb 756C4368 		.ascii	"ulCheckValue\000"
 10931      65636B56 
 10931      616C7565 
 10931      00
 10932              	.LASF44:
 10933 07d8 49445F51 		.ascii	"ID_QUEUE_CREATE\000"
 10933      55455545 
 10933      5F435245 
 10933      41544500 
 10934              	.LASF261:
 10935 07e8 76546173 		.ascii	"vTaskSwitchContext\000"
 10935      6B537769 
 10935      74636843 
 10935      6F6E7465 
 10935      787400
 10936              	.LASF300:
 10937 07fb 70756345 		.ascii	"pucEndOfStack\000"
 10937      6E644F66 
 10937      53746163 
 10937      6B00
 10938              	.LASF195:
 10939 0809 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 10939      72745261 
 10939      69736542 
 10939      41534550 
 10939      524900
 10940              	.LASF265:
 10941 081c 7078436F 		.ascii	"pxConstList\000"
 10941      6E73744C 
 10941      69737400 
 10942              	.LASF204:
 10943 0828 70784372 		.ascii	"pxCreatedTask\000"
 10943      65617465 
 10943      64546173 
 10943      6B00
 10944              	.LASF309:
 10945 0836 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 10945      736B496E 
 10945      6372656D 
 10945      656E744D 
 10945      75746578 
 10946              	.LASF240:
 10947 0854 78546173 		.ascii	"xTaskToResume\000"
 10947      6B546F52 
 10947      6573756D 
 10947      6500
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 290


 10948              	.LASF319:
 10949 0862 756C5661 		.ascii	"ulValue\000"
 10949      6C756500 
 10950              	.LASF227:
 10951 086a 70785374 		.ascii	"pxStateList\000"
 10951      6174654C 
 10951      69737400 
 10952              	.LASF248:
 10953 0876 78546963 		.ascii	"xTicks\000"
 10953      6B7300
 10954              	.LASF163:
 10955 087d 70764261 		.ascii	"pvBaseAddress\000"
 10955      73654164 
 10955      64726573 
 10955      7300
 10956              	.LASF338:
 10957 088b 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 10957      7272656E 
 10957      744E756D 
 10957      6265724F 
 10957      66546173 
 10958              	.LASF232:
 10959 08a2 76546173 		.ascii	"vTaskPrioritySet\000"
 10959      6B507269 
 10959      6F726974 
 10959      79536574 
 10959      00
 10960              	.LASF159:
 10961 08b3 784F7665 		.ascii	"xOverflowCount\000"
 10961      72666C6F 
 10961      77436F75 
 10961      6E7400
 10962              	.LASF275:
 10963 08c2 70785469 		.ascii	"pxTimeOut\000"
 10963      6D654F75 
 10963      7400
 10964              	.LASF38:
 10965 08cc 49445F54 		.ascii	"ID_TASK_PRIORITY_INHERIT\000"
 10965      41534B5F 
 10965      5052494F 
 10965      52495459 
 10965      5F494E48 
 10966              	.LASF29:
 10967 08e5 4E554D42 		.ascii	"NUMBER_OF_OBJECTTYPES\000"
 10967      45525F4F 
 10967      465F4F42 
 10967      4A454354 
 10967      54595045 
 10968              	.LASF267:
 10969 08fb 70784576 		.ascii	"pxEventList\000"
 10969      656E744C 
 10969      69737400 
 10970              	.LASF13:
 10971 0907 6C6F6E67 		.ascii	"long unsigned int\000"
 10971      20756E73 
 10971      69676E65 
 10971      6420696E 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 291


 10971      7400
 10972              	.LASF279:
 10973 0919 76546173 		.ascii	"vTaskMissedYield\000"
 10973      6B4D6973 
 10973      73656459 
 10973      69656C64 
 10973      00
 10974              	.LASF117:
 10975 092a 4F626A65 		.ascii	"Object\000"
 10975      637400
 10976              	.LASF26:
 10977 0931 42494E41 		.ascii	"BINARY_SEMAPHORE\000"
 10977      52595F53 
 10977      454D4150 
 10977      484F5245 
 10977      00
 10978              	.LASF129:
 10979 0942 42756666 		.ascii	"Buffer\000"
 10979      657200
 10980              	.LASF346:
 10981 0949 7849646C 		.ascii	"xIdleTaskHandle\000"
 10981      65546173 
 10981      6B48616E 
 10981      646C6500 
 10982              	.LASF274:
 10983 0959 76546173 		.ascii	"vTaskSetTimeOutState\000"
 10983      6B536574 
 10983      54696D65 
 10983      4F757453 
 10983      74617465 
 10984              	.LASF89:
 10985 096e 49445F45 		.ascii	"ID_EVENT_GROUP_CLEAR_BITS\000"
 10985      56454E54 
 10985      5F47524F 
 10985      55505F43 
 10985      4C454152 
 10986              	.LASF167:
 10987 0988 78544153 		.ascii	"xTASK_STATUS\000"
 10987      4B5F5354 
 10987      41545553 
 10987      00
 10988              	.LASF250:
 10989 0995 70635461 		.ascii	"pcTaskGetName\000"
 10989      736B4765 
 10989      744E616D 
 10989      6500
 10990              	.LASF235:
 10991 09a3 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 10991      696F7269 
 10991      74795573 
 10991      65644F6E 
 10991      456E7472 
 10992              	.LASF162:
 10993 09b9 784D454D 		.ascii	"xMEMORY_REGION\000"
 10993      4F52595F 
 10993      52454749 
 10993      4F4E00
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 292


 10994              	.LASF276:
 10995 09c8 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 10995      6B436865 
 10995      636B466F 
 10995      7254696D 
 10995      654F7574 
 10996              	.LASF305:
 10997 09dd 70784D75 		.ascii	"pxMutexHolder\000"
 10997      74657848 
 10997      6F6C6465 
 10997      7200
 10998              	.LASF207:
 10999 09eb 756C5374 		.ascii	"ulStackDepth\000"
 10999      61636B44 
 10999      65707468 
 10999      00
 11000              	.LASF56:
 11001 09f8 49445F51 		.ascii	"ID_QUEUE_RECEIVE\000"
 11001      55455545 
 11001      5F524543 
 11001      45495645 
 11001      00
 11002              	.LASF295:
 11003 0a09 70784669 		.ascii	"pxFirstTCB\000"
 11003      72737454 
 11003      434200
 11004              	.LASF25:
 11005 0a14 434F554E 		.ascii	"COUNTING_SEMAPHORE\000"
 11005      54494E47 
 11005      5F53454D 
 11005      4150484F 
 11005      524500
 11006              	.LASF266:
 11007 0a27 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11007      6B506C61 
 11007      63654F6E 
 11007      4576656E 
 11007      744C6973 
 11008              	.LASF353:
 11009 0a3d 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11009      43313120 
 11009      352E342E 
 11009      31203230 
 11009      31363036 
 11010 0a70 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11010      20726576 
 11010      6973696F 
 11010      6E203233 
 11010      37373135 
 11011 0aa3 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 11011      66756E63 
 11011      74696F6E 
 11011      2D736563 
 11011      74696F6E 
 11012              	.LASF281:
 11013 0acb 76546173 		.ascii	"vTaskSetTaskNumber\000"
 11013      6B536574 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 293


 11013      5461736B 
 11013      4E756D62 
 11013      657200
 11014              	.LASF283:
 11015 0ade 70727649 		.ascii	"prvIdleTask\000"
 11015      646C6554 
 11015      61736B00 
 11016              	.LASF135:
 11017 0aea 7076436F 		.ascii	"pvContainer\000"
 11017      6E746169 
 11017      6E657200 
 11018              	.LASF12:
 11019 0af6 5F5F7569 		.ascii	"__uint32_t\000"
 11019      6E743332 
 11019      5F7400
 11020              	.LASF242:
 11021 0b01 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11021      76656449 
 11021      6E746572 
 11021      72757074 
 11021      53746174 
 11022              	.LASF1:
 11023 0b18 6C6F6E67 		.ascii	"long long int\000"
 11023      206C6F6E 
 11023      6720696E 
 11023      7400
 11024              	.LASF35:
 11025 0b26 49445F4C 		.ascii	"ID_LOW_POWER_IDLE_BEGIN\000"
 11025      4F575F50 
 11025      4F574552 
 11025      5F49444C 
 11025      455F4245 
 11026              	.LASF54:
 11027 0b3e 49445F51 		.ascii	"ID_QUEUE_SEND\000"
 11027      55455545 
 11027      5F53454E 
 11027      4400
 11028              	.LASF22:
 11029 0b4c 646F7562 		.ascii	"double\000"
 11029      6C6500
 11030              	.LASF273:
 11031 0b53 70784576 		.ascii	"pxEventListItem\000"
 11031      656E744C 
 11031      69737449 
 11031      74656D00 
 11032              	.LASF130:
 11033 0b63 784C4953 		.ascii	"xLIST_ITEM\000"
 11033      545F4954 
 11033      454D00
 11034              	.LASF98:
 11035 0b6e 49445F54 		.ascii	"ID_TASK_NOTIFY_TAKE\000"
 11035      41534B5F 
 11035      4E4F5449 
 11035      46595F54 
 11035      414B4500 
 11036              	.LASF67:
 11037 0b82 49445F54 		.ascii	"ID_TASK_CREATE_FAILED\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 294


 11037      41534B5F 
 11037      43524541 
 11037      54455F46 
 11037      41494C45 
 11038              	.LASF348:
 11039 0b98 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11039      52784275 
 11039      66666572 
 11039      00
 11040              	.LASF164:
 11041 0ba5 756C4C65 		.ascii	"ulLengthInBytes\000"
 11041      6E677468 
 11041      496E4279 
 11041      74657300 
 11042              	.LASF289:
 11043 0bb5 78476574 		.ascii	"xGetFreeStackSpace\000"
 11043      46726565 
 11043      53746163 
 11043      6B537061 
 11043      636500
 11044              	.LASF254:
 11045 0bc8 75784172 		.ascii	"uxArraySize\000"
 11045      72617953 
 11045      697A6500 
 11046              	.LASF329:
 11047 0bd4 70785265 		.ascii	"pxReadyTasksLists\000"
 11047      61647954 
 11047      61736B73 
 11047      4C697374 
 11047      7300
 11048              	.LASF21:
 11049 0be6 666C6F61 		.ascii	"float\000"
 11049      7400
 11050              	.LASF145:
 11051 0bec 6552756E 		.ascii	"eRunning\000"
 11051      6E696E67 
 11051      00
 11052              	.LASF124:
 11053 0bf5 5461736B 		.ascii	"TaskFunction_t\000"
 11053      46756E63 
 11053      74696F6E 
 11053      5F7400
 11054              	.LASF122:
 11055 0c04 72656164 		.ascii	"read\000"
 11055      00
 11056              	.LASF217:
 11057 0c09 7854696D 		.ascii	"xTimeToWake\000"
 11057      65546F57 
 11057      616B6500 
 11058              	.LASF0:
 11059 0c15 756E7369 		.ascii	"unsigned int\000"
 11059      676E6564 
 11059      20696E74 
 11059      00
 11060              	.LASF74:
 11061 0c22 49445F54 		.ascii	"ID_TASK_RESUME_FROM_ISR\000"
 11061      41534B5F 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 295


 11061      52455355 
 11061      4D455F46 
 11061      524F4D5F 
 11062              	.LASF94:
 11063 0c3a 49445F50 		.ascii	"ID_PEND_FUNC_CALL\000"
 11063      454E445F 
 11063      46554E43 
 11063      5F43414C 
 11063      4C00
 11064              	.LASF63:
 11065 0c4c 49445F51 		.ascii	"ID_QUEUE_RECEIVE_FROM_ISR_FAILED\000"
 11065      55455545 
 11065      5F524543 
 11065      45495645 
 11065      5F46524F 
 11066              	.LASF191:
 11067 0c6d 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 11067      6967696E 
 11067      616C4241 
 11067      53455052 
 11067      4900
 11068              	.LASF301:
 11069 0c7f 70727644 		.ascii	"prvDeleteTCB\000"
 11069      656C6574 
 11069      65544342 
 11069      00
 11070              	.LASF236:
 11071 0c8c 78596965 		.ascii	"xYieldRequired\000"
 11071      6C645265 
 11071      71756972 
 11071      656400
 11072              	.LASF140:
 11073 0c9b 75784E75 		.ascii	"uxNumberOfItems\000"
 11073      6D626572 
 11073      4F664974 
 11073      656D7300 
 11074              	.LASF278:
 11075 0cab 76546173 		.ascii	"vTaskSuspendAll\000"
 11075      6B537573 
 11075      70656E64 
 11075      416C6C00 
 11076              	.LASF296:
 11077 0cbb 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11077      61736B43 
 11077      6865636B 
 11077      46726565 
 11077      53746163 
 11078              	.LASF271:
 11079 0cd6 7078556E 		.ascii	"pxUnblockedTCB\000"
 11079      626C6F63 
 11079      6B656454 
 11079      434200
 11080              	.LASF186:
 11081 0ce5 75784D75 		.ascii	"uxMutexesHeld\000"
 11081      74657865 
 11081      7348656C 
 11081      6400
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 296


 11082              	.LASF299:
 11083 0cf3 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11083      736B4765 
 11083      74537461 
 11083      636B4869 
 11083      67685761 
 11084              	.LASF144:
 11085 0d0f 5461736B 		.ascii	"TaskHandle_t\000"
 11085      48616E64 
 11085      6C655F74 
 11085      00
 11086              	.LASF47:
 11087 0d1c 49445F43 		.ascii	"ID_CREATE_MUTEX_FAILED\000"
 11087      52454154 
 11087      455F4D55 
 11087      5445585F 
 11087      4641494C 
 11088              	.LASF143:
 11089 0d33 4C697374 		.ascii	"List_t\000"
 11089      5F7400
 11090              	.LASF69:
 11091 0d3a 49445F54 		.ascii	"ID_TASK_DELAY_UNTIL\000"
 11091      41534B5F 
 11091      44454C41 
 11091      595F554E 
 11091      54494C00 
 11092              	.LASF268:
 11093 0d4e 78546963 		.ascii	"xTicksToWait\000"
 11093      6B73546F 
 11093      57616974 
 11093      00
 11094              	.LASF245:
 11095 0d5b 78546173 		.ascii	"xTaskResumeAll\000"
 11095      6B526573 
 11095      756D6541 
 11095      6C6C00
 11096              	.LASF49:
 11097 0d6a 49445F47 		.ascii	"ID_GIVE_MUTEX_RECURSIVE_FAILED\000"
 11097      4956455F 
 11097      4D555445 
 11097      585F5245 
 11097      43555253 
 11098              	.LASF223:
 11099 0d89 78546173 		.ascii	"xTaskCreate\000"
 11099      6B437265 
 11099      61746500 
 11100              	.LASF80:
 11101 0d95 49445F54 		.ascii	"ID_TIMER_COMMAND_RECEIVED\000"
 11101      494D4552 
 11101      5F434F4D 
 11101      4D414E44 
 11101      5F524543 
 11102              	.LASF55:
 11103 0daf 49445F51 		.ascii	"ID_QUEUE_SEND_FAILED\000"
 11103      55455545 
 11103      5F53454E 
 11103      445F4641 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 297


 11103      494C4544 
 11104              	.LASF88:
 11105 0dc4 49445F45 		.ascii	"ID_EVENT_GROUP_WAIT_BITS_END\000"
 11105      56454E54 
 11105      5F47524F 
 11105      55505F57 
 11105      4149545F 
 11106              	.LASF270:
 11107 0de1 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11107      6B52656D 
 11107      6F766546 
 11107      726F6D45 
 11107      76656E74 
 11108              	.LASF282:
 11109 0dfa 75784861 		.ascii	"uxHandle\000"
 11109      6E646C65 
 11109      00
 11110              	.LASF315:
 11111 0e03 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11111      7473546F 
 11111      436C6561 
 11111      724F6E45 
 11111      78697400 
 11112              	.LASF142:
 11113 0e17 784C6973 		.ascii	"xListEnd\000"
 11113      74456E64 
 11113      00
 11114              	.LASF220:
 11115 0e20 78436F6E 		.ascii	"xConstTickCount\000"
 11115      73745469 
 11115      636B436F 
 11115      756E7400 
 11116              	.LASF45:
 11117 0e30 49445F51 		.ascii	"ID_QUEUE_CREATE_FAILED\000"
 11117      55455545 
 11117      5F435245 
 11117      4154455F 
 11117      4641494C 
 11118              	.LASF147:
 11119 0e47 65426C6F 		.ascii	"eBlocked\000"
 11119      636B6564 
 11119      00
 11120              	.LASF228:
 11121 0e50 75785461 		.ascii	"uxTaskPriorityGet\000"
 11121      736B5072 
 11121      696F7269 
 11121      74794765 
 11121      7400
 11122              	.LASF176:
 11123 0e62 75735374 		.ascii	"usStackHighWaterMark\000"
 11123      61636B48 
 11123      69676857 
 11123      61746572 
 11123      4D61726B 
 11124              	.LASF192:
 11125 0e77 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11125      77424153 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 298


 11125      45505249 
 11125      00
 11126              	.LASF219:
 11127 0e84 7853686F 		.ascii	"xShouldDelay\000"
 11127      756C6444 
 11127      656C6179 
 11127      00
 11128              	.LASF71:
 11129 0e91 49445F54 		.ascii	"ID_TASK_PRIORITY_SET\000"
 11129      41534B5F 
 11129      5052494F 
 11129      52495459 
 11129      5F534554 
 11130              	.LASF84:
 11131 0ea6 49445F45 		.ascii	"ID_EVENT_GROUP_CREATE_FAILED\000"
 11131      56454E54 
 11131      5F47524F 
 11131      55505F43 
 11131      52454154 
 11132              	.LASF2:
 11133 0ec3 6C6F6E67 		.ascii	"long double\000"
 11133      20646F75 
 11133      626C6500 
 11134              	.LASF170:
 11135 0ecf 78546173 		.ascii	"xTaskNumber\000"
 11135      6B4E756D 
 11135      62657200 
 11136              	.LASF154:
 11137 0edb 65496E63 		.ascii	"eIncrement\000"
 11137      72656D65 
 11137      6E7400
 11138              	.LASF237:
 11139 0ee6 76546173 		.ascii	"vTaskSuspend\000"
 11139      6B537573 
 11139      70656E64 
 11139      00
 11140              	.LASF155:
 11141 0ef3 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11141      56616C75 
 11141      65576974 
 11141      684F7665 
 11141      72777269 
 11142              	.LASF65:
 11143 0f0a 49445F51 		.ascii	"ID_QUEUE_DELETE\000"
 11143      55455545 
 11143      5F44454C 
 11143      45544500 
 11144              	.LASF134:
 11145 0f1a 70764F77 		.ascii	"pvOwner\000"
 11145      6E657200 
 11146              	.LASF304:
 11147 0f22 76546173 		.ascii	"vTaskPriorityInherit\000"
 11147      6B507269 
 11147      6F726974 
 11147      79496E68 
 11147      65726974 
 11148              	.LASF169:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 299


 11149 0f37 70635461 		.ascii	"pcTaskName\000"
 11149      736B4E61 
 11149      6D6500
 11150              	.LASF78:
 11151 0f42 49445F54 		.ascii	"ID_TIMER_COMMAND_SEND\000"
 11151      494D4552 
 11151      5F434F4D 
 11151      4D414E44 
 11151      5F53454E 
 11152              	.LASF118:
 11153 0f58 6F626A65 		.ascii	"objectHeader\000"
 11153      63744865 
 11153      61646572 
 11153      00
 11154              	.LASF178:
 11155 0f65 74736B54 		.ascii	"tskTaskControlBlock\000"
 11155      61736B43 
 11155      6F6E7472 
 11155      6F6C426C 
 11155      6F636B00 
 11156              	.LASF216:
 11157 0f79 7854696D 		.ascii	"xTimeIncrement\000"
 11157      65496E63 
 11157      72656D65 
 11157      6E7400
 11158              	.LASF320:
 11159 0f88 65416374 		.ascii	"eAction\000"
 11159      696F6E00 
 11160              	.LASF221:
 11161 0f90 76546173 		.ascii	"vTaskDelay\000"
 11161      6B44656C 
 11161      617900
 11162              	.LASF180:
 11163 0f9b 78537461 		.ascii	"xStateListItem\000"
 11163      74654C69 
 11163      73744974 
 11163      656D00
 11164              	.LASF102:
 11165 0faa 49445F54 		.ascii	"ID_TASK_NOTIFY_FROM_ISR\000"
 11165      41534B5F 
 11165      4E4F5449 
 11165      46595F46 
 11165      524F4D5F 
 11166              	.LASF264:
 11167 0fc2 7578546F 		.ascii	"uxTopPriority\000"
 11167      70507269 
 11167      6F726974 
 11167      7900
 11168              	.LASF253:
 11169 0fd0 70785461 		.ascii	"pxTaskStatusArray\000"
 11169      736B5374 
 11169      61747573 
 11169      41727261 
 11169      7900
 11170              	.LASF23:
 11171 0fe2 51554555 		.ascii	"QUEUE\000"
 11171      4500
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 300


 11172              	.LASF42:
 11173 0fe8 49445F4D 		.ascii	"ID_MOVED_TASK_TO_READY_STATE\000"
 11173      4F564544 
 11173      5F544153 
 11173      4B5F544F 
 11173      5F524541 
 11174              	.LASF72:
 11175 1005 49445F54 		.ascii	"ID_TASK_SUSPEND\000"
 11175      41534B5F 
 11175      53555350 
 11175      454E4400 
 11176              	.LASF14:
 11177 1015 6C6F6E67 		.ascii	"long long unsigned int\000"
 11177      206C6F6E 
 11177      6720756E 
 11177      7369676E 
 11177      65642069 
 11178              	.LASF175:
 11179 102c 70785374 		.ascii	"pxStackBase\000"
 11179      61636B42 
 11179      61736500 
 11180              	.LASF110:
 11181 1038 696E666F 		.ascii	"informationID\000"
 11181      726D6174 
 11181      696F6E49 
 11181      4400
 11182              	.LASF57:
 11183 1046 49445F51 		.ascii	"ID_QUEUE_PEEK\000"
 11183      55455545 
 11183      5F504545 
 11183      4B00
 11184              	.LASF112:
 11185 1054 6C656E67 		.ascii	"length\000"
 11185      746800
 11186              	.LASF18:
 11187 105b 75696E74 		.ascii	"uint16_t\000"
 11187      31365F74 
 11187      00
 11188              	.LASF27:
 11189 1064 52454355 		.ascii	"RECURSIVE_MUTEX\000"
 11189      52534956 
 11189      455F4D55 
 11189      54455800 
 11190              	.LASF73:
 11191 1074 49445F54 		.ascii	"ID_TASK_RESUME\000"
 11191      41534B5F 
 11191      52455355 
 11191      4D4500
 11192              	.LASF258:
 11193 1083 78546173 		.ascii	"xTaskIncrementTick\000"
 11193      6B496E63 
 11193      72656D65 
 11193      6E745469 
 11193      636B00
 11194              	.LASF327:
 11195 1096 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11195      64644375 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 301


 11195      7272656E 
 11195      74546173 
 11195      6B546F44 
 11196              	.LASF127:
 11197 10b5 55426173 		.ascii	"UBaseType_t\000"
 11197      65547970 
 11197      655F7400 
 11198              	.LASF103:
 11199 10c1 49445F54 		.ascii	"ID_TASK_NOTIFY_GIVE_FROM_ISR\000"
 11199      41534B5F 
 11199      4E4F5449 
 11199      46595F47 
 11199      4956455F 
 11200              	.LASF133:
 11201 10de 70785072 		.ascii	"pxPrevious\000"
 11201      6576696F 
 11201      757300
 11202              	.LASF214:
 11203 10e9 76546173 		.ascii	"vTaskDelayUntil\000"
 11203      6B44656C 
 11203      6179556E 
 11203      74696C00 
 11204              	.LASF249:
 11205 10f9 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11205      6B476574 
 11205      5469636B 
 11205      436F756E 
 11205      7446726F 
 11206              	.LASF244:
 11207 1112 76546173 		.ascii	"vTaskEndScheduler\000"
 11207      6B456E64 
 11207      53636865 
 11207      64756C65 
 11207      7200
 11208              	.LASF351:
 11209 1124 6F626A65 		.ascii	"objectList\000"
 11209      63744C69 
 11209      737400
 11210              	.LASF128:
 11211 112f 5469636B 		.ascii	"TickType_t\000"
 11211      54797065 
 11211      5F7400
 11212              	.LASF93:
 11213 113a 49445F45 		.ascii	"ID_EVENT_GROUP_DELETE\000"
 11213      56454E54 
 11213      5F47524F 
 11213      55505F44 
 11213      454C4554 
 11214              	.LASF285:
 11215 1150 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11215      6865636B 
 11215      5461736B 
 11215      73576169 
 11215      74696E67 
 11216              	.LASF224:
 11217 1170 65546173 		.ascii	"eTaskGetState\000"
 11217      6B476574 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 302


 11217      53746174 
 11217      6500
 11218              	.LASF188:
 11219 117e 75634E6F 		.ascii	"ucNotifyState\000"
 11219      74696679 
 11219      53746174 
 11219      6500
 11220              	.LASF85:
 11221 118c 49445F45 		.ascii	"ID_EVENT_GROUP_SYNC_BLOCK\000"
 11221      56454E54 
 11221      5F47524F 
 11221      55505F53 
 11221      594E435F 
 11222              	.LASF215:
 11223 11a6 70785072 		.ascii	"pxPreviousWakeTime\000"
 11223      6576696F 
 11223      75735761 
 11223      6B655469 
 11223      6D6500
 11224              	.LASF259:
 11225 11b9 78537769 		.ascii	"xSwitchRequired\000"
 11225      74636852 
 11225      65717569 
 11225      72656400 
 11226              	.LASF326:
 11227 11c9 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11227      6B4E6F74 
 11227      69667953 
 11227      74617465 
 11227      436C6561 
 11228              	.LASF83:
 11229 11df 49445F45 		.ascii	"ID_EVENT_GROUP_CREATE\000"
 11229      56454E54 
 11229      5F47524F 
 11229      55505F43 
 11229      52454154 
 11230              	.LASF340:
 11231 11f5 7578546F 		.ascii	"uxTopReadyPriority\000"
 11231      70526561 
 11231      64795072 
 11231      696F7269 
 11231      747900
 11232              	.LASF218:
 11233 1208 78416C72 		.ascii	"xAlreadyYielded\000"
 11233      65616479 
 11233      5969656C 
 11233      64656400 
 11234              	.LASF150:
 11235 1218 65496E76 		.ascii	"eInvalid\000"
 11235      616C6964 
 11235      00
 11236              	.LASF292:
 11237 1221 7072764C 		.ascii	"prvListTasksWithinSingleList\000"
 11237      69737454 
 11237      61736B73 
 11237      57697468 
 11237      696E5369 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 303


 11238              	.LASF260:
 11239 123e 70785465 		.ascii	"pxTemp\000"
 11239      6D7000
 11240              	.LASF81:
 11241 1245 49445F4D 		.ascii	"ID_MALLOC\000"
 11241      414C4C4F 
 11241      4300
 11242              	.LASF171:
 11243 124f 65437572 		.ascii	"eCurrentState\000"
 11243      72656E74 
 11243      53746174 
 11243      6500
 11244              	.LASF323:
 11245 125d 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11245      6B47656E 
 11245      65726963 
 11245      4E6F7469 
 11245      66794672 
 11246              	.LASF64:
 11247 1277 49445F51 		.ascii	"ID_QUEUE_PEEK_FROM_ISR_FAILED\000"
 11247      55455545 
 11247      5F504545 
 11247      4B5F4652 
 11247      4F4D5F49 
 11248              	.LASF297:
 11249 1295 70756353 		.ascii	"pucStackByte\000"
 11249      7461636B 
 11249      42797465 
 11249      00
 11250              	.LASF104:
 11251 12a2 49445F43 		.ascii	"ID_CUSTOM_MARKER_1\000"
 11251      5553544F 
 11251      4D5F4D41 
 11251      524B4552 
 11251      5F3100
 11252              	.LASF105:
 11253 12b5 49445F43 		.ascii	"ID_CUSTOM_MARKER_2\000"
 11253      5553544F 
 11253      4D5F4D41 
 11253      524B4552 
 11253      5F3200
 11254              	.LASF106:
 11255 12c8 49445F43 		.ascii	"ID_CUSTOM_MARKER_3\000"
 11255      5553544F 
 11255      4D5F4D41 
 11255      524B4552 
 11255      5F3300
 11256              	.LASF107:
 11257 12db 49445F43 		.ascii	"ID_CUSTOM_MARKER_4\000"
 11257      5553544F 
 11257      4D5F4D41 
 11257      524B4552 
 11257      5F3400
 11258              	.LASF108:
 11259 12ee 49445F43 		.ascii	"ID_CUSTOM_MARKER_5\000"
 11259      5553544F 
 11259      4D5F4D41 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 304


 11259      524B4552 
 11259      5F3500
 11260              	.LASF303:
 11261 1301 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11261      6B476574 
 11261      43757272 
 11261      656E7454 
 11261      61736B48 
 11262              	.LASF332:
 11263 131b 70784465 		.ascii	"pxDelayedTaskList\000"
 11263      6C617965 
 11263      64546173 
 11263      6B4C6973 
 11263      7400
 11264              	.LASF92:
 11265 132d 49445F45 		.ascii	"ID_EVENT_GROUP_SET_BITS_FROM_ISR\000"
 11265      56454E54 
 11265      5F47524F 
 11265      55505F53 
 11265      45545F42 
 11266              	.LASF324:
 11267 134e 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11267      67686572 
 11267      5072696F 
 11267      72697479 
 11267      5461736B 
 11268              	.LASF350:
 11269 1368 62756666 		.ascii	"buffer\000"
 11269      657200
 11270              	.LASF24:
 11271 136f 4D555445 		.ascii	"MUTEX\000"
 11271      5800
 11272              	.LASF333:
 11273 1375 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11273      6572666C 
 11273      6F774465 
 11273      6C617965 
 11273      64546173 
 11274              	.LASF7:
 11275 138f 73686F72 		.ascii	"short int\000"
 11275      7420696E 
 11275      7400
 11276              	.LASF34:
 11277 1399 49445F49 		.ascii	"ID_INCREASE_TICK_COUNT\000"
 11277      4E435245 
 11277      4153455F 
 11277      5449434B 
 11277      5F434F55 
 11278              	.LASF233:
 11279 13b0 75784E65 		.ascii	"uxNewPriority\000"
 11279      77507269 
 11279      6F726974 
 11279      7900
 11280              	.LASF316:
 11281 13be 70756C4E 		.ascii	"pulNotificationValue\000"
 11281      6F746966 
 11281      69636174 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 305


 11281      696F6E56 
 11281      616C7565 
 11282              	.LASF61:
 11283 13d3 49445F51 		.ascii	"ID_QUEUE_SEND_FROM_ISR_FAILED\000"
 11283      55455545 
 11283      5F53454E 
 11283      445F4652 
 11283      4F4D5F49 
 11284              	.LASF251:
 11285 13f1 78546173 		.ascii	"xTaskToQuery\000"
 11285      6B546F51 
 11285      75657279 
 11285      00
 11286              	.LASF194:
 11287 13fe 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 11287      74526169 
 11287      73654241 
 11287      53455052 
 11287      4900
 11288              	.LASF43:
 11289 1410 49445F50 		.ascii	"ID_POST_MOVED_TASK_TO_READY_STATE\000"
 11289      4F53545F 
 11289      4D4F5645 
 11289      445F5441 
 11289      534B5F54 
 11290              	.LASF87:
 11291 1432 49445F45 		.ascii	"ID_EVENT_GROUP_WAIT_BITS_BLOCK\000"
 11291      56454E54 
 11291      5F47524F 
 11291      55505F57 
 11291      4149545F 
 11292              	.LASF335:
 11293 1451 78546173 		.ascii	"xTasksWaitingTermination\000"
 11293      6B735761 
 11293      6974696E 
 11293      67546572 
 11293      6D696E61 
 11294              	.LASF136:
 11295 146a 4C697374 		.ascii	"ListItem_t\000"
 11295      4974656D 
 11295      5F7400
 11296              	.LASF312:
 11297 1475 756C5265 		.ascii	"ulReturn\000"
 11297      7475726E 
 11297      00
 11298              	.LASF158:
 11299 147e 7854494D 		.ascii	"xTIME_OUT\000"
 11299      455F4F55 
 11299      5400
 11300              	.LASF53:
 11301 1488 49445F43 		.ascii	"ID_CREATE_COUNTING_SEMAPHORE_FAILED\000"
 11301      52454154 
 11301      455F434F 
 11301      554E5449 
 11301      4E475F53 
 11302              	.LASF184:
 11303 14ac 75785443 		.ascii	"uxTCBNumber\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 306


 11303      424E756D 
 11303      62657200 
 11304              	.LASF190:
 11305 14b8 5443425F 		.ascii	"TCB_t\000"
 11305      7400
 11306              	.LASF90:
 11307 14be 49445F45 		.ascii	"ID_EVENT_GROUP_CLEAR_BITS_FROM_ISR\000"
 11307      56454E54 
 11307      5F47524F 
 11307      55505F43 
 11307      4C454152 
 11308              	.LASF97:
 11309 14e1 49445F54 		.ascii	"ID_TASK_NOTIFY_TAKE_BLOCK\000"
 11309      41534B5F 
 11309      4E4F5449 
 11309      46595F54 
 11309      414B455F 
 11310              	.LASF349:
 11311 14fb 736E6966 		.ascii	"sniffIDFilter\000"
 11311      66494446 
 11311      696C7465 
 11311      7200
 11312              	.LASF111:
 11313 1509 6F626A65 		.ascii	"objectType\000"
 11313      63745479 
 11313      706500
 11314              	.LASF203:
 11315 1514 70765061 		.ascii	"pvParameters\000"
 11315      72616D65 
 11315      74657273 
 11315      00
 11316              	.LASF256:
 11317 1521 75785461 		.ascii	"uxTask\000"
 11317      736B00
 11318              	.LASF33:
 11319 1528 49445F54 		.ascii	"ID_TASK_SWITCHED_IN\000"
 11319      41534B5F 
 11319      53574954 
 11319      43484544 
 11319      5F494E00 
 11320              	.LASF252:
 11321 153c 75785461 		.ascii	"uxTaskGetSystemState\000"
 11321      736B4765 
 11321      74537973 
 11321      74656D53 
 11321      74617465 
 11322              	.LASF95:
 11323 1551 49445F50 		.ascii	"ID_PEND_FUNC_CALL_FROM_ISR\000"
 11323      454E445F 
 11323      46554E43 
 11323      5F43414C 
 11323      4C5F4652 
 11324              	.LASF230:
 11325 156c 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11325      736B5072 
 11325      696F7269 
 11325      74794765 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 307


 11325      7446726F 
 11326              	.LASF20:
 11327 1585 75696E74 		.ascii	"uint32_t\000"
 11327      33325F74 
 11327      00
 11328              	.LASF318:
 11329 158e 78546173 		.ascii	"xTaskToNotify\000"
 11329      6B546F4E 
 11329      6F746966 
 11329      7900
 11330              	.LASF208:
 11331 159c 78526567 		.ascii	"xRegions\000"
 11331      696F6E73 
 11331      00
 11332              	.LASF157:
 11333 15a5 654E6F74 		.ascii	"eNotifyAction\000"
 11333      69667941 
 11333      6374696F 
 11333      6E00
 11334              	.LASF314:
 11335 15b3 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11335      7473546F 
 11335      436C6561 
 11335      724F6E45 
 11335      6E747279 
 11336              	.LASF125:
 11337 15c8 53746163 		.ascii	"StackType_t\000"
 11337      6B547970 
 11337      655F7400 
 11338              	.LASF116:
 11339 15d4 6F626A65 		.ascii	"objectName\000"
 11339      63744E61 
 11339      6D6500
 11340              	.LASF59:
 11341 15df 49445F51 		.ascii	"ID_QUEUE_RECEIVE_FAILED\000"
 11341      55455545 
 11341      5F524543 
 11341      45495645 
 11341      5F464149 
 11342              	.LASF198:
 11343 15f7 756C4269 		.ascii	"ulBitmap\000"
 11343      746D6170 
 11343      00
 11344              	.LASF211:
 11345 1600 78546173 		.ascii	"xTaskToDelete\000"
 11345      6B546F44 
 11345      656C6574 
 11345      6500
 11346              	.LASF9:
 11347 160e 73686F72 		.ascii	"short unsigned int\000"
 11347      7420756E 
 11347      7369676E 
 11347      65642069 
 11347      6E7400
 11348              	.LASF68:
 11349 1621 49445F54 		.ascii	"ID_TASK_DELETE\000"
 11349      41534B5F 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 308


 11349      44454C45 
 11349      544500
 11350              	.LASF284:
 11351 1630 70727649 		.ascii	"prvInitialiseTaskLists\000"
 11351      6E697469 
 11351      616C6973 
 11351      65546173 
 11351      6B4C6973 
 11352              	.LASF330:
 11353 1647 7844656C 		.ascii	"xDelayedTaskList1\000"
 11353      61796564 
 11353      5461736B 
 11353      4C697374 
 11353      3100
 11354              	.LASF331:
 11355 1659 7844656C 		.ascii	"xDelayedTaskList2\000"
 11355      61796564 
 11355      5461736B 
 11355      4C697374 
 11355      3200
 11356              	.LASF354:
 11357 166b 2E2E5C53 		.ascii	"..\\Source\\tasks.c\000"
 11357      6F757263 
 11357      655C7461 
 11357      736B732E 
 11357      6300
 11358              	.LASF10:
 11359 167d 5F5F696E 		.ascii	"__int32_t\000"
 11359      7433325F 
 11359      7400
 11360              	.LASF152:
 11361 1687 654E6F41 		.ascii	"eNoAction\000"
 11361      6374696F 
 11361      6E00
 11362              	.LASF325:
 11363 1691 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11363      6B4E6F74 
 11363      69667947 
 11363      69766546 
 11363      726F6D49 
 11364              	.LASF165:
 11365 16a8 756C5061 		.ascii	"ulParameters\000"
 11365      72616D65 
 11365      74657273 
 11365      00
 11366              	.LASF287:
 11367 16b5 76546173 		.ascii	"vTaskGetInfo\000"
 11367      6B476574 
 11367      496E666F 
 11367      00
 11368              	.LASF66:
 11369 16c2 49445F54 		.ascii	"ID_TASK_CREATE\000"
 11369      41534B5F 
 11369      43524541 
 11369      544500
 11370              	.LASF226:
 11371 16d1 65526574 		.ascii	"eReturn\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 309


 11371      75726E00 
 11372              	.LASF310:
 11373 16d9 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11373      736B4E6F 
 11373      74696679 
 11373      54616B65 
 11373      00
 11374              	.LASF39:
 11375 16ea 49445F54 		.ascii	"ID_TASK_PRIORITY_DISINHERIT\000"
 11375      41534B5F 
 11375      5052494F 
 11375      52495459 
 11375      5F444953 
 11376              	.LASF70:
 11377 1706 49445F54 		.ascii	"ID_TASK_DELAY\000"
 11377      41534B5F 
 11377      44454C41 
 11377      5900
 11378              	.LASF286:
 11379 1714 784C6973 		.ascii	"xListIsEmpty\000"
 11379      74497345 
 11379      6D707479 
 11379      00
 11380              	.LASF121:
 11381 1721 64617461 		.ascii	"data\000"
 11381      00
 11382              	.LASF86:
 11383 1726 49445F45 		.ascii	"ID_EVENT_GROUP_SYNC_END\000"
 11383      56454E54 
 11383      5F47524F 
 11383      55505F53 
 11383      594E435F 
 11384              	.LASF96:
 11385 173e 49445F51 		.ascii	"ID_QUEUE_REGISTRY_ADD\000"
 11385      55455545 
 11385      5F524547 
 11385      49535452 
 11385      595F4144 
 11386              	.LASF313:
 11387 1754 78546173 		.ascii	"xTaskNotifyWait\000"
 11387      6B4E6F74 
 11387      69667957 
 11387      61697400 
 11388              	.LASF31:
 11389 1764 49445F53 		.ascii	"ID_START\000"
 11389      54415254 
 11389      00
 11390              	.LASF100:
 11391 176d 49445F54 		.ascii	"ID_TASK_NOTIFY_WAIT\000"
 11391      41534B5F 
 11391      4E4F5449 
 11391      46595F57 
 11391      41495400 
 11392              	.LASF131:
 11393 1781 78497465 		.ascii	"xItemValue\000"
 11393      6D56616C 
 11393      756500
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccNqUSV4.s 			page 310


 11394              	.LASF212:
 11395 178c 70785443 		.ascii	"pxTCB\000"
 11395      4200
 11396              	.LASF182:
 11397 1792 75785072 		.ascii	"uxPriority\000"
 11397      696F7269 
 11397      747900
 11398              	.LASF293:
 11399 179d 70784C69 		.ascii	"pxList\000"
 11399      737400
 11400              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran

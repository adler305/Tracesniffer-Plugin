ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sniffIDFilter,13,4
  20              		.comm	buffer,4098,4
  21              		.comm	objectList,1704,4
  22              		.data
  23              		.align	2
  24              		.type	uxCriticalNesting, %object
  25              		.size	uxCriticalNesting, 4
  26              	uxCriticalNesting:
  27 0000 AAAAAAAA 		.word	-1431655766
  28              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  29              		.align	2
  30              		.global	pxPortInitialiseStack
  31              		.thumb
  32              		.thumb_func
  33              		.type	pxPortInitialiseStack, %function
  34              	pxPortInitialiseStack:
  35              	.LFB68:
  36              		.file 1 "..\\Source\\portable\\GCC\\ARM_CM3\\port.c"
   1:..\Source\portable\GCC\ARM_CM3/port.c **** /*
   2:..\Source\portable\GCC\ARM_CM3/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Source\portable\GCC\ARM_CM3/port.c ****     All rights reserved
   4:..\Source\portable\GCC\ARM_CM3/port.c **** 
   5:..\Source\portable\GCC\ARM_CM3/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Source\portable\GCC\ARM_CM3/port.c **** 
   7:..\Source\portable\GCC\ARM_CM3/port.c ****     This file is part of the FreeRTOS distribution.
   8:..\Source\portable\GCC\ARM_CM3/port.c **** 
   9:..\Source\portable\GCC\ARM_CM3/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Source\portable\GCC\ARM_CM3/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Source\portable\GCC\ARM_CM3/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Source\portable\GCC\ARM_CM3/port.c **** 
  13:..\Source\portable\GCC\ARM_CM3/port.c ****     ***************************************************************************
  14:..\Source\portable\GCC\ARM_CM3/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Source\portable\GCC\ARM_CM3/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Source\portable\GCC\ARM_CM3/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Source\portable\GCC\ARM_CM3/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Source\portable\GCC\ARM_CM3/port.c ****     ***************************************************************************
  19:..\Source\portable\GCC\ARM_CM3/port.c **** 
  20:..\Source\portable\GCC\ARM_CM3/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Source\portable\GCC\ARM_CM3/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 2


  22:..\Source\portable\GCC\ARM_CM3/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Source\portable\GCC\ARM_CM3/port.c ****     link: http://www.freertos.org/a00114.html
  24:..\Source\portable\GCC\ARM_CM3/port.c **** 
  25:..\Source\portable\GCC\ARM_CM3/port.c ****     ***************************************************************************
  26:..\Source\portable\GCC\ARM_CM3/port.c ****      *                                                                       *
  27:..\Source\portable\GCC\ARM_CM3/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Source\portable\GCC\ARM_CM3/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Source\portable\GCC\ARM_CM3/port.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Source\portable\GCC\ARM_CM3/port.c ****      *    is the industry's de facto standard.                               *
  31:..\Source\portable\GCC\ARM_CM3/port.c ****      *                                                                       *
  32:..\Source\portable\GCC\ARM_CM3/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Source\portable\GCC\ARM_CM3/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Source\portable\GCC\ARM_CM3/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Source\portable\GCC\ARM_CM3/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Source\portable\GCC\ARM_CM3/port.c ****      *                                                                       *
  37:..\Source\portable\GCC\ARM_CM3/port.c ****     ***************************************************************************
  38:..\Source\portable\GCC\ARM_CM3/port.c **** 
  39:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Source\portable\GCC\ARM_CM3/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Source\portable\GCC\ARM_CM3/port.c ****     defined configASSERT()?
  42:..\Source\portable\GCC\ARM_CM3/port.c **** 
  43:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Source\portable\GCC\ARM_CM3/port.c ****     embedded software for free we request you assist our global community by
  45:..\Source\portable\GCC\ARM_CM3/port.c ****     participating in the support forum.
  46:..\Source\portable\GCC\ARM_CM3/port.c **** 
  47:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Source\portable\GCC\ARM_CM3/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Source\portable\GCC\ARM_CM3/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Source\portable\GCC\ARM_CM3/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Source\portable\GCC\ARM_CM3/port.c **** 
  52:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Source\portable\GCC\ARM_CM3/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Source\portable\GCC\ARM_CM3/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Source\portable\GCC\ARM_CM3/port.c **** 
  56:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Source\portable\GCC\ARM_CM3/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Source\portable\GCC\ARM_CM3/port.c **** 
  59:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Source\portable\GCC\ARM_CM3/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Source\portable\GCC\ARM_CM3/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Source\portable\GCC\ARM_CM3/port.c **** 
  63:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Source\portable\GCC\ARM_CM3/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Source\portable\GCC\ARM_CM3/port.c ****     mission critical applications that require provable dependability.
  66:..\Source\portable\GCC\ARM_CM3/port.c **** 
  67:..\Source\portable\GCC\ARM_CM3/port.c ****     1 tab == 4 spaces!
  68:..\Source\portable\GCC\ARM_CM3/port.c **** */
  69:..\Source\portable\GCC\ARM_CM3/port.c **** 
  70:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------
  71:..\Source\portable\GCC\ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  72:..\Source\portable\GCC\ARM_CM3/port.c ****  *----------------------------------------------------------*/
  73:..\Source\portable\GCC\ARM_CM3/port.c **** 
  74:..\Source\portable\GCC\ARM_CM3/port.c **** /* Scheduler includes. */
  75:..\Source\portable\GCC\ARM_CM3/port.c **** #include "FreeRTOS.h"
  76:..\Source\portable\GCC\ARM_CM3/port.c **** #include "task.h"
  77:..\Source\portable\GCC\ARM_CM3/port.c **** 
  78:..\Source\portable\GCC\ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 3


  79:..\Source\portable\GCC\ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  80:..\Source\portable\GCC\ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  81:..\Source\portable\GCC\ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  82:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  83:..\Source\portable\GCC\ARM_CM3/port.c **** #endif
  84:..\Source\portable\GCC\ARM_CM3/port.c **** 
  85:..\Source\portable\GCC\ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  86:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  87:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  88:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  89:..\Source\portable\GCC\ARM_CM3/port.c **** #else
  90:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  91:..\Source\portable\GCC\ARM_CM3/port.c **** 	as the core. */
  92:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  93:..\Source\portable\GCC\ARM_CM3/port.c **** #endif
  94:..\Source\portable\GCC\ARM_CM3/port.c **** 
  95:..\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  96:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  97:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  98:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  99:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
 100:..\Source\portable\GCC\ARM_CM3/port.c **** /* ...then bits in the registers. */
 101:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
 102:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 103:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 104:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 105:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 106:..\Source\portable\GCC\ARM_CM3/port.c **** 
 107:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 108:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 109:..\Source\portable\GCC\ARM_CM3/port.c **** 
 110:..\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
 111:..\Source\portable\GCC\ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 112:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 113:..\Source\portable\GCC\ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 114:..\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 115:..\Source\portable\GCC\ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 116:..\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 117:..\Source\portable\GCC\ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 118:..\Source\portable\GCC\ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 119:..\Source\portable\GCC\ARM_CM3/port.c **** 
 120:..\Source\portable\GCC\ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 121:..\Source\portable\GCC\ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 122:..\Source\portable\GCC\ARM_CM3/port.c **** 
 123:..\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
 124:..\Source\portable\GCC\ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
 125:..\Source\portable\GCC\ARM_CM3/port.c **** 
 126:..\Source\portable\GCC\ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
 127:..\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 128:..\Source\portable\GCC\ARM_CM3/port.c **** 
 129:..\Source\portable\GCC\ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 130:..\Source\portable\GCC\ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
 131:..\Source\portable\GCC\ARM_CM3/port.c **** calculations. */
 132:..\Source\portable\GCC\ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 133:..\Source\portable\GCC\ARM_CM3/port.c **** 
 134:..\Source\portable\GCC\ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 135:..\Source\portable\GCC\ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 4


 136:..\Source\portable\GCC\ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
 137:..\Source\portable\GCC\ARM_CM3/port.c **** 
 138:..\Source\portable\GCC\ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 139:..\Source\portable\GCC\ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 140:..\Source\portable\GCC\ARM_CM3/port.c **** debugger. */
 141:..\Source\portable\GCC\ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 142:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 143:..\Source\portable\GCC\ARM_CM3/port.c **** #else
 144:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 145:..\Source\portable\GCC\ARM_CM3/port.c **** #endif
 146:..\Source\portable\GCC\ARM_CM3/port.c **** 
 147:..\Source\portable\GCC\ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 148:..\Source\portable\GCC\ARM_CM3/port.c **** variable. */
 149:..\Source\portable\GCC\ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 150:..\Source\portable\GCC\ARM_CM3/port.c **** 
 151:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 152:..\Source\portable\GCC\ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 153:..\Source\portable\GCC\ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 154:..\Source\portable\GCC\ARM_CM3/port.c ****  * generate the tick interrupt.
 155:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 156:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 157:..\Source\portable\GCC\ARM_CM3/port.c **** 
 158:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 159:..\Source\portable\GCC\ARM_CM3/port.c ****  * Exception handlers.
 160:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 161:..\Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 162:..\Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void );
 163:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 164:..\Source\portable\GCC\ARM_CM3/port.c **** 
 165:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 166:..\Source\portable\GCC\ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 167:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 168:..\Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 169:..\Source\portable\GCC\ARM_CM3/port.c **** 
 170:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 171:..\Source\portable\GCC\ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 172:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 173:..\Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void );
 174:..\Source\portable\GCC\ARM_CM3/port.c **** 
 175:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 176:..\Source\portable\GCC\ARM_CM3/port.c **** 
 177:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 178:..\Source\portable\GCC\ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 179:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 180:..\Source\portable\GCC\ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 181:..\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 182:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 183:..\Source\portable\GCC\ARM_CM3/port.c **** 
 184:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 185:..\Source\portable\GCC\ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 186:..\Source\portable\GCC\ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 187:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 188:..\Source\portable\GCC\ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 189:..\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 190:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 191:..\Source\portable\GCC\ARM_CM3/port.c **** 
 192:..\Source\portable\GCC\ARM_CM3/port.c **** /*
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 5


 193:..\Source\portable\GCC\ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 194:..\Source\portable\GCC\ARM_CM3/port.c ****  * power functionality only.
 195:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 196:..\Source\portable\GCC\ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 197:..\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 198:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 199:..\Source\portable\GCC\ARM_CM3/port.c **** 
 200:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 201:..\Source\portable\GCC\ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 202:..\Source\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 203:..\Source\portable\GCC\ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 204:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 205:..\Source\portable\GCC\ARM_CM3/port.c **** #if ( configASSERT_DEFINED == 1 )
 206:..\Source\portable\GCC\ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 207:..\Source\portable\GCC\ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 208:..\Source\portable\GCC\ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 209:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 210:..\Source\portable\GCC\ARM_CM3/port.c **** 
 211:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 212:..\Source\portable\GCC\ARM_CM3/port.c **** 
 213:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 214:..\Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 215:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 216:..\Source\portable\GCC\ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 217:..\Source\portable\GCC\ARM_CM3/port.c **** {
  37              		.loc 1 217 0
  38              		.cfi_startproc
  39              		@ args = 0, pretend = 0, frame = 16
  40              		@ frame_needed = 1, uses_anonymous_args = 0
  41              		@ link register save eliminated.
  42 0000 80B4     		push	{r7}
  43              		.cfi_def_cfa_offset 4
  44              		.cfi_offset 7, -4
  45 0002 85B0     		sub	sp, sp, #20
  46              		.cfi_def_cfa_offset 24
  47 0004 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  49 0006 F860     		str	r0, [r7, #12]
  50 0008 B960     		str	r1, [r7, #8]
  51 000a 7A60     		str	r2, [r7, #4]
 218:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 219:..\Source\portable\GCC\ARM_CM3/port.c **** 	interrupt. */
 220:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  52              		.loc 1 220 0
  53 000c FB68     		ldr	r3, [r7, #12]
  54 000e 043B     		subs	r3, r3, #4
  55 0010 FB60     		str	r3, [r7, #12]
 221:..\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  56              		.loc 1 221 0
  57 0012 FB68     		ldr	r3, [r7, #12]
  58 0014 4FF08072 		mov	r2, #16777216
  59 0018 1A60     		str	r2, [r3]
 222:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
  60              		.loc 1 222 0
  61 001a FB68     		ldr	r3, [r7, #12]
  62 001c 043B     		subs	r3, r3, #4
  63 001e FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 6


 223:..\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  64              		.loc 1 223 0
  65 0020 BB68     		ldr	r3, [r7, #8]
  66 0022 23F00102 		bic	r2, r3, #1
  67 0026 FB68     		ldr	r3, [r7, #12]
  68 0028 1A60     		str	r2, [r3]
 224:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
  69              		.loc 1 224 0
  70 002a FB68     		ldr	r3, [r7, #12]
  71 002c 043B     		subs	r3, r3, #4
  72 002e FB60     		str	r3, [r7, #12]
 225:..\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  73              		.loc 1 225 0
  74 0030 084A     		ldr	r2, .L3
  75 0032 FB68     		ldr	r3, [r7, #12]
  76 0034 1A60     		str	r2, [r3]
 226:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  77              		.loc 1 226 0
  78 0036 FB68     		ldr	r3, [r7, #12]
  79 0038 143B     		subs	r3, r3, #20
  80 003a FB60     		str	r3, [r7, #12]
 227:..\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  81              		.loc 1 227 0
  82 003c 7A68     		ldr	r2, [r7, #4]
  83 003e FB68     		ldr	r3, [r7, #12]
  84 0040 1A60     		str	r2, [r3]
 228:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  85              		.loc 1 228 0
  86 0042 FB68     		ldr	r3, [r7, #12]
  87 0044 203B     		subs	r3, r3, #32
  88 0046 FB60     		str	r3, [r7, #12]
 229:..\Source\portable\GCC\ARM_CM3/port.c **** 
 230:..\Source\portable\GCC\ARM_CM3/port.c **** 	return pxTopOfStack;
  89              		.loc 1 230 0
  90 0048 FB68     		ldr	r3, [r7, #12]
 231:..\Source\portable\GCC\ARM_CM3/port.c **** }
  91              		.loc 1 231 0
  92 004a 1846     		mov	r0, r3
  93 004c 1437     		adds	r7, r7, #20
  94              		.cfi_def_cfa_offset 4
  95 004e BD46     		mov	sp, r7
  96              		.cfi_def_cfa_register 13
  97              		@ sp needed
  98 0050 80BC     		pop	{r7}
  99              		.cfi_restore 7
 100              		.cfi_def_cfa_offset 0
 101 0052 7047     		bx	lr
 102              	.L4:
 103              		.align	2
 104              	.L3:
 105 0054 00000000 		.word	prvTaskExitError
 106              		.cfi_endproc
 107              	.LFE68:
 108              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 109              		.section	.text.prvTaskExitError,"ax",%progbits
 110              		.align	2
 111              		.thumb
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 7


 112              		.thumb_func
 113              		.type	prvTaskExitError, %function
 114              	prvTaskExitError:
 115              	.LFB69:
 232:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 233:..\Source\portable\GCC\ARM_CM3/port.c **** 
 234:..\Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void )
 235:..\Source\portable\GCC\ARM_CM3/port.c **** {
 116              		.loc 1 235 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 8
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0000 80B4     		push	{r7}
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 0002 83B0     		sub	sp, sp, #12
 125              		.cfi_def_cfa_offset 16
 126 0004 00AF     		add	r7, sp, #0
 127              		.cfi_def_cfa_register 7
 128              	.LBB12:
 129              	.LBB13:
 130              		.file 2 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     All rights reserved
   4:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   5:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   7:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   9:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  13:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  14:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  19:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  20:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  25:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  26:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
  27:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
  32:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 8


  35:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
  37:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  38:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  39:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  43:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     participating in the support forum.
  46:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  47:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  52:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  56:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  63:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  67:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:..\Source\portable\GCC\ARM_CM3/portmacro.h **** */
  69:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  70:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  71:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  74:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  76:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  77:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  81:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  84:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  87:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  88:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  89:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  90:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 9


  92:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  93:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  94:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  97:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 101:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
 105:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 112:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 114:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 120:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
 123:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
 126:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 131:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 132:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
 139:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 148:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 10


 149:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 150:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:..\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:..\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 157:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 162:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 164:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 171:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 174:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 178:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 179:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 180:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 184:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 185:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 193:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 197:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 201:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 202:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 204:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 11


 206:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 210:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 213:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:..\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 216:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 219:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 221:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 223:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 224:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 225:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 227:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 228:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 229:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 230:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 231:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 233:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 235:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 237:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 131              		.loc 2 237 0
 132              		.syntax unified
 133              	@ 237 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 134 0006 4FF0A003 			mov r3, #160												
 135 000a 83F31188 		msr basepri, r3											
 136 000e BFF36F8F 		isb														
 137 0012 BFF34F8F 		dsb														
 138              	
 139              	@ 0 "" 2
 140              		.thumb
 141              		.syntax unified
 142 0016 7B60     		str	r3, [r7, #4]
 143              	.L6:
 144              	.LBE13:
 145              	.LBE12:
 236:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 237:..\Source\portable\GCC\ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 238:..\Source\portable\GCC\ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 239:..\Source\portable\GCC\ARM_CM3/port.c **** 
 240:..\Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 241:..\Source\portable\GCC\ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 242:..\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 243:..\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 244:..\Source\portable\GCC\ARM_CM3/port.c **** 	for( ;; );
 146              		.loc 1 244 0 discriminator 1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 12


 147 0018 FEE7     		b	.L6
 148              		.cfi_endproc
 149              	.LFE69:
 150              		.size	prvTaskExitError, .-prvTaskExitError
 151 001a 00BF     		.section	.text.vPortSVCHandler,"ax",%progbits
 152              		.align	2
 153              		.global	vPortSVCHandler
 154              		.thumb
 155              		.thumb_func
 156              		.type	vPortSVCHandler, %function
 157              	vPortSVCHandler:
 158              	.LFB70:
 245:..\Source\portable\GCC\ARM_CM3/port.c **** }
 246:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 247:..\Source\portable\GCC\ARM_CM3/port.c **** 
 248:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void )
 249:..\Source\portable\GCC\ARM_CM3/port.c **** {
 159              		.loc 1 249 0
 160              		.cfi_startproc
 161              		@ Naked Function: prologue and epilogue provided by programmer.
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 1, uses_anonymous_args = 0
 250:..\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile (
 164              		.loc 1 250 0
 165              		.syntax unified
 166              	@ 250 "..\Source\portable\GCC\ARM_CM3\port.c" 1
 167 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 168 0002 1968     		ldr r1, [r3]					
 169 0004 0868     		ldr r0, [r1]					
 170 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 171 000a 80F30988 		msr psp, r0						
 172 000e BFF36F8F 		isb								
 173 0012 4FF00000 		mov r0, #0 						
 174 0016 80F31188 		msr	basepri, r0					
 175 001a 4EF00D0E 		orr r14, #0xd					
 176 001e 7047     		bx r14							
 177              										
 178              		.align 4						
 179 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 180              	
 181              	@ 0 "" 2
 251:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 252:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 253:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 254:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 255:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 256:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	isb								\n"
 257:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 258:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 259:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 260:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	bx r14							\n"
 261:..\Source\portable\GCC\ARM_CM3/port.c **** 					"									\n"
 262:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	.align 4						\n"
 263:..\Source\portable\GCC\ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 264:..\Source\portable\GCC\ARM_CM3/port.c **** 				);
 265:..\Source\portable\GCC\ARM_CM3/port.c **** }
 182              		.loc 1 265 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 13


 183              		.thumb
 184              		.syntax unified
 185 0024 00BF     		nop
 186              		.cfi_endproc
 187              	.LFE70:
 188              		.size	vPortSVCHandler, .-vPortSVCHandler
 189 0026 00BF     		.section	.text.prvPortStartFirstTask,"ax",%progbits
 190              		.align	2
 191              		.thumb
 192              		.thumb_func
 193              		.type	prvPortStartFirstTask, %function
 194              	prvPortStartFirstTask:
 195              	.LFB71:
 266:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 267:..\Source\portable\GCC\ARM_CM3/port.c **** 
 268:..\Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 269:..\Source\portable\GCC\ARM_CM3/port.c **** {
 196              		.loc 1 269 0
 197              		.cfi_startproc
 198              		@ Naked Function: prologue and epilogue provided by programmer.
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 270:..\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile(
 201              		.loc 1 270 0
 202              		.syntax unified
 203              	@ 270 "..\Source\portable\GCC\ARM_CM3\port.c" 1
 204 0000 0648     		 ldr r0, =0xE000ED08 	
 205 0002 0068     	 ldr r0, [r0] 			
 206 0004 0068     	 ldr r0, [r0] 			
 207 0006 80F30888 	 msr msp, r0			
 208 000a 62B6     	 cpsie i				
 209 000c 61B6     	 cpsie f				
 210 000e BFF34F8F 	 dsb					
 211 0012 BFF36F8F 	 isb					
 212 0016 00DF     	 svc 0					
 213 0018 00BF     	 nop					
 214              	
 215              	@ 0 "" 2
 271:..\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 272:..\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 273:..\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 274:..\Source\portable\GCC\ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 275:..\Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 276:..\Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie f				\n"
 277:..\Source\portable\GCC\ARM_CM3/port.c **** 					" dsb					\n"
 278:..\Source\portable\GCC\ARM_CM3/port.c **** 					" isb					\n"
 279:..\Source\portable\GCC\ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 280:..\Source\portable\GCC\ARM_CM3/port.c **** 					" nop					\n"
 281:..\Source\portable\GCC\ARM_CM3/port.c **** 				);
 282:..\Source\portable\GCC\ARM_CM3/port.c **** }
 216              		.loc 1 282 0
 217              		.thumb
 218              		.syntax unified
 219 001a 00BF     		nop
 220              		.cfi_endproc
 221              	.LFE71:
 222              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 14


 223              		.section	.text.xPortStartScheduler,"ax",%progbits
 224              		.align	2
 225              		.global	xPortStartScheduler
 226              		.thumb
 227              		.thumb_func
 228              		.type	xPortStartScheduler, %function
 229              	xPortStartScheduler:
 230              	.LFB72:
 283:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 284:..\Source\portable\GCC\ARM_CM3/port.c **** 
 285:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 286:..\Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 287:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 288:..\Source\portable\GCC\ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 289:..\Source\portable\GCC\ARM_CM3/port.c **** {
 231              		.loc 1 289 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235 0000 80B5     		push	{r7, lr}
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 7, -8
 238              		.cfi_offset 14, -4
 239 0002 00AF     		add	r7, sp, #0
 240              		.cfi_def_cfa_register 7
 290:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 291:..\Source\portable\GCC\ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 292:..\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 293:..\Source\portable\GCC\ARM_CM3/port.c **** 
 294:..\Source\portable\GCC\ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 295:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 296:..\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 297:..\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 298:..\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 299:..\Source\portable\GCC\ARM_CM3/port.c **** 
 300:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 301:..\Source\portable\GCC\ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 302:..\Source\portable\GCC\ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 303:..\Source\portable\GCC\ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 304:..\Source\portable\GCC\ARM_CM3/port.c **** 
 305:..\Source\portable\GCC\ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 306:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 307:..\Source\portable\GCC\ARM_CM3/port.c **** 
 308:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 309:..\Source\portable\GCC\ARM_CM3/port.c **** 		possible bits. */
 310:..\Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 311:..\Source\portable\GCC\ARM_CM3/port.c **** 
 312:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 313:..\Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 314:..\Source\portable\GCC\ARM_CM3/port.c **** 
 315:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 316:..\Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 317:..\Source\portable\GCC\ARM_CM3/port.c **** 
 318:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 319:..\Source\portable\GCC\ARM_CM3/port.c **** 		of bits read back. */
 320:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 321:..\Source\portable\GCC\ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 15


 322:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 323:..\Source\portable\GCC\ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 324:..\Source\portable\GCC\ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 325:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 326:..\Source\portable\GCC\ARM_CM3/port.c **** 
 327:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 328:..\Source\portable\GCC\ARM_CM3/port.c **** 		register. */
 329:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 330:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 331:..\Source\portable\GCC\ARM_CM3/port.c **** 
 332:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 333:..\Source\portable\GCC\ARM_CM3/port.c **** 		value. */
 334:..\Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 335:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 336:..\Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 337:..\Source\portable\GCC\ARM_CM3/port.c **** 
 338:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 339:..\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 241              		.loc 1 339 0
 242 0004 0B4A     		ldr	r2, .L11
 243 0006 0B4B     		ldr	r3, .L11
 244 0008 1B68     		ldr	r3, [r3]
 245 000a 43F46003 		orr	r3, r3, #14680064
 246 000e 1360     		str	r3, [r2]
 340:..\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 247              		.loc 1 340 0
 248 0010 084A     		ldr	r2, .L11
 249 0012 084B     		ldr	r3, .L11
 250 0014 1B68     		ldr	r3, [r3]
 251 0016 43F06043 		orr	r3, r3, #-536870912
 252 001a 1360     		str	r3, [r2]
 341:..\Source\portable\GCC\ARM_CM3/port.c **** 
 342:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 343:..\Source\portable\GCC\ARM_CM3/port.c **** 	here already. */
 344:..\Source\portable\GCC\ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 253              		.loc 1 344 0
 254 001c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 345:..\Source\portable\GCC\ARM_CM3/port.c **** 
 346:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 347:..\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 255              		.loc 1 347 0
 256 0020 054B     		ldr	r3, .L11+4
 257 0022 0022     		movs	r2, #0
 258 0024 1A60     		str	r2, [r3]
 348:..\Source\portable\GCC\ARM_CM3/port.c **** 
 349:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the first task. */
 350:..\Source\portable\GCC\ARM_CM3/port.c **** 	prvPortStartFirstTask();
 259              		.loc 1 350 0
 260 0026 FFF7FEFF 		bl	prvPortStartFirstTask
 351:..\Source\portable\GCC\ARM_CM3/port.c **** 
 352:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 353:..\Source\portable\GCC\ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 354:..\Source\portable\GCC\ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 355:..\Source\portable\GCC\ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 356:..\Source\portable\GCC\ARM_CM3/port.c **** 	prvTaskExitError();
 261              		.loc 1 356 0
 262 002a FFF7FEFF 		bl	prvTaskExitError
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 16


 357:..\Source\portable\GCC\ARM_CM3/port.c **** 
 358:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Should not get here! */
 359:..\Source\portable\GCC\ARM_CM3/port.c **** 	return 0;
 263              		.loc 1 359 0
 264 002e 0023     		movs	r3, #0
 360:..\Source\portable\GCC\ARM_CM3/port.c **** }
 265              		.loc 1 360 0
 266 0030 1846     		mov	r0, r3
 267 0032 80BD     		pop	{r7, pc}
 268              	.L12:
 269              		.align	2
 270              	.L11:
 271 0034 20ED00E0 		.word	-536810208
 272 0038 00000000 		.word	uxCriticalNesting
 273              		.cfi_endproc
 274              	.LFE72:
 275              		.size	xPortStartScheduler, .-xPortStartScheduler
 276              		.section	.text.vPortEndScheduler,"ax",%progbits
 277              		.align	2
 278              		.global	vPortEndScheduler
 279              		.thumb
 280              		.thumb_func
 281              		.type	vPortEndScheduler, %function
 282              	vPortEndScheduler:
 283              	.LFB73:
 361:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 362:..\Source\portable\GCC\ARM_CM3/port.c **** 
 363:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortEndScheduler( void )
 364:..\Source\portable\GCC\ARM_CM3/port.c **** {
 284              		.loc 1 364 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289 0000 80B4     		push	{r7}
 290              		.cfi_def_cfa_offset 4
 291              		.cfi_offset 7, -4
 292 0002 00AF     		add	r7, sp, #0
 293              		.cfi_def_cfa_register 7
 365:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 366:..\Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert. */
 367:..\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 368:..\Source\portable\GCC\ARM_CM3/port.c **** }
 294              		.loc 1 368 0
 295 0004 00BF     		nop
 296 0006 BD46     		mov	sp, r7
 297              		.cfi_def_cfa_register 13
 298              		@ sp needed
 299 0008 80BC     		pop	{r7}
 300              		.cfi_restore 7
 301              		.cfi_def_cfa_offset 0
 302 000a 7047     		bx	lr
 303              		.cfi_endproc
 304              	.LFE73:
 305              		.size	vPortEndScheduler, .-vPortEndScheduler
 306              		.section	.text.vPortEnterCritical,"ax",%progbits
 307              		.align	2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 17


 308              		.global	vPortEnterCritical
 309              		.thumb
 310              		.thumb_func
 311              		.type	vPortEnterCritical, %function
 312              	vPortEnterCritical:
 313              	.LFB74:
 369:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 370:..\Source\portable\GCC\ARM_CM3/port.c **** 
 371:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortEnterCritical( void )
 372:..\Source\portable\GCC\ARM_CM3/port.c **** {
 314              		.loc 1 372 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 8
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319 0000 80B4     		push	{r7}
 320              		.cfi_def_cfa_offset 4
 321              		.cfi_offset 7, -4
 322 0002 83B0     		sub	sp, sp, #12
 323              		.cfi_def_cfa_offset 16
 324 0004 00AF     		add	r7, sp, #0
 325              		.cfi_def_cfa_register 7
 326              	.LBB14:
 327              	.LBB15:
 328              		.loc 2 237 0
 329              		.syntax unified
 330              	@ 237 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 331 0006 4FF0A003 			mov r3, #160												
 332 000a 83F31188 		msr basepri, r3											
 333 000e BFF36F8F 		isb														
 334 0012 BFF34F8F 		dsb														
 335              	
 336              	@ 0 "" 2
 337              		.thumb
 338              		.syntax unified
 339 0016 7B60     		str	r3, [r7, #4]
 340              	.LBE15:
 341              	.LBE14:
 373:..\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 374:..\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting++;
 342              		.loc 1 374 0
 343 0018 044B     		ldr	r3, .L15
 344 001a 1B68     		ldr	r3, [r3]
 345 001c 0133     		adds	r3, r3, #1
 346 001e 034A     		ldr	r2, .L15
 347 0020 1360     		str	r3, [r2]
 375:..\Source\portable\GCC\ARM_CM3/port.c **** 
 376:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 377:..\Source\portable\GCC\ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 378:..\Source\portable\GCC\ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 379:..\Source\portable\GCC\ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 380:..\Source\portable\GCC\ARM_CM3/port.c **** 	assert function also uses a critical section. */
 381:..\Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 382:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 383:..\Source\portable\GCC\ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 384:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 385:..\Source\portable\GCC\ARM_CM3/port.c **** }
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 18


 348              		.loc 1 385 0
 349 0022 00BF     		nop
 350 0024 0C37     		adds	r7, r7, #12
 351              		.cfi_def_cfa_offset 4
 352 0026 BD46     		mov	sp, r7
 353              		.cfi_def_cfa_register 13
 354              		@ sp needed
 355 0028 80BC     		pop	{r7}
 356              		.cfi_restore 7
 357              		.cfi_def_cfa_offset 0
 358 002a 7047     		bx	lr
 359              	.L16:
 360              		.align	2
 361              	.L15:
 362 002c 00000000 		.word	uxCriticalNesting
 363              		.cfi_endproc
 364              	.LFE74:
 365              		.size	vPortEnterCritical, .-vPortEnterCritical
 366              		.section	.text.vPortExitCritical,"ax",%progbits
 367              		.align	2
 368              		.global	vPortExitCritical
 369              		.thumb
 370              		.thumb_func
 371              		.type	vPortExitCritical, %function
 372              	vPortExitCritical:
 373              	.LFB75:
 386:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 387:..\Source\portable\GCC\ARM_CM3/port.c **** 
 388:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortExitCritical( void )
 389:..\Source\portable\GCC\ARM_CM3/port.c **** {
 374              		.loc 1 389 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 8
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379 0000 80B4     		push	{r7}
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 7, -4
 382 0002 83B0     		sub	sp, sp, #12
 383              		.cfi_def_cfa_offset 16
 384 0004 00AF     		add	r7, sp, #0
 385              		.cfi_def_cfa_register 7
 390:..\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 391:..\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting--;
 386              		.loc 1 391 0
 387 0006 094B     		ldr	r3, .L20
 388 0008 1B68     		ldr	r3, [r3]
 389 000a 013B     		subs	r3, r3, #1
 390 000c 074A     		ldr	r2, .L20
 391 000e 1360     		str	r3, [r2]
 392:..\Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 392              		.loc 1 392 0
 393 0010 064B     		ldr	r3, .L20
 394 0012 1B68     		ldr	r3, [r3]
 395 0014 002B     		cmp	r3, #0
 396 0016 04D1     		bne	.L19
 397 0018 0023     		movs	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 19


 398 001a 7B60     		str	r3, [r7, #4]
 399              	.LBB16:
 400              	.LBB17:
 238:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 239:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 245:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 246:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 247:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 249:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 251:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 253:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 254:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 255:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 262:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 263:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 265:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 266:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 267:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 269:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 271:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 401              		.loc 2 271 0
 402 001c 7B68     		ldr	r3, [r7, #4]
 403              		.syntax unified
 404              	@ 271 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 405 001e 83F31188 			msr basepri, r3	
 406              	@ 0 "" 2
 407              		.thumb
 408              		.syntax unified
 409              	.L19:
 410              	.LBE17:
 411              	.LBE16:
 393:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 394:..\Source\portable\GCC\ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 395:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 396:..\Source\portable\GCC\ARM_CM3/port.c **** }
 412              		.loc 1 396 0
 413 0022 00BF     		nop
 414 0024 0C37     		adds	r7, r7, #12
 415              		.cfi_def_cfa_offset 4
 416 0026 BD46     		mov	sp, r7
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 20


 417              		.cfi_def_cfa_register 13
 418              		@ sp needed
 419 0028 80BC     		pop	{r7}
 420              		.cfi_restore 7
 421              		.cfi_def_cfa_offset 0
 422 002a 7047     		bx	lr
 423              	.L21:
 424              		.align	2
 425              	.L20:
 426 002c 00000000 		.word	uxCriticalNesting
 427              		.cfi_endproc
 428              	.LFE75:
 429              		.size	vPortExitCritical, .-vPortExitCritical
 430              		.section	.text.xPortPendSVHandler,"ax",%progbits
 431              		.align	2
 432              		.global	xPortPendSVHandler
 433              		.thumb
 434              		.thumb_func
 435              		.type	xPortPendSVHandler, %function
 436              	xPortPendSVHandler:
 437              	.LFB76:
 397:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 398:..\Source\portable\GCC\ARM_CM3/port.c **** 
 399:..\Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void )
 400:..\Source\portable\GCC\ARM_CM3/port.c **** {
 438              		.loc 1 400 0
 439              		.cfi_startproc
 440              		@ Naked Function: prologue and epilogue provided by programmer.
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 401:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* This is a naked function. */
 402:..\Source\portable\GCC\ARM_CM3/port.c **** 
 403:..\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile
 443              		.loc 1 403 0
 444              		.syntax unified
 445              	@ 403 "..\Source\portable\GCC\ARM_CM3\port.c" 1
 446 0000 EFF30980 			mrs r0, psp							
 447 0004 BFF36F8F 		isb									
 448              											
 449 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 450 000a 1A68     		ldr	r2, [r3]						
 451              											
 452 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 453 0010 1060     		str r0, [r2]						
 454              											
 455 0012 2DE90840 		stmdb sp!, {r3, r14}				
 456 0016 4FF0A000 		mov r0, #160							
 457 001a 80F31188 		msr basepri, r0						
 458 001e FFF7FEFF 		bl vTaskSwitchContext				
 459 0022 4FF00000 		mov r0, #0							
 460 0026 80F31188 		msr basepri, r0						
 461 002a BDE80840 		ldmia sp!, {r3, r14}				
 462              											
 463 002e 1968     		ldr r1, [r3]						
 464 0030 0868     		ldr r0, [r1]						
 465 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 466 0036 80F30988 		msr psp, r0							
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 21


 467 003a BFF36F8F 		isb									
 468 003e 7047     		bx r14								
 469              											
 470              		.align 4							
 471 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 472              	
 473              	@ 0 "" 2
 404:..\Source\portable\GCC\ARM_CM3/port.c **** 	(
 405:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 406:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 407:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 408:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 409:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 410:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 411:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 412:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 413:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 414:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 415:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 416:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 417:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 418:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 419:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 420:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 421:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 422:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 423:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 424:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 425:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 426:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 427:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	bx r14								\n"
 428:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 429:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	.align 4							\n"
 430:..\Source\portable\GCC\ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 431:..\Source\portable\GCC\ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 432:..\Source\portable\GCC\ARM_CM3/port.c **** 	);
 433:..\Source\portable\GCC\ARM_CM3/port.c **** }
 474              		.loc 1 433 0
 475              		.thumb
 476              		.syntax unified
 477 0044 00BF     		nop
 478              		.cfi_endproc
 479              	.LFE76:
 480              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 481 0046 00BF     		.section	.text.xPortSysTickHandler,"ax",%progbits
 482              		.align	2
 483              		.global	xPortSysTickHandler
 484              		.thumb
 485              		.thumb_func
 486              		.type	xPortSysTickHandler, %function
 487              	xPortSysTickHandler:
 488              	.LFB77:
 434:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 435:..\Source\portable\GCC\ARM_CM3/port.c **** 
 436:..\Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void )
 437:..\Source\portable\GCC\ARM_CM3/port.c **** {
 489              		.loc 1 437 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 22


 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 8
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493 0000 80B5     		push	{r7, lr}
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 82B0     		sub	sp, sp, #8
 498              		.cfi_def_cfa_offset 16
 499 0004 00AF     		add	r7, sp, #0
 500              		.cfi_def_cfa_register 7
 501              	.LBB18:
 502              	.LBB19:
 237:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 503              		.loc 2 237 0
 504              		.syntax unified
 505              	@ 237 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 506 0006 4FF0A003 			mov r3, #160												
 507 000a 83F31188 		msr basepri, r3											
 508 000e BFF36F8F 		isb														
 509 0012 BFF34F8F 		dsb														
 510              	
 511              	@ 0 "" 2
 512              		.thumb
 513              		.syntax unified
 514 0016 3B60     		str	r3, [r7]
 515              	.LBE19:
 516              	.LBE18:
 438:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 439:..\Source\portable\GCC\ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 440:..\Source\portable\GCC\ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 441:..\Source\portable\GCC\ARM_CM3/port.c **** 	known. */
 442:..\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 443:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 444:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 445:..\Source\portable\GCC\ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 517              		.loc 1 445 0
 518 0018 FFF7FEFF 		bl	xTaskIncrementTick
 519 001c 0346     		mov	r3, r0
 520 001e 002B     		cmp	r3, #0
 521 0020 03D0     		beq	.L24
 446:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 447:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 448:..\Source\portable\GCC\ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 449:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 522              		.loc 1 449 0
 523 0022 064B     		ldr	r3, .L25
 524 0024 4FF08052 		mov	r2, #268435456
 525 0028 1A60     		str	r2, [r3]
 526              	.L24:
 527 002a 0023     		movs	r3, #0
 528 002c 7B60     		str	r3, [r7, #4]
 529              	.LBB20:
 530              	.LBB21:
 531              		.loc 2 271 0
 532 002e 7B68     		ldr	r3, [r7, #4]
 533              		.syntax unified
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 23


 534              	@ 271 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 535 0030 83F31188 			msr basepri, r3	
 536              	@ 0 "" 2
 537              		.thumb
 538              		.syntax unified
 539              	.LBE21:
 540              	.LBE20:
 450:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 451:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 452:..\Source\portable\GCC\ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 453:..\Source\portable\GCC\ARM_CM3/port.c **** }
 541              		.loc 1 453 0
 542 0034 00BF     		nop
 543 0036 0837     		adds	r7, r7, #8
 544              		.cfi_def_cfa_offset 8
 545 0038 BD46     		mov	sp, r7
 546              		.cfi_def_cfa_register 13
 547              		@ sp needed
 548 003a 80BD     		pop	{r7, pc}
 549              	.L26:
 550              		.align	2
 551              	.L25:
 552 003c 04ED00E0 		.word	-536810236
 553              		.cfi_endproc
 554              	.LFE77:
 555              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 556              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 557              		.align	2
 558              		.weak	vPortSetupTimerInterrupt
 559              		.thumb
 560              		.thumb_func
 561              		.type	vPortSetupTimerInterrupt, %function
 562              	vPortSetupTimerInterrupt:
 563              	.LFB78:
 454:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 455:..\Source\portable\GCC\ARM_CM3/port.c **** 
 456:..\Source\portable\GCC\ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 457:..\Source\portable\GCC\ARM_CM3/port.c **** 
 458:..\Source\portable\GCC\ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 459:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 460:..\Source\portable\GCC\ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 461:..\Source\portable\GCC\ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 462:..\Source\portable\GCC\ARM_CM3/port.c **** 
 463:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 464:..\Source\portable\GCC\ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 465:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 466:..\Source\portable\GCC\ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 467:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 468:..\Source\portable\GCC\ARM_CM3/port.c **** 
 469:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 470:..\Source\portable\GCC\ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 471:..\Source\portable\GCC\ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 472:..\Source\portable\GCC\ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 473:..\Source\portable\GCC\ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 474:..\Source\portable\GCC\ARM_CM3/port.c **** 
 475:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 476:..\Source\portable\GCC\ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 24


 477:..\Source\portable\GCC\ARM_CM3/port.c **** 		through one of the tick periods. */
 478:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 479:..\Source\portable\GCC\ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 480:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 481:..\Source\portable\GCC\ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 482:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 483:..\Source\portable\GCC\ARM_CM3/port.c **** 
 484:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 485:..\Source\portable\GCC\ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 486:..\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "cpsid i" );
 487:..\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 488:..\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "isb" );
 489:..\Source\portable\GCC\ARM_CM3/port.c **** 
 490:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 491:..\Source\portable\GCC\ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 492:..\Source\portable\GCC\ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 493:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 494:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 495:..\Source\portable\GCC\ARM_CM3/port.c **** 			this tick period. */
 496:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 497:..\Source\portable\GCC\ARM_CM3/port.c **** 
 498:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 499:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 500:..\Source\portable\GCC\ARM_CM3/port.c **** 
 501:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 502:..\Source\portable\GCC\ARM_CM3/port.c **** 			periods. */
 503:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 504:..\Source\portable\GCC\ARM_CM3/port.c **** 
 505:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 506:..\Source\portable\GCC\ARM_CM3/port.c **** 			above. */
 507:..\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" );
 508:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 509:..\Source\portable\GCC\ARM_CM3/port.c **** 		else
 510:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 511:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Set the new reload value. */
 512:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 513:..\Source\portable\GCC\ARM_CM3/port.c **** 
 514:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 515:..\Source\portable\GCC\ARM_CM3/port.c **** 			zero. */
 516:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 517:..\Source\portable\GCC\ARM_CM3/port.c **** 
 518:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 519:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 520:..\Source\portable\GCC\ARM_CM3/port.c **** 
 521:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 522:..\Source\portable\GCC\ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 523:..\Source\portable\GCC\ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 524:..\Source\portable\GCC\ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 525:..\Source\portable\GCC\ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 526:..\Source\portable\GCC\ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 527:..\Source\portable\GCC\ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 528:..\Source\portable\GCC\ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 529:..\Source\portable\GCC\ARM_CM3/port.c **** 			{
 530:..\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "dsb" );
 531:..\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 532:..\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "isb" );
 533:..\Source\portable\GCC\ARM_CM3/port.c **** 			}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 25


 534:..\Source\portable\GCC\ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 535:..\Source\portable\GCC\ARM_CM3/port.c **** 
 536:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 537:..\Source\portable\GCC\ARM_CM3/port.c **** 			accounted for as best it can be, but using the tickless mode will
 538:..\Source\portable\GCC\ARM_CM3/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 539:..\Source\portable\GCC\ARM_CM3/port.c **** 			kernel with respect to calendar time. */
 540:..\Source\portable\GCC\ARM_CM3/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 541:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 542:..\Source\portable\GCC\ARM_CM3/port.c **** 
 543:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 544:..\Source\portable\GCC\ARM_CM3/port.c **** 			above. */
 545:..\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" );
 546:..\Source\portable\GCC\ARM_CM3/port.c **** 
 547:..\Source\portable\GCC\ARM_CM3/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 548:..\Source\portable\GCC\ARM_CM3/port.c **** 			{
 549:..\Source\portable\GCC\ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 550:..\Source\portable\GCC\ARM_CM3/port.c **** 
 551:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 552:..\Source\portable\GCC\ARM_CM3/port.c **** 				count reloaded with ulReloadValue.  Reset the
 553:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 554:..\Source\portable\GCC\ARM_CM3/port.c **** 				period. */
 555:..\Source\portable\GCC\ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 556:..\Source\portable\GCC\ARM_CM3/port.c **** 
 557:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 558:..\Source\portable\GCC\ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 559:..\Source\portable\GCC\ARM_CM3/port.c **** 				that took too long. */
 560:..\Source\portable\GCC\ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 561:..\Source\portable\GCC\ARM_CM3/port.c **** 				{
 562:..\Source\portable\GCC\ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 563:..\Source\portable\GCC\ARM_CM3/port.c **** 				}
 564:..\Source\portable\GCC\ARM_CM3/port.c **** 
 565:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 566:..\Source\portable\GCC\ARM_CM3/port.c **** 
 567:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* The tick interrupt handler will already have pended the tick
 568:..\Source\portable\GCC\ARM_CM3/port.c **** 				processing in the kernel.  As the pending tick will be
 569:..\Source\portable\GCC\ARM_CM3/port.c **** 				processed as soon as this function exits, the tick value
 570:..\Source\portable\GCC\ARM_CM3/port.c **** 				maintained by the tick is stepped forward by one less than the
 571:..\Source\portable\GCC\ARM_CM3/port.c **** 				time spent waiting. */
 572:..\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 573:..\Source\portable\GCC\ARM_CM3/port.c **** 			}
 574:..\Source\portable\GCC\ARM_CM3/port.c **** 			else
 575:..\Source\portable\GCC\ARM_CM3/port.c **** 			{
 576:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 577:..\Source\portable\GCC\ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 578:..\Source\portable\GCC\ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 579:..\Source\portable\GCC\ARM_CM3/port.c **** 				ticks). */
 580:..\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 581:..\Source\portable\GCC\ARM_CM3/port.c **** 
 582:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 583:..\Source\portable\GCC\ARM_CM3/port.c **** 				was waiting? */
 584:..\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 585:..\Source\portable\GCC\ARM_CM3/port.c **** 
 586:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 587:..\Source\portable\GCC\ARM_CM3/port.c **** 				period remains. */
 588:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 589:..\Source\portable\GCC\ARM_CM3/port.c **** 			}
 590:..\Source\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 26


 591:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 592:..\Source\portable\GCC\ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 593:..\Source\portable\GCC\ARM_CM3/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 594:..\Source\portable\GCC\ARM_CM3/port.c **** 			can only execute once in the case that the reload register is near
 595:..\Source\portable\GCC\ARM_CM3/port.c **** 			zero. */
 596:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 597:..\Source\portable\GCC\ARM_CM3/port.c **** 			portENTER_CRITICAL();
 598:..\Source\portable\GCC\ARM_CM3/port.c **** 			{
 599:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 600:..\Source\portable\GCC\ARM_CM3/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 601:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 602:..\Source\portable\GCC\ARM_CM3/port.c **** 			}
 603:..\Source\portable\GCC\ARM_CM3/port.c **** 			portEXIT_CRITICAL();
 604:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 605:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 606:..\Source\portable\GCC\ARM_CM3/port.c **** 
 607:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 608:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 609:..\Source\portable\GCC\ARM_CM3/port.c **** 
 610:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 611:..\Source\portable\GCC\ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 612:..\Source\portable\GCC\ARM_CM3/port.c ****  * frequency.
 613:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 614:..\Source\portable\GCC\ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 615:..\Source\portable\GCC\ARM_CM3/port.c **** {
 564              		.loc 1 615 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569 0000 80B4     		push	{r7}
 570              		.cfi_def_cfa_offset 4
 571              		.cfi_offset 7, -4
 572 0002 00AF     		add	r7, sp, #0
 573              		.cfi_def_cfa_register 7
 616:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 617:..\Source\portable\GCC\ARM_CM3/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 618:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 619:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 620:..\Source\portable\GCC\ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 621:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 622:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 623:..\Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 624:..\Source\portable\GCC\ARM_CM3/port.c **** 
 625:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 626:..\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 574              		.loc 1 626 0
 575 0004 044B     		ldr	r3, .L28
 576 0006 054A     		ldr	r2, .L28+4
 577 0008 1A60     		str	r2, [r3]
 627:..\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 578              		.loc 1 627 0
 579 000a 054B     		ldr	r3, .L28+8
 580 000c 0722     		movs	r2, #7
 581 000e 1A60     		str	r2, [r3]
 628:..\Source\portable\GCC\ARM_CM3/port.c ****     
 629:..\Source\portable\GCC\ARM_CM3/port.c **** }
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 27


 582              		.loc 1 629 0
 583 0010 00BF     		nop
 584 0012 BD46     		mov	sp, r7
 585              		.cfi_def_cfa_register 13
 586              		@ sp needed
 587 0014 80BC     		pop	{r7}
 588              		.cfi_restore 7
 589              		.cfi_def_cfa_offset 0
 590 0016 7047     		bx	lr
 591              	.L29:
 592              		.align	2
 593              	.L28:
 594 0018 14E000E0 		.word	-536813548
 595 001c F7240100 		.word	74999
 596 0020 10E000E0 		.word	-536813552
 597              		.cfi_endproc
 598              	.LFE78:
 599              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 600              		.text
 601              	.Letext0:
 602              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 603              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 604              		.file 5 ".\\Tracer/sniffPayload.h"
 605              		.file 6 ".\\Tracer/selfFIFO.h"
 606              		.file 7 "..\\Source\\include/projdefs.h"
 607              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 608              		.file 9 ".\\Tracer/sniffTask.h"
 609              		.section	.debug_info,"",%progbits
 610              	.Ldebug_info0:
 611 0000 C0040000 		.4byte	0x4c0
 612 0004 0400     		.2byte	0x4
 613 0006 00000000 		.4byte	.Ldebug_abbrev0
 614 000a 04       		.byte	0x4
 615 000b 01       		.uleb128 0x1
 616 000c 7C000000 		.4byte	.LASF64
 617 0010 0C       		.byte	0xc
 618 0011 45030000 		.4byte	.LASF65
 619 0015 45040000 		.4byte	.LASF66
 620 0019 00000000 		.4byte	.Ldebug_ranges0+0
 621 001d 00000000 		.4byte	0
 622 0021 00000000 		.4byte	.Ldebug_line0
 623 0025 02       		.uleb128 0x2
 624 0026 04       		.byte	0x4
 625 0027 05       		.byte	0x5
 626 0028 696E7400 		.ascii	"int\000"
 627 002c 03       		.uleb128 0x3
 628 002d 04       		.byte	0x4
 629 002e 07       		.byte	0x7
 630 002f 79020000 		.4byte	.LASF0
 631 0033 03       		.uleb128 0x3
 632 0034 08       		.byte	0x8
 633 0035 05       		.byte	0x5
 634 0036 B3010000 		.4byte	.LASF1
 635 003a 03       		.uleb128 0x3
 636 003b 08       		.byte	0x8
 637 003c 04       		.byte	0x4
 638 003d 33020000 		.4byte	.LASF2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 28


 639 0041 03       		.uleb128 0x3
 640 0042 01       		.byte	0x1
 641 0043 06       		.byte	0x6
 642 0044 4D020000 		.4byte	.LASF3
 643 0048 04       		.uleb128 0x4
 644 0049 F3010000 		.4byte	.LASF7
 645 004d 03       		.byte	0x3
 646 004e 1D       		.byte	0x1d
 647 004f 53000000 		.4byte	0x53
 648 0053 03       		.uleb128 0x3
 649 0054 01       		.byte	0x1
 650 0055 08       		.byte	0x8
 651 0056 3F020000 		.4byte	.LASF4
 652 005a 03       		.uleb128 0x3
 653 005b 02       		.byte	0x2
 654 005c 05       		.byte	0x5
 655 005d 30000000 		.4byte	.LASF5
 656 0061 03       		.uleb128 0x3
 657 0062 02       		.byte	0x2
 658 0063 07       		.byte	0x7
 659 0064 C8020000 		.4byte	.LASF6
 660 0068 04       		.uleb128 0x4
 661 0069 ED030000 		.4byte	.LASF8
 662 006d 03       		.byte	0x3
 663 006e 3F       		.byte	0x3f
 664 006f 73000000 		.4byte	0x73
 665 0073 03       		.uleb128 0x3
 666 0074 04       		.byte	0x4
 667 0075 05       		.byte	0x5
 668 0076 CC010000 		.4byte	.LASF9
 669 007a 04       		.uleb128 0x4
 670 007b 20010000 		.4byte	.LASF10
 671 007f 03       		.byte	0x3
 672 0080 41       		.byte	0x41
 673 0081 85000000 		.4byte	0x85
 674 0085 03       		.uleb128 0x3
 675 0086 04       		.byte	0x4
 676 0087 07       		.byte	0x7
 677 0088 98030000 		.4byte	.LASF11
 678 008c 03       		.uleb128 0x3
 679 008d 08       		.byte	0x8
 680 008e 07       		.byte	0x7
 681 008f 59020000 		.4byte	.LASF12
 682 0093 04       		.uleb128 0x4
 683 0094 56010000 		.4byte	.LASF13
 684 0098 04       		.byte	0x4
 685 0099 18       		.byte	0x18
 686 009a 48000000 		.4byte	0x48
 687 009e 04       		.uleb128 0x4
 688 009f 0C030000 		.4byte	.LASF14
 689 00a3 04       		.byte	0x4
 690 00a4 2C       		.byte	0x2c
 691 00a5 68000000 		.4byte	0x68
 692 00a9 04       		.uleb128 0x4
 693 00aa 70020000 		.4byte	.LASF15
 694 00ae 04       		.byte	0x4
 695 00af 30       		.byte	0x30
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 29


 696 00b0 7A000000 		.4byte	0x7a
 697 00b4 03       		.uleb128 0x3
 698 00b5 04       		.byte	0x4
 699 00b6 04       		.byte	0x4
 700 00b7 8F010000 		.4byte	.LASF16
 701 00bb 03       		.uleb128 0x3
 702 00bc 08       		.byte	0x8
 703 00bd 04       		.byte	0x4
 704 00be AA030000 		.4byte	.LASF17
 705 00c2 03       		.uleb128 0x3
 706 00c3 01       		.byte	0x1
 707 00c4 08       		.byte	0x8
 708 00c5 FE020000 		.4byte	.LASF18
 709 00c9 03       		.uleb128 0x3
 710 00ca 04       		.byte	0x4
 711 00cb 07       		.byte	0x7
 712 00cc 4E000000 		.4byte	.LASF19
 713 00d0 05       		.uleb128 0x5
 714 00d1 04       		.byte	0x4
 715 00d2 06       		.uleb128 0x6
 716 00d3 01       		.byte	0x1
 717 00d4 53000000 		.4byte	0x53
 718 00d8 05       		.byte	0x5
 719 00d9 10       		.byte	0x10
 720 00da 09010000 		.4byte	0x109
 721 00de 07       		.uleb128 0x7
 722 00df 0F020000 		.4byte	.LASF20
 723 00e3 00       		.byte	0
 724 00e4 07       		.uleb128 0x7
 725 00e5 6B000000 		.4byte	.LASF21
 726 00e9 01       		.byte	0x1
 727 00ea 07       		.uleb128 0x7
 728 00eb 15020000 		.4byte	.LASF22
 729 00ef 02       		.byte	0x2
 730 00f0 07       		.uleb128 0x7
 731 00f1 B1030000 		.4byte	.LASF23
 732 00f5 03       		.byte	0x3
 733 00f6 07       		.uleb128 0x7
 734 00f7 E3010000 		.4byte	.LASF24
 735 00fb 04       		.byte	0x4
 736 00fc 07       		.uleb128 0x7
 737 00fd E8030000 		.4byte	.LASF25
 738 0101 05       		.byte	0x5
 739 0102 07       		.uleb128 0x7
 740 0103 82030000 		.4byte	.LASF26
 741 0107 06       		.byte	0x6
 742 0108 00       		.byte	0
 743 0109 04       		.uleb128 0x4
 744 010a 70030000 		.4byte	.LASF27
 745 010e 05       		.byte	0x5
 746 010f 10       		.byte	0x10
 747 0110 D2000000 		.4byte	0xd2
 748 0114 08       		.uleb128 0x8
 749 0115 04       		.byte	0x4
 750 0116 05       		.byte	0x5
 751 0117 86       		.byte	0x86
 752 0118 4D010000 		.4byte	0x14d
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 30


 753 011c 09       		.uleb128 0x9
 754 011d 03030000 		.4byte	.LASF28
 755 0121 05       		.byte	0x5
 756 0122 87       		.byte	0x87
 757 0123 93000000 		.4byte	0x93
 758 0127 00       		.byte	0
 759 0128 09       		.uleb128 0x9
 760 0129 00000000 		.4byte	.LASF29
 761 012d 05       		.byte	0x5
 762 012e 88       		.byte	0x88
 763 012f 93000000 		.4byte	0x93
 764 0133 01       		.byte	0x1
 765 0134 09       		.uleb128 0x9
 766 0135 71000000 		.4byte	.LASF30
 767 0139 05       		.byte	0x5
 768 013a 89       		.byte	0x89
 769 013b 09010000 		.4byte	0x109
 770 013f 02       		.byte	0x2
 771 0140 09       		.uleb128 0x9
 772 0141 88010000 		.4byte	.LASF31
 773 0145 05       		.byte	0x5
 774 0146 8A       		.byte	0x8a
 775 0147 93000000 		.4byte	0x93
 776 014b 03       		.byte	0x3
 777 014c 00       		.byte	0
 778 014d 04       		.uleb128 0x4
 779 014e 86020000 		.4byte	.LASF32
 780 0152 05       		.byte	0x5
 781 0153 8B       		.byte	0x8b
 782 0154 14010000 		.4byte	0x114
 783 0158 08       		.uleb128 0x8
 784 0159 0E       		.byte	0xe
 785 015a 05       		.byte	0x5
 786 015b 95       		.byte	0x95
 787 015c 85010000 		.4byte	0x185
 788 0160 09       		.uleb128 0x9
 789 0161 23000000 		.4byte	.LASF33
 790 0165 05       		.byte	0x5
 791 0166 96       		.byte	0x96
 792 0167 93000000 		.4byte	0x93
 793 016b 00       		.byte	0
 794 016c 09       		.uleb128 0x9
 795 016d 6A010000 		.4byte	.LASF34
 796 0171 05       		.byte	0x5
 797 0172 97       		.byte	0x97
 798 0173 93000000 		.4byte	0x93
 799 0177 01       		.byte	0x1
 800 0178 09       		.uleb128 0x9
 801 0179 28020000 		.4byte	.LASF35
 802 017d 05       		.byte	0x5
 803 017e 98       		.byte	0x98
 804 017f 85010000 		.4byte	0x185
 805 0183 02       		.byte	0x2
 806 0184 00       		.byte	0
 807 0185 0A       		.uleb128 0xa
 808 0186 C2000000 		.4byte	0xc2
 809 018a 95010000 		.4byte	0x195
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 31


 810 018e 0B       		.uleb128 0xb
 811 018f C9000000 		.4byte	0xc9
 812 0193 0B       		.byte	0xb
 813 0194 00       		.byte	0
 814 0195 04       		.uleb128 0x4
 815 0196 A7010000 		.4byte	.LASF36
 816 019a 05       		.byte	0x5
 817 019b 99       		.byte	0x99
 818 019c 58010000 		.4byte	0x158
 819 01a0 0C       		.uleb128 0xc
 820 01a1 1C01     		.2byte	0x11c
 821 01a3 05       		.byte	0x5
 822 01a4 A3       		.byte	0xa3
 823 01a5 C2010000 		.4byte	0x1c2
 824 01a9 09       		.uleb128 0x9
 825 01aa 2B010000 		.4byte	.LASF37
 826 01ae 05       		.byte	0x5
 827 01af A4       		.byte	0xa4
 828 01b0 4D010000 		.4byte	0x14d
 829 01b4 00       		.byte	0
 830 01b5 09       		.uleb128 0x9
 831 01b6 5E010000 		.4byte	.LASF38
 832 01ba 05       		.byte	0x5
 833 01bb A5       		.byte	0xa5
 834 01bc C2010000 		.4byte	0x1c2
 835 01c0 04       		.byte	0x4
 836 01c1 00       		.byte	0
 837 01c2 0A       		.uleb128 0xa
 838 01c3 95010000 		.4byte	0x195
 839 01c7 D2010000 		.4byte	0x1d2
 840 01cb 0B       		.uleb128 0xb
 841 01cc C9000000 		.4byte	0xc9
 842 01d0 13       		.byte	0x13
 843 01d1 00       		.byte	0
 844 01d2 04       		.uleb128 0x4
 845 01d3 26040000 		.4byte	.LASF39
 846 01d7 05       		.byte	0x5
 847 01d8 A6       		.byte	0xa6
 848 01d9 A0010000 		.4byte	0x1a0
 849 01dd 0D       		.uleb128 0xd
 850 01de 3E040000 		.4byte	.LASF67
 851 01e2 0210     		.2byte	0x1002
 852 01e4 06       		.byte	0x6
 853 01e5 0C       		.byte	0xc
 854 01e6 11020000 		.4byte	0x211
 855 01ea 09       		.uleb128 0x9
 856 01eb 6B030000 		.4byte	.LASF40
 857 01ef 06       		.byte	0x6
 858 01f0 0D       		.byte	0xd
 859 01f1 11020000 		.4byte	0x211
 860 01f5 00       		.byte	0
 861 01f6 0E       		.uleb128 0xe
 862 01f7 AE010000 		.4byte	.LASF41
 863 01fb 06       		.byte	0x6
 864 01fc 0E       		.byte	0xe
 865 01fd 93000000 		.4byte	0x93
 866 0201 0010     		.2byte	0x1000
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 32


 867 0203 0E       		.uleb128 0xe
 868 0204 0E000000 		.4byte	.LASF42
 869 0208 06       		.byte	0x6
 870 0209 0F       		.byte	0xf
 871 020a 93000000 		.4byte	0x93
 872 020e 0110     		.2byte	0x1001
 873 0210 00       		.byte	0
 874 0211 0A       		.uleb128 0xa
 875 0212 93000000 		.4byte	0x93
 876 0216 22020000 		.4byte	0x222
 877 021a 0F       		.uleb128 0xf
 878 021b C9000000 		.4byte	0xc9
 879 021f FF0F     		.2byte	0xfff
 880 0221 00       		.byte	0
 881 0222 04       		.uleb128 0x4
 882 0223 14000000 		.4byte	.LASF43
 883 0227 07       		.byte	0x7
 884 0228 4D       		.byte	0x4d
 885 0229 2D020000 		.4byte	0x22d
 886 022d 10       		.uleb128 0x10
 887 022e 04       		.byte	0x4
 888 022f 33020000 		.4byte	0x233
 889 0233 11       		.uleb128 0x11
 890 0234 3E020000 		.4byte	0x23e
 891 0238 12       		.uleb128 0x12
 892 0239 D0000000 		.4byte	0xd0
 893 023d 00       		.byte	0
 894 023e 04       		.uleb128 0x4
 895 023f DC030000 		.4byte	.LASF44
 896 0243 02       		.byte	0x2
 897 0244 61       		.byte	0x61
 898 0245 A9000000 		.4byte	0xa9
 899 0249 04       		.uleb128 0x4
 900 024a 97020000 		.4byte	.LASF45
 901 024e 02       		.byte	0x2
 902 024f 62       		.byte	0x62
 903 0250 73000000 		.4byte	0x73
 904 0254 04       		.uleb128 0x4
 905 0255 27030000 		.4byte	.LASF46
 906 0259 02       		.byte	0x2
 907 025a 63       		.byte	0x63
 908 025b 85000000 		.4byte	0x85
 909 025f 04       		.uleb128 0x4
 910 0260 C1010000 		.4byte	.LASF47
 911 0264 02       		.byte	0x2
 912 0265 69       		.byte	0x69
 913 0266 A9000000 		.4byte	0xa9
 914 026a 10       		.uleb128 0x10
 915 026b 04       		.byte	0x4
 916 026c 3E020000 		.4byte	0x23e
 917 0270 13       		.uleb128 0x13
 918 0271 14040000 		.4byte	.LASF48
 919 0275 02       		.byte	0x2
 920 0276 E9       		.byte	0xe9
 921 0277 03       		.byte	0x3
 922 0278 88020000 		.4byte	0x288
 923 027c 14       		.uleb128 0x14
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 33


 924 027d A0040000 		.4byte	.LASF68
 925 0281 02       		.byte	0x2
 926 0282 EB       		.byte	0xeb
 927 0283 A9000000 		.4byte	0xa9
 928 0287 00       		.byte	0
 929 0288 15       		.uleb128 0x15
 930 0289 EE020000 		.4byte	.LASF49
 931 028d 02       		.byte	0x2
 932 028e 0D01     		.2byte	0x10d
 933 0290 03       		.byte	0x3
 934 0291 A2020000 		.4byte	0x2a2
 935 0295 16       		.uleb128 0x16
 936 0296 CD030000 		.4byte	.LASF69
 937 029a 02       		.byte	0x2
 938 029b 0D01     		.2byte	0x10d
 939 029d A9000000 		.4byte	0xa9
 940 02a1 00       		.byte	0
 941 02a2 17       		.uleb128 0x17
 942 02a3 FE030000 		.4byte	.LASF70
 943 02a7 01       		.byte	0x1
 944 02a8 D8       		.byte	0xd8
 945 02a9 6A020000 		.4byte	0x26a
 946 02ad 00000000 		.4byte	.LFB68
 947 02b1 58000000 		.4byte	.LFE68-.LFB68
 948 02b5 01       		.uleb128 0x1
 949 02b6 9C       		.byte	0x9c
 950 02b7 E6020000 		.4byte	0x2e6
 951 02bb 18       		.uleb128 0x18
 952 02bc 38010000 		.4byte	.LASF50
 953 02c0 01       		.byte	0x1
 954 02c1 D8       		.byte	0xd8
 955 02c2 6A020000 		.4byte	0x26a
 956 02c6 02       		.uleb128 0x2
 957 02c7 91       		.byte	0x91
 958 02c8 74       		.sleb128 -12
 959 02c9 18       		.uleb128 0x18
 960 02ca F7030000 		.4byte	.LASF51
 961 02ce 01       		.byte	0x1
 962 02cf D8       		.byte	0xd8
 963 02d0 22020000 		.4byte	0x222
 964 02d4 02       		.uleb128 0x2
 965 02d5 91       		.byte	0x91
 966 02d6 70       		.sleb128 -16
 967 02d7 18       		.uleb128 0x18
 968 02d8 A2020000 		.4byte	.LASF52
 969 02dc 01       		.byte	0x1
 970 02dd D8       		.byte	0xd8
 971 02de D0000000 		.4byte	0xd0
 972 02e2 02       		.uleb128 0x2
 973 02e3 91       		.byte	0x91
 974 02e4 6C       		.sleb128 -20
 975 02e5 00       		.byte	0
 976 02e6 19       		.uleb128 0x19
 977 02e7 45010000 		.4byte	.LASF71
 978 02eb 01       		.byte	0x1
 979 02ec EA       		.byte	0xea
 980 02ed 00000000 		.4byte	.LFB69
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 34


 981 02f1 1A000000 		.4byte	.LFE69-.LFB69
 982 02f5 01       		.uleb128 0x1
 983 02f6 9C       		.byte	0x9c
 984 02f7 1E030000 		.4byte	0x31e
 985 02fb 1A       		.uleb128 0x1a
 986 02fc 70020000 		.4byte	0x270
 987 0300 06000000 		.4byte	.LBB12
 988 0304 12000000 		.4byte	.LBE12-.LBB12
 989 0308 01       		.byte	0x1
 990 0309 F3       		.byte	0xf3
 991 030a 1B       		.uleb128 0x1b
 992 030b 06000000 		.4byte	.LBB13
 993 030f 12000000 		.4byte	.LBE13-.LBB13
 994 0313 1C       		.uleb128 0x1c
 995 0314 7C020000 		.4byte	0x27c
 996 0318 02       		.uleb128 0x2
 997 0319 91       		.byte	0x91
 998 031a 74       		.sleb128 -12
 999 031b 00       		.byte	0
 1000 031c 00       		.byte	0
 1001 031d 00       		.byte	0
 1002 031e 1D       		.uleb128 0x1d
 1003 031f 78010000 		.4byte	.LASF53
 1004 0323 01       		.byte	0x1
 1005 0324 F8       		.byte	0xf8
 1006 0325 00000000 		.4byte	.LFB70
 1007 0329 26000000 		.4byte	.LFE70-.LFB70
 1008 032d 01       		.uleb128 0x1
 1009 032e 9C       		.byte	0x9c
 1010 032f 1E       		.uleb128 0x1e
 1011 0330 0A010000 		.4byte	.LASF72
 1012 0334 01       		.byte	0x1
 1013 0335 0C01     		.2byte	0x10c
 1014 0337 00000000 		.4byte	.LFB71
 1015 033b 1C000000 		.4byte	.LFE71-.LFB71
 1016 033f 01       		.uleb128 0x1
 1017 0340 9C       		.byte	0x9c
 1018 0341 1F       		.uleb128 0x1f
 1019 0342 3A000000 		.4byte	.LASF73
 1020 0346 01       		.byte	0x1
 1021 0347 2001     		.2byte	0x120
 1022 0349 49020000 		.4byte	0x249
 1023 034d 00000000 		.4byte	.LFB72
 1024 0351 3C000000 		.4byte	.LFE72-.LFB72
 1025 0355 01       		.uleb128 0x1
 1026 0356 9C       		.byte	0x9c
 1027 0357 20       		.uleb128 0x20
 1028 0358 95010000 		.4byte	.LASF54
 1029 035c 01       		.byte	0x1
 1030 035d 6B01     		.2byte	0x16b
 1031 035f 00000000 		.4byte	.LFB73
 1032 0363 0C000000 		.4byte	.LFE73-.LFB73
 1033 0367 01       		.uleb128 0x1
 1034 0368 9C       		.byte	0x9c
 1035 0369 21       		.uleb128 0x21
 1036 036a DB020000 		.4byte	.LASF55
 1037 036e 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 35


 1038 036f 7301     		.2byte	0x173
 1039 0371 00000000 		.4byte	.LFB74
 1040 0375 30000000 		.4byte	.LFE74-.LFB74
 1041 0379 01       		.uleb128 0x1
 1042 037a 9C       		.byte	0x9c
 1043 037b A3030000 		.4byte	0x3a3
 1044 037f 22       		.uleb128 0x22
 1045 0380 70020000 		.4byte	0x270
 1046 0384 06000000 		.4byte	.LBB14
 1047 0388 12000000 		.4byte	.LBE14-.LBB14
 1048 038c 01       		.byte	0x1
 1049 038d 7501     		.2byte	0x175
 1050 038f 1B       		.uleb128 0x1b
 1051 0390 06000000 		.4byte	.LBB15
 1052 0394 12000000 		.4byte	.LBE15-.LBB15
 1053 0398 1C       		.uleb128 0x1c
 1054 0399 7C020000 		.4byte	0x27c
 1055 039d 02       		.uleb128 0x2
 1056 039e 91       		.byte	0x91
 1057 039f 74       		.sleb128 -12
 1058 03a0 00       		.byte	0
 1059 03a1 00       		.byte	0
 1060 03a2 00       		.byte	0
 1061 03a3 21       		.uleb128 0x21
 1062 03a4 33030000 		.4byte	.LASF56
 1063 03a8 01       		.byte	0x1
 1064 03a9 8401     		.2byte	0x184
 1065 03ab 00000000 		.4byte	.LFB75
 1066 03af 30000000 		.4byte	.LFE75-.LFB75
 1067 03b3 01       		.uleb128 0x1
 1068 03b4 9C       		.byte	0x9c
 1069 03b5 D3030000 		.4byte	0x3d3
 1070 03b9 22       		.uleb128 0x22
 1071 03ba 88020000 		.4byte	0x288
 1072 03be 1C000000 		.4byte	.LBB16
 1073 03c2 06000000 		.4byte	.LBE16-.LBB16
 1074 03c6 01       		.byte	0x1
 1075 03c7 8A01     		.2byte	0x18a
 1076 03c9 23       		.uleb128 0x23
 1077 03ca 95020000 		.4byte	0x295
 1078 03ce 02       		.uleb128 0x2
 1079 03cf 91       		.byte	0x91
 1080 03d0 74       		.sleb128 -12
 1081 03d1 00       		.byte	0
 1082 03d2 00       		.byte	0
 1083 03d3 20       		.uleb128 0x20
 1084 03d4 14030000 		.4byte	.LASF57
 1085 03d8 01       		.byte	0x1
 1086 03d9 8F01     		.2byte	0x18f
 1087 03db 00000000 		.4byte	.LFB76
 1088 03df 46000000 		.4byte	.LFE76-.LFB76
 1089 03e3 01       		.uleb128 0x1
 1090 03e4 9C       		.byte	0x9c
 1091 03e5 24       		.uleb128 0x24
 1092 03e6 57000000 		.4byte	.LASF58
 1093 03ea 01       		.byte	0x1
 1094 03eb B401     		.2byte	0x1b4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 36


 1095 03ed 00000000 		.4byte	.LFB77
 1096 03f1 40000000 		.4byte	.LFE77-.LFB77
 1097 03f5 01       		.uleb128 0x1
 1098 03f6 9C       		.byte	0x9c
 1099 03f7 3C040000 		.4byte	0x43c
 1100 03fb 25       		.uleb128 0x25
 1101 03fc 70020000 		.4byte	0x270
 1102 0400 06000000 		.4byte	.LBB18
 1103 0404 12000000 		.4byte	.LBE18-.LBB18
 1104 0408 01       		.byte	0x1
 1105 0409 BA01     		.2byte	0x1ba
 1106 040b 22040000 		.4byte	0x422
 1107 040f 1B       		.uleb128 0x1b
 1108 0410 06000000 		.4byte	.LBB19
 1109 0414 12000000 		.4byte	.LBE19-.LBB19
 1110 0418 1C       		.uleb128 0x1c
 1111 0419 7C020000 		.4byte	0x27c
 1112 041d 02       		.uleb128 0x2
 1113 041e 91       		.byte	0x91
 1114 041f 70       		.sleb128 -16
 1115 0420 00       		.byte	0
 1116 0421 00       		.byte	0
 1117 0422 22       		.uleb128 0x22
 1118 0423 88020000 		.4byte	0x288
 1119 0427 2E000000 		.4byte	.LBB20
 1120 042b 06000000 		.4byte	.LBE20-.LBB20
 1121 042f 01       		.byte	0x1
 1122 0430 C401     		.2byte	0x1c4
 1123 0432 23       		.uleb128 0x23
 1124 0433 95020000 		.4byte	0x295
 1125 0437 02       		.uleb128 0x2
 1126 0438 91       		.byte	0x91
 1127 0439 74       		.sleb128 -12
 1128 043a 00       		.byte	0
 1129 043b 00       		.byte	0
 1130 043c 20       		.uleb128 0x20
 1131 043d AF020000 		.4byte	.LASF59
 1132 0441 01       		.byte	0x1
 1133 0442 6602     		.2byte	0x266
 1134 0444 00000000 		.4byte	.LFB78
 1135 0448 24000000 		.4byte	.LFE78-.LFB78
 1136 044c 01       		.uleb128 0x1
 1137 044d 9C       		.byte	0x9c
 1138 044e 26       		.uleb128 0x26
 1139 044f FD010000 		.4byte	.LASF74
 1140 0453 01       		.byte	0x1
 1141 0454 95       		.byte	0x95
 1142 0455 54020000 		.4byte	0x254
 1143 0459 05       		.uleb128 0x5
 1144 045a 03       		.byte	0x3
 1145 045b 00000000 		.4byte	uxCriticalNesting
 1146 045f 27       		.uleb128 0x27
 1147 0460 31040000 		.4byte	.LASF60
 1148 0464 08       		.byte	0x8
 1149 0465 9606     		.2byte	0x696
 1150 0467 6B040000 		.4byte	0x46b
 1151 046b 28       		.uleb128 0x28
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 37


 1152 046c 9E000000 		.4byte	0x9e
 1153 0470 0A       		.uleb128 0xa
 1154 0471 93000000 		.4byte	0x93
 1155 0475 80040000 		.4byte	0x480
 1156 0479 0B       		.uleb128 0xb
 1157 047a C9000000 		.4byte	0xc9
 1158 047e 0C       		.byte	0xc
 1159 047f 00       		.byte	0
 1160 0480 29       		.uleb128 0x29
 1161 0481 D5010000 		.4byte	.LASF61
 1162 0485 05       		.byte	0x5
 1163 0486 12       		.byte	0x12
 1164 0487 70040000 		.4byte	0x470
 1165 048b 05       		.uleb128 0x5
 1166 048c 03       		.byte	0x3
 1167 048d 00000000 		.4byte	sniffIDFilter
 1168 0491 29       		.uleb128 0x29
 1169 0492 7B030000 		.4byte	.LASF62
 1170 0496 06       		.byte	0x6
 1171 0497 10       		.byte	0x10
 1172 0498 DD010000 		.4byte	0x1dd
 1173 049c 05       		.uleb128 0x5
 1174 049d 03       		.byte	0x3
 1175 049e 00000000 		.4byte	buffer
 1176 04a2 0A       		.uleb128 0xa
 1177 04a3 D2010000 		.4byte	0x1d2
 1178 04a7 B2040000 		.4byte	0x4b2
 1179 04ab 0B       		.uleb128 0xb
 1180 04ac C9000000 		.4byte	0xc9
 1181 04b0 05       		.byte	0x5
 1182 04b1 00       		.byte	0
 1183 04b2 29       		.uleb128 0x29
 1184 04b3 C2030000 		.4byte	.LASF63
 1185 04b7 09       		.byte	0x9
 1186 04b8 0D       		.byte	0xd
 1187 04b9 A2040000 		.4byte	0x4a2
 1188 04bd 05       		.uleb128 0x5
 1189 04be 03       		.byte	0x3
 1190 04bf 00000000 		.4byte	objectList
 1191 04c3 00       		.byte	0
 1192              		.section	.debug_abbrev,"",%progbits
 1193              	.Ldebug_abbrev0:
 1194 0000 01       		.uleb128 0x1
 1195 0001 11       		.uleb128 0x11
 1196 0002 01       		.byte	0x1
 1197 0003 25       		.uleb128 0x25
 1198 0004 0E       		.uleb128 0xe
 1199 0005 13       		.uleb128 0x13
 1200 0006 0B       		.uleb128 0xb
 1201 0007 03       		.uleb128 0x3
 1202 0008 0E       		.uleb128 0xe
 1203 0009 1B       		.uleb128 0x1b
 1204 000a 0E       		.uleb128 0xe
 1205 000b 55       		.uleb128 0x55
 1206 000c 17       		.uleb128 0x17
 1207 000d 11       		.uleb128 0x11
 1208 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 38


 1209 000f 10       		.uleb128 0x10
 1210 0010 17       		.uleb128 0x17
 1211 0011 00       		.byte	0
 1212 0012 00       		.byte	0
 1213 0013 02       		.uleb128 0x2
 1214 0014 24       		.uleb128 0x24
 1215 0015 00       		.byte	0
 1216 0016 0B       		.uleb128 0xb
 1217 0017 0B       		.uleb128 0xb
 1218 0018 3E       		.uleb128 0x3e
 1219 0019 0B       		.uleb128 0xb
 1220 001a 03       		.uleb128 0x3
 1221 001b 08       		.uleb128 0x8
 1222 001c 00       		.byte	0
 1223 001d 00       		.byte	0
 1224 001e 03       		.uleb128 0x3
 1225 001f 24       		.uleb128 0x24
 1226 0020 00       		.byte	0
 1227 0021 0B       		.uleb128 0xb
 1228 0022 0B       		.uleb128 0xb
 1229 0023 3E       		.uleb128 0x3e
 1230 0024 0B       		.uleb128 0xb
 1231 0025 03       		.uleb128 0x3
 1232 0026 0E       		.uleb128 0xe
 1233 0027 00       		.byte	0
 1234 0028 00       		.byte	0
 1235 0029 04       		.uleb128 0x4
 1236 002a 16       		.uleb128 0x16
 1237 002b 00       		.byte	0
 1238 002c 03       		.uleb128 0x3
 1239 002d 0E       		.uleb128 0xe
 1240 002e 3A       		.uleb128 0x3a
 1241 002f 0B       		.uleb128 0xb
 1242 0030 3B       		.uleb128 0x3b
 1243 0031 0B       		.uleb128 0xb
 1244 0032 49       		.uleb128 0x49
 1245 0033 13       		.uleb128 0x13
 1246 0034 00       		.byte	0
 1247 0035 00       		.byte	0
 1248 0036 05       		.uleb128 0x5
 1249 0037 0F       		.uleb128 0xf
 1250 0038 00       		.byte	0
 1251 0039 0B       		.uleb128 0xb
 1252 003a 0B       		.uleb128 0xb
 1253 003b 00       		.byte	0
 1254 003c 00       		.byte	0
 1255 003d 06       		.uleb128 0x6
 1256 003e 04       		.uleb128 0x4
 1257 003f 01       		.byte	0x1
 1258 0040 0B       		.uleb128 0xb
 1259 0041 0B       		.uleb128 0xb
 1260 0042 49       		.uleb128 0x49
 1261 0043 13       		.uleb128 0x13
 1262 0044 3A       		.uleb128 0x3a
 1263 0045 0B       		.uleb128 0xb
 1264 0046 3B       		.uleb128 0x3b
 1265 0047 0B       		.uleb128 0xb
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 39


 1266 0048 01       		.uleb128 0x1
 1267 0049 13       		.uleb128 0x13
 1268 004a 00       		.byte	0
 1269 004b 00       		.byte	0
 1270 004c 07       		.uleb128 0x7
 1271 004d 28       		.uleb128 0x28
 1272 004e 00       		.byte	0
 1273 004f 03       		.uleb128 0x3
 1274 0050 0E       		.uleb128 0xe
 1275 0051 1C       		.uleb128 0x1c
 1276 0052 0B       		.uleb128 0xb
 1277 0053 00       		.byte	0
 1278 0054 00       		.byte	0
 1279 0055 08       		.uleb128 0x8
 1280 0056 13       		.uleb128 0x13
 1281 0057 01       		.byte	0x1
 1282 0058 0B       		.uleb128 0xb
 1283 0059 0B       		.uleb128 0xb
 1284 005a 3A       		.uleb128 0x3a
 1285 005b 0B       		.uleb128 0xb
 1286 005c 3B       		.uleb128 0x3b
 1287 005d 0B       		.uleb128 0xb
 1288 005e 01       		.uleb128 0x1
 1289 005f 13       		.uleb128 0x13
 1290 0060 00       		.byte	0
 1291 0061 00       		.byte	0
 1292 0062 09       		.uleb128 0x9
 1293 0063 0D       		.uleb128 0xd
 1294 0064 00       		.byte	0
 1295 0065 03       		.uleb128 0x3
 1296 0066 0E       		.uleb128 0xe
 1297 0067 3A       		.uleb128 0x3a
 1298 0068 0B       		.uleb128 0xb
 1299 0069 3B       		.uleb128 0x3b
 1300 006a 0B       		.uleb128 0xb
 1301 006b 49       		.uleb128 0x49
 1302 006c 13       		.uleb128 0x13
 1303 006d 38       		.uleb128 0x38
 1304 006e 0B       		.uleb128 0xb
 1305 006f 00       		.byte	0
 1306 0070 00       		.byte	0
 1307 0071 0A       		.uleb128 0xa
 1308 0072 01       		.uleb128 0x1
 1309 0073 01       		.byte	0x1
 1310 0074 49       		.uleb128 0x49
 1311 0075 13       		.uleb128 0x13
 1312 0076 01       		.uleb128 0x1
 1313 0077 13       		.uleb128 0x13
 1314 0078 00       		.byte	0
 1315 0079 00       		.byte	0
 1316 007a 0B       		.uleb128 0xb
 1317 007b 21       		.uleb128 0x21
 1318 007c 00       		.byte	0
 1319 007d 49       		.uleb128 0x49
 1320 007e 13       		.uleb128 0x13
 1321 007f 2F       		.uleb128 0x2f
 1322 0080 0B       		.uleb128 0xb
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 40


 1323 0081 00       		.byte	0
 1324 0082 00       		.byte	0
 1325 0083 0C       		.uleb128 0xc
 1326 0084 13       		.uleb128 0x13
 1327 0085 01       		.byte	0x1
 1328 0086 0B       		.uleb128 0xb
 1329 0087 05       		.uleb128 0x5
 1330 0088 3A       		.uleb128 0x3a
 1331 0089 0B       		.uleb128 0xb
 1332 008a 3B       		.uleb128 0x3b
 1333 008b 0B       		.uleb128 0xb
 1334 008c 01       		.uleb128 0x1
 1335 008d 13       		.uleb128 0x13
 1336 008e 00       		.byte	0
 1337 008f 00       		.byte	0
 1338 0090 0D       		.uleb128 0xd
 1339 0091 13       		.uleb128 0x13
 1340 0092 01       		.byte	0x1
 1341 0093 03       		.uleb128 0x3
 1342 0094 0E       		.uleb128 0xe
 1343 0095 0B       		.uleb128 0xb
 1344 0096 05       		.uleb128 0x5
 1345 0097 3A       		.uleb128 0x3a
 1346 0098 0B       		.uleb128 0xb
 1347 0099 3B       		.uleb128 0x3b
 1348 009a 0B       		.uleb128 0xb
 1349 009b 01       		.uleb128 0x1
 1350 009c 13       		.uleb128 0x13
 1351 009d 00       		.byte	0
 1352 009e 00       		.byte	0
 1353 009f 0E       		.uleb128 0xe
 1354 00a0 0D       		.uleb128 0xd
 1355 00a1 00       		.byte	0
 1356 00a2 03       		.uleb128 0x3
 1357 00a3 0E       		.uleb128 0xe
 1358 00a4 3A       		.uleb128 0x3a
 1359 00a5 0B       		.uleb128 0xb
 1360 00a6 3B       		.uleb128 0x3b
 1361 00a7 0B       		.uleb128 0xb
 1362 00a8 49       		.uleb128 0x49
 1363 00a9 13       		.uleb128 0x13
 1364 00aa 38       		.uleb128 0x38
 1365 00ab 05       		.uleb128 0x5
 1366 00ac 00       		.byte	0
 1367 00ad 00       		.byte	0
 1368 00ae 0F       		.uleb128 0xf
 1369 00af 21       		.uleb128 0x21
 1370 00b0 00       		.byte	0
 1371 00b1 49       		.uleb128 0x49
 1372 00b2 13       		.uleb128 0x13
 1373 00b3 2F       		.uleb128 0x2f
 1374 00b4 05       		.uleb128 0x5
 1375 00b5 00       		.byte	0
 1376 00b6 00       		.byte	0
 1377 00b7 10       		.uleb128 0x10
 1378 00b8 0F       		.uleb128 0xf
 1379 00b9 00       		.byte	0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 41


 1380 00ba 0B       		.uleb128 0xb
 1381 00bb 0B       		.uleb128 0xb
 1382 00bc 49       		.uleb128 0x49
 1383 00bd 13       		.uleb128 0x13
 1384 00be 00       		.byte	0
 1385 00bf 00       		.byte	0
 1386 00c0 11       		.uleb128 0x11
 1387 00c1 15       		.uleb128 0x15
 1388 00c2 01       		.byte	0x1
 1389 00c3 27       		.uleb128 0x27
 1390 00c4 19       		.uleb128 0x19
 1391 00c5 01       		.uleb128 0x1
 1392 00c6 13       		.uleb128 0x13
 1393 00c7 00       		.byte	0
 1394 00c8 00       		.byte	0
 1395 00c9 12       		.uleb128 0x12
 1396 00ca 05       		.uleb128 0x5
 1397 00cb 00       		.byte	0
 1398 00cc 49       		.uleb128 0x49
 1399 00cd 13       		.uleb128 0x13
 1400 00ce 00       		.byte	0
 1401 00cf 00       		.byte	0
 1402 00d0 13       		.uleb128 0x13
 1403 00d1 2E       		.uleb128 0x2e
 1404 00d2 01       		.byte	0x1
 1405 00d3 03       		.uleb128 0x3
 1406 00d4 0E       		.uleb128 0xe
 1407 00d5 3A       		.uleb128 0x3a
 1408 00d6 0B       		.uleb128 0xb
 1409 00d7 3B       		.uleb128 0x3b
 1410 00d8 0B       		.uleb128 0xb
 1411 00d9 27       		.uleb128 0x27
 1412 00da 19       		.uleb128 0x19
 1413 00db 20       		.uleb128 0x20
 1414 00dc 0B       		.uleb128 0xb
 1415 00dd 01       		.uleb128 0x1
 1416 00de 13       		.uleb128 0x13
 1417 00df 00       		.byte	0
 1418 00e0 00       		.byte	0
 1419 00e1 14       		.uleb128 0x14
 1420 00e2 34       		.uleb128 0x34
 1421 00e3 00       		.byte	0
 1422 00e4 03       		.uleb128 0x3
 1423 00e5 0E       		.uleb128 0xe
 1424 00e6 3A       		.uleb128 0x3a
 1425 00e7 0B       		.uleb128 0xb
 1426 00e8 3B       		.uleb128 0x3b
 1427 00e9 0B       		.uleb128 0xb
 1428 00ea 49       		.uleb128 0x49
 1429 00eb 13       		.uleb128 0x13
 1430 00ec 00       		.byte	0
 1431 00ed 00       		.byte	0
 1432 00ee 15       		.uleb128 0x15
 1433 00ef 2E       		.uleb128 0x2e
 1434 00f0 01       		.byte	0x1
 1435 00f1 03       		.uleb128 0x3
 1436 00f2 0E       		.uleb128 0xe
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 42


 1437 00f3 3A       		.uleb128 0x3a
 1438 00f4 0B       		.uleb128 0xb
 1439 00f5 3B       		.uleb128 0x3b
 1440 00f6 05       		.uleb128 0x5
 1441 00f7 27       		.uleb128 0x27
 1442 00f8 19       		.uleb128 0x19
 1443 00f9 20       		.uleb128 0x20
 1444 00fa 0B       		.uleb128 0xb
 1445 00fb 01       		.uleb128 0x1
 1446 00fc 13       		.uleb128 0x13
 1447 00fd 00       		.byte	0
 1448 00fe 00       		.byte	0
 1449 00ff 16       		.uleb128 0x16
 1450 0100 05       		.uleb128 0x5
 1451 0101 00       		.byte	0
 1452 0102 03       		.uleb128 0x3
 1453 0103 0E       		.uleb128 0xe
 1454 0104 3A       		.uleb128 0x3a
 1455 0105 0B       		.uleb128 0xb
 1456 0106 3B       		.uleb128 0x3b
 1457 0107 05       		.uleb128 0x5
 1458 0108 49       		.uleb128 0x49
 1459 0109 13       		.uleb128 0x13
 1460 010a 00       		.byte	0
 1461 010b 00       		.byte	0
 1462 010c 17       		.uleb128 0x17
 1463 010d 2E       		.uleb128 0x2e
 1464 010e 01       		.byte	0x1
 1465 010f 3F       		.uleb128 0x3f
 1466 0110 19       		.uleb128 0x19
 1467 0111 03       		.uleb128 0x3
 1468 0112 0E       		.uleb128 0xe
 1469 0113 3A       		.uleb128 0x3a
 1470 0114 0B       		.uleb128 0xb
 1471 0115 3B       		.uleb128 0x3b
 1472 0116 0B       		.uleb128 0xb
 1473 0117 27       		.uleb128 0x27
 1474 0118 19       		.uleb128 0x19
 1475 0119 49       		.uleb128 0x49
 1476 011a 13       		.uleb128 0x13
 1477 011b 11       		.uleb128 0x11
 1478 011c 01       		.uleb128 0x1
 1479 011d 12       		.uleb128 0x12
 1480 011e 06       		.uleb128 0x6
 1481 011f 40       		.uleb128 0x40
 1482 0120 18       		.uleb128 0x18
 1483 0121 9742     		.uleb128 0x2117
 1484 0123 19       		.uleb128 0x19
 1485 0124 01       		.uleb128 0x1
 1486 0125 13       		.uleb128 0x13
 1487 0126 00       		.byte	0
 1488 0127 00       		.byte	0
 1489 0128 18       		.uleb128 0x18
 1490 0129 05       		.uleb128 0x5
 1491 012a 00       		.byte	0
 1492 012b 03       		.uleb128 0x3
 1493 012c 0E       		.uleb128 0xe
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 43


 1494 012d 3A       		.uleb128 0x3a
 1495 012e 0B       		.uleb128 0xb
 1496 012f 3B       		.uleb128 0x3b
 1497 0130 0B       		.uleb128 0xb
 1498 0131 49       		.uleb128 0x49
 1499 0132 13       		.uleb128 0x13
 1500 0133 02       		.uleb128 0x2
 1501 0134 18       		.uleb128 0x18
 1502 0135 00       		.byte	0
 1503 0136 00       		.byte	0
 1504 0137 19       		.uleb128 0x19
 1505 0138 2E       		.uleb128 0x2e
 1506 0139 01       		.byte	0x1
 1507 013a 03       		.uleb128 0x3
 1508 013b 0E       		.uleb128 0xe
 1509 013c 3A       		.uleb128 0x3a
 1510 013d 0B       		.uleb128 0xb
 1511 013e 3B       		.uleb128 0x3b
 1512 013f 0B       		.uleb128 0xb
 1513 0140 27       		.uleb128 0x27
 1514 0141 19       		.uleb128 0x19
 1515 0142 11       		.uleb128 0x11
 1516 0143 01       		.uleb128 0x1
 1517 0144 12       		.uleb128 0x12
 1518 0145 06       		.uleb128 0x6
 1519 0146 40       		.uleb128 0x40
 1520 0147 18       		.uleb128 0x18
 1521 0148 9742     		.uleb128 0x2117
 1522 014a 19       		.uleb128 0x19
 1523 014b 01       		.uleb128 0x1
 1524 014c 13       		.uleb128 0x13
 1525 014d 00       		.byte	0
 1526 014e 00       		.byte	0
 1527 014f 1A       		.uleb128 0x1a
 1528 0150 1D       		.uleb128 0x1d
 1529 0151 01       		.byte	0x1
 1530 0152 31       		.uleb128 0x31
 1531 0153 13       		.uleb128 0x13
 1532 0154 11       		.uleb128 0x11
 1533 0155 01       		.uleb128 0x1
 1534 0156 12       		.uleb128 0x12
 1535 0157 06       		.uleb128 0x6
 1536 0158 58       		.uleb128 0x58
 1537 0159 0B       		.uleb128 0xb
 1538 015a 59       		.uleb128 0x59
 1539 015b 0B       		.uleb128 0xb
 1540 015c 00       		.byte	0
 1541 015d 00       		.byte	0
 1542 015e 1B       		.uleb128 0x1b
 1543 015f 0B       		.uleb128 0xb
 1544 0160 01       		.byte	0x1
 1545 0161 11       		.uleb128 0x11
 1546 0162 01       		.uleb128 0x1
 1547 0163 12       		.uleb128 0x12
 1548 0164 06       		.uleb128 0x6
 1549 0165 00       		.byte	0
 1550 0166 00       		.byte	0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 44


 1551 0167 1C       		.uleb128 0x1c
 1552 0168 34       		.uleb128 0x34
 1553 0169 00       		.byte	0
 1554 016a 31       		.uleb128 0x31
 1555 016b 13       		.uleb128 0x13
 1556 016c 02       		.uleb128 0x2
 1557 016d 18       		.uleb128 0x18
 1558 016e 00       		.byte	0
 1559 016f 00       		.byte	0
 1560 0170 1D       		.uleb128 0x1d
 1561 0171 2E       		.uleb128 0x2e
 1562 0172 00       		.byte	0
 1563 0173 3F       		.uleb128 0x3f
 1564 0174 19       		.uleb128 0x19
 1565 0175 03       		.uleb128 0x3
 1566 0176 0E       		.uleb128 0xe
 1567 0177 3A       		.uleb128 0x3a
 1568 0178 0B       		.uleb128 0xb
 1569 0179 3B       		.uleb128 0x3b
 1570 017a 0B       		.uleb128 0xb
 1571 017b 27       		.uleb128 0x27
 1572 017c 19       		.uleb128 0x19
 1573 017d 11       		.uleb128 0x11
 1574 017e 01       		.uleb128 0x1
 1575 017f 12       		.uleb128 0x12
 1576 0180 06       		.uleb128 0x6
 1577 0181 40       		.uleb128 0x40
 1578 0182 18       		.uleb128 0x18
 1579 0183 9742     		.uleb128 0x2117
 1580 0185 19       		.uleb128 0x19
 1581 0186 00       		.byte	0
 1582 0187 00       		.byte	0
 1583 0188 1E       		.uleb128 0x1e
 1584 0189 2E       		.uleb128 0x2e
 1585 018a 00       		.byte	0
 1586 018b 03       		.uleb128 0x3
 1587 018c 0E       		.uleb128 0xe
 1588 018d 3A       		.uleb128 0x3a
 1589 018e 0B       		.uleb128 0xb
 1590 018f 3B       		.uleb128 0x3b
 1591 0190 05       		.uleb128 0x5
 1592 0191 27       		.uleb128 0x27
 1593 0192 19       		.uleb128 0x19
 1594 0193 11       		.uleb128 0x11
 1595 0194 01       		.uleb128 0x1
 1596 0195 12       		.uleb128 0x12
 1597 0196 06       		.uleb128 0x6
 1598 0197 40       		.uleb128 0x40
 1599 0198 18       		.uleb128 0x18
 1600 0199 9742     		.uleb128 0x2117
 1601 019b 19       		.uleb128 0x19
 1602 019c 00       		.byte	0
 1603 019d 00       		.byte	0
 1604 019e 1F       		.uleb128 0x1f
 1605 019f 2E       		.uleb128 0x2e
 1606 01a0 00       		.byte	0
 1607 01a1 3F       		.uleb128 0x3f
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 45


 1608 01a2 19       		.uleb128 0x19
 1609 01a3 03       		.uleb128 0x3
 1610 01a4 0E       		.uleb128 0xe
 1611 01a5 3A       		.uleb128 0x3a
 1612 01a6 0B       		.uleb128 0xb
 1613 01a7 3B       		.uleb128 0x3b
 1614 01a8 05       		.uleb128 0x5
 1615 01a9 27       		.uleb128 0x27
 1616 01aa 19       		.uleb128 0x19
 1617 01ab 49       		.uleb128 0x49
 1618 01ac 13       		.uleb128 0x13
 1619 01ad 11       		.uleb128 0x11
 1620 01ae 01       		.uleb128 0x1
 1621 01af 12       		.uleb128 0x12
 1622 01b0 06       		.uleb128 0x6
 1623 01b1 40       		.uleb128 0x40
 1624 01b2 18       		.uleb128 0x18
 1625 01b3 9642     		.uleb128 0x2116
 1626 01b5 19       		.uleb128 0x19
 1627 01b6 00       		.byte	0
 1628 01b7 00       		.byte	0
 1629 01b8 20       		.uleb128 0x20
 1630 01b9 2E       		.uleb128 0x2e
 1631 01ba 00       		.byte	0
 1632 01bb 3F       		.uleb128 0x3f
 1633 01bc 19       		.uleb128 0x19
 1634 01bd 03       		.uleb128 0x3
 1635 01be 0E       		.uleb128 0xe
 1636 01bf 3A       		.uleb128 0x3a
 1637 01c0 0B       		.uleb128 0xb
 1638 01c1 3B       		.uleb128 0x3b
 1639 01c2 05       		.uleb128 0x5
 1640 01c3 27       		.uleb128 0x27
 1641 01c4 19       		.uleb128 0x19
 1642 01c5 11       		.uleb128 0x11
 1643 01c6 01       		.uleb128 0x1
 1644 01c7 12       		.uleb128 0x12
 1645 01c8 06       		.uleb128 0x6
 1646 01c9 40       		.uleb128 0x40
 1647 01ca 18       		.uleb128 0x18
 1648 01cb 9742     		.uleb128 0x2117
 1649 01cd 19       		.uleb128 0x19
 1650 01ce 00       		.byte	0
 1651 01cf 00       		.byte	0
 1652 01d0 21       		.uleb128 0x21
 1653 01d1 2E       		.uleb128 0x2e
 1654 01d2 01       		.byte	0x1
 1655 01d3 3F       		.uleb128 0x3f
 1656 01d4 19       		.uleb128 0x19
 1657 01d5 03       		.uleb128 0x3
 1658 01d6 0E       		.uleb128 0xe
 1659 01d7 3A       		.uleb128 0x3a
 1660 01d8 0B       		.uleb128 0xb
 1661 01d9 3B       		.uleb128 0x3b
 1662 01da 05       		.uleb128 0x5
 1663 01db 27       		.uleb128 0x27
 1664 01dc 19       		.uleb128 0x19
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 46


 1665 01dd 11       		.uleb128 0x11
 1666 01de 01       		.uleb128 0x1
 1667 01df 12       		.uleb128 0x12
 1668 01e0 06       		.uleb128 0x6
 1669 01e1 40       		.uleb128 0x40
 1670 01e2 18       		.uleb128 0x18
 1671 01e3 9742     		.uleb128 0x2117
 1672 01e5 19       		.uleb128 0x19
 1673 01e6 01       		.uleb128 0x1
 1674 01e7 13       		.uleb128 0x13
 1675 01e8 00       		.byte	0
 1676 01e9 00       		.byte	0
 1677 01ea 22       		.uleb128 0x22
 1678 01eb 1D       		.uleb128 0x1d
 1679 01ec 01       		.byte	0x1
 1680 01ed 31       		.uleb128 0x31
 1681 01ee 13       		.uleb128 0x13
 1682 01ef 11       		.uleb128 0x11
 1683 01f0 01       		.uleb128 0x1
 1684 01f1 12       		.uleb128 0x12
 1685 01f2 06       		.uleb128 0x6
 1686 01f3 58       		.uleb128 0x58
 1687 01f4 0B       		.uleb128 0xb
 1688 01f5 59       		.uleb128 0x59
 1689 01f6 05       		.uleb128 0x5
 1690 01f7 00       		.byte	0
 1691 01f8 00       		.byte	0
 1692 01f9 23       		.uleb128 0x23
 1693 01fa 05       		.uleb128 0x5
 1694 01fb 00       		.byte	0
 1695 01fc 31       		.uleb128 0x31
 1696 01fd 13       		.uleb128 0x13
 1697 01fe 02       		.uleb128 0x2
 1698 01ff 18       		.uleb128 0x18
 1699 0200 00       		.byte	0
 1700 0201 00       		.byte	0
 1701 0202 24       		.uleb128 0x24
 1702 0203 2E       		.uleb128 0x2e
 1703 0204 01       		.byte	0x1
 1704 0205 3F       		.uleb128 0x3f
 1705 0206 19       		.uleb128 0x19
 1706 0207 03       		.uleb128 0x3
 1707 0208 0E       		.uleb128 0xe
 1708 0209 3A       		.uleb128 0x3a
 1709 020a 0B       		.uleb128 0xb
 1710 020b 3B       		.uleb128 0x3b
 1711 020c 05       		.uleb128 0x5
 1712 020d 27       		.uleb128 0x27
 1713 020e 19       		.uleb128 0x19
 1714 020f 11       		.uleb128 0x11
 1715 0210 01       		.uleb128 0x1
 1716 0211 12       		.uleb128 0x12
 1717 0212 06       		.uleb128 0x6
 1718 0213 40       		.uleb128 0x40
 1719 0214 18       		.uleb128 0x18
 1720 0215 9642     		.uleb128 0x2116
 1721 0217 19       		.uleb128 0x19
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 47


 1722 0218 01       		.uleb128 0x1
 1723 0219 13       		.uleb128 0x13
 1724 021a 00       		.byte	0
 1725 021b 00       		.byte	0
 1726 021c 25       		.uleb128 0x25
 1727 021d 1D       		.uleb128 0x1d
 1728 021e 01       		.byte	0x1
 1729 021f 31       		.uleb128 0x31
 1730 0220 13       		.uleb128 0x13
 1731 0221 11       		.uleb128 0x11
 1732 0222 01       		.uleb128 0x1
 1733 0223 12       		.uleb128 0x12
 1734 0224 06       		.uleb128 0x6
 1735 0225 58       		.uleb128 0x58
 1736 0226 0B       		.uleb128 0xb
 1737 0227 59       		.uleb128 0x59
 1738 0228 05       		.uleb128 0x5
 1739 0229 01       		.uleb128 0x1
 1740 022a 13       		.uleb128 0x13
 1741 022b 00       		.byte	0
 1742 022c 00       		.byte	0
 1743 022d 26       		.uleb128 0x26
 1744 022e 34       		.uleb128 0x34
 1745 022f 00       		.byte	0
 1746 0230 03       		.uleb128 0x3
 1747 0231 0E       		.uleb128 0xe
 1748 0232 3A       		.uleb128 0x3a
 1749 0233 0B       		.uleb128 0xb
 1750 0234 3B       		.uleb128 0x3b
 1751 0235 0B       		.uleb128 0xb
 1752 0236 49       		.uleb128 0x49
 1753 0237 13       		.uleb128 0x13
 1754 0238 02       		.uleb128 0x2
 1755 0239 18       		.uleb128 0x18
 1756 023a 00       		.byte	0
 1757 023b 00       		.byte	0
 1758 023c 27       		.uleb128 0x27
 1759 023d 34       		.uleb128 0x34
 1760 023e 00       		.byte	0
 1761 023f 03       		.uleb128 0x3
 1762 0240 0E       		.uleb128 0xe
 1763 0241 3A       		.uleb128 0x3a
 1764 0242 0B       		.uleb128 0xb
 1765 0243 3B       		.uleb128 0x3b
 1766 0244 05       		.uleb128 0x5
 1767 0245 49       		.uleb128 0x49
 1768 0246 13       		.uleb128 0x13
 1769 0247 3F       		.uleb128 0x3f
 1770 0248 19       		.uleb128 0x19
 1771 0249 3C       		.uleb128 0x3c
 1772 024a 19       		.uleb128 0x19
 1773 024b 00       		.byte	0
 1774 024c 00       		.byte	0
 1775 024d 28       		.uleb128 0x28
 1776 024e 35       		.uleb128 0x35
 1777 024f 00       		.byte	0
 1778 0250 49       		.uleb128 0x49
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 48


 1779 0251 13       		.uleb128 0x13
 1780 0252 00       		.byte	0
 1781 0253 00       		.byte	0
 1782 0254 29       		.uleb128 0x29
 1783 0255 34       		.uleb128 0x34
 1784 0256 00       		.byte	0
 1785 0257 03       		.uleb128 0x3
 1786 0258 0E       		.uleb128 0xe
 1787 0259 3A       		.uleb128 0x3a
 1788 025a 0B       		.uleb128 0xb
 1789 025b 3B       		.uleb128 0x3b
 1790 025c 0B       		.uleb128 0xb
 1791 025d 49       		.uleb128 0x49
 1792 025e 13       		.uleb128 0x13
 1793 025f 3F       		.uleb128 0x3f
 1794 0260 19       		.uleb128 0x19
 1795 0261 02       		.uleb128 0x2
 1796 0262 18       		.uleb128 0x18
 1797 0263 00       		.byte	0
 1798 0264 00       		.byte	0
 1799 0265 00       		.byte	0
 1800              		.section	.debug_aranges,"",%progbits
 1801 0000 6C000000 		.4byte	0x6c
 1802 0004 0200     		.2byte	0x2
 1803 0006 00000000 		.4byte	.Ldebug_info0
 1804 000a 04       		.byte	0x4
 1805 000b 00       		.byte	0
 1806 000c 0000     		.2byte	0
 1807 000e 0000     		.2byte	0
 1808 0010 00000000 		.4byte	.LFB68
 1809 0014 58000000 		.4byte	.LFE68-.LFB68
 1810 0018 00000000 		.4byte	.LFB69
 1811 001c 1A000000 		.4byte	.LFE69-.LFB69
 1812 0020 00000000 		.4byte	.LFB70
 1813 0024 26000000 		.4byte	.LFE70-.LFB70
 1814 0028 00000000 		.4byte	.LFB71
 1815 002c 1C000000 		.4byte	.LFE71-.LFB71
 1816 0030 00000000 		.4byte	.LFB72
 1817 0034 3C000000 		.4byte	.LFE72-.LFB72
 1818 0038 00000000 		.4byte	.LFB73
 1819 003c 0C000000 		.4byte	.LFE73-.LFB73
 1820 0040 00000000 		.4byte	.LFB74
 1821 0044 30000000 		.4byte	.LFE74-.LFB74
 1822 0048 00000000 		.4byte	.LFB75
 1823 004c 30000000 		.4byte	.LFE75-.LFB75
 1824 0050 00000000 		.4byte	.LFB76
 1825 0054 46000000 		.4byte	.LFE76-.LFB76
 1826 0058 00000000 		.4byte	.LFB77
 1827 005c 40000000 		.4byte	.LFE77-.LFB77
 1828 0060 00000000 		.4byte	.LFB78
 1829 0064 24000000 		.4byte	.LFE78-.LFB78
 1830 0068 00000000 		.4byte	0
 1831 006c 00000000 		.4byte	0
 1832              		.section	.debug_ranges,"",%progbits
 1833              	.Ldebug_ranges0:
 1834 0000 00000000 		.4byte	.LFB68
 1835 0004 58000000 		.4byte	.LFE68
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 49


 1836 0008 00000000 		.4byte	.LFB69
 1837 000c 1A000000 		.4byte	.LFE69
 1838 0010 00000000 		.4byte	.LFB70
 1839 0014 26000000 		.4byte	.LFE70
 1840 0018 00000000 		.4byte	.LFB71
 1841 001c 1C000000 		.4byte	.LFE71
 1842 0020 00000000 		.4byte	.LFB72
 1843 0024 3C000000 		.4byte	.LFE72
 1844 0028 00000000 		.4byte	.LFB73
 1845 002c 0C000000 		.4byte	.LFE73
 1846 0030 00000000 		.4byte	.LFB74
 1847 0034 30000000 		.4byte	.LFE74
 1848 0038 00000000 		.4byte	.LFB75
 1849 003c 30000000 		.4byte	.LFE75
 1850 0040 00000000 		.4byte	.LFB76
 1851 0044 46000000 		.4byte	.LFE76
 1852 0048 00000000 		.4byte	.LFB77
 1853 004c 40000000 		.4byte	.LFE77
 1854 0050 00000000 		.4byte	.LFB78
 1855 0054 24000000 		.4byte	.LFE78
 1856 0058 00000000 		.4byte	0
 1857 005c 00000000 		.4byte	0
 1858              		.section	.debug_line,"",%progbits
 1859              	.Ldebug_line0:
 1860 0000 E5020000 		.section	.debug_str,"MS",%progbits,1
 1860      0200C501 
 1860      00000201 
 1860      FB0E0D00 
 1860      01010101 
 1861              	.LASF29:
 1862 0000 696E666F 		.ascii	"informationID\000"
 1862      726D6174 
 1862      696F6E49 
 1862      4400
 1863              	.LASF42:
 1864 000e 77726974 		.ascii	"write\000"
 1864      6500
 1865              	.LASF43:
 1866 0014 5461736B 		.ascii	"TaskFunction_t\000"
 1866      46756E63 
 1866      74696F6E 
 1866      5F7400
 1867              	.LASF33:
 1868 0023 6F626A65 		.ascii	"objectNumber\000"
 1868      63744E75 
 1868      6D626572 
 1868      00
 1869              	.LASF5:
 1870 0030 73686F72 		.ascii	"short int\000"
 1870      7420696E 
 1870      7400
 1871              	.LASF73:
 1872 003a 78506F72 		.ascii	"xPortStartScheduler\000"
 1872      74537461 
 1872      72745363 
 1872      68656475 
 1872      6C657200 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 50


 1873              	.LASF19:
 1874 004e 73697A65 		.ascii	"sizetype\000"
 1874      74797065 
 1874      00
 1875              	.LASF58:
 1876 0057 78506F72 		.ascii	"xPortSysTickHandler\000"
 1876      74537973 
 1876      5469636B 
 1876      48616E64 
 1876      6C657200 
 1877              	.LASF21:
 1878 006b 4D555445 		.ascii	"MUTEX\000"
 1878      5800
 1879              	.LASF30:
 1880 0071 6F626A65 		.ascii	"objectType\000"
 1880      63745479 
 1880      706500
 1881              	.LASF64:
 1882 007c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1882      43313120 
 1882      352E342E 
 1882      31203230 
 1882      31363036 
 1883 00af 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1883      20726576 
 1883      6973696F 
 1883      6E203233 
 1883      37373135 
 1884 00e2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1884      66756E63 
 1884      74696F6E 
 1884      2D736563 
 1884      74696F6E 
 1885              	.LASF72:
 1886 010a 70727650 		.ascii	"prvPortStartFirstTask\000"
 1886      6F727453 
 1886      74617274 
 1886      46697273 
 1886      74546173 
 1887              	.LASF10:
 1888 0120 5F5F7569 		.ascii	"__uint32_t\000"
 1888      6E743332 
 1888      5F7400
 1889              	.LASF37:
 1890 012b 6F626A65 		.ascii	"objectHeader\000"
 1890      63744865 
 1890      61646572 
 1890      00
 1891              	.LASF50:
 1892 0138 7078546F 		.ascii	"pxTopOfStack\000"
 1892      704F6653 
 1892      7461636B 
 1892      00
 1893              	.LASF71:
 1894 0145 70727654 		.ascii	"prvTaskExitError\000"
 1894      61736B45 
 1894      78697445 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 51


 1894      72726F72 
 1894      00
 1895              	.LASF13:
 1896 0156 75696E74 		.ascii	"uint8_t\000"
 1896      385F7400 
 1897              	.LASF38:
 1898 015e 6F626A65 		.ascii	"objectArray\000"
 1898      63744172 
 1898      72617900 
 1899              	.LASF34:
 1900 016a 6C656E4F 		.ascii	"lenObjectName\000"
 1900      626A6563 
 1900      744E616D 
 1900      6500
 1901              	.LASF53:
 1902 0178 76506F72 		.ascii	"vPortSVCHandler\000"
 1902      74535643 
 1902      48616E64 
 1902      6C657200 
 1903              	.LASF31:
 1904 0188 6C656E67 		.ascii	"length\000"
 1904      746800
 1905              	.LASF16:
 1906 018f 666C6F61 		.ascii	"float\000"
 1906      7400
 1907              	.LASF54:
 1908 0195 76506F72 		.ascii	"vPortEndScheduler\000"
 1908      74456E64 
 1908      53636865 
 1908      64756C65 
 1908      7200
 1909              	.LASF36:
 1910 01a7 4F626A65 		.ascii	"Object\000"
 1910      637400
 1911              	.LASF41:
 1912 01ae 72656164 		.ascii	"read\000"
 1912      00
 1913              	.LASF1:
 1914 01b3 6C6F6E67 		.ascii	"long long int\000"
 1914      206C6F6E 
 1914      6720696E 
 1914      7400
 1915              	.LASF47:
 1916 01c1 5469636B 		.ascii	"TickType_t\000"
 1916      54797065 
 1916      5F7400
 1917              	.LASF9:
 1918 01cc 6C6F6E67 		.ascii	"long int\000"
 1918      20696E74 
 1918      00
 1919              	.LASF61:
 1920 01d5 736E6966 		.ascii	"sniffIDFilter\000"
 1920      66494446 
 1920      696C7465 
 1920      7200
 1921              	.LASF24:
 1922 01e3 52454355 		.ascii	"RECURSIVE_MUTEX\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 52


 1922      52534956 
 1922      455F4D55 
 1922      54455800 
 1923              	.LASF7:
 1924 01f3 5F5F7569 		.ascii	"__uint8_t\000"
 1924      6E74385F 
 1924      7400
 1925              	.LASF74:
 1926 01fd 75784372 		.ascii	"uxCriticalNesting\000"
 1926      69746963 
 1926      616C4E65 
 1926      7374696E 
 1926      6700
 1927              	.LASF20:
 1928 020f 51554555 		.ascii	"QUEUE\000"
 1928      4500
 1929              	.LASF22:
 1930 0215 434F554E 		.ascii	"COUNTING_SEMAPHORE\000"
 1930      54494E47 
 1930      5F53454D 
 1930      4150484F 
 1930      524500
 1931              	.LASF35:
 1932 0228 6F626A65 		.ascii	"objectName\000"
 1932      63744E61 
 1932      6D6500
 1933              	.LASF2:
 1934 0233 6C6F6E67 		.ascii	"long double\000"
 1934      20646F75 
 1934      626C6500 
 1935              	.LASF4:
 1936 023f 756E7369 		.ascii	"unsigned char\000"
 1936      676E6564 
 1936      20636861 
 1936      7200
 1937              	.LASF3:
 1938 024d 7369676E 		.ascii	"signed char\000"
 1938      65642063 
 1938      68617200 
 1939              	.LASF12:
 1940 0259 6C6F6E67 		.ascii	"long long unsigned int\000"
 1940      206C6F6E 
 1940      6720756E 
 1940      7369676E 
 1940      65642069 
 1941              	.LASF15:
 1942 0270 75696E74 		.ascii	"uint32_t\000"
 1942      33325F74 
 1942      00
 1943              	.LASF0:
 1944 0279 756E7369 		.ascii	"unsigned int\000"
 1944      676E6564 
 1944      20696E74 
 1944      00
 1945              	.LASF32:
 1946 0286 4F626A65 		.ascii	"ObjectListHeader\000"
 1946      63744C69 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 53


 1946      73744865 
 1946      61646572 
 1946      00
 1947              	.LASF45:
 1948 0297 42617365 		.ascii	"BaseType_t\000"
 1948      54797065 
 1948      5F7400
 1949              	.LASF52:
 1950 02a2 70765061 		.ascii	"pvParameters\000"
 1950      72616D65 
 1950      74657273 
 1950      00
 1951              	.LASF59:
 1952 02af 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1952      74536574 
 1952      75705469 
 1952      6D657249 
 1952      6E746572 
 1953              	.LASF6:
 1954 02c8 73686F72 		.ascii	"short unsigned int\000"
 1954      7420756E 
 1954      7369676E 
 1954      65642069 
 1954      6E7400
 1955              	.LASF55:
 1956 02db 76506F72 		.ascii	"vPortEnterCritical\000"
 1956      74456E74 
 1956      65724372 
 1956      69746963 
 1956      616C00
 1957              	.LASF49:
 1958 02ee 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1958      74536574 
 1958      42415345 
 1958      50524900 
 1959              	.LASF18:
 1960 02fe 63686172 		.ascii	"char\000"
 1960      00
 1961              	.LASF28:
 1962 0303 7061636B 		.ascii	"packetID\000"
 1962      65744944 
 1962      00
 1963              	.LASF14:
 1964 030c 696E7433 		.ascii	"int32_t\000"
 1964      325F7400 
 1965              	.LASF57:
 1966 0314 78506F72 		.ascii	"xPortPendSVHandler\000"
 1966      7450656E 
 1966      64535648 
 1966      616E646C 
 1966      657200
 1967              	.LASF46:
 1968 0327 55426173 		.ascii	"UBaseType_t\000"
 1968      65547970 
 1968      655F7400 
 1969              	.LASF56:
 1970 0333 76506F72 		.ascii	"vPortExitCritical\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 54


 1970      74457869 
 1970      74437269 
 1970      74696361 
 1970      6C00
 1971              	.LASF65:
 1972 0345 2E2E5C53 		.ascii	"..\\Source\\portable\\GCC\\ARM_CM3\\port.c\000"
 1972      6F757263 
 1972      655C706F 
 1972      72746162 
 1972      6C655C47 
 1973              	.LASF40:
 1974 036b 64617461 		.ascii	"data\000"
 1974      00
 1975              	.LASF27:
 1976 0370 4F626A65 		.ascii	"ObjectType\000"
 1976      63745479 
 1976      706500
 1977              	.LASF62:
 1978 037b 62756666 		.ascii	"buffer\000"
 1978      657200
 1979              	.LASF26:
 1980 0382 4E554D42 		.ascii	"NUMBER_OF_OBJECTTYPES\000"
 1980      45525F4F 
 1980      465F4F42 
 1980      4A454354 
 1980      54595045 
 1981              	.LASF11:
 1982 0398 6C6F6E67 		.ascii	"long unsigned int\000"
 1982      20756E73 
 1982      69676E65 
 1982      6420696E 
 1982      7400
 1983              	.LASF17:
 1984 03aa 646F7562 		.ascii	"double\000"
 1984      6C6500
 1985              	.LASF23:
 1986 03b1 42494E41 		.ascii	"BINARY_SEMAPHORE\000"
 1986      52595F53 
 1986      454D4150 
 1986      484F5245 
 1986      00
 1987              	.LASF63:
 1988 03c2 6F626A65 		.ascii	"objectList\000"
 1988      63744C69 
 1988      737400
 1989              	.LASF69:
 1990 03cd 756C4E65 		.ascii	"ulNewMaskValue\000"
 1990      774D6173 
 1990      6B56616C 
 1990      756500
 1991              	.LASF44:
 1992 03dc 53746163 		.ascii	"StackType_t\000"
 1992      6B547970 
 1992      655F7400 
 1993              	.LASF25:
 1994 03e8 5441534B 		.ascii	"TASK\000"
 1994      00
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\cc3zEZMe.s 			page 55


 1995              	.LASF8:
 1996 03ed 5F5F696E 		.ascii	"__int32_t\000"
 1996      7433325F 
 1996      7400
 1997              	.LASF51:
 1998 03f7 7078436F 		.ascii	"pxCode\000"
 1998      646500
 1999              	.LASF70:
 2000 03fe 7078506F 		.ascii	"pxPortInitialiseStack\000"
 2000      7274496E 
 2000      69746961 
 2000      6C697365 
 2000      53746163 
 2001              	.LASF48:
 2002 0414 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 2002      74526169 
 2002      73654241 
 2002      53455052 
 2002      4900
 2003              	.LASF39:
 2004 0426 4F626A65 		.ascii	"ObjectList\000"
 2004      63744C69 
 2004      737400
 2005              	.LASF60:
 2006 0431 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2006      52784275 
 2006      66666572 
 2006      00
 2007              	.LASF67:
 2008 043e 42756666 		.ascii	"Buffer\000"
 2008      657200
 2009              	.LASF66:
 2010 0445 463A5C50 		.ascii	"F:\\Programme_Scripts\\PSOC Creator\\FreeRTOS\\Free"
 2010      726F6772 
 2010      616D6D65 
 2010      5F536372 
 2010      69707473 
 2011 0474 52544F53 		.ascii	"RTOS_CY8CKIT_059-master\\FreeRTOS_Demo.cydsn\000"
 2011      5F435938 
 2011      434B4954 
 2011      5F303539 
 2011      2D6D6173 
 2012              	.LASF68:
 2013 04a0 756C4E65 		.ascii	"ulNewBASEPRI\000"
 2013      77424153 
 2013      45505249 
 2013      00
 2014              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran

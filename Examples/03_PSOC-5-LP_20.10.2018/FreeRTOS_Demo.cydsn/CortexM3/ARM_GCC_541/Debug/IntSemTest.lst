ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"IntSemTest.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	sniffIDFilter,13,4
  20              		.comm	buffer,4098,4
  21              		.comm	objectList,1704,4
  22              		.bss
  23              		.align	2
  24              	xErrorDetected:
  25 0000 00000000 		.space	4
  26              		.align	2
  27              	ulMasterLoops:
  28 0004 00000000 		.space	4
  29              		.align	2
  30              	ulCountingSemaphoreLoops:
  31 0008 00000000 		.space	4
  32              		.align	2
  33              	xSlaveHandle:
  34 000c 00000000 		.space	4
  35              		.align	2
  36              	xISRMutex:
  37 0010 00000000 		.space	4
  38              		.align	2
  39              	xISRCountingSemaphore:
  40 0014 00000000 		.space	4
  41              		.align	2
  42              	xMasterSlaveMutex:
  43 0018 00000000 		.space	4
  44              		.align	2
  45              	xOkToGiveMutex:
  46 001c 00000000 		.space	4
  47              		.align	2
  48              	xOkToGiveCountingSemaphore:
  49 0020 00000000 		.space	4
  50              		.global	xInterruptGivePeriod
  51              		.section	.rodata
  52              		.align	2
  53              		.type	xInterruptGivePeriod, %object
  54              		.size	xInterruptGivePeriod, 4
  55              	xInterruptGivePeriod:
  56 0000 64000000 		.word	100
  57              		.align	2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 2


  58              	.LC0:
  59 0004 496E744D 		.ascii	"IntMuS\000"
  59      755300
  60 000b 00       		.align	2
  61              	.LC1:
  62 000c 496E744D 		.ascii	"IntMuM\000"
  62      754D00
  63 0013 00       		.align	2
  64              	.LC2:
  65 0014 496E7443 		.ascii	"IntCnt\000"
  65      6E7400
  66              		.section	.text.vStartInterruptSemaphoreTasks,"ax",%progbits
  67              		.align	2
  68              		.global	vStartInterruptSemaphoreTasks
  69              		.thumb
  70              		.thumb_func
  71              		.type	vStartInterruptSemaphoreTasks, %function
  72              	vStartInterruptSemaphoreTasks:
  73              	.LFB68:
  74              		.file 1 "..\\Common\\Minimal\\IntSemTest.c"
   1:..\Common\Minimal/IntSemTest.c **** /*
   2:..\Common\Minimal/IntSemTest.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/IntSemTest.c ****     All rights reserved
   4:..\Common\Minimal/IntSemTest.c **** 
   5:..\Common\Minimal/IntSemTest.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/IntSemTest.c **** 
   7:..\Common\Minimal/IntSemTest.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/IntSemTest.c **** 
   9:..\Common\Minimal/IntSemTest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/IntSemTest.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/IntSemTest.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/IntSemTest.c **** 
  13:..\Common\Minimal/IntSemTest.c ****     ***************************************************************************
  14:..\Common\Minimal/IntSemTest.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/IntSemTest.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/IntSemTest.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/IntSemTest.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/IntSemTest.c ****     ***************************************************************************
  19:..\Common\Minimal/IntSemTest.c **** 
  20:..\Common\Minimal/IntSemTest.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/IntSemTest.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/IntSemTest.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/IntSemTest.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/IntSemTest.c **** 
  25:..\Common\Minimal/IntSemTest.c ****     ***************************************************************************
  26:..\Common\Minimal/IntSemTest.c ****      *                                                                       *
  27:..\Common\Minimal/IntSemTest.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/IntSemTest.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/IntSemTest.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/IntSemTest.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/IntSemTest.c ****      *                                                                       *
  32:..\Common\Minimal/IntSemTest.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/IntSemTest.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/IntSemTest.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/IntSemTest.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/IntSemTest.c ****      *                                                                       *
  37:..\Common\Minimal/IntSemTest.c ****     ***************************************************************************
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 3


  38:..\Common\Minimal/IntSemTest.c **** 
  39:..\Common\Minimal/IntSemTest.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/IntSemTest.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/IntSemTest.c ****     defined configASSERT()?
  42:..\Common\Minimal/IntSemTest.c **** 
  43:..\Common\Minimal/IntSemTest.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/IntSemTest.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/IntSemTest.c ****     participating in the support forum.
  46:..\Common\Minimal/IntSemTest.c **** 
  47:..\Common\Minimal/IntSemTest.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/IntSemTest.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/IntSemTest.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/IntSemTest.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/IntSemTest.c **** 
  52:..\Common\Minimal/IntSemTest.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/IntSemTest.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/IntSemTest.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Common\Minimal/IntSemTest.c **** 
  56:..\Common\Minimal/IntSemTest.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/IntSemTest.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/IntSemTest.c **** 
  59:..\Common\Minimal/IntSemTest.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/IntSemTest.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/IntSemTest.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/IntSemTest.c **** 
  63:..\Common\Minimal/IntSemTest.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/IntSemTest.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/IntSemTest.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/IntSemTest.c **** 
  67:..\Common\Minimal/IntSemTest.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/IntSemTest.c **** */
  69:..\Common\Minimal/IntSemTest.c **** 
  70:..\Common\Minimal/IntSemTest.c **** 
  71:..\Common\Minimal/IntSemTest.c **** /*
  72:..\Common\Minimal/IntSemTest.c ****  * Demonstrates and tests mutexes being used from an interrupt.
  73:..\Common\Minimal/IntSemTest.c ****  */
  74:..\Common\Minimal/IntSemTest.c **** 
  75:..\Common\Minimal/IntSemTest.c **** 
  76:..\Common\Minimal/IntSemTest.c **** #include <stdlib.h>
  77:..\Common\Minimal/IntSemTest.c **** 
  78:..\Common\Minimal/IntSemTest.c **** /* Scheduler include files. */
  79:..\Common\Minimal/IntSemTest.c **** #include "FreeRTOS.h"
  80:..\Common\Minimal/IntSemTest.c **** #include "task.h"
  81:..\Common\Minimal/IntSemTest.c **** #include "semphr.h"
  82:..\Common\Minimal/IntSemTest.c **** 
  83:..\Common\Minimal/IntSemTest.c **** /* Demo program include files. */
  84:..\Common\Minimal/IntSemTest.c **** #include "IntSemTest.h"
  85:..\Common\Minimal/IntSemTest.c **** 
  86:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
  87:..\Common\Minimal/IntSemTest.c **** 
  88:..\Common\Minimal/IntSemTest.c **** /* The priorities of the test tasks. */
  89:..\Common\Minimal/IntSemTest.c **** #define intsemMASTER_PRIORITY		( tskIDLE_PRIORITY )
  90:..\Common\Minimal/IntSemTest.c **** #define intsemSLAVE_PRIORITY		( tskIDLE_PRIORITY + 1 )
  91:..\Common\Minimal/IntSemTest.c **** 
  92:..\Common\Minimal/IntSemTest.c **** /* The rate at which the tick hook will give the mutex. */
  93:..\Common\Minimal/IntSemTest.c **** #define intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS ( 100 )
  94:..\Common\Minimal/IntSemTest.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 4


  95:..\Common\Minimal/IntSemTest.c **** /* A block time of 0 means 'don't block'. */
  96:..\Common\Minimal/IntSemTest.c **** #define intsemNO_BLOCK				0
  97:..\Common\Minimal/IntSemTest.c **** 
  98:..\Common\Minimal/IntSemTest.c **** /* The maximum count value for the counting semaphore given from an
  99:..\Common\Minimal/IntSemTest.c **** interrupt. */
 100:..\Common\Minimal/IntSemTest.c **** #define intsemMAX_COUNT				3
 101:..\Common\Minimal/IntSemTest.c **** 
 102:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 103:..\Common\Minimal/IntSemTest.c **** 
 104:..\Common\Minimal/IntSemTest.c **** /*
 105:..\Common\Minimal/IntSemTest.c ****  * The master is a task that receives a mutex that is given from an interrupt -
 106:..\Common\Minimal/IntSemTest.c ****  * although generally mutexes should not be used given in interrupts (and
 107:..\Common\Minimal/IntSemTest.c ****  * definitely never taken in an interrupt) there are some circumstances when it
 108:..\Common\Minimal/IntSemTest.c ****  * may be desirable.
 109:..\Common\Minimal/IntSemTest.c ****  *
 110:..\Common\Minimal/IntSemTest.c ****  * The slave task is just used by the master task to force priority inheritance
 111:..\Common\Minimal/IntSemTest.c ****  * on a mutex that is shared between the master and the slave - which is a
 112:..\Common\Minimal/IntSemTest.c ****  * separate mutex to that given by the interrupt.
 113:..\Common\Minimal/IntSemTest.c ****  */
 114:..\Common\Minimal/IntSemTest.c **** static void vInterruptMutexSlaveTask( void *pvParameters );
 115:..\Common\Minimal/IntSemTest.c **** static void vInterruptMutexMasterTask( void *pvParameters );
 116:..\Common\Minimal/IntSemTest.c **** 
 117:..\Common\Minimal/IntSemTest.c **** /*
 118:..\Common\Minimal/IntSemTest.c ****  * A test whereby the master takes the shared and interrupt mutexes in that
 119:..\Common\Minimal/IntSemTest.c ****  * order, then gives them back in the same order, ensuring the priority
 120:..\Common\Minimal/IntSemTest.c ****  * inheritance is behaving as expected at each step.
 121:..\Common\Minimal/IntSemTest.c ****  */
 122:..\Common\Minimal/IntSemTest.c **** static void prvTakeAndGiveInTheSameOrder( void );
 123:..\Common\Minimal/IntSemTest.c **** 
 124:..\Common\Minimal/IntSemTest.c **** /*
 125:..\Common\Minimal/IntSemTest.c ****  * A test whereby the master takes the shared and interrupt mutexes in that
 126:..\Common\Minimal/IntSemTest.c ****  * order, then gives them back in the opposite order to which they were taken,
 127:..\Common\Minimal/IntSemTest.c ****  * ensuring the priority inheritance is behaving as expected at each step.
 128:..\Common\Minimal/IntSemTest.c ****  */
 129:..\Common\Minimal/IntSemTest.c **** static void prvTakeAndGiveInTheOppositeOrder( void );
 130:..\Common\Minimal/IntSemTest.c **** 
 131:..\Common\Minimal/IntSemTest.c **** /*
 132:..\Common\Minimal/IntSemTest.c ****  * A simple task that interacts with an interrupt using a counting semaphore,
 133:..\Common\Minimal/IntSemTest.c ****  * primarily for code coverage purposes.
 134:..\Common\Minimal/IntSemTest.c ****  */
 135:..\Common\Minimal/IntSemTest.c **** static void vInterruptCountingSemaphoreTask( void *pvParameters );
 136:..\Common\Minimal/IntSemTest.c **** 
 137:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 138:..\Common\Minimal/IntSemTest.c **** 
 139:..\Common\Minimal/IntSemTest.c **** /* Flag that will be latched to pdTRUE should any unexpected behaviour be
 140:..\Common\Minimal/IntSemTest.c **** detected in any of the tasks. */
 141:..\Common\Minimal/IntSemTest.c **** static volatile BaseType_t xErrorDetected = pdFALSE;
 142:..\Common\Minimal/IntSemTest.c **** 
 143:..\Common\Minimal/IntSemTest.c **** /* Counters that are incremented on each cycle of a test.  This is used to
 144:..\Common\Minimal/IntSemTest.c **** detect a stalled task - a test that is no longer running. */
 145:..\Common\Minimal/IntSemTest.c **** static volatile uint32_t ulMasterLoops = 0, ulCountingSemaphoreLoops = 0;
 146:..\Common\Minimal/IntSemTest.c **** 
 147:..\Common\Minimal/IntSemTest.c **** /* Handles of the test tasks that must be accessed from other test tasks. */
 148:..\Common\Minimal/IntSemTest.c **** static TaskHandle_t xSlaveHandle;
 149:..\Common\Minimal/IntSemTest.c **** 
 150:..\Common\Minimal/IntSemTest.c **** /* A mutex which is given from an interrupt - although generally mutexes should
 151:..\Common\Minimal/IntSemTest.c **** not be used given in interrupts (and definitely never taken in an interrupt)
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 5


 152:..\Common\Minimal/IntSemTest.c **** there are some circumstances when it may be desirable. */
 153:..\Common\Minimal/IntSemTest.c **** static SemaphoreHandle_t xISRMutex = NULL;
 154:..\Common\Minimal/IntSemTest.c **** 
 155:..\Common\Minimal/IntSemTest.c **** /* A counting semaphore which is given from an interrupt. */
 156:..\Common\Minimal/IntSemTest.c **** static SemaphoreHandle_t xISRCountingSemaphore = NULL;
 157:..\Common\Minimal/IntSemTest.c **** 
 158:..\Common\Minimal/IntSemTest.c **** /* A mutex which is shared between the master and slave tasks - the master
 159:..\Common\Minimal/IntSemTest.c **** does both sharing of this mutex with the slave and receiving a mutex from the
 160:..\Common\Minimal/IntSemTest.c **** interrupt. */
 161:..\Common\Minimal/IntSemTest.c **** static SemaphoreHandle_t xMasterSlaveMutex = NULL;
 162:..\Common\Minimal/IntSemTest.c **** 
 163:..\Common\Minimal/IntSemTest.c **** /* Flag that allows the master task to control when the interrupt gives or does
 164:..\Common\Minimal/IntSemTest.c **** not give the mutex.  There is no mutual exclusion on this variable, but this is
 165:..\Common\Minimal/IntSemTest.c **** only test code and it should be fine in the 32=bit test environment. */
 166:..\Common\Minimal/IntSemTest.c **** static BaseType_t xOkToGiveMutex = pdFALSE, xOkToGiveCountingSemaphore = pdFALSE;
 167:..\Common\Minimal/IntSemTest.c **** 
 168:..\Common\Minimal/IntSemTest.c **** /* Used to coordinate timing between tasks and the interrupt. */
 169:..\Common\Minimal/IntSemTest.c **** const TickType_t xInterruptGivePeriod = pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS );
 170:..\Common\Minimal/IntSemTest.c **** 
 171:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 172:..\Common\Minimal/IntSemTest.c **** 
 173:..\Common\Minimal/IntSemTest.c **** void vStartInterruptSemaphoreTasks( void )
 174:..\Common\Minimal/IntSemTest.c **** {
  75              		.loc 1 174 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79 0000 80B5     		push	{r7, lr}
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              		.cfi_def_cfa_offset 16
  85 0004 02AF     		add	r7, sp, #8
  86              		.cfi_def_cfa 7, 8
 175:..\Common\Minimal/IntSemTest.c **** 	/* Create the semaphores that are given from an interrupt. */
 176:..\Common\Minimal/IntSemTest.c **** 	xISRMutex = xSemaphoreCreateMutex();
  87              		.loc 1 176 0
  88 0006 0120     		movs	r0, #1
  89 0008 FFF7FEFF 		bl	xQueueCreateMutex
  90 000c 0246     		mov	r2, r0
  91 000e 184B     		ldr	r3, .L2
  92 0010 1A60     		str	r2, [r3]
 177:..\Common\Minimal/IntSemTest.c **** 	configASSERT( xISRMutex );
 178:..\Common\Minimal/IntSemTest.c **** 	xISRCountingSemaphore = xSemaphoreCreateCounting( intsemMAX_COUNT, 0 );
  93              		.loc 1 178 0
  94 0012 0021     		movs	r1, #0
  95 0014 0320     		movs	r0, #3
  96 0016 FFF7FEFF 		bl	xQueueCreateCountingSemaphore
  97 001a 0246     		mov	r2, r0
  98 001c 154B     		ldr	r3, .L2+4
  99 001e 1A60     		str	r2, [r3]
 179:..\Common\Minimal/IntSemTest.c **** 	configASSERT( xISRCountingSemaphore );
 180:..\Common\Minimal/IntSemTest.c **** 
 181:..\Common\Minimal/IntSemTest.c **** 	/* Create the mutex that is shared between the master and slave tasks (the
 182:..\Common\Minimal/IntSemTest.c **** 	master receives a mutex from an interrupt and shares a mutex with the
 183:..\Common\Minimal/IntSemTest.c **** 	slave. */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 6


 184:..\Common\Minimal/IntSemTest.c **** 	xMasterSlaveMutex = xSemaphoreCreateMutex();
 100              		.loc 1 184 0
 101 0020 0120     		movs	r0, #1
 102 0022 FFF7FEFF 		bl	xQueueCreateMutex
 103 0026 0246     		mov	r2, r0
 104 0028 134B     		ldr	r3, .L2+8
 105 002a 1A60     		str	r2, [r3]
 185:..\Common\Minimal/IntSemTest.c **** 	configASSERT( xMasterSlaveMutex );
 186:..\Common\Minimal/IntSemTest.c **** 
 187:..\Common\Minimal/IntSemTest.c **** 	/* Create the tasks that share mutexes between then and with interrupts. */
 188:..\Common\Minimal/IntSemTest.c **** 	xTaskCreate( vInterruptMutexSlaveTask, "IntMuS", configMINIMAL_STACK_SIZE, NULL, intsemSLAVE_PRIOR
 106              		.loc 1 188 0
 107 002c 134B     		ldr	r3, .L2+12
 108 002e 0193     		str	r3, [sp, #4]
 109 0030 0123     		movs	r3, #1
 110 0032 0093     		str	r3, [sp]
 111 0034 0023     		movs	r3, #0
 112 0036 6422     		movs	r2, #100
 113 0038 1149     		ldr	r1, .L2+16
 114 003a 1248     		ldr	r0, .L2+20
 115 003c FFF7FEFF 		bl	xTaskCreate
 189:..\Common\Minimal/IntSemTest.c **** 	xTaskCreate( vInterruptMutexMasterTask, "IntMuM", configMINIMAL_STACK_SIZE, NULL, intsemMASTER_PRI
 116              		.loc 1 189 0
 117 0040 0023     		movs	r3, #0
 118 0042 0193     		str	r3, [sp, #4]
 119 0044 0023     		movs	r3, #0
 120 0046 0093     		str	r3, [sp]
 121 0048 0023     		movs	r3, #0
 122 004a 6422     		movs	r2, #100
 123 004c 0E49     		ldr	r1, .L2+24
 124 004e 0F48     		ldr	r0, .L2+28
 125 0050 FFF7FEFF 		bl	xTaskCreate
 190:..\Common\Minimal/IntSemTest.c **** 
 191:..\Common\Minimal/IntSemTest.c **** 	/* Create the task that blocks on the counting semaphore. */
 192:..\Common\Minimal/IntSemTest.c **** 	xTaskCreate( vInterruptCountingSemaphoreTask, "IntCnt", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PR
 126              		.loc 1 192 0
 127 0054 0023     		movs	r3, #0
 128 0056 0193     		str	r3, [sp, #4]
 129 0058 0023     		movs	r3, #0
 130 005a 0093     		str	r3, [sp]
 131 005c 0023     		movs	r3, #0
 132 005e 6422     		movs	r2, #100
 133 0060 0B49     		ldr	r1, .L2+32
 134 0062 0C48     		ldr	r0, .L2+36
 135 0064 FFF7FEFF 		bl	xTaskCreate
 193:..\Common\Minimal/IntSemTest.c **** }
 136              		.loc 1 193 0
 137 0068 00BF     		nop
 138 006a BD46     		mov	sp, r7
 139              		.cfi_def_cfa_register 13
 140              		@ sp needed
 141 006c 80BD     		pop	{r7, pc}
 142              	.L3:
 143 006e 00BF     		.align	2
 144              	.L2:
 145 0070 10000000 		.word	xISRMutex
 146 0074 14000000 		.word	xISRCountingSemaphore
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 7


 147 0078 18000000 		.word	xMasterSlaveMutex
 148 007c 0C000000 		.word	xSlaveHandle
 149 0080 04000000 		.word	.LC0
 150 0084 00000000 		.word	vInterruptMutexSlaveTask
 151 0088 0C000000 		.word	.LC1
 152 008c 00000000 		.word	vInterruptMutexMasterTask
 153 0090 14000000 		.word	.LC2
 154 0094 00000000 		.word	vInterruptCountingSemaphoreTask
 155              		.cfi_endproc
 156              	.LFE68:
 157              		.size	vStartInterruptSemaphoreTasks, .-vStartInterruptSemaphoreTasks
 158              		.section	.text.vInterruptMutexMasterTask,"ax",%progbits
 159              		.align	2
 160              		.thumb
 161              		.thumb_func
 162              		.type	vInterruptMutexMasterTask, %function
 163              	vInterruptMutexMasterTask:
 164              	.LFB69:
 194:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 195:..\Common\Minimal/IntSemTest.c **** 
 196:..\Common\Minimal/IntSemTest.c **** static void vInterruptMutexMasterTask( void *pvParameters )
 197:..\Common\Minimal/IntSemTest.c **** {
 165              		.loc 1 197 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 8
 168              		@ frame_needed = 1, uses_anonymous_args = 0
 169 0000 80B5     		push	{r7, lr}
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 7, -8
 172              		.cfi_offset 14, -4
 173 0002 82B0     		sub	sp, sp, #8
 174              		.cfi_def_cfa_offset 16
 175 0004 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 177 0006 7860     		str	r0, [r7, #4]
 178              	.L5:
 198:..\Common\Minimal/IntSemTest.c **** 	/* Just to avoid compiler warnings. */
 199:..\Common\Minimal/IntSemTest.c **** 	( void ) pvParameters;
 200:..\Common\Minimal/IntSemTest.c **** 
 201:..\Common\Minimal/IntSemTest.c **** 	for( ;; )
 202:..\Common\Minimal/IntSemTest.c **** 	{
 203:..\Common\Minimal/IntSemTest.c **** 		prvTakeAndGiveInTheSameOrder();
 179              		.loc 1 203 0 discriminator 1
 180 0008 FFF7FEFF 		bl	prvTakeAndGiveInTheSameOrder
 204:..\Common\Minimal/IntSemTest.c **** 
 205:..\Common\Minimal/IntSemTest.c **** 		/* Ensure not to starve out other tests. */
 206:..\Common\Minimal/IntSemTest.c **** 		ulMasterLoops++;
 181              		.loc 1 206 0 discriminator 1
 182 000c 094B     		ldr	r3, .L6
 183 000e 1B68     		ldr	r3, [r3]
 184 0010 0133     		adds	r3, r3, #1
 185 0012 084A     		ldr	r2, .L6
 186 0014 1360     		str	r3, [r2]
 207:..\Common\Minimal/IntSemTest.c **** 		vTaskDelay( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS );
 187              		.loc 1 207 0 discriminator 1
 188 0016 6420     		movs	r0, #100
 189 0018 FFF7FEFF 		bl	vTaskDelay
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 8


 208:..\Common\Minimal/IntSemTest.c **** 
 209:..\Common\Minimal/IntSemTest.c **** 		prvTakeAndGiveInTheOppositeOrder();
 190              		.loc 1 209 0 discriminator 1
 191 001c FFF7FEFF 		bl	prvTakeAndGiveInTheOppositeOrder
 210:..\Common\Minimal/IntSemTest.c **** 
 211:..\Common\Minimal/IntSemTest.c **** 		/* Ensure not to starve out other tests. */
 212:..\Common\Minimal/IntSemTest.c **** 		ulMasterLoops++;
 192              		.loc 1 212 0 discriminator 1
 193 0020 044B     		ldr	r3, .L6
 194 0022 1B68     		ldr	r3, [r3]
 195 0024 0133     		adds	r3, r3, #1
 196 0026 034A     		ldr	r2, .L6
 197 0028 1360     		str	r3, [r2]
 213:..\Common\Minimal/IntSemTest.c **** 		vTaskDelay( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS );
 198              		.loc 1 213 0 discriminator 1
 199 002a 6420     		movs	r0, #100
 200 002c FFF7FEFF 		bl	vTaskDelay
 214:..\Common\Minimal/IntSemTest.c **** 	}
 201              		.loc 1 214 0 discriminator 1
 202 0030 EAE7     		b	.L5
 203              	.L7:
 204 0032 00BF     		.align	2
 205              	.L6:
 206 0034 04000000 		.word	ulMasterLoops
 207              		.cfi_endproc
 208              	.LFE69:
 209              		.size	vInterruptMutexMasterTask, .-vInterruptMutexMasterTask
 210              		.section	.text.prvTakeAndGiveInTheSameOrder,"ax",%progbits
 211              		.align	2
 212              		.thumb
 213              		.thumb_func
 214              		.type	prvTakeAndGiveInTheSameOrder, %function
 215              	prvTakeAndGiveInTheSameOrder:
 216              	.LFB70:
 215:..\Common\Minimal/IntSemTest.c **** }
 216:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 217:..\Common\Minimal/IntSemTest.c **** 
 218:..\Common\Minimal/IntSemTest.c **** static void prvTakeAndGiveInTheSameOrder( void )
 219:..\Common\Minimal/IntSemTest.c **** {
 217              		.loc 1 219 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221 0000 80B5     		push	{r7, lr}
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 225 0002 00AF     		add	r7, sp, #0
 226              		.cfi_def_cfa_register 7
 220:..\Common\Minimal/IntSemTest.c **** 	/* Ensure the slave is suspended, and that this task is running at the
 221:..\Common\Minimal/IntSemTest.c **** 	lower priority as expected as the start conditions. */
 222:..\Common\Minimal/IntSemTest.c **** 	#if( INCLUDE_eTaskGetState == 1 )
 223:..\Common\Minimal/IntSemTest.c **** 	{
 224:..\Common\Minimal/IntSemTest.c **** 		configASSERT( eTaskGetState( xSlaveHandle ) == eSuspended );
 225:..\Common\Minimal/IntSemTest.c **** 	}
 226:..\Common\Minimal/IntSemTest.c **** 	#endif /* INCLUDE_eTaskGetState */
 227:..\Common\Minimal/IntSemTest.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 9


 228:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemMASTER_PRIORITY )
 227              		.loc 1 228 0
 228 0004 0020     		movs	r0, #0
 229 0006 FFF7FEFF 		bl	uxTaskPriorityGet
 230 000a 0346     		mov	r3, r0
 231 000c 002B     		cmp	r3, #0
 232 000e 02D0     		beq	.L9
 229:..\Common\Minimal/IntSemTest.c **** 	{
 230:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 233              		.loc 1 230 0
 234 0010 3D4B     		ldr	r3, .L19
 235 0012 0122     		movs	r2, #1
 236 0014 1A60     		str	r2, [r3]
 237              	.L9:
 231:..\Common\Minimal/IntSemTest.c **** 	}
 232:..\Common\Minimal/IntSemTest.c **** 
 233:..\Common\Minimal/IntSemTest.c **** 	/* Take the semaphore that is shared with the slave. */
 234:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreTake( xMasterSlaveMutex, intsemNO_BLOCK ) != pdPASS )
 238              		.loc 1 234 0
 239 0016 3D4B     		ldr	r3, .L19+4
 240 0018 1868     		ldr	r0, [r3]
 241 001a 0023     		movs	r3, #0
 242 001c 0022     		movs	r2, #0
 243 001e 0021     		movs	r1, #0
 244 0020 FFF7FEFF 		bl	xQueueGenericReceive
 245 0024 0346     		mov	r3, r0
 246 0026 012B     		cmp	r3, #1
 247 0028 02D0     		beq	.L10
 235:..\Common\Minimal/IntSemTest.c **** 	{
 236:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 248              		.loc 1 236 0
 249 002a 374B     		ldr	r3, .L19
 250 002c 0122     		movs	r2, #1
 251 002e 1A60     		str	r2, [r3]
 252              	.L10:
 237:..\Common\Minimal/IntSemTest.c **** 	}
 238:..\Common\Minimal/IntSemTest.c **** 
 239:..\Common\Minimal/IntSemTest.c **** 	/* This task now has the mutex.  Unsuspend the slave so it too
 240:..\Common\Minimal/IntSemTest.c **** 	attempts to take the mutex. */
 241:..\Common\Minimal/IntSemTest.c **** 	vTaskResume( xSlaveHandle );
 253              		.loc 1 241 0
 254 0030 374B     		ldr	r3, .L19+8
 255 0032 1B68     		ldr	r3, [r3]
 256 0034 1846     		mov	r0, r3
 257 0036 FFF7FEFF 		bl	vTaskResume
 242:..\Common\Minimal/IntSemTest.c **** 
 243:..\Common\Minimal/IntSemTest.c **** 	/* The slave has the higher priority so should now have executed and
 244:..\Common\Minimal/IntSemTest.c **** 	blocked on the semaphore. */
 245:..\Common\Minimal/IntSemTest.c **** 	#if( INCLUDE_eTaskGetState == 1 )
 246:..\Common\Minimal/IntSemTest.c **** 	{
 247:..\Common\Minimal/IntSemTest.c **** 		configASSERT( eTaskGetState( xSlaveHandle ) == eBlocked );
 248:..\Common\Minimal/IntSemTest.c **** 	}
 249:..\Common\Minimal/IntSemTest.c **** 	#endif /* INCLUDE_eTaskGetState */
 250:..\Common\Minimal/IntSemTest.c **** 
 251:..\Common\Minimal/IntSemTest.c **** 	/* This task should now have inherited the priority of the slave
 252:..\Common\Minimal/IntSemTest.c **** 	task. */
 253:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemSLAVE_PRIORITY )
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 10


 258              		.loc 1 253 0
 259 003a 0020     		movs	r0, #0
 260 003c FFF7FEFF 		bl	uxTaskPriorityGet
 261 0040 0346     		mov	r3, r0
 262 0042 012B     		cmp	r3, #1
 263 0044 02D0     		beq	.L11
 254:..\Common\Minimal/IntSemTest.c **** 	{
 255:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 264              		.loc 1 255 0
 265 0046 304B     		ldr	r3, .L19
 266 0048 0122     		movs	r2, #1
 267 004a 1A60     		str	r2, [r3]
 268              	.L11:
 256:..\Common\Minimal/IntSemTest.c **** 	}
 257:..\Common\Minimal/IntSemTest.c **** 
 258:..\Common\Minimal/IntSemTest.c **** 	/* Now wait a little longer than the time between ISR gives to also
 259:..\Common\Minimal/IntSemTest.c **** 	obtain the ISR mutex. */
 260:..\Common\Minimal/IntSemTest.c **** 	xOkToGiveMutex = pdTRUE;
 269              		.loc 1 260 0
 270 004c 314B     		ldr	r3, .L19+12
 271 004e 0122     		movs	r2, #1
 272 0050 1A60     		str	r2, [r3]
 261:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreTake( xISRMutex, ( xInterruptGivePeriod * 2 ) ) != pdPASS )
 273              		.loc 1 261 0
 274 0052 314B     		ldr	r3, .L19+16
 275 0054 1868     		ldr	r0, [r3]
 276 0056 6423     		movs	r3, #100
 277 0058 5A00     		lsls	r2, r3, #1
 278 005a 0023     		movs	r3, #0
 279 005c 0021     		movs	r1, #0
 280 005e FFF7FEFF 		bl	xQueueGenericReceive
 281 0062 0346     		mov	r3, r0
 282 0064 012B     		cmp	r3, #1
 283 0066 02D0     		beq	.L12
 262:..\Common\Minimal/IntSemTest.c **** 	{
 263:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 284              		.loc 1 263 0
 285 0068 274B     		ldr	r3, .L19
 286 006a 0122     		movs	r2, #1
 287 006c 1A60     		str	r2, [r3]
 288              	.L12:
 264:..\Common\Minimal/IntSemTest.c **** 	}
 265:..\Common\Minimal/IntSemTest.c **** 	xOkToGiveMutex = pdFALSE;
 289              		.loc 1 265 0
 290 006e 294B     		ldr	r3, .L19+12
 291 0070 0022     		movs	r2, #0
 292 0072 1A60     		str	r2, [r3]
 266:..\Common\Minimal/IntSemTest.c **** 
 267:..\Common\Minimal/IntSemTest.c **** 	/* Attempting to take again immediately should fail as the mutex is
 268:..\Common\Minimal/IntSemTest.c **** 	already held. */
 269:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreTake( xISRMutex, intsemNO_BLOCK ) != pdFAIL )
 293              		.loc 1 269 0
 294 0074 284B     		ldr	r3, .L19+16
 295 0076 1868     		ldr	r0, [r3]
 296 0078 0023     		movs	r3, #0
 297 007a 0022     		movs	r2, #0
 298 007c 0021     		movs	r1, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 11


 299 007e FFF7FEFF 		bl	xQueueGenericReceive
 300 0082 0346     		mov	r3, r0
 301 0084 002B     		cmp	r3, #0
 302 0086 02D0     		beq	.L13
 270:..\Common\Minimal/IntSemTest.c **** 	{
 271:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 303              		.loc 1 271 0
 304 0088 1F4B     		ldr	r3, .L19
 305 008a 0122     		movs	r2, #1
 306 008c 1A60     		str	r2, [r3]
 307              	.L13:
 272:..\Common\Minimal/IntSemTest.c **** 	}
 273:..\Common\Minimal/IntSemTest.c **** 
 274:..\Common\Minimal/IntSemTest.c **** 	/* Should still be at the priority of the slave task. */
 275:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemSLAVE_PRIORITY )
 308              		.loc 1 275 0
 309 008e 0020     		movs	r0, #0
 310 0090 FFF7FEFF 		bl	uxTaskPriorityGet
 311 0094 0346     		mov	r3, r0
 312 0096 012B     		cmp	r3, #1
 313 0098 02D0     		beq	.L14
 276:..\Common\Minimal/IntSemTest.c **** 	{
 277:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 314              		.loc 1 277 0
 315 009a 1B4B     		ldr	r3, .L19
 316 009c 0122     		movs	r2, #1
 317 009e 1A60     		str	r2, [r3]
 318              	.L14:
 278:..\Common\Minimal/IntSemTest.c **** 	}
 279:..\Common\Minimal/IntSemTest.c **** 
 280:..\Common\Minimal/IntSemTest.c **** 	/* Give back the ISR semaphore to ensure the priority is not
 281:..\Common\Minimal/IntSemTest.c **** 	disinherited as the shared mutex (which the higher priority task is
 282:..\Common\Minimal/IntSemTest.c **** 	attempting to obtain) is still held. */
 283:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreGive( xISRMutex ) != pdPASS )
 319              		.loc 1 283 0
 320 00a0 1D4B     		ldr	r3, .L19+16
 321 00a2 1868     		ldr	r0, [r3]
 322 00a4 0023     		movs	r3, #0
 323 00a6 0022     		movs	r2, #0
 324 00a8 0021     		movs	r1, #0
 325 00aa FFF7FEFF 		bl	xQueueGenericSend
 326 00ae 0346     		mov	r3, r0
 327 00b0 012B     		cmp	r3, #1
 328 00b2 02D0     		beq	.L15
 284:..\Common\Minimal/IntSemTest.c **** 	{
 285:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 329              		.loc 1 285 0
 330 00b4 144B     		ldr	r3, .L19
 331 00b6 0122     		movs	r2, #1
 332 00b8 1A60     		str	r2, [r3]
 333              	.L15:
 286:..\Common\Minimal/IntSemTest.c **** 	}
 287:..\Common\Minimal/IntSemTest.c **** 
 288:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemSLAVE_PRIORITY )
 334              		.loc 1 288 0
 335 00ba 0020     		movs	r0, #0
 336 00bc FFF7FEFF 		bl	uxTaskPriorityGet
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 12


 337 00c0 0346     		mov	r3, r0
 338 00c2 012B     		cmp	r3, #1
 339 00c4 02D0     		beq	.L16
 289:..\Common\Minimal/IntSemTest.c **** 	{
 290:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 340              		.loc 1 290 0
 341 00c6 104B     		ldr	r3, .L19
 342 00c8 0122     		movs	r2, #1
 343 00ca 1A60     		str	r2, [r3]
 344              	.L16:
 291:..\Common\Minimal/IntSemTest.c **** 	}
 292:..\Common\Minimal/IntSemTest.c **** 
 293:..\Common\Minimal/IntSemTest.c **** 	/* Finally give back the shared mutex.  This time the higher priority
 294:..\Common\Minimal/IntSemTest.c **** 	task should run before this task runs again - so this task should have
 295:..\Common\Minimal/IntSemTest.c **** 	disinherited the priority and the higher priority task should be in the
 296:..\Common\Minimal/IntSemTest.c **** 	suspended state again. */
 297:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreGive( xMasterSlaveMutex ) != pdPASS )
 345              		.loc 1 297 0
 346 00cc 0F4B     		ldr	r3, .L19+4
 347 00ce 1868     		ldr	r0, [r3]
 348 00d0 0023     		movs	r3, #0
 349 00d2 0022     		movs	r2, #0
 350 00d4 0021     		movs	r1, #0
 351 00d6 FFF7FEFF 		bl	xQueueGenericSend
 352 00da 0346     		mov	r3, r0
 353 00dc 012B     		cmp	r3, #1
 354 00de 02D0     		beq	.L17
 298:..\Common\Minimal/IntSemTest.c **** 	{
 299:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 355              		.loc 1 299 0
 356 00e0 094B     		ldr	r3, .L19
 357 00e2 0122     		movs	r2, #1
 358 00e4 1A60     		str	r2, [r3]
 359              	.L17:
 300:..\Common\Minimal/IntSemTest.c **** 	}
 301:..\Common\Minimal/IntSemTest.c **** 
 302:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemMASTER_PRIORITY )
 360              		.loc 1 302 0
 361 00e6 0020     		movs	r0, #0
 362 00e8 FFF7FEFF 		bl	uxTaskPriorityGet
 363 00ec 0346     		mov	r3, r0
 364 00ee 002B     		cmp	r3, #0
 365 00f0 02D0     		beq	.L18
 303:..\Common\Minimal/IntSemTest.c **** 	{
 304:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 366              		.loc 1 304 0
 367 00f2 054B     		ldr	r3, .L19
 368 00f4 0122     		movs	r2, #1
 369 00f6 1A60     		str	r2, [r3]
 370              	.L18:
 305:..\Common\Minimal/IntSemTest.c **** 	}
 306:..\Common\Minimal/IntSemTest.c **** 
 307:..\Common\Minimal/IntSemTest.c **** 	#if( INCLUDE_eTaskGetState == 1 )
 308:..\Common\Minimal/IntSemTest.c **** 	{
 309:..\Common\Minimal/IntSemTest.c **** 		configASSERT( eTaskGetState( xSlaveHandle ) == eSuspended );
 310:..\Common\Minimal/IntSemTest.c **** 	}
 311:..\Common\Minimal/IntSemTest.c **** 	#endif /* INCLUDE_eTaskGetState */
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 13


 312:..\Common\Minimal/IntSemTest.c **** 
 313:..\Common\Minimal/IntSemTest.c **** 	/* Reset the mutex ready for the next round. */
 314:..\Common\Minimal/IntSemTest.c **** 	xQueueReset( xISRMutex );
 371              		.loc 1 314 0
 372 00f8 074B     		ldr	r3, .L19+16
 373 00fa 1B68     		ldr	r3, [r3]
 374 00fc 0021     		movs	r1, #0
 375 00fe 1846     		mov	r0, r3
 376 0100 FFF7FEFF 		bl	xQueueGenericReset
 315:..\Common\Minimal/IntSemTest.c **** }
 377              		.loc 1 315 0
 378 0104 00BF     		nop
 379 0106 80BD     		pop	{r7, pc}
 380              	.L20:
 381              		.align	2
 382              	.L19:
 383 0108 00000000 		.word	xErrorDetected
 384 010c 18000000 		.word	xMasterSlaveMutex
 385 0110 0C000000 		.word	xSlaveHandle
 386 0114 1C000000 		.word	xOkToGiveMutex
 387 0118 10000000 		.word	xISRMutex
 388              		.cfi_endproc
 389              	.LFE70:
 390              		.size	prvTakeAndGiveInTheSameOrder, .-prvTakeAndGiveInTheSameOrder
 391              		.section	.text.prvTakeAndGiveInTheOppositeOrder,"ax",%progbits
 392              		.align	2
 393              		.thumb
 394              		.thumb_func
 395              		.type	prvTakeAndGiveInTheOppositeOrder, %function
 396              	prvTakeAndGiveInTheOppositeOrder:
 397              	.LFB71:
 316:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 317:..\Common\Minimal/IntSemTest.c **** 
 318:..\Common\Minimal/IntSemTest.c **** static void prvTakeAndGiveInTheOppositeOrder( void )
 319:..\Common\Minimal/IntSemTest.c **** {
 398              		.loc 1 319 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402 0000 80B5     		push	{r7, lr}
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 406 0002 00AF     		add	r7, sp, #0
 407              		.cfi_def_cfa_register 7
 320:..\Common\Minimal/IntSemTest.c **** 	/* Ensure the slave is suspended, and that this task is running at the
 321:..\Common\Minimal/IntSemTest.c **** 	lower priority as expected as the start conditions. */
 322:..\Common\Minimal/IntSemTest.c **** 	#if( INCLUDE_eTaskGetState == 1 )
 323:..\Common\Minimal/IntSemTest.c **** 	{
 324:..\Common\Minimal/IntSemTest.c **** 		configASSERT( eTaskGetState( xSlaveHandle ) == eSuspended );
 325:..\Common\Minimal/IntSemTest.c **** 	}
 326:..\Common\Minimal/IntSemTest.c **** 	#endif /* INCLUDE_eTaskGetState */
 327:..\Common\Minimal/IntSemTest.c **** 
 328:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemMASTER_PRIORITY )
 408              		.loc 1 328 0
 409 0004 0020     		movs	r0, #0
 410 0006 FFF7FEFF 		bl	uxTaskPriorityGet
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 14


 411 000a 0346     		mov	r3, r0
 412 000c 002B     		cmp	r3, #0
 413 000e 02D0     		beq	.L22
 329:..\Common\Minimal/IntSemTest.c **** 	{
 330:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 414              		.loc 1 330 0
 415 0010 3D4B     		ldr	r3, .L32
 416 0012 0122     		movs	r2, #1
 417 0014 1A60     		str	r2, [r3]
 418              	.L22:
 331:..\Common\Minimal/IntSemTest.c **** 	}
 332:..\Common\Minimal/IntSemTest.c **** 
 333:..\Common\Minimal/IntSemTest.c **** 	/* Take the semaphore that is shared with the slave. */
 334:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreTake( xMasterSlaveMutex, intsemNO_BLOCK ) != pdPASS )
 419              		.loc 1 334 0
 420 0016 3D4B     		ldr	r3, .L32+4
 421 0018 1868     		ldr	r0, [r3]
 422 001a 0023     		movs	r3, #0
 423 001c 0022     		movs	r2, #0
 424 001e 0021     		movs	r1, #0
 425 0020 FFF7FEFF 		bl	xQueueGenericReceive
 426 0024 0346     		mov	r3, r0
 427 0026 012B     		cmp	r3, #1
 428 0028 02D0     		beq	.L23
 335:..\Common\Minimal/IntSemTest.c **** 	{
 336:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 429              		.loc 1 336 0
 430 002a 374B     		ldr	r3, .L32
 431 002c 0122     		movs	r2, #1
 432 002e 1A60     		str	r2, [r3]
 433              	.L23:
 337:..\Common\Minimal/IntSemTest.c **** 	}
 338:..\Common\Minimal/IntSemTest.c **** 
 339:..\Common\Minimal/IntSemTest.c **** 	/* This task now has the mutex.  Unsuspend the slave so it too
 340:..\Common\Minimal/IntSemTest.c **** 	attempts to take the mutex. */
 341:..\Common\Minimal/IntSemTest.c **** 	vTaskResume( xSlaveHandle );
 434              		.loc 1 341 0
 435 0030 374B     		ldr	r3, .L32+8
 436 0032 1B68     		ldr	r3, [r3]
 437 0034 1846     		mov	r0, r3
 438 0036 FFF7FEFF 		bl	vTaskResume
 342:..\Common\Minimal/IntSemTest.c **** 
 343:..\Common\Minimal/IntSemTest.c **** 	/* The slave has the higher priority so should now have executed and
 344:..\Common\Minimal/IntSemTest.c **** 	blocked on the semaphore. */
 345:..\Common\Minimal/IntSemTest.c **** 	#if( INCLUDE_eTaskGetState == 1 )
 346:..\Common\Minimal/IntSemTest.c **** 	{
 347:..\Common\Minimal/IntSemTest.c **** 		configASSERT( eTaskGetState( xSlaveHandle ) == eBlocked );
 348:..\Common\Minimal/IntSemTest.c **** 	}
 349:..\Common\Minimal/IntSemTest.c **** 	#endif /* INCLUDE_eTaskGetState */
 350:..\Common\Minimal/IntSemTest.c **** 
 351:..\Common\Minimal/IntSemTest.c **** 	/* This task should now have inherited the priority of the slave
 352:..\Common\Minimal/IntSemTest.c **** 	task. */
 353:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemSLAVE_PRIORITY )
 439              		.loc 1 353 0
 440 003a 0020     		movs	r0, #0
 441 003c FFF7FEFF 		bl	uxTaskPriorityGet
 442 0040 0346     		mov	r3, r0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 15


 443 0042 012B     		cmp	r3, #1
 444 0044 02D0     		beq	.L24
 354:..\Common\Minimal/IntSemTest.c **** 	{
 355:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 445              		.loc 1 355 0
 446 0046 304B     		ldr	r3, .L32
 447 0048 0122     		movs	r2, #1
 448 004a 1A60     		str	r2, [r3]
 449              	.L24:
 356:..\Common\Minimal/IntSemTest.c **** 	}
 357:..\Common\Minimal/IntSemTest.c **** 
 358:..\Common\Minimal/IntSemTest.c **** 	/* Now wait a little longer than the time between ISR gives to also
 359:..\Common\Minimal/IntSemTest.c **** 	obtain the ISR mutex. */
 360:..\Common\Minimal/IntSemTest.c **** 	xOkToGiveMutex = pdTRUE;
 450              		.loc 1 360 0
 451 004c 314B     		ldr	r3, .L32+12
 452 004e 0122     		movs	r2, #1
 453 0050 1A60     		str	r2, [r3]
 361:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreTake( xISRMutex, ( xInterruptGivePeriod * 2 ) ) != pdPASS )
 454              		.loc 1 361 0
 455 0052 314B     		ldr	r3, .L32+16
 456 0054 1868     		ldr	r0, [r3]
 457 0056 6423     		movs	r3, #100
 458 0058 5A00     		lsls	r2, r3, #1
 459 005a 0023     		movs	r3, #0
 460 005c 0021     		movs	r1, #0
 461 005e FFF7FEFF 		bl	xQueueGenericReceive
 462 0062 0346     		mov	r3, r0
 463 0064 012B     		cmp	r3, #1
 464 0066 02D0     		beq	.L25
 362:..\Common\Minimal/IntSemTest.c **** 	{
 363:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 465              		.loc 1 363 0
 466 0068 274B     		ldr	r3, .L32
 467 006a 0122     		movs	r2, #1
 468 006c 1A60     		str	r2, [r3]
 469              	.L25:
 364:..\Common\Minimal/IntSemTest.c **** 	}
 365:..\Common\Minimal/IntSemTest.c **** 	xOkToGiveMutex = pdFALSE;
 470              		.loc 1 365 0
 471 006e 294B     		ldr	r3, .L32+12
 472 0070 0022     		movs	r2, #0
 473 0072 1A60     		str	r2, [r3]
 366:..\Common\Minimal/IntSemTest.c **** 
 367:..\Common\Minimal/IntSemTest.c **** 	/* Attempting to take again immediately should fail as the mutex is
 368:..\Common\Minimal/IntSemTest.c **** 	already held. */
 369:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreTake( xISRMutex, intsemNO_BLOCK ) != pdFAIL )
 474              		.loc 1 369 0
 475 0074 284B     		ldr	r3, .L32+16
 476 0076 1868     		ldr	r0, [r3]
 477 0078 0023     		movs	r3, #0
 478 007a 0022     		movs	r2, #0
 479 007c 0021     		movs	r1, #0
 480 007e FFF7FEFF 		bl	xQueueGenericReceive
 481 0082 0346     		mov	r3, r0
 482 0084 002B     		cmp	r3, #0
 483 0086 02D0     		beq	.L26
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 16


 370:..\Common\Minimal/IntSemTest.c **** 	{
 371:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 484              		.loc 1 371 0
 485 0088 1F4B     		ldr	r3, .L32
 486 008a 0122     		movs	r2, #1
 487 008c 1A60     		str	r2, [r3]
 488              	.L26:
 372:..\Common\Minimal/IntSemTest.c **** 	}
 373:..\Common\Minimal/IntSemTest.c **** 
 374:..\Common\Minimal/IntSemTest.c **** 	/* Should still be at the priority of the slave task. */
 375:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemSLAVE_PRIORITY )
 489              		.loc 1 375 0
 490 008e 0020     		movs	r0, #0
 491 0090 FFF7FEFF 		bl	uxTaskPriorityGet
 492 0094 0346     		mov	r3, r0
 493 0096 012B     		cmp	r3, #1
 494 0098 02D0     		beq	.L27
 376:..\Common\Minimal/IntSemTest.c **** 	{
 377:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 495              		.loc 1 377 0
 496 009a 1B4B     		ldr	r3, .L32
 497 009c 0122     		movs	r2, #1
 498 009e 1A60     		str	r2, [r3]
 499              	.L27:
 378:..\Common\Minimal/IntSemTest.c **** 	}
 379:..\Common\Minimal/IntSemTest.c **** 
 380:..\Common\Minimal/IntSemTest.c **** 	/* Give back the shared semaphore to ensure the priority is not disinherited
 381:..\Common\Minimal/IntSemTest.c **** 	as the ISR mutex is still held.  The higher priority slave task should run
 382:..\Common\Minimal/IntSemTest.c **** 	before this task runs again. */
 383:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreGive( xMasterSlaveMutex ) != pdPASS )
 500              		.loc 1 383 0
 501 00a0 1A4B     		ldr	r3, .L32+4
 502 00a2 1868     		ldr	r0, [r3]
 503 00a4 0023     		movs	r3, #0
 504 00a6 0022     		movs	r2, #0
 505 00a8 0021     		movs	r1, #0
 506 00aa FFF7FEFF 		bl	xQueueGenericSend
 507 00ae 0346     		mov	r3, r0
 508 00b0 012B     		cmp	r3, #1
 509 00b2 02D0     		beq	.L28
 384:..\Common\Minimal/IntSemTest.c **** 	{
 385:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 510              		.loc 1 385 0
 511 00b4 144B     		ldr	r3, .L32
 512 00b6 0122     		movs	r2, #1
 513 00b8 1A60     		str	r2, [r3]
 514              	.L28:
 386:..\Common\Minimal/IntSemTest.c **** 	}
 387:..\Common\Minimal/IntSemTest.c **** 
 388:..\Common\Minimal/IntSemTest.c **** 	/* Should still be at the priority of the slave task as this task still
 389:..\Common\Minimal/IntSemTest.c **** 	holds one semaphore (this is a simplification in the priority inheritance
 390:..\Common\Minimal/IntSemTest.c **** 	mechanism. */
 391:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemSLAVE_PRIORITY )
 515              		.loc 1 391 0
 516 00ba 0020     		movs	r0, #0
 517 00bc FFF7FEFF 		bl	uxTaskPriorityGet
 518 00c0 0346     		mov	r3, r0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 17


 519 00c2 012B     		cmp	r3, #1
 520 00c4 02D0     		beq	.L29
 392:..\Common\Minimal/IntSemTest.c **** 	{
 393:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 521              		.loc 1 393 0
 522 00c6 104B     		ldr	r3, .L32
 523 00c8 0122     		movs	r2, #1
 524 00ca 1A60     		str	r2, [r3]
 525              	.L29:
 394:..\Common\Minimal/IntSemTest.c **** 	}
 395:..\Common\Minimal/IntSemTest.c **** 
 396:..\Common\Minimal/IntSemTest.c **** 	/* Give back the ISR semaphore, which should result in the priority being
 397:..\Common\Minimal/IntSemTest.c **** 	disinherited as it was the last mutex held. */
 398:..\Common\Minimal/IntSemTest.c **** 	if( xSemaphoreGive( xISRMutex ) != pdPASS )
 526              		.loc 1 398 0
 527 00cc 124B     		ldr	r3, .L32+16
 528 00ce 1868     		ldr	r0, [r3]
 529 00d0 0023     		movs	r3, #0
 530 00d2 0022     		movs	r2, #0
 531 00d4 0021     		movs	r1, #0
 532 00d6 FFF7FEFF 		bl	xQueueGenericSend
 533 00da 0346     		mov	r3, r0
 534 00dc 012B     		cmp	r3, #1
 535 00de 02D0     		beq	.L30
 399:..\Common\Minimal/IntSemTest.c **** 	{
 400:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 536              		.loc 1 400 0
 537 00e0 094B     		ldr	r3, .L32
 538 00e2 0122     		movs	r2, #1
 539 00e4 1A60     		str	r2, [r3]
 540              	.L30:
 401:..\Common\Minimal/IntSemTest.c **** 	}
 402:..\Common\Minimal/IntSemTest.c **** 
 403:..\Common\Minimal/IntSemTest.c **** 	if( uxTaskPriorityGet( NULL ) != intsemMASTER_PRIORITY )
 541              		.loc 1 403 0
 542 00e6 0020     		movs	r0, #0
 543 00e8 FFF7FEFF 		bl	uxTaskPriorityGet
 544 00ec 0346     		mov	r3, r0
 545 00ee 002B     		cmp	r3, #0
 546 00f0 02D0     		beq	.L31
 404:..\Common\Minimal/IntSemTest.c **** 	{
 405:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 547              		.loc 1 405 0
 548 00f2 054B     		ldr	r3, .L32
 549 00f4 0122     		movs	r2, #1
 550 00f6 1A60     		str	r2, [r3]
 551              	.L31:
 406:..\Common\Minimal/IntSemTest.c **** 	}
 407:..\Common\Minimal/IntSemTest.c **** 
 408:..\Common\Minimal/IntSemTest.c **** 	/* Reset the mutex ready for the next round. */
 409:..\Common\Minimal/IntSemTest.c **** 	xQueueReset( xISRMutex );
 552              		.loc 1 409 0
 553 00f8 074B     		ldr	r3, .L32+16
 554 00fa 1B68     		ldr	r3, [r3]
 555 00fc 0021     		movs	r1, #0
 556 00fe 1846     		mov	r0, r3
 557 0100 FFF7FEFF 		bl	xQueueGenericReset
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 18


 410:..\Common\Minimal/IntSemTest.c **** }
 558              		.loc 1 410 0
 559 0104 00BF     		nop
 560 0106 80BD     		pop	{r7, pc}
 561              	.L33:
 562              		.align	2
 563              	.L32:
 564 0108 00000000 		.word	xErrorDetected
 565 010c 18000000 		.word	xMasterSlaveMutex
 566 0110 0C000000 		.word	xSlaveHandle
 567 0114 1C000000 		.word	xOkToGiveMutex
 568 0118 10000000 		.word	xISRMutex
 569              		.cfi_endproc
 570              	.LFE71:
 571              		.size	prvTakeAndGiveInTheOppositeOrder, .-prvTakeAndGiveInTheOppositeOrder
 572              		.section	.text.vInterruptMutexSlaveTask,"ax",%progbits
 573              		.align	2
 574              		.thumb
 575              		.thumb_func
 576              		.type	vInterruptMutexSlaveTask, %function
 577              	vInterruptMutexSlaveTask:
 578              	.LFB72:
 411:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 412:..\Common\Minimal/IntSemTest.c **** 
 413:..\Common\Minimal/IntSemTest.c **** static void vInterruptMutexSlaveTask( void *pvParameters )
 414:..\Common\Minimal/IntSemTest.c **** {
 579              		.loc 1 414 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 8
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583 0000 80B5     		push	{r7, lr}
 584              		.cfi_def_cfa_offset 8
 585              		.cfi_offset 7, -8
 586              		.cfi_offset 14, -4
 587 0002 82B0     		sub	sp, sp, #8
 588              		.cfi_def_cfa_offset 16
 589 0004 00AF     		add	r7, sp, #0
 590              		.cfi_def_cfa_register 7
 591 0006 7860     		str	r0, [r7, #4]
 592              	.L37:
 415:..\Common\Minimal/IntSemTest.c **** 	/* Just to avoid compiler warnings. */
 416:..\Common\Minimal/IntSemTest.c **** 	( void ) pvParameters;
 417:..\Common\Minimal/IntSemTest.c **** 
 418:..\Common\Minimal/IntSemTest.c **** 	for( ;; )
 419:..\Common\Minimal/IntSemTest.c **** 	{
 420:..\Common\Minimal/IntSemTest.c **** 		/* This task starts by suspending itself so when it executes can be
 421:..\Common\Minimal/IntSemTest.c **** 		controlled by the master task. */
 422:..\Common\Minimal/IntSemTest.c **** 		vTaskSuspend( NULL );
 593              		.loc 1 422 0
 594 0008 0020     		movs	r0, #0
 595 000a FFF7FEFF 		bl	vTaskSuspend
 423:..\Common\Minimal/IntSemTest.c **** 
 424:..\Common\Minimal/IntSemTest.c **** 		/* This task will execute when the master task already holds the mutex.
 425:..\Common\Minimal/IntSemTest.c **** 		Attempting to take the mutex will place this task in the Blocked
 426:..\Common\Minimal/IntSemTest.c **** 		state. */
 427:..\Common\Minimal/IntSemTest.c **** 		if( xSemaphoreTake( xMasterSlaveMutex, portMAX_DELAY ) != pdPASS )
 596              		.loc 1 427 0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 19


 597 000e 0E4B     		ldr	r3, .L38
 598 0010 1868     		ldr	r0, [r3]
 599 0012 0023     		movs	r3, #0
 600 0014 4FF0FF32 		mov	r2, #-1
 601 0018 0021     		movs	r1, #0
 602 001a FFF7FEFF 		bl	xQueueGenericReceive
 603 001e 0346     		mov	r3, r0
 604 0020 012B     		cmp	r3, #1
 605 0022 02D0     		beq	.L35
 428:..\Common\Minimal/IntSemTest.c **** 		{
 429:..\Common\Minimal/IntSemTest.c **** 			xErrorDetected = pdTRUE;
 606              		.loc 1 429 0
 607 0024 094B     		ldr	r3, .L38+4
 608 0026 0122     		movs	r2, #1
 609 0028 1A60     		str	r2, [r3]
 610              	.L35:
 430:..\Common\Minimal/IntSemTest.c **** 		}
 431:..\Common\Minimal/IntSemTest.c **** 
 432:..\Common\Minimal/IntSemTest.c **** 		if( xSemaphoreGive( xMasterSlaveMutex ) != pdPASS )
 611              		.loc 1 432 0
 612 002a 074B     		ldr	r3, .L38
 613 002c 1868     		ldr	r0, [r3]
 614 002e 0023     		movs	r3, #0
 615 0030 0022     		movs	r2, #0
 616 0032 0021     		movs	r1, #0
 617 0034 FFF7FEFF 		bl	xQueueGenericSend
 618 0038 0346     		mov	r3, r0
 619 003a 012B     		cmp	r3, #1
 620 003c E4D0     		beq	.L37
 433:..\Common\Minimal/IntSemTest.c **** 		{
 434:..\Common\Minimal/IntSemTest.c **** 			xErrorDetected = pdTRUE;
 621              		.loc 1 434 0
 622 003e 034B     		ldr	r3, .L38+4
 623 0040 0122     		movs	r2, #1
 624 0042 1A60     		str	r2, [r3]
 435:..\Common\Minimal/IntSemTest.c **** 		}
 436:..\Common\Minimal/IntSemTest.c **** 	}
 625              		.loc 1 436 0
 626 0044 E0E7     		b	.L37
 627              	.L39:
 628 0046 00BF     		.align	2
 629              	.L38:
 630 0048 18000000 		.word	xMasterSlaveMutex
 631 004c 00000000 		.word	xErrorDetected
 632              		.cfi_endproc
 633              	.LFE72:
 634              		.size	vInterruptMutexSlaveTask, .-vInterruptMutexSlaveTask
 635              		.section	.text.vInterruptCountingSemaphoreTask,"ax",%progbits
 636              		.align	2
 637              		.thumb
 638              		.thumb_func
 639              		.type	vInterruptCountingSemaphoreTask, %function
 640              	vInterruptCountingSemaphoreTask:
 641              	.LFB73:
 437:..\Common\Minimal/IntSemTest.c **** }
 438:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 439:..\Common\Minimal/IntSemTest.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 20


 440:..\Common\Minimal/IntSemTest.c **** static void vInterruptCountingSemaphoreTask( void *pvParameters )
 441:..\Common\Minimal/IntSemTest.c **** {
 642              		.loc 1 441 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 16
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646 0000 80B5     		push	{r7, lr}
 647              		.cfi_def_cfa_offset 8
 648              		.cfi_offset 7, -8
 649              		.cfi_offset 14, -4
 650 0002 84B0     		sub	sp, sp, #16
 651              		.cfi_def_cfa_offset 24
 652 0004 00AF     		add	r7, sp, #0
 653              		.cfi_def_cfa_register 7
 654 0006 7860     		str	r0, [r7, #4]
 442:..\Common\Minimal/IntSemTest.c **** BaseType_t xCount;
 443:..\Common\Minimal/IntSemTest.c **** const TickType_t xDelay = pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_PERIOD_MS ) * ( intsemMAX_COUNT
 655              		.loc 1 443 0
 656 0008 4FF4C873 		mov	r3, #400
 657 000c BB60     		str	r3, [r7, #8]
 658              	.L47:
 444:..\Common\Minimal/IntSemTest.c **** 
 445:..\Common\Minimal/IntSemTest.c **** 	( void ) pvParameters;
 446:..\Common\Minimal/IntSemTest.c **** 
 447:..\Common\Minimal/IntSemTest.c **** 	for( ;; )
 448:..\Common\Minimal/IntSemTest.c **** 	{
 449:..\Common\Minimal/IntSemTest.c **** 		/* Expect to start with the counting semaphore empty. */
 450:..\Common\Minimal/IntSemTest.c **** 		if( uxQueueMessagesWaiting( ( QueueHandle_t ) xISRCountingSemaphore ) != 0 )
 659              		.loc 1 450 0
 660 000e 344B     		ldr	r3, .L48
 661 0010 1B68     		ldr	r3, [r3]
 662 0012 1846     		mov	r0, r3
 663 0014 FFF7FEFF 		bl	uxQueueMessagesWaiting
 664 0018 0346     		mov	r3, r0
 665 001a 002B     		cmp	r3, #0
 666 001c 02D0     		beq	.L41
 451:..\Common\Minimal/IntSemTest.c **** 		{
 452:..\Common\Minimal/IntSemTest.c **** 			xErrorDetected = pdTRUE;
 667              		.loc 1 452 0
 668 001e 314B     		ldr	r3, .L48+4
 669 0020 0122     		movs	r2, #1
 670 0022 1A60     		str	r2, [r3]
 671              	.L41:
 453:..\Common\Minimal/IntSemTest.c **** 		}
 454:..\Common\Minimal/IntSemTest.c **** 
 455:..\Common\Minimal/IntSemTest.c **** 		/* Wait until it is expected that the interrupt will have filled the
 456:..\Common\Minimal/IntSemTest.c **** 		counting semaphore. */
 457:..\Common\Minimal/IntSemTest.c **** 		xOkToGiveCountingSemaphore = pdTRUE;
 672              		.loc 1 457 0
 673 0024 304B     		ldr	r3, .L48+8
 674 0026 0122     		movs	r2, #1
 675 0028 1A60     		str	r2, [r3]
 458:..\Common\Minimal/IntSemTest.c **** 		vTaskDelay( xDelay );
 676              		.loc 1 458 0
 677 002a B868     		ldr	r0, [r7, #8]
 678 002c FFF7FEFF 		bl	vTaskDelay
 459:..\Common\Minimal/IntSemTest.c **** 		xOkToGiveCountingSemaphore = pdFALSE;
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 21


 679              		.loc 1 459 0
 680 0030 2D4B     		ldr	r3, .L48+8
 681 0032 0022     		movs	r2, #0
 682 0034 1A60     		str	r2, [r3]
 460:..\Common\Minimal/IntSemTest.c **** 
 461:..\Common\Minimal/IntSemTest.c **** 		/* Now it is expected that the counting semaphore is full. */
 462:..\Common\Minimal/IntSemTest.c **** 		if( uxQueueMessagesWaiting( ( QueueHandle_t ) xISRCountingSemaphore ) != intsemMAX_COUNT )
 683              		.loc 1 462 0
 684 0036 2A4B     		ldr	r3, .L48
 685 0038 1B68     		ldr	r3, [r3]
 686 003a 1846     		mov	r0, r3
 687 003c FFF7FEFF 		bl	uxQueueMessagesWaiting
 688 0040 0346     		mov	r3, r0
 689 0042 032B     		cmp	r3, #3
 690 0044 02D0     		beq	.L42
 463:..\Common\Minimal/IntSemTest.c **** 		{
 464:..\Common\Minimal/IntSemTest.c **** 			xErrorDetected = pdTRUE;
 691              		.loc 1 464 0
 692 0046 274B     		ldr	r3, .L48+4
 693 0048 0122     		movs	r2, #1
 694 004a 1A60     		str	r2, [r3]
 695              	.L42:
 465:..\Common\Minimal/IntSemTest.c **** 		}
 466:..\Common\Minimal/IntSemTest.c **** 
 467:..\Common\Minimal/IntSemTest.c **** 		if( uxQueueSpacesAvailable( ( QueueHandle_t ) xISRCountingSemaphore ) != 0 )
 696              		.loc 1 467 0
 697 004c 244B     		ldr	r3, .L48
 698 004e 1B68     		ldr	r3, [r3]
 699 0050 1846     		mov	r0, r3
 700 0052 FFF7FEFF 		bl	uxQueueSpacesAvailable
 701 0056 0346     		mov	r3, r0
 702 0058 002B     		cmp	r3, #0
 703 005a 02D0     		beq	.L43
 468:..\Common\Minimal/IntSemTest.c **** 		{
 469:..\Common\Minimal/IntSemTest.c **** 			xErrorDetected = pdTRUE;
 704              		.loc 1 469 0
 705 005c 214B     		ldr	r3, .L48+4
 706 005e 0122     		movs	r2, #1
 707 0060 1A60     		str	r2, [r3]
 708              	.L43:
 470:..\Common\Minimal/IntSemTest.c **** 		}
 471:..\Common\Minimal/IntSemTest.c **** 
 472:..\Common\Minimal/IntSemTest.c **** 		ulCountingSemaphoreLoops++;
 709              		.loc 1 472 0
 710 0062 224B     		ldr	r3, .L48+12
 711 0064 1B68     		ldr	r3, [r3]
 712 0066 0133     		adds	r3, r3, #1
 713 0068 204A     		ldr	r2, .L48+12
 714 006a 1360     		str	r3, [r2]
 473:..\Common\Minimal/IntSemTest.c **** 
 474:..\Common\Minimal/IntSemTest.c **** 		/* Expect to be able to take the counting semaphore intsemMAX_COUNT
 475:..\Common\Minimal/IntSemTest.c **** 		times.  A block time of 0 is used as the semaphore should already be
 476:..\Common\Minimal/IntSemTest.c **** 		there. */
 477:..\Common\Minimal/IntSemTest.c **** 		xCount = 0;
 715              		.loc 1 477 0
 716 006c 0023     		movs	r3, #0
 717 006e FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 22


 478:..\Common\Minimal/IntSemTest.c **** 		while( xSemaphoreTake( xISRCountingSemaphore, 0 ) == pdPASS )
 718              		.loc 1 478 0
 719 0070 02E0     		b	.L44
 720              	.L45:
 479:..\Common\Minimal/IntSemTest.c **** 		{
 480:..\Common\Minimal/IntSemTest.c **** 			xCount++;
 721              		.loc 1 480 0
 722 0072 FB68     		ldr	r3, [r7, #12]
 723 0074 0133     		adds	r3, r3, #1
 724 0076 FB60     		str	r3, [r7, #12]
 725              	.L44:
 478:..\Common\Minimal/IntSemTest.c **** 		while( xSemaphoreTake( xISRCountingSemaphore, 0 ) == pdPASS )
 726              		.loc 1 478 0
 727 0078 194B     		ldr	r3, .L48
 728 007a 1868     		ldr	r0, [r3]
 729 007c 0023     		movs	r3, #0
 730 007e 0022     		movs	r2, #0
 731 0080 0021     		movs	r1, #0
 732 0082 FFF7FEFF 		bl	xQueueGenericReceive
 733 0086 0346     		mov	r3, r0
 734 0088 012B     		cmp	r3, #1
 735 008a F2D0     		beq	.L45
 481:..\Common\Minimal/IntSemTest.c **** 		}
 482:..\Common\Minimal/IntSemTest.c **** 
 483:..\Common\Minimal/IntSemTest.c **** 		if( xCount != intsemMAX_COUNT )
 736              		.loc 1 483 0
 737 008c FB68     		ldr	r3, [r7, #12]
 738 008e 032B     		cmp	r3, #3
 739 0090 02D0     		beq	.L46
 484:..\Common\Minimal/IntSemTest.c **** 		{
 485:..\Common\Minimal/IntSemTest.c **** 			xErrorDetected = pdTRUE;
 740              		.loc 1 485 0
 741 0092 144B     		ldr	r3, .L48+4
 742 0094 0122     		movs	r2, #1
 743 0096 1A60     		str	r2, [r3]
 744              	.L46:
 486:..\Common\Minimal/IntSemTest.c **** 		}
 487:..\Common\Minimal/IntSemTest.c **** 
 488:..\Common\Minimal/IntSemTest.c **** 		/* Now raise the priority of this task so it runs immediately that the
 489:..\Common\Minimal/IntSemTest.c **** 		semaphore is given from the interrupt. */
 490:..\Common\Minimal/IntSemTest.c **** 		vTaskPrioritySet( NULL, configMAX_PRIORITIES - 1 );
 745              		.loc 1 490 0
 746 0098 0421     		movs	r1, #4
 747 009a 0020     		movs	r0, #0
 748 009c FFF7FEFF 		bl	vTaskPrioritySet
 491:..\Common\Minimal/IntSemTest.c **** 
 492:..\Common\Minimal/IntSemTest.c **** 		/* Block to wait for the semaphore to be given from the interrupt. */
 493:..\Common\Minimal/IntSemTest.c **** 		xOkToGiveCountingSemaphore = pdTRUE;
 749              		.loc 1 493 0
 750 00a0 114B     		ldr	r3, .L48+8
 751 00a2 0122     		movs	r2, #1
 752 00a4 1A60     		str	r2, [r3]
 494:..\Common\Minimal/IntSemTest.c **** 		xSemaphoreTake( xISRCountingSemaphore, portMAX_DELAY );
 753              		.loc 1 494 0
 754 00a6 0E4B     		ldr	r3, .L48
 755 00a8 1868     		ldr	r0, [r3]
 756 00aa 0023     		movs	r3, #0
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 23


 757 00ac 4FF0FF32 		mov	r2, #-1
 758 00b0 0021     		movs	r1, #0
 759 00b2 FFF7FEFF 		bl	xQueueGenericReceive
 495:..\Common\Minimal/IntSemTest.c **** 		xSemaphoreTake( xISRCountingSemaphore, portMAX_DELAY );
 760              		.loc 1 495 0
 761 00b6 0A4B     		ldr	r3, .L48
 762 00b8 1868     		ldr	r0, [r3]
 763 00ba 0023     		movs	r3, #0
 764 00bc 4FF0FF32 		mov	r2, #-1
 765 00c0 0021     		movs	r1, #0
 766 00c2 FFF7FEFF 		bl	xQueueGenericReceive
 496:..\Common\Minimal/IntSemTest.c **** 		xOkToGiveCountingSemaphore = pdFALSE;
 767              		.loc 1 496 0
 768 00c6 084B     		ldr	r3, .L48+8
 769 00c8 0022     		movs	r2, #0
 770 00ca 1A60     		str	r2, [r3]
 497:..\Common\Minimal/IntSemTest.c **** 
 498:..\Common\Minimal/IntSemTest.c **** 		/* Reset the priority so as not to disturbe other tests too much. */
 499:..\Common\Minimal/IntSemTest.c **** 		vTaskPrioritySet( NULL, tskIDLE_PRIORITY );
 771              		.loc 1 499 0
 772 00cc 0021     		movs	r1, #0
 773 00ce 0020     		movs	r0, #0
 774 00d0 FFF7FEFF 		bl	vTaskPrioritySet
 500:..\Common\Minimal/IntSemTest.c **** 
 501:..\Common\Minimal/IntSemTest.c **** 		ulCountingSemaphoreLoops++;
 775              		.loc 1 501 0
 776 00d4 054B     		ldr	r3, .L48+12
 777 00d6 1B68     		ldr	r3, [r3]
 778 00d8 0133     		adds	r3, r3, #1
 779 00da 044A     		ldr	r2, .L48+12
 780 00dc 1360     		str	r3, [r2]
 502:..\Common\Minimal/IntSemTest.c **** 	}
 781              		.loc 1 502 0
 782 00de 96E7     		b	.L47
 783              	.L49:
 784              		.align	2
 785              	.L48:
 786 00e0 14000000 		.word	xISRCountingSemaphore
 787 00e4 00000000 		.word	xErrorDetected
 788 00e8 20000000 		.word	xOkToGiveCountingSemaphore
 789 00ec 08000000 		.word	ulCountingSemaphoreLoops
 790              		.cfi_endproc
 791              	.LFE73:
 792              		.size	vInterruptCountingSemaphoreTask, .-vInterruptCountingSemaphoreTask
 793              		.section	.text.vInterruptSemaphorePeriodicTest,"ax",%progbits
 794              		.align	2
 795              		.global	vInterruptSemaphorePeriodicTest
 796              		.thumb
 797              		.thumb_func
 798              		.type	vInterruptSemaphorePeriodicTest, %function
 799              	vInterruptSemaphorePeriodicTest:
 800              	.LFB74:
 503:..\Common\Minimal/IntSemTest.c **** }
 504:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 505:..\Common\Minimal/IntSemTest.c **** 
 506:..\Common\Minimal/IntSemTest.c **** void vInterruptSemaphorePeriodicTest( void )
 507:..\Common\Minimal/IntSemTest.c **** {
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 24


 801              		.loc 1 507 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 8
 804              		@ frame_needed = 1, uses_anonymous_args = 0
 805 0000 80B5     		push	{r7, lr}
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 7, -8
 808              		.cfi_offset 14, -4
 809 0002 82B0     		sub	sp, sp, #8
 810              		.cfi_def_cfa_offset 16
 811 0004 00AF     		add	r7, sp, #0
 812              		.cfi_def_cfa_register 7
 508:..\Common\Minimal/IntSemTest.c **** static TickType_t xLastGiveTime = 0;
 509:..\Common\Minimal/IntSemTest.c **** BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 813              		.loc 1 509 0
 814 0006 0023     		movs	r3, #0
 815 0008 3B60     		str	r3, [r7]
 510:..\Common\Minimal/IntSemTest.c **** TickType_t xTimeNow;
 511:..\Common\Minimal/IntSemTest.c **** 
 512:..\Common\Minimal/IntSemTest.c **** 	/* No mutual exclusion on xOkToGiveMutex, but this is only test code (and
 513:..\Common\Minimal/IntSemTest.c **** 	only executed on a 32-bit architecture) so ignore that in this case. */
 514:..\Common\Minimal/IntSemTest.c **** 	xTimeNow = xTaskGetTickCountFromISR();
 816              		.loc 1 514 0
 817 000a FFF7FEFF 		bl	xTaskGetTickCountFromISR
 818 000e 7860     		str	r0, [r7, #4]
 515:..\Common\Minimal/IntSemTest.c **** 	if( ( ( TickType_t ) ( xTimeNow - xLastGiveTime ) ) >= pdMS_TO_TICKS( intsemINTERRUPT_MUTEX_GIVE_P
 819              		.loc 1 515 0
 820 0010 104B     		ldr	r3, .L55
 821 0012 1B68     		ldr	r3, [r3]
 822 0014 7A68     		ldr	r2, [r7, #4]
 823 0016 D31A     		subs	r3, r2, r3
 824 0018 632B     		cmp	r3, #99
 825 001a 17D9     		bls	.L54
 516:..\Common\Minimal/IntSemTest.c **** 	{
 517:..\Common\Minimal/IntSemTest.c **** 		configASSERT( xISRMutex );
 518:..\Common\Minimal/IntSemTest.c **** 		if( xOkToGiveMutex != pdFALSE )
 826              		.loc 1 518 0
 827 001c 0E4B     		ldr	r3, .L55+4
 828 001e 1B68     		ldr	r3, [r3]
 829 0020 002B     		cmp	r3, #0
 830 0022 05D0     		beq	.L52
 519:..\Common\Minimal/IntSemTest.c **** 		{
 520:..\Common\Minimal/IntSemTest.c **** 			/* Null is used as the second parameter in this give, and non-NULL
 521:..\Common\Minimal/IntSemTest.c **** 			in the other gives for code coverage reasons. */
 522:..\Common\Minimal/IntSemTest.c **** 			xSemaphoreGiveFromISR( xISRMutex, NULL );
 831              		.loc 1 522 0
 832 0024 0D4B     		ldr	r3, .L55+8
 833 0026 1B68     		ldr	r3, [r3]
 834 0028 0021     		movs	r1, #0
 835 002a 1846     		mov	r0, r3
 836 002c FFF7FEFF 		bl	xQueueGiveFromISR
 837              	.L52:
 523:..\Common\Minimal/IntSemTest.c **** 
 524:..\Common\Minimal/IntSemTest.c **** 			/* Second give attempt should fail. */
 525:..\Common\Minimal/IntSemTest.c **** 			configASSERT( xSemaphoreGiveFromISR( xISRMutex, &xHigherPriorityTaskWoken ) == pdFAIL );
 526:..\Common\Minimal/IntSemTest.c **** 		}
 527:..\Common\Minimal/IntSemTest.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 25


 528:..\Common\Minimal/IntSemTest.c **** 		if( xOkToGiveCountingSemaphore != pdFALSE )
 838              		.loc 1 528 0
 839 0030 0B4B     		ldr	r3, .L55+12
 840 0032 1B68     		ldr	r3, [r3]
 841 0034 002B     		cmp	r3, #0
 842 0036 06D0     		beq	.L53
 529:..\Common\Minimal/IntSemTest.c **** 		{
 530:..\Common\Minimal/IntSemTest.c **** 			xSemaphoreGiveFromISR( xISRCountingSemaphore, &xHigherPriorityTaskWoken );
 843              		.loc 1 530 0
 844 0038 0A4B     		ldr	r3, .L55+16
 845 003a 1B68     		ldr	r3, [r3]
 846 003c 3A46     		mov	r2, r7
 847 003e 1146     		mov	r1, r2
 848 0040 1846     		mov	r0, r3
 849 0042 FFF7FEFF 		bl	xQueueGiveFromISR
 850              	.L53:
 531:..\Common\Minimal/IntSemTest.c **** 		}
 532:..\Common\Minimal/IntSemTest.c **** 		xLastGiveTime = xTimeNow;
 851              		.loc 1 532 0
 852 0046 034A     		ldr	r2, .L55
 853 0048 7B68     		ldr	r3, [r7, #4]
 854 004a 1360     		str	r3, [r2]
 855              	.L54:
 533:..\Common\Minimal/IntSemTest.c **** 	}
 534:..\Common\Minimal/IntSemTest.c **** 
 535:..\Common\Minimal/IntSemTest.c **** 	/* Remove compiler warnings about the value being set but not used. */
 536:..\Common\Minimal/IntSemTest.c **** 	( void ) xHigherPriorityTaskWoken;
 537:..\Common\Minimal/IntSemTest.c **** }
 856              		.loc 1 537 0
 857 004c 00BF     		nop
 858 004e 0837     		adds	r7, r7, #8
 859              		.cfi_def_cfa_offset 8
 860 0050 BD46     		mov	sp, r7
 861              		.cfi_def_cfa_register 13
 862              		@ sp needed
 863 0052 80BD     		pop	{r7, pc}
 864              	.L56:
 865              		.align	2
 866              	.L55:
 867 0054 24000000 		.word	xLastGiveTime.7583
 868 0058 1C000000 		.word	xOkToGiveMutex
 869 005c 10000000 		.word	xISRMutex
 870 0060 20000000 		.word	xOkToGiveCountingSemaphore
 871 0064 14000000 		.word	xISRCountingSemaphore
 872              		.cfi_endproc
 873              	.LFE74:
 874              		.size	vInterruptSemaphorePeriodicTest, .-vInterruptSemaphorePeriodicTest
 875              		.section	.text.xAreInterruptSemaphoreTasksStillRunning,"ax",%progbits
 876              		.align	2
 877              		.global	xAreInterruptSemaphoreTasksStillRunning
 878              		.thumb
 879              		.thumb_func
 880              		.type	xAreInterruptSemaphoreTasksStillRunning, %function
 881              	xAreInterruptSemaphoreTasksStillRunning:
 882              	.LFB75:
 538:..\Common\Minimal/IntSemTest.c **** /*-----------------------------------------------------------*/
 539:..\Common\Minimal/IntSemTest.c **** 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 26


 540:..\Common\Minimal/IntSemTest.c **** /* This is called to check that all the created tasks are still running. */
 541:..\Common\Minimal/IntSemTest.c **** BaseType_t xAreInterruptSemaphoreTasksStillRunning( void )
 542:..\Common\Minimal/IntSemTest.c **** {
 883              		.loc 1 542 0
 884              		.cfi_startproc
 885              		@ args = 0, pretend = 0, frame = 0
 886              		@ frame_needed = 1, uses_anonymous_args = 0
 887              		@ link register save eliminated.
 888 0000 80B4     		push	{r7}
 889              		.cfi_def_cfa_offset 4
 890              		.cfi_offset 7, -4
 891 0002 00AF     		add	r7, sp, #0
 892              		.cfi_def_cfa_register 7
 543:..\Common\Minimal/IntSemTest.c **** static uint32_t ulLastMasterLoopCounter = 0, ulLastCountingSemaphoreLoops = 0;
 544:..\Common\Minimal/IntSemTest.c **** 
 545:..\Common\Minimal/IntSemTest.c **** 	/* If the demo tasks are running then it is expected that the loop counters
 546:..\Common\Minimal/IntSemTest.c **** 	will have changed since this function was last called. */
 547:..\Common\Minimal/IntSemTest.c **** 	if( ulLastMasterLoopCounter == ulMasterLoops )
 893              		.loc 1 547 0
 894 0004 134B     		ldr	r3, .L61
 895 0006 1A68     		ldr	r2, [r3]
 896 0008 134B     		ldr	r3, .L61+4
 897 000a 1B68     		ldr	r3, [r3]
 898 000c 9A42     		cmp	r2, r3
 899 000e 02D1     		bne	.L58
 548:..\Common\Minimal/IntSemTest.c **** 	{
 549:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 900              		.loc 1 549 0
 901 0010 124B     		ldr	r3, .L61+8
 902 0012 0122     		movs	r2, #1
 903 0014 1A60     		str	r2, [r3]
 904              	.L58:
 550:..\Common\Minimal/IntSemTest.c **** 	}
 551:..\Common\Minimal/IntSemTest.c **** 
 552:..\Common\Minimal/IntSemTest.c **** 	ulLastMasterLoopCounter = ulMasterLoops;
 905              		.loc 1 552 0
 906 0016 104B     		ldr	r3, .L61+4
 907 0018 1B68     		ldr	r3, [r3]
 908 001a 0E4A     		ldr	r2, .L61
 909 001c 1360     		str	r3, [r2]
 553:..\Common\Minimal/IntSemTest.c **** 
 554:..\Common\Minimal/IntSemTest.c **** 	if( ulLastCountingSemaphoreLoops == ulCountingSemaphoreLoops )
 910              		.loc 1 554 0
 911 001e 104B     		ldr	r3, .L61+12
 912 0020 1A68     		ldr	r2, [r3]
 913 0022 104B     		ldr	r3, .L61+16
 914 0024 1B68     		ldr	r3, [r3]
 915 0026 9A42     		cmp	r2, r3
 916 0028 02D1     		bne	.L59
 555:..\Common\Minimal/IntSemTest.c **** 	{
 556:..\Common\Minimal/IntSemTest.c **** 		xErrorDetected = pdTRUE;
 917              		.loc 1 556 0
 918 002a 0C4B     		ldr	r3, .L61+8
 919 002c 0122     		movs	r2, #1
 920 002e 1A60     		str	r2, [r3]
 921              	.L59:
 557:..\Common\Minimal/IntSemTest.c **** 	}
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 27


 558:..\Common\Minimal/IntSemTest.c **** 
 559:..\Common\Minimal/IntSemTest.c **** 	ulLastCountingSemaphoreLoops = ulCountingSemaphoreLoops++;
 922              		.loc 1 559 0
 923 0030 0C4B     		ldr	r3, .L61+16
 924 0032 1B68     		ldr	r3, [r3]
 925 0034 5A1C     		adds	r2, r3, #1
 926 0036 0B49     		ldr	r1, .L61+16
 927 0038 0A60     		str	r2, [r1]
 928 003a 094A     		ldr	r2, .L61+12
 929 003c 1360     		str	r3, [r2]
 560:..\Common\Minimal/IntSemTest.c **** 
 561:..\Common\Minimal/IntSemTest.c **** 	/* Errors detected in the task itself will have latched xErrorDetected
 562:..\Common\Minimal/IntSemTest.c **** 	to true. */
 563:..\Common\Minimal/IntSemTest.c **** 
 564:..\Common\Minimal/IntSemTest.c **** 	return ( BaseType_t ) !xErrorDetected;
 930              		.loc 1 564 0
 931 003e 074B     		ldr	r3, .L61+8
 932 0040 1B68     		ldr	r3, [r3]
 933 0042 002B     		cmp	r3, #0
 934 0044 0CBF     		ite	eq
 935 0046 0123     		moveq	r3, #1
 936 0048 0023     		movne	r3, #0
 937 004a DBB2     		uxtb	r3, r3
 565:..\Common\Minimal/IntSemTest.c **** }
 938              		.loc 1 565 0
 939 004c 1846     		mov	r0, r3
 940 004e BD46     		mov	sp, r7
 941              		.cfi_def_cfa_register 13
 942              		@ sp needed
 943 0050 80BC     		pop	{r7}
 944              		.cfi_restore 7
 945              		.cfi_def_cfa_offset 0
 946 0052 7047     		bx	lr
 947              	.L62:
 948              		.align	2
 949              	.L61:
 950 0054 28000000 		.word	ulLastMasterLoopCounter.7589
 951 0058 04000000 		.word	ulMasterLoops
 952 005c 00000000 		.word	xErrorDetected
 953 0060 2C000000 		.word	ulLastCountingSemaphoreLoops.7590
 954 0064 08000000 		.word	ulCountingSemaphoreLoops
 955              		.cfi_endproc
 956              	.LFE75:
 957              		.size	xAreInterruptSemaphoreTasksStillRunning, .-xAreInterruptSemaphoreTasksStillRunning
 958              		.bss
 959              		.align	2
 960              	xLastGiveTime.7583:
 961 0024 00000000 		.space	4
 962              		.align	2
 963              	ulLastMasterLoopCounter.7589:
 964 0028 00000000 		.space	4
 965              		.align	2
 966              	ulLastCountingSemaphoreLoops.7590:
 967 002c 00000000 		.space	4
 968              		.text
 969              	.Letext0:
 970              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 28


 971              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 972              		.file 4 ".\\Tracer/sniffPayload.h"
 973              		.file 5 ".\\Tracer/selfFIFO.h"
 974              		.file 6 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 975              		.file 7 "..\\Source\\include/task.h"
 976              		.file 8 "..\\Source\\include/queue.h"
 977              		.file 9 "..\\Source\\include/semphr.h"
 978              		.file 10 "Generated_Source\\PSoC5/core_cm3.h"
 979              		.file 11 ".\\Tracer/sniffTask.h"
 980              		.section	.debug_info,"",%progbits
 981              	.Ldebug_info0:
 982 0000 C6040000 		.4byte	0x4c6
 983 0004 0400     		.2byte	0x4
 984 0006 00000000 		.4byte	.Ldebug_abbrev0
 985 000a 04       		.byte	0x4
 986 000b 01       		.uleb128 0x1
 987 000c 9F000000 		.4byte	.LASF76
 988 0010 0C       		.byte	0xc
 989 0011 9F040000 		.4byte	.LASF77
 990 0015 3F050000 		.4byte	.LASF78
 991 0019 00000000 		.4byte	.Ldebug_ranges0+0
 992 001d 00000000 		.4byte	0
 993 0021 00000000 		.4byte	.Ldebug_line0
 994 0025 02       		.uleb128 0x2
 995 0026 04       		.byte	0x4
 996 0027 07       		.byte	0x7
 997 0028 3F030000 		.4byte	.LASF0
 998 002c 03       		.uleb128 0x3
 999 002d 04       		.byte	0x4
 1000 002e 05       		.byte	0x5
 1001 002f 696E7400 		.ascii	"int\000"
 1002 0033 02       		.uleb128 0x2
 1003 0034 08       		.byte	0x8
 1004 0035 05       		.byte	0x5
 1005 0036 0F020000 		.4byte	.LASF1
 1006 003a 02       		.uleb128 0x2
 1007 003b 08       		.byte	0x8
 1008 003c 04       		.byte	0x4
 1009 003d 82020000 		.4byte	.LASF2
 1010 0041 02       		.uleb128 0x2
 1011 0042 01       		.byte	0x1
 1012 0043 06       		.byte	0x6
 1013 0044 FA020000 		.4byte	.LASF3
 1014 0048 04       		.uleb128 0x4
 1015 0049 46020000 		.4byte	.LASF7
 1016 004d 02       		.byte	0x2
 1017 004e 1D       		.byte	0x1d
 1018 004f 53000000 		.4byte	0x53
 1019 0053 02       		.uleb128 0x2
 1020 0054 01       		.byte	0x1
 1021 0055 08       		.byte	0x8
 1022 0056 A0020000 		.4byte	.LASF4
 1023 005a 02       		.uleb128 0x2
 1024 005b 02       		.byte	0x2
 1025 005c 05       		.byte	0x5
 1026 005d 41000000 		.4byte	.LASF5
 1027 0061 02       		.uleb128 0x2
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 29


 1028 0062 02       		.byte	0x2
 1029 0063 07       		.byte	0x7
 1030 0064 C7030000 		.4byte	.LASF6
 1031 0068 04       		.uleb128 0x4
 1032 0069 C3040000 		.4byte	.LASF8
 1033 006d 02       		.byte	0x2
 1034 006e 3F       		.byte	0x3f
 1035 006f 73000000 		.4byte	0x73
 1036 0073 02       		.uleb128 0x2
 1037 0074 04       		.byte	0x4
 1038 0075 05       		.byte	0x5
 1039 0076 28020000 		.4byte	.LASF9
 1040 007a 04       		.uleb128 0x4
 1041 007b 4B010000 		.4byte	.LASF10
 1042 007f 02       		.byte	0x2
 1043 0080 41       		.byte	0x41
 1044 0081 85000000 		.4byte	0x85
 1045 0085 02       		.uleb128 0x2
 1046 0086 04       		.byte	0x4
 1047 0087 07       		.byte	0x7
 1048 0088 2A040000 		.4byte	.LASF11
 1049 008c 02       		.uleb128 0x2
 1050 008d 08       		.byte	0x8
 1051 008e 07       		.byte	0x7
 1052 008f 06030000 		.4byte	.LASF12
 1053 0093 02       		.uleb128 0x2
 1054 0094 04       		.byte	0x4
 1055 0095 07       		.byte	0x7
 1056 0096 61000000 		.4byte	.LASF13
 1057 009a 05       		.uleb128 0x5
 1058 009b 04       		.byte	0x4
 1059 009c 02       		.uleb128 0x2
 1060 009d 01       		.byte	0x1
 1061 009e 08       		.byte	0x8
 1062 009f B1030000 		.4byte	.LASF14
 1063 00a3 04       		.uleb128 0x4
 1064 00a4 8F010000 		.4byte	.LASF15
 1065 00a8 03       		.byte	0x3
 1066 00a9 18       		.byte	0x18
 1067 00aa 48000000 		.4byte	0x48
 1068 00ae 04       		.uleb128 0x4
 1069 00af BF030000 		.4byte	.LASF16
 1070 00b3 03       		.byte	0x3
 1071 00b4 2C       		.byte	0x2c
 1072 00b5 68000000 		.4byte	0x68
 1073 00b9 04       		.uleb128 0x4
 1074 00ba 36030000 		.4byte	.LASF17
 1075 00be 03       		.byte	0x3
 1076 00bf 30       		.byte	0x30
 1077 00c0 7A000000 		.4byte	0x7a
 1078 00c4 02       		.uleb128 0x2
 1079 00c5 04       		.byte	0x4
 1080 00c6 04       		.byte	0x4
 1081 00c7 E5010000 		.4byte	.LASF18
 1082 00cb 02       		.uleb128 0x2
 1083 00cc 08       		.byte	0x8
 1084 00cd 04       		.byte	0x4
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 30


 1085 00ce 5C040000 		.4byte	.LASF19
 1086 00d2 06       		.uleb128 0x6
 1087 00d3 B9000000 		.4byte	0xb9
 1088 00d7 07       		.uleb128 0x7
 1089 00d8 01       		.byte	0x1
 1090 00d9 53000000 		.4byte	0x53
 1091 00dd 04       		.byte	0x4
 1092 00de 10       		.byte	0x10
 1093 00df 0E010000 		.4byte	0x10e
 1094 00e3 08       		.uleb128 0x8
 1095 00e4 5E020000 		.4byte	.LASF20
 1096 00e8 00       		.byte	0
 1097 00e9 08       		.uleb128 0x8
 1098 00ea 6A000000 		.4byte	.LASF21
 1099 00ee 01       		.byte	0x1
 1100 00ef 08       		.uleb128 0x8
 1101 00f0 64020000 		.4byte	.LASF22
 1102 00f4 02       		.byte	0x2
 1103 00f5 08       		.uleb128 0x8
 1104 00f6 63040000 		.4byte	.LASF23
 1105 00fa 03       		.byte	0x3
 1106 00fb 08       		.uleb128 0x8
 1107 00fc BD020000 		.4byte	.LASF24
 1108 0100 04       		.byte	0x4
 1109 0101 08       		.uleb128 0x8
 1110 0102 BE040000 		.4byte	.LASF25
 1111 0106 05       		.byte	0x5
 1112 0107 08       		.uleb128 0x8
 1113 0108 E6030000 		.4byte	.LASF26
 1114 010c 06       		.byte	0x6
 1115 010d 00       		.byte	0
 1116 010e 04       		.uleb128 0x4
 1117 010f D3010000 		.4byte	.LASF27
 1118 0113 04       		.byte	0x4
 1119 0114 10       		.byte	0x10
 1120 0115 D7000000 		.4byte	0xd7
 1121 0119 09       		.uleb128 0x9
 1122 011a 04       		.byte	0x4
 1123 011b 04       		.byte	0x4
 1124 011c 86       		.byte	0x86
 1125 011d 52010000 		.4byte	0x152
 1126 0121 0A       		.uleb128 0xa
 1127 0122 B6030000 		.4byte	.LASF28
 1128 0126 04       		.byte	0x4
 1129 0127 87       		.byte	0x87
 1130 0128 A3000000 		.4byte	0xa3
 1131 012c 00       		.byte	0
 1132 012d 0A       		.uleb128 0xa
 1133 012e 00000000 		.4byte	.LASF29
 1134 0132 04       		.byte	0x4
 1135 0133 88       		.byte	0x88
 1136 0134 A3000000 		.4byte	0xa3
 1137 0138 01       		.byte	0x1
 1138 0139 0A       		.uleb128 0xa
 1139 013a CD040000 		.4byte	.LASF30
 1140 013e 04       		.byte	0x4
 1141 013f 89       		.byte	0x89
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 31


 1142 0140 0E010000 		.4byte	0x10e
 1143 0144 02       		.byte	0x2
 1144 0145 0A       		.uleb128 0xa
 1145 0146 DE010000 		.4byte	.LASF31
 1146 014a 04       		.byte	0x4
 1147 014b 8A       		.byte	0x8a
 1148 014c A3000000 		.4byte	0xa3
 1149 0150 03       		.byte	0x3
 1150 0151 00       		.byte	0
 1151 0152 04       		.uleb128 0x4
 1152 0153 4C030000 		.4byte	.LASF32
 1153 0157 04       		.byte	0x4
 1154 0158 8B       		.byte	0x8b
 1155 0159 19010000 		.4byte	0x119
 1156 015d 09       		.uleb128 0x9
 1157 015e 0E       		.byte	0xe
 1158 015f 04       		.byte	0x4
 1159 0160 95       		.byte	0x95
 1160 0161 8A010000 		.4byte	0x18a
 1161 0165 0A       		.uleb128 0xa
 1162 0166 34000000 		.4byte	.LASF33
 1163 016a 04       		.byte	0x4
 1164 016b 96       		.byte	0x96
 1165 016c A3000000 		.4byte	0xa3
 1166 0170 00       		.byte	0
 1167 0171 0A       		.uleb128 0xa
 1168 0172 A3010000 		.4byte	.LASF34
 1169 0176 04       		.byte	0x4
 1170 0177 97       		.byte	0x97
 1171 0178 A3000000 		.4byte	0xa3
 1172 017c 01       		.byte	0x1
 1173 017d 0A       		.uleb128 0xa
 1174 017e 77020000 		.4byte	.LASF35
 1175 0182 04       		.byte	0x4
 1176 0183 98       		.byte	0x98
 1177 0184 8A010000 		.4byte	0x18a
 1178 0188 02       		.byte	0x2
 1179 0189 00       		.byte	0
 1180 018a 0B       		.uleb128 0xb
 1181 018b 9C000000 		.4byte	0x9c
 1182 018f 9A010000 		.4byte	0x19a
 1183 0193 0C       		.uleb128 0xc
 1184 0194 93000000 		.4byte	0x93
 1185 0198 0B       		.byte	0xb
 1186 0199 00       		.byte	0
 1187 019a 04       		.uleb128 0x4
 1188 019b EB010000 		.4byte	.LASF36
 1189 019f 04       		.byte	0x4
 1190 01a0 99       		.byte	0x99
 1191 01a1 5D010000 		.4byte	0x15d
 1192 01a5 0D       		.uleb128 0xd
 1193 01a6 1C01     		.2byte	0x11c
 1194 01a8 04       		.byte	0x4
 1195 01a9 A3       		.byte	0xa3
 1196 01aa C7010000 		.4byte	0x1c7
 1197 01ae 0A       		.uleb128 0xa
 1198 01af 56010000 		.4byte	.LASF37
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 32


 1199 01b3 04       		.byte	0x4
 1200 01b4 A4       		.byte	0xa4
 1201 01b5 52010000 		.4byte	0x152
 1202 01b9 00       		.byte	0
 1203 01ba 0A       		.uleb128 0xa
 1204 01bb 97010000 		.4byte	.LASF38
 1205 01bf 04       		.byte	0x4
 1206 01c0 A5       		.byte	0xa5
 1207 01c1 C7010000 		.4byte	0x1c7
 1208 01c5 04       		.byte	0x4
 1209 01c6 00       		.byte	0
 1210 01c7 0B       		.uleb128 0xb
 1211 01c8 9A010000 		.4byte	0x19a
 1212 01cc D7010000 		.4byte	0x1d7
 1213 01d0 0C       		.uleb128 0xc
 1214 01d1 93000000 		.4byte	0x93
 1215 01d5 13       		.byte	0x13
 1216 01d6 00       		.byte	0
 1217 01d7 04       		.uleb128 0x4
 1218 01d8 12050000 		.4byte	.LASF39
 1219 01dc 04       		.byte	0x4
 1220 01dd A6       		.byte	0xa6
 1221 01de A5010000 		.4byte	0x1a5
 1222 01e2 0E       		.uleb128 0xe
 1223 01e3 38050000 		.4byte	.LASF79
 1224 01e7 0210     		.2byte	0x1002
 1225 01e9 05       		.byte	0x5
 1226 01ea 0C       		.byte	0xc
 1227 01eb 16020000 		.4byte	0x216
 1228 01ef 0A       		.uleb128 0xa
 1229 01f0 FC030000 		.4byte	.LASF40
 1230 01f4 05       		.byte	0x5
 1231 01f5 0D       		.byte	0xd
 1232 01f6 16020000 		.4byte	0x216
 1233 01fa 00       		.byte	0
 1234 01fb 0F       		.uleb128 0xf
 1235 01fc F5020000 		.4byte	.LASF41
 1236 0200 05       		.byte	0x5
 1237 0201 0E       		.byte	0xe
 1238 0202 A3000000 		.4byte	0xa3
 1239 0206 0010     		.2byte	0x1000
 1240 0208 0F       		.uleb128 0xf
 1241 0209 27000000 		.4byte	.LASF42
 1242 020d 05       		.byte	0x5
 1243 020e 0F       		.byte	0xf
 1244 020f A3000000 		.4byte	0xa3
 1245 0213 0110     		.2byte	0x1001
 1246 0215 00       		.byte	0
 1247 0216 0B       		.uleb128 0xb
 1248 0217 A3000000 		.4byte	0xa3
 1249 021b 27020000 		.4byte	0x227
 1250 021f 10       		.uleb128 0x10
 1251 0220 93000000 		.4byte	0x93
 1252 0224 FF0F     		.2byte	0xfff
 1253 0226 00       		.byte	0
 1254 0227 04       		.uleb128 0x4
 1255 0228 5D030000 		.4byte	.LASF43
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 33


 1256 022c 06       		.byte	0x6
 1257 022d 62       		.byte	0x62
 1258 022e 73000000 		.4byte	0x73
 1259 0232 04       		.uleb128 0x4
 1260 0233 DA030000 		.4byte	.LASF44
 1261 0237 06       		.byte	0x6
 1262 0238 63       		.byte	0x63
 1263 0239 85000000 		.4byte	0x85
 1264 023d 04       		.uleb128 0x4
 1265 023e 1D020000 		.4byte	.LASF45
 1266 0242 06       		.byte	0x6
 1267 0243 69       		.byte	0x69
 1268 0244 B9000000 		.4byte	0xb9
 1269 0248 04       		.uleb128 0x4
 1270 0249 70000000 		.4byte	.LASF46
 1271 024d 07       		.byte	0x7
 1272 024e 67       		.byte	0x67
 1273 024f 9A000000 		.4byte	0x9a
 1274 0253 04       		.uleb128 0x4
 1275 0254 50020000 		.4byte	.LASF47
 1276 0258 08       		.byte	0x8
 1277 0259 58       		.byte	0x58
 1278 025a 9A000000 		.4byte	0x9a
 1279 025e 04       		.uleb128 0x4
 1280 025f 8E020000 		.4byte	.LASF48
 1281 0263 09       		.byte	0x9
 1282 0264 4F       		.byte	0x4f
 1283 0265 53020000 		.4byte	0x253
 1284 0269 11       		.uleb128 0x11
 1285 026a 2D010000 		.4byte	.LASF80
 1286 026e 01       		.byte	0x1
 1287 026f AD       		.byte	0xad
 1288 0270 00000000 		.4byte	.LFB68
 1289 0274 98000000 		.4byte	.LFE68-.LFB68
 1290 0278 01       		.uleb128 0x1
 1291 0279 9C       		.byte	0x9c
 1292 027a 12       		.uleb128 0x12
 1293 027b 63010000 		.4byte	.LASF51
 1294 027f 01       		.byte	0x1
 1295 0280 C4       		.byte	0xc4
 1296 0281 00000000 		.4byte	.LFB69
 1297 0285 38000000 		.4byte	.LFE69-.LFB69
 1298 0289 01       		.uleb128 0x1
 1299 028a 9C       		.byte	0x9c
 1300 028b 9E020000 		.4byte	0x29e
 1301 028f 13       		.uleb128 0x13
 1302 0290 68030000 		.4byte	.LASF53
 1303 0294 01       		.byte	0x1
 1304 0295 C4       		.byte	0xc4
 1305 0296 9A000000 		.4byte	0x9a
 1306 029a 02       		.uleb128 0x2
 1307 029b 91       		.byte	0x91
 1308 029c 74       		.sleb128 -12
 1309 029d 00       		.byte	0
 1310 029e 14       		.uleb128 0x14
 1311 029f F2010000 		.4byte	.LASF49
 1312 02a3 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 34


 1313 02a4 DA       		.byte	0xda
 1314 02a5 00000000 		.4byte	.LFB70
 1315 02a9 1C010000 		.4byte	.LFE70-.LFB70
 1316 02ad 01       		.uleb128 0x1
 1317 02ae 9C       		.byte	0x9c
 1318 02af 15       		.uleb128 0x15
 1319 02b0 75030000 		.4byte	.LASF50
 1320 02b4 01       		.byte	0x1
 1321 02b5 3E01     		.2byte	0x13e
 1322 02b7 00000000 		.4byte	.LFB71
 1323 02bb 1C010000 		.4byte	.LFE71-.LFB71
 1324 02bf 01       		.uleb128 0x1
 1325 02c0 9C       		.byte	0x9c
 1326 02c1 16       		.uleb128 0x16
 1327 02c2 0E000000 		.4byte	.LASF52
 1328 02c6 01       		.byte	0x1
 1329 02c7 9D01     		.2byte	0x19d
 1330 02c9 00000000 		.4byte	.LFB72
 1331 02cd 50000000 		.4byte	.LFE72-.LFB72
 1332 02d1 01       		.uleb128 0x1
 1333 02d2 9C       		.byte	0x9c
 1334 02d3 E7020000 		.4byte	0x2e7
 1335 02d7 17       		.uleb128 0x17
 1336 02d8 68030000 		.4byte	.LASF53
 1337 02dc 01       		.byte	0x1
 1338 02dd 9D01     		.2byte	0x19d
 1339 02df 9A000000 		.4byte	0x9a
 1340 02e3 02       		.uleb128 0x2
 1341 02e4 91       		.byte	0x91
 1342 02e5 74       		.sleb128 -12
 1343 02e6 00       		.byte	0
 1344 02e7 16       		.uleb128 0x16
 1345 02e8 3C040000 		.4byte	.LASF54
 1346 02ec 01       		.byte	0x1
 1347 02ed B801     		.2byte	0x1b8
 1348 02ef 00000000 		.4byte	.LFB73
 1349 02f3 F0000000 		.4byte	.LFE73-.LFB73
 1350 02f7 01       		.uleb128 0x1
 1351 02f8 9C       		.byte	0x9c
 1352 02f9 2B030000 		.4byte	0x32b
 1353 02fd 17       		.uleb128 0x17
 1354 02fe 68030000 		.4byte	.LASF53
 1355 0302 01       		.byte	0x1
 1356 0303 B801     		.2byte	0x1b8
 1357 0305 9A000000 		.4byte	0x9a
 1358 0309 02       		.uleb128 0x2
 1359 030a 91       		.byte	0x91
 1360 030b 6C       		.sleb128 -20
 1361 030c 18       		.uleb128 0x18
 1362 030d 2D000000 		.4byte	.LASF55
 1363 0311 01       		.byte	0x1
 1364 0312 BA01     		.2byte	0x1ba
 1365 0314 27020000 		.4byte	0x227
 1366 0318 02       		.uleb128 0x2
 1367 0319 91       		.byte	0x91
 1368 031a 74       		.sleb128 -12
 1369 031b 18       		.uleb128 0x18
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 35


 1370 031c 3F020000 		.4byte	.LASF56
 1371 0320 01       		.byte	0x1
 1372 0321 BB01     		.2byte	0x1bb
 1373 0323 2B030000 		.4byte	0x32b
 1374 0327 02       		.uleb128 0x2
 1375 0328 91       		.byte	0x91
 1376 0329 70       		.sleb128 -16
 1377 032a 00       		.byte	0
 1378 032b 19       		.uleb128 0x19
 1379 032c 3D020000 		.4byte	0x23d
 1380 0330 1A       		.uleb128 0x1a
 1381 0331 7F040000 		.4byte	.LASF81
 1382 0335 01       		.byte	0x1
 1383 0336 FA01     		.2byte	0x1fa
 1384 0338 00000000 		.4byte	.LFB74
 1385 033c 68000000 		.4byte	.LFE74-.LFB74
 1386 0340 01       		.uleb128 0x1
 1387 0341 9C       		.byte	0x9c
 1388 0342 77030000 		.4byte	0x377
 1389 0346 18       		.uleb128 0x18
 1390 0347 E7040000 		.4byte	.LASF57
 1391 034b 01       		.byte	0x1
 1392 034c FC01     		.2byte	0x1fc
 1393 034e 3D020000 		.4byte	0x23d
 1394 0352 05       		.uleb128 0x5
 1395 0353 03       		.byte	0x3
 1396 0354 24000000 		.4byte	xLastGiveTime.7583
 1397 0358 18       		.uleb128 0x18
 1398 0359 1D030000 		.4byte	.LASF58
 1399 035d 01       		.byte	0x1
 1400 035e FD01     		.2byte	0x1fd
 1401 0360 27020000 		.4byte	0x227
 1402 0364 02       		.uleb128 0x2
 1403 0365 91       		.byte	0x91
 1404 0366 70       		.sleb128 -16
 1405 0367 18       		.uleb128 0x18
 1406 0368 21040000 		.4byte	.LASF59
 1407 036c 01       		.byte	0x1
 1408 036d FE01     		.2byte	0x1fe
 1409 036f 3D020000 		.4byte	0x23d
 1410 0373 02       		.uleb128 0x2
 1411 0374 91       		.byte	0x91
 1412 0375 74       		.sleb128 -12
 1413 0376 00       		.byte	0
 1414 0377 1B       		.uleb128 0x1b
 1415 0378 CD020000 		.4byte	.LASF82
 1416 037c 01       		.byte	0x1
 1417 037d 1D02     		.2byte	0x21d
 1418 037f 27020000 		.4byte	0x227
 1419 0383 00000000 		.4byte	.LFB75
 1420 0387 68000000 		.4byte	.LFE75-.LFB75
 1421 038b 01       		.uleb128 0x1
 1422 038c 9C       		.byte	0x9c
 1423 038d B6030000 		.4byte	0x3b6
 1424 0391 18       		.uleb128 0x18
 1425 0392 87000000 		.4byte	.LASF60
 1426 0396 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 36


 1427 0397 1F02     		.2byte	0x21f
 1428 0399 B9000000 		.4byte	0xb9
 1429 039d 05       		.uleb128 0x5
 1430 039e 03       		.byte	0x3
 1431 039f 28000000 		.4byte	ulLastMasterLoopCounter.7589
 1432 03a3 18       		.uleb128 0x18
 1433 03a4 F5040000 		.4byte	.LASF61
 1434 03a8 01       		.byte	0x1
 1435 03a9 1F02     		.2byte	0x21f
 1436 03ab B9000000 		.4byte	0xb9
 1437 03af 05       		.uleb128 0x5
 1438 03b0 03       		.byte	0x3
 1439 03b1 2C000000 		.4byte	ulLastCountingSemaphoreLoops.7590
 1440 03b5 00       		.byte	0
 1441 03b6 1C       		.uleb128 0x1c
 1442 03b7 AE020000 		.4byte	.LASF62
 1443 03bb 01       		.byte	0x1
 1444 03bc 8D       		.byte	0x8d
 1445 03bd C7030000 		.4byte	0x3c7
 1446 03c1 05       		.uleb128 0x5
 1447 03c2 03       		.byte	0x3
 1448 03c3 00000000 		.4byte	xErrorDetected
 1449 03c7 06       		.uleb128 0x6
 1450 03c8 27020000 		.4byte	0x227
 1451 03cc 1C       		.uleb128 0x1c
 1452 03cd 2A050000 		.4byte	.LASF63
 1453 03d1 01       		.byte	0x1
 1454 03d2 91       		.byte	0x91
 1455 03d3 D2000000 		.4byte	0xd2
 1456 03d7 05       		.uleb128 0x5
 1457 03d8 03       		.byte	0x3
 1458 03d9 04000000 		.4byte	ulMasterLoops
 1459 03dd 1C       		.uleb128 0x1c
 1460 03de 08040000 		.4byte	.LASF64
 1461 03e2 01       		.byte	0x1
 1462 03e3 91       		.byte	0x91
 1463 03e4 D2000000 		.4byte	0xd2
 1464 03e8 05       		.uleb128 0x5
 1465 03e9 03       		.byte	0x3
 1466 03ea 08000000 		.4byte	ulCountingSemaphoreLoops
 1467 03ee 1C       		.uleb128 0x1c
 1468 03ef C6010000 		.4byte	.LASF65
 1469 03f3 01       		.byte	0x1
 1470 03f4 94       		.byte	0x94
 1471 03f5 48020000 		.4byte	0x248
 1472 03f9 05       		.uleb128 0x5
 1473 03fa 03       		.byte	0x3
 1474 03fb 0C000000 		.4byte	xSlaveHandle
 1475 03ff 1C       		.uleb128 0x1c
 1476 0400 7D000000 		.4byte	.LASF66
 1477 0404 01       		.byte	0x1
 1478 0405 99       		.byte	0x99
 1479 0406 5E020000 		.4byte	0x25e
 1480 040a 05       		.uleb128 0x5
 1481 040b 03       		.byte	0x3
 1482 040c 10000000 		.4byte	xISRMutex
 1483 0410 1C       		.uleb128 0x1c
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 37


 1484 0411 4B000000 		.4byte	.LASF67
 1485 0415 01       		.byte	0x1
 1486 0416 9C       		.byte	0x9c
 1487 0417 5E020000 		.4byte	0x25e
 1488 041b 05       		.uleb128 0x5
 1489 041c 03       		.byte	0x3
 1490 041d 14000000 		.4byte	xISRCountingSemaphore
 1491 0421 1C       		.uleb128 0x1c
 1492 0422 7D010000 		.4byte	.LASF68
 1493 0426 01       		.byte	0x1
 1494 0427 A1       		.byte	0xa1
 1495 0428 5E020000 		.4byte	0x25e
 1496 042c 05       		.uleb128 0x5
 1497 042d 03       		.byte	0x3
 1498 042e 18000000 		.4byte	xMasterSlaveMutex
 1499 0432 1C       		.uleb128 0x1c
 1500 0433 D8040000 		.4byte	.LASF69
 1501 0437 01       		.byte	0x1
 1502 0438 A6       		.byte	0xa6
 1503 0439 27020000 		.4byte	0x227
 1504 043d 05       		.uleb128 0x5
 1505 043e 03       		.byte	0x3
 1506 043f 1C000000 		.4byte	xOkToGiveMutex
 1507 0443 1C       		.uleb128 0x1c
 1508 0444 96030000 		.4byte	.LASF70
 1509 0448 01       		.byte	0x1
 1510 0449 A6       		.byte	0xa6
 1511 044a 27020000 		.4byte	0x227
 1512 044e 05       		.uleb128 0x5
 1513 044f 03       		.byte	0x3
 1514 0450 20000000 		.4byte	xOkToGiveCountingSemaphore
 1515 0454 1D       		.uleb128 0x1d
 1516 0455 1D050000 		.4byte	.LASF71
 1517 0459 0A       		.byte	0xa
 1518 045a 9606     		.2byte	0x696
 1519 045c 60040000 		.4byte	0x460
 1520 0460 06       		.uleb128 0x6
 1521 0461 AE000000 		.4byte	0xae
 1522 0465 0B       		.uleb128 0xb
 1523 0466 A3000000 		.4byte	0xa3
 1524 046a 75040000 		.4byte	0x475
 1525 046e 0C       		.uleb128 0xc
 1526 046f 93000000 		.4byte	0x93
 1527 0473 0C       		.byte	0xc
 1528 0474 00       		.byte	0
 1529 0475 1E       		.uleb128 0x1e
 1530 0476 31020000 		.4byte	.LASF72
 1531 047a 04       		.byte	0x4
 1532 047b 12       		.byte	0x12
 1533 047c 65040000 		.4byte	0x465
 1534 0480 05       		.uleb128 0x5
 1535 0481 03       		.byte	0x3
 1536 0482 00000000 		.4byte	sniffIDFilter
 1537 0486 1E       		.uleb128 0x1e
 1538 0487 01040000 		.4byte	.LASF73
 1539 048b 05       		.byte	0x5
 1540 048c 10       		.byte	0x10
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 38


 1541 048d E2010000 		.4byte	0x1e2
 1542 0491 05       		.uleb128 0x5
 1543 0492 03       		.byte	0x3
 1544 0493 00000000 		.4byte	buffer
 1545 0497 0B       		.uleb128 0xb
 1546 0498 D7010000 		.4byte	0x1d7
 1547 049c A7040000 		.4byte	0x4a7
 1548 04a0 0C       		.uleb128 0xc
 1549 04a1 93000000 		.4byte	0x93
 1550 04a5 05       		.byte	0x5
 1551 04a6 00       		.byte	0
 1552 04a7 1E       		.uleb128 0x1e
 1553 04a8 74040000 		.4byte	.LASF74
 1554 04ac 0B       		.byte	0xb
 1555 04ad 0D       		.byte	0xd
 1556 04ae 97040000 		.4byte	0x497
 1557 04b2 05       		.uleb128 0x5
 1558 04b3 03       		.byte	0x3
 1559 04b4 00000000 		.4byte	objectList
 1560 04b8 1E       		.uleb128 0x1e
 1561 04b9 B1010000 		.4byte	.LASF75
 1562 04bd 01       		.byte	0x1
 1563 04be A9       		.byte	0xa9
 1564 04bf 2B030000 		.4byte	0x32b
 1565 04c3 05       		.uleb128 0x5
 1566 04c4 03       		.byte	0x3
 1567 04c5 00000000 		.4byte	xInterruptGivePeriod
 1568 04c9 00       		.byte	0
 1569              		.section	.debug_abbrev,"",%progbits
 1570              	.Ldebug_abbrev0:
 1571 0000 01       		.uleb128 0x1
 1572 0001 11       		.uleb128 0x11
 1573 0002 01       		.byte	0x1
 1574 0003 25       		.uleb128 0x25
 1575 0004 0E       		.uleb128 0xe
 1576 0005 13       		.uleb128 0x13
 1577 0006 0B       		.uleb128 0xb
 1578 0007 03       		.uleb128 0x3
 1579 0008 0E       		.uleb128 0xe
 1580 0009 1B       		.uleb128 0x1b
 1581 000a 0E       		.uleb128 0xe
 1582 000b 55       		.uleb128 0x55
 1583 000c 17       		.uleb128 0x17
 1584 000d 11       		.uleb128 0x11
 1585 000e 01       		.uleb128 0x1
 1586 000f 10       		.uleb128 0x10
 1587 0010 17       		.uleb128 0x17
 1588 0011 00       		.byte	0
 1589 0012 00       		.byte	0
 1590 0013 02       		.uleb128 0x2
 1591 0014 24       		.uleb128 0x24
 1592 0015 00       		.byte	0
 1593 0016 0B       		.uleb128 0xb
 1594 0017 0B       		.uleb128 0xb
 1595 0018 3E       		.uleb128 0x3e
 1596 0019 0B       		.uleb128 0xb
 1597 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 39


 1598 001b 0E       		.uleb128 0xe
 1599 001c 00       		.byte	0
 1600 001d 00       		.byte	0
 1601 001e 03       		.uleb128 0x3
 1602 001f 24       		.uleb128 0x24
 1603 0020 00       		.byte	0
 1604 0021 0B       		.uleb128 0xb
 1605 0022 0B       		.uleb128 0xb
 1606 0023 3E       		.uleb128 0x3e
 1607 0024 0B       		.uleb128 0xb
 1608 0025 03       		.uleb128 0x3
 1609 0026 08       		.uleb128 0x8
 1610 0027 00       		.byte	0
 1611 0028 00       		.byte	0
 1612 0029 04       		.uleb128 0x4
 1613 002a 16       		.uleb128 0x16
 1614 002b 00       		.byte	0
 1615 002c 03       		.uleb128 0x3
 1616 002d 0E       		.uleb128 0xe
 1617 002e 3A       		.uleb128 0x3a
 1618 002f 0B       		.uleb128 0xb
 1619 0030 3B       		.uleb128 0x3b
 1620 0031 0B       		.uleb128 0xb
 1621 0032 49       		.uleb128 0x49
 1622 0033 13       		.uleb128 0x13
 1623 0034 00       		.byte	0
 1624 0035 00       		.byte	0
 1625 0036 05       		.uleb128 0x5
 1626 0037 0F       		.uleb128 0xf
 1627 0038 00       		.byte	0
 1628 0039 0B       		.uleb128 0xb
 1629 003a 0B       		.uleb128 0xb
 1630 003b 00       		.byte	0
 1631 003c 00       		.byte	0
 1632 003d 06       		.uleb128 0x6
 1633 003e 35       		.uleb128 0x35
 1634 003f 00       		.byte	0
 1635 0040 49       		.uleb128 0x49
 1636 0041 13       		.uleb128 0x13
 1637 0042 00       		.byte	0
 1638 0043 00       		.byte	0
 1639 0044 07       		.uleb128 0x7
 1640 0045 04       		.uleb128 0x4
 1641 0046 01       		.byte	0x1
 1642 0047 0B       		.uleb128 0xb
 1643 0048 0B       		.uleb128 0xb
 1644 0049 49       		.uleb128 0x49
 1645 004a 13       		.uleb128 0x13
 1646 004b 3A       		.uleb128 0x3a
 1647 004c 0B       		.uleb128 0xb
 1648 004d 3B       		.uleb128 0x3b
 1649 004e 0B       		.uleb128 0xb
 1650 004f 01       		.uleb128 0x1
 1651 0050 13       		.uleb128 0x13
 1652 0051 00       		.byte	0
 1653 0052 00       		.byte	0
 1654 0053 08       		.uleb128 0x8
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 40


 1655 0054 28       		.uleb128 0x28
 1656 0055 00       		.byte	0
 1657 0056 03       		.uleb128 0x3
 1658 0057 0E       		.uleb128 0xe
 1659 0058 1C       		.uleb128 0x1c
 1660 0059 0B       		.uleb128 0xb
 1661 005a 00       		.byte	0
 1662 005b 00       		.byte	0
 1663 005c 09       		.uleb128 0x9
 1664 005d 13       		.uleb128 0x13
 1665 005e 01       		.byte	0x1
 1666 005f 0B       		.uleb128 0xb
 1667 0060 0B       		.uleb128 0xb
 1668 0061 3A       		.uleb128 0x3a
 1669 0062 0B       		.uleb128 0xb
 1670 0063 3B       		.uleb128 0x3b
 1671 0064 0B       		.uleb128 0xb
 1672 0065 01       		.uleb128 0x1
 1673 0066 13       		.uleb128 0x13
 1674 0067 00       		.byte	0
 1675 0068 00       		.byte	0
 1676 0069 0A       		.uleb128 0xa
 1677 006a 0D       		.uleb128 0xd
 1678 006b 00       		.byte	0
 1679 006c 03       		.uleb128 0x3
 1680 006d 0E       		.uleb128 0xe
 1681 006e 3A       		.uleb128 0x3a
 1682 006f 0B       		.uleb128 0xb
 1683 0070 3B       		.uleb128 0x3b
 1684 0071 0B       		.uleb128 0xb
 1685 0072 49       		.uleb128 0x49
 1686 0073 13       		.uleb128 0x13
 1687 0074 38       		.uleb128 0x38
 1688 0075 0B       		.uleb128 0xb
 1689 0076 00       		.byte	0
 1690 0077 00       		.byte	0
 1691 0078 0B       		.uleb128 0xb
 1692 0079 01       		.uleb128 0x1
 1693 007a 01       		.byte	0x1
 1694 007b 49       		.uleb128 0x49
 1695 007c 13       		.uleb128 0x13
 1696 007d 01       		.uleb128 0x1
 1697 007e 13       		.uleb128 0x13
 1698 007f 00       		.byte	0
 1699 0080 00       		.byte	0
 1700 0081 0C       		.uleb128 0xc
 1701 0082 21       		.uleb128 0x21
 1702 0083 00       		.byte	0
 1703 0084 49       		.uleb128 0x49
 1704 0085 13       		.uleb128 0x13
 1705 0086 2F       		.uleb128 0x2f
 1706 0087 0B       		.uleb128 0xb
 1707 0088 00       		.byte	0
 1708 0089 00       		.byte	0
 1709 008a 0D       		.uleb128 0xd
 1710 008b 13       		.uleb128 0x13
 1711 008c 01       		.byte	0x1
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 41


 1712 008d 0B       		.uleb128 0xb
 1713 008e 05       		.uleb128 0x5
 1714 008f 3A       		.uleb128 0x3a
 1715 0090 0B       		.uleb128 0xb
 1716 0091 3B       		.uleb128 0x3b
 1717 0092 0B       		.uleb128 0xb
 1718 0093 01       		.uleb128 0x1
 1719 0094 13       		.uleb128 0x13
 1720 0095 00       		.byte	0
 1721 0096 00       		.byte	0
 1722 0097 0E       		.uleb128 0xe
 1723 0098 13       		.uleb128 0x13
 1724 0099 01       		.byte	0x1
 1725 009a 03       		.uleb128 0x3
 1726 009b 0E       		.uleb128 0xe
 1727 009c 0B       		.uleb128 0xb
 1728 009d 05       		.uleb128 0x5
 1729 009e 3A       		.uleb128 0x3a
 1730 009f 0B       		.uleb128 0xb
 1731 00a0 3B       		.uleb128 0x3b
 1732 00a1 0B       		.uleb128 0xb
 1733 00a2 01       		.uleb128 0x1
 1734 00a3 13       		.uleb128 0x13
 1735 00a4 00       		.byte	0
 1736 00a5 00       		.byte	0
 1737 00a6 0F       		.uleb128 0xf
 1738 00a7 0D       		.uleb128 0xd
 1739 00a8 00       		.byte	0
 1740 00a9 03       		.uleb128 0x3
 1741 00aa 0E       		.uleb128 0xe
 1742 00ab 3A       		.uleb128 0x3a
 1743 00ac 0B       		.uleb128 0xb
 1744 00ad 3B       		.uleb128 0x3b
 1745 00ae 0B       		.uleb128 0xb
 1746 00af 49       		.uleb128 0x49
 1747 00b0 13       		.uleb128 0x13
 1748 00b1 38       		.uleb128 0x38
 1749 00b2 05       		.uleb128 0x5
 1750 00b3 00       		.byte	0
 1751 00b4 00       		.byte	0
 1752 00b5 10       		.uleb128 0x10
 1753 00b6 21       		.uleb128 0x21
 1754 00b7 00       		.byte	0
 1755 00b8 49       		.uleb128 0x49
 1756 00b9 13       		.uleb128 0x13
 1757 00ba 2F       		.uleb128 0x2f
 1758 00bb 05       		.uleb128 0x5
 1759 00bc 00       		.byte	0
 1760 00bd 00       		.byte	0
 1761 00be 11       		.uleb128 0x11
 1762 00bf 2E       		.uleb128 0x2e
 1763 00c0 00       		.byte	0
 1764 00c1 3F       		.uleb128 0x3f
 1765 00c2 19       		.uleb128 0x19
 1766 00c3 03       		.uleb128 0x3
 1767 00c4 0E       		.uleb128 0xe
 1768 00c5 3A       		.uleb128 0x3a
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 42


 1769 00c6 0B       		.uleb128 0xb
 1770 00c7 3B       		.uleb128 0x3b
 1771 00c8 0B       		.uleb128 0xb
 1772 00c9 27       		.uleb128 0x27
 1773 00ca 19       		.uleb128 0x19
 1774 00cb 11       		.uleb128 0x11
 1775 00cc 01       		.uleb128 0x1
 1776 00cd 12       		.uleb128 0x12
 1777 00ce 06       		.uleb128 0x6
 1778 00cf 40       		.uleb128 0x40
 1779 00d0 18       		.uleb128 0x18
 1780 00d1 9642     		.uleb128 0x2116
 1781 00d3 19       		.uleb128 0x19
 1782 00d4 00       		.byte	0
 1783 00d5 00       		.byte	0
 1784 00d6 12       		.uleb128 0x12
 1785 00d7 2E       		.uleb128 0x2e
 1786 00d8 01       		.byte	0x1
 1787 00d9 03       		.uleb128 0x3
 1788 00da 0E       		.uleb128 0xe
 1789 00db 3A       		.uleb128 0x3a
 1790 00dc 0B       		.uleb128 0xb
 1791 00dd 3B       		.uleb128 0x3b
 1792 00de 0B       		.uleb128 0xb
 1793 00df 27       		.uleb128 0x27
 1794 00e0 19       		.uleb128 0x19
 1795 00e1 11       		.uleb128 0x11
 1796 00e2 01       		.uleb128 0x1
 1797 00e3 12       		.uleb128 0x12
 1798 00e4 06       		.uleb128 0x6
 1799 00e5 40       		.uleb128 0x40
 1800 00e6 18       		.uleb128 0x18
 1801 00e7 9642     		.uleb128 0x2116
 1802 00e9 19       		.uleb128 0x19
 1803 00ea 01       		.uleb128 0x1
 1804 00eb 13       		.uleb128 0x13
 1805 00ec 00       		.byte	0
 1806 00ed 00       		.byte	0
 1807 00ee 13       		.uleb128 0x13
 1808 00ef 05       		.uleb128 0x5
 1809 00f0 00       		.byte	0
 1810 00f1 03       		.uleb128 0x3
 1811 00f2 0E       		.uleb128 0xe
 1812 00f3 3A       		.uleb128 0x3a
 1813 00f4 0B       		.uleb128 0xb
 1814 00f5 3B       		.uleb128 0x3b
 1815 00f6 0B       		.uleb128 0xb
 1816 00f7 49       		.uleb128 0x49
 1817 00f8 13       		.uleb128 0x13
 1818 00f9 02       		.uleb128 0x2
 1819 00fa 18       		.uleb128 0x18
 1820 00fb 00       		.byte	0
 1821 00fc 00       		.byte	0
 1822 00fd 14       		.uleb128 0x14
 1823 00fe 2E       		.uleb128 0x2e
 1824 00ff 00       		.byte	0
 1825 0100 03       		.uleb128 0x3
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 43


 1826 0101 0E       		.uleb128 0xe
 1827 0102 3A       		.uleb128 0x3a
 1828 0103 0B       		.uleb128 0xb
 1829 0104 3B       		.uleb128 0x3b
 1830 0105 0B       		.uleb128 0xb
 1831 0106 27       		.uleb128 0x27
 1832 0107 19       		.uleb128 0x19
 1833 0108 11       		.uleb128 0x11
 1834 0109 01       		.uleb128 0x1
 1835 010a 12       		.uleb128 0x12
 1836 010b 06       		.uleb128 0x6
 1837 010c 40       		.uleb128 0x40
 1838 010d 18       		.uleb128 0x18
 1839 010e 9642     		.uleb128 0x2116
 1840 0110 19       		.uleb128 0x19
 1841 0111 00       		.byte	0
 1842 0112 00       		.byte	0
 1843 0113 15       		.uleb128 0x15
 1844 0114 2E       		.uleb128 0x2e
 1845 0115 00       		.byte	0
 1846 0116 03       		.uleb128 0x3
 1847 0117 0E       		.uleb128 0xe
 1848 0118 3A       		.uleb128 0x3a
 1849 0119 0B       		.uleb128 0xb
 1850 011a 3B       		.uleb128 0x3b
 1851 011b 05       		.uleb128 0x5
 1852 011c 27       		.uleb128 0x27
 1853 011d 19       		.uleb128 0x19
 1854 011e 11       		.uleb128 0x11
 1855 011f 01       		.uleb128 0x1
 1856 0120 12       		.uleb128 0x12
 1857 0121 06       		.uleb128 0x6
 1858 0122 40       		.uleb128 0x40
 1859 0123 18       		.uleb128 0x18
 1860 0124 9642     		.uleb128 0x2116
 1861 0126 19       		.uleb128 0x19
 1862 0127 00       		.byte	0
 1863 0128 00       		.byte	0
 1864 0129 16       		.uleb128 0x16
 1865 012a 2E       		.uleb128 0x2e
 1866 012b 01       		.byte	0x1
 1867 012c 03       		.uleb128 0x3
 1868 012d 0E       		.uleb128 0xe
 1869 012e 3A       		.uleb128 0x3a
 1870 012f 0B       		.uleb128 0xb
 1871 0130 3B       		.uleb128 0x3b
 1872 0131 05       		.uleb128 0x5
 1873 0132 27       		.uleb128 0x27
 1874 0133 19       		.uleb128 0x19
 1875 0134 11       		.uleb128 0x11
 1876 0135 01       		.uleb128 0x1
 1877 0136 12       		.uleb128 0x12
 1878 0137 06       		.uleb128 0x6
 1879 0138 40       		.uleb128 0x40
 1880 0139 18       		.uleb128 0x18
 1881 013a 9642     		.uleb128 0x2116
 1882 013c 19       		.uleb128 0x19
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 44


 1883 013d 01       		.uleb128 0x1
 1884 013e 13       		.uleb128 0x13
 1885 013f 00       		.byte	0
 1886 0140 00       		.byte	0
 1887 0141 17       		.uleb128 0x17
 1888 0142 05       		.uleb128 0x5
 1889 0143 00       		.byte	0
 1890 0144 03       		.uleb128 0x3
 1891 0145 0E       		.uleb128 0xe
 1892 0146 3A       		.uleb128 0x3a
 1893 0147 0B       		.uleb128 0xb
 1894 0148 3B       		.uleb128 0x3b
 1895 0149 05       		.uleb128 0x5
 1896 014a 49       		.uleb128 0x49
 1897 014b 13       		.uleb128 0x13
 1898 014c 02       		.uleb128 0x2
 1899 014d 18       		.uleb128 0x18
 1900 014e 00       		.byte	0
 1901 014f 00       		.byte	0
 1902 0150 18       		.uleb128 0x18
 1903 0151 34       		.uleb128 0x34
 1904 0152 00       		.byte	0
 1905 0153 03       		.uleb128 0x3
 1906 0154 0E       		.uleb128 0xe
 1907 0155 3A       		.uleb128 0x3a
 1908 0156 0B       		.uleb128 0xb
 1909 0157 3B       		.uleb128 0x3b
 1910 0158 05       		.uleb128 0x5
 1911 0159 49       		.uleb128 0x49
 1912 015a 13       		.uleb128 0x13
 1913 015b 02       		.uleb128 0x2
 1914 015c 18       		.uleb128 0x18
 1915 015d 00       		.byte	0
 1916 015e 00       		.byte	0
 1917 015f 19       		.uleb128 0x19
 1918 0160 26       		.uleb128 0x26
 1919 0161 00       		.byte	0
 1920 0162 49       		.uleb128 0x49
 1921 0163 13       		.uleb128 0x13
 1922 0164 00       		.byte	0
 1923 0165 00       		.byte	0
 1924 0166 1A       		.uleb128 0x1a
 1925 0167 2E       		.uleb128 0x2e
 1926 0168 01       		.byte	0x1
 1927 0169 3F       		.uleb128 0x3f
 1928 016a 19       		.uleb128 0x19
 1929 016b 03       		.uleb128 0x3
 1930 016c 0E       		.uleb128 0xe
 1931 016d 3A       		.uleb128 0x3a
 1932 016e 0B       		.uleb128 0xb
 1933 016f 3B       		.uleb128 0x3b
 1934 0170 05       		.uleb128 0x5
 1935 0171 27       		.uleb128 0x27
 1936 0172 19       		.uleb128 0x19
 1937 0173 11       		.uleb128 0x11
 1938 0174 01       		.uleb128 0x1
 1939 0175 12       		.uleb128 0x12
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 45


 1940 0176 06       		.uleb128 0x6
 1941 0177 40       		.uleb128 0x40
 1942 0178 18       		.uleb128 0x18
 1943 0179 9642     		.uleb128 0x2116
 1944 017b 19       		.uleb128 0x19
 1945 017c 01       		.uleb128 0x1
 1946 017d 13       		.uleb128 0x13
 1947 017e 00       		.byte	0
 1948 017f 00       		.byte	0
 1949 0180 1B       		.uleb128 0x1b
 1950 0181 2E       		.uleb128 0x2e
 1951 0182 01       		.byte	0x1
 1952 0183 3F       		.uleb128 0x3f
 1953 0184 19       		.uleb128 0x19
 1954 0185 03       		.uleb128 0x3
 1955 0186 0E       		.uleb128 0xe
 1956 0187 3A       		.uleb128 0x3a
 1957 0188 0B       		.uleb128 0xb
 1958 0189 3B       		.uleb128 0x3b
 1959 018a 05       		.uleb128 0x5
 1960 018b 27       		.uleb128 0x27
 1961 018c 19       		.uleb128 0x19
 1962 018d 49       		.uleb128 0x49
 1963 018e 13       		.uleb128 0x13
 1964 018f 11       		.uleb128 0x11
 1965 0190 01       		.uleb128 0x1
 1966 0191 12       		.uleb128 0x12
 1967 0192 06       		.uleb128 0x6
 1968 0193 40       		.uleb128 0x40
 1969 0194 18       		.uleb128 0x18
 1970 0195 9742     		.uleb128 0x2117
 1971 0197 19       		.uleb128 0x19
 1972 0198 01       		.uleb128 0x1
 1973 0199 13       		.uleb128 0x13
 1974 019a 00       		.byte	0
 1975 019b 00       		.byte	0
 1976 019c 1C       		.uleb128 0x1c
 1977 019d 34       		.uleb128 0x34
 1978 019e 00       		.byte	0
 1979 019f 03       		.uleb128 0x3
 1980 01a0 0E       		.uleb128 0xe
 1981 01a1 3A       		.uleb128 0x3a
 1982 01a2 0B       		.uleb128 0xb
 1983 01a3 3B       		.uleb128 0x3b
 1984 01a4 0B       		.uleb128 0xb
 1985 01a5 49       		.uleb128 0x49
 1986 01a6 13       		.uleb128 0x13
 1987 01a7 02       		.uleb128 0x2
 1988 01a8 18       		.uleb128 0x18
 1989 01a9 00       		.byte	0
 1990 01aa 00       		.byte	0
 1991 01ab 1D       		.uleb128 0x1d
 1992 01ac 34       		.uleb128 0x34
 1993 01ad 00       		.byte	0
 1994 01ae 03       		.uleb128 0x3
 1995 01af 0E       		.uleb128 0xe
 1996 01b0 3A       		.uleb128 0x3a
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 46


 1997 01b1 0B       		.uleb128 0xb
 1998 01b2 3B       		.uleb128 0x3b
 1999 01b3 05       		.uleb128 0x5
 2000 01b4 49       		.uleb128 0x49
 2001 01b5 13       		.uleb128 0x13
 2002 01b6 3F       		.uleb128 0x3f
 2003 01b7 19       		.uleb128 0x19
 2004 01b8 3C       		.uleb128 0x3c
 2005 01b9 19       		.uleb128 0x19
 2006 01ba 00       		.byte	0
 2007 01bb 00       		.byte	0
 2008 01bc 1E       		.uleb128 0x1e
 2009 01bd 34       		.uleb128 0x34
 2010 01be 00       		.byte	0
 2011 01bf 03       		.uleb128 0x3
 2012 01c0 0E       		.uleb128 0xe
 2013 01c1 3A       		.uleb128 0x3a
 2014 01c2 0B       		.uleb128 0xb
 2015 01c3 3B       		.uleb128 0x3b
 2016 01c4 0B       		.uleb128 0xb
 2017 01c5 49       		.uleb128 0x49
 2018 01c6 13       		.uleb128 0x13
 2019 01c7 3F       		.uleb128 0x3f
 2020 01c8 19       		.uleb128 0x19
 2021 01c9 02       		.uleb128 0x2
 2022 01ca 18       		.uleb128 0x18
 2023 01cb 00       		.byte	0
 2024 01cc 00       		.byte	0
 2025 01cd 00       		.byte	0
 2026              		.section	.debug_aranges,"",%progbits
 2027 0000 54000000 		.4byte	0x54
 2028 0004 0200     		.2byte	0x2
 2029 0006 00000000 		.4byte	.Ldebug_info0
 2030 000a 04       		.byte	0x4
 2031 000b 00       		.byte	0
 2032 000c 0000     		.2byte	0
 2033 000e 0000     		.2byte	0
 2034 0010 00000000 		.4byte	.LFB68
 2035 0014 98000000 		.4byte	.LFE68-.LFB68
 2036 0018 00000000 		.4byte	.LFB69
 2037 001c 38000000 		.4byte	.LFE69-.LFB69
 2038 0020 00000000 		.4byte	.LFB70
 2039 0024 1C010000 		.4byte	.LFE70-.LFB70
 2040 0028 00000000 		.4byte	.LFB71
 2041 002c 1C010000 		.4byte	.LFE71-.LFB71
 2042 0030 00000000 		.4byte	.LFB72
 2043 0034 50000000 		.4byte	.LFE72-.LFB72
 2044 0038 00000000 		.4byte	.LFB73
 2045 003c F0000000 		.4byte	.LFE73-.LFB73
 2046 0040 00000000 		.4byte	.LFB74
 2047 0044 68000000 		.4byte	.LFE74-.LFB74
 2048 0048 00000000 		.4byte	.LFB75
 2049 004c 68000000 		.4byte	.LFE75-.LFB75
 2050 0050 00000000 		.4byte	0
 2051 0054 00000000 		.4byte	0
 2052              		.section	.debug_ranges,"",%progbits
 2053              	.Ldebug_ranges0:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 47


 2054 0000 00000000 		.4byte	.LFB68
 2055 0004 98000000 		.4byte	.LFE68
 2056 0008 00000000 		.4byte	.LFB69
 2057 000c 38000000 		.4byte	.LFE69
 2058 0010 00000000 		.4byte	.LFB70
 2059 0014 1C010000 		.4byte	.LFE70
 2060 0018 00000000 		.4byte	.LFB71
 2061 001c 1C010000 		.4byte	.LFE71
 2062 0020 00000000 		.4byte	.LFB72
 2063 0024 50000000 		.4byte	.LFE72
 2064 0028 00000000 		.4byte	.LFB73
 2065 002c F0000000 		.4byte	.LFE73
 2066 0030 00000000 		.4byte	.LFB74
 2067 0034 68000000 		.4byte	.LFE74
 2068 0038 00000000 		.4byte	.LFB75
 2069 003c 68000000 		.4byte	.LFE75
 2070 0040 00000000 		.4byte	0
 2071 0044 00000000 		.4byte	0
 2072              		.section	.debug_line,"",%progbits
 2073              	.Ldebug_line0:
 2074 0000 0C030000 		.section	.debug_str,"MS",%progbits,1
 2074      0200F001 
 2074      00000201 
 2074      FB0E0D00 
 2074      01010101 
 2075              	.LASF29:
 2076 0000 696E666F 		.ascii	"informationID\000"
 2076      726D6174 
 2076      696F6E49 
 2076      4400
 2077              	.LASF52:
 2078 000e 76496E74 		.ascii	"vInterruptMutexSlaveTask\000"
 2078      65727275 
 2078      70744D75 
 2078      74657853 
 2078      6C617665 
 2079              	.LASF42:
 2080 0027 77726974 		.ascii	"write\000"
 2080      6500
 2081              	.LASF55:
 2082 002d 78436F75 		.ascii	"xCount\000"
 2082      6E7400
 2083              	.LASF33:
 2084 0034 6F626A65 		.ascii	"objectNumber\000"
 2084      63744E75 
 2084      6D626572 
 2084      00
 2085              	.LASF5:
 2086 0041 73686F72 		.ascii	"short int\000"
 2086      7420696E 
 2086      7400
 2087              	.LASF67:
 2088 004b 78495352 		.ascii	"xISRCountingSemaphore\000"
 2088      436F756E 
 2088      74696E67 
 2088      53656D61 
 2088      70686F72 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 48


 2089              	.LASF13:
 2090 0061 73697A65 		.ascii	"sizetype\000"
 2090      74797065 
 2090      00
 2091              	.LASF21:
 2092 006a 4D555445 		.ascii	"MUTEX\000"
 2092      5800
 2093              	.LASF46:
 2094 0070 5461736B 		.ascii	"TaskHandle_t\000"
 2094      48616E64 
 2094      6C655F74 
 2094      00
 2095              	.LASF66:
 2096 007d 78495352 		.ascii	"xISRMutex\000"
 2096      4D757465 
 2096      7800
 2097              	.LASF60:
 2098 0087 756C4C61 		.ascii	"ulLastMasterLoopCounter\000"
 2098      73744D61 
 2098      73746572 
 2098      4C6F6F70 
 2098      436F756E 
 2099              	.LASF76:
 2100 009f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2100      43313120 
 2100      352E342E 
 2100      31203230 
 2100      31363036 
 2101 00d2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2101      20726576 
 2101      6973696F 
 2101      6E203233 
 2101      37373135 
 2102 0105 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2102      66756E63 
 2102      74696F6E 
 2102      2D736563 
 2102      74696F6E 
 2103              	.LASF80:
 2104 012d 76537461 		.ascii	"vStartInterruptSemaphoreTasks\000"
 2104      7274496E 
 2104      74657272 
 2104      75707453 
 2104      656D6170 
 2105              	.LASF10:
 2106 014b 5F5F7569 		.ascii	"__uint32_t\000"
 2106      6E743332 
 2106      5F7400
 2107              	.LASF37:
 2108 0156 6F626A65 		.ascii	"objectHeader\000"
 2108      63744865 
 2108      61646572 
 2108      00
 2109              	.LASF51:
 2110 0163 76496E74 		.ascii	"vInterruptMutexMasterTask\000"
 2110      65727275 
 2110      70744D75 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 49


 2110      7465784D 
 2110      61737465 
 2111              	.LASF68:
 2112 017d 784D6173 		.ascii	"xMasterSlaveMutex\000"
 2112      74657253 
 2112      6C617665 
 2112      4D757465 
 2112      7800
 2113              	.LASF15:
 2114 018f 75696E74 		.ascii	"uint8_t\000"
 2114      385F7400 
 2115              	.LASF38:
 2116 0197 6F626A65 		.ascii	"objectArray\000"
 2116      63744172 
 2116      72617900 
 2117              	.LASF34:
 2118 01a3 6C656E4F 		.ascii	"lenObjectName\000"
 2118      626A6563 
 2118      744E616D 
 2118      6500
 2119              	.LASF75:
 2120 01b1 78496E74 		.ascii	"xInterruptGivePeriod\000"
 2120      65727275 
 2120      70744769 
 2120      76655065 
 2120      72696F64 
 2121              	.LASF65:
 2122 01c6 78536C61 		.ascii	"xSlaveHandle\000"
 2122      76654861 
 2122      6E646C65 
 2122      00
 2123              	.LASF27:
 2124 01d3 4F626A65 		.ascii	"ObjectType\000"
 2124      63745479 
 2124      706500
 2125              	.LASF31:
 2126 01de 6C656E67 		.ascii	"length\000"
 2126      746800
 2127              	.LASF18:
 2128 01e5 666C6F61 		.ascii	"float\000"
 2128      7400
 2129              	.LASF36:
 2130 01eb 4F626A65 		.ascii	"Object\000"
 2130      637400
 2131              	.LASF49:
 2132 01f2 70727654 		.ascii	"prvTakeAndGiveInTheSameOrder\000"
 2132      616B6541 
 2132      6E644769 
 2132      7665496E 
 2132      54686553 
 2133              	.LASF1:
 2134 020f 6C6F6E67 		.ascii	"long long int\000"
 2134      206C6F6E 
 2134      6720696E 
 2134      7400
 2135              	.LASF45:
 2136 021d 5469636B 		.ascii	"TickType_t\000"
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 50


 2136      54797065 
 2136      5F7400
 2137              	.LASF9:
 2138 0228 6C6F6E67 		.ascii	"long int\000"
 2138      20696E74 
 2138      00
 2139              	.LASF72:
 2140 0231 736E6966 		.ascii	"sniffIDFilter\000"
 2140      66494446 
 2140      696C7465 
 2140      7200
 2141              	.LASF56:
 2142 023f 7844656C 		.ascii	"xDelay\000"
 2142      617900
 2143              	.LASF7:
 2144 0246 5F5F7569 		.ascii	"__uint8_t\000"
 2144      6E74385F 
 2144      7400
 2145              	.LASF47:
 2146 0250 51756575 		.ascii	"QueueHandle_t\000"
 2146      6548616E 
 2146      646C655F 
 2146      7400
 2147              	.LASF20:
 2148 025e 51554555 		.ascii	"QUEUE\000"
 2148      4500
 2149              	.LASF22:
 2150 0264 434F554E 		.ascii	"COUNTING_SEMAPHORE\000"
 2150      54494E47 
 2150      5F53454D 
 2150      4150484F 
 2150      524500
 2151              	.LASF35:
 2152 0277 6F626A65 		.ascii	"objectName\000"
 2152      63744E61 
 2152      6D6500
 2153              	.LASF2:
 2154 0282 6C6F6E67 		.ascii	"long double\000"
 2154      20646F75 
 2154      626C6500 
 2155              	.LASF48:
 2156 028e 53656D61 		.ascii	"SemaphoreHandle_t\000"
 2156      70686F72 
 2156      6548616E 
 2156      646C655F 
 2156      7400
 2157              	.LASF4:
 2158 02a0 756E7369 		.ascii	"unsigned char\000"
 2158      676E6564 
 2158      20636861 
 2158      7200
 2159              	.LASF62:
 2160 02ae 78457272 		.ascii	"xErrorDetected\000"
 2160      6F724465 
 2160      74656374 
 2160      656400
 2161              	.LASF24:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 51


 2162 02bd 52454355 		.ascii	"RECURSIVE_MUTEX\000"
 2162      52534956 
 2162      455F4D55 
 2162      54455800 
 2163              	.LASF82:
 2164 02cd 78417265 		.ascii	"xAreInterruptSemaphoreTasksStillRunning\000"
 2164      496E7465 
 2164      72727570 
 2164      7453656D 
 2164      6170686F 
 2165              	.LASF41:
 2166 02f5 72656164 		.ascii	"read\000"
 2166      00
 2167              	.LASF3:
 2168 02fa 7369676E 		.ascii	"signed char\000"
 2168      65642063 
 2168      68617200 
 2169              	.LASF12:
 2170 0306 6C6F6E67 		.ascii	"long long unsigned int\000"
 2170      206C6F6E 
 2170      6720756E 
 2170      7369676E 
 2170      65642069 
 2171              	.LASF58:
 2172 031d 78486967 		.ascii	"xHigherPriorityTaskWoken\000"
 2172      68657250 
 2172      72696F72 
 2172      69747954 
 2172      61736B57 
 2173              	.LASF17:
 2174 0336 75696E74 		.ascii	"uint32_t\000"
 2174      33325F74 
 2174      00
 2175              	.LASF0:
 2176 033f 756E7369 		.ascii	"unsigned int\000"
 2176      676E6564 
 2176      20696E74 
 2176      00
 2177              	.LASF32:
 2178 034c 4F626A65 		.ascii	"ObjectListHeader\000"
 2178      63744C69 
 2178      73744865 
 2178      61646572 
 2178      00
 2179              	.LASF43:
 2180 035d 42617365 		.ascii	"BaseType_t\000"
 2180      54797065 
 2180      5F7400
 2181              	.LASF53:
 2182 0368 70765061 		.ascii	"pvParameters\000"
 2182      72616D65 
 2182      74657273 
 2182      00
 2183              	.LASF50:
 2184 0375 70727654 		.ascii	"prvTakeAndGiveInTheOppositeOrder\000"
 2184      616B6541 
 2184      6E644769 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 52


 2184      7665496E 
 2184      5468654F 
 2185              	.LASF70:
 2186 0396 784F6B54 		.ascii	"xOkToGiveCountingSemaphore\000"
 2186      6F476976 
 2186      65436F75 
 2186      6E74696E 
 2186      6753656D 
 2187              	.LASF14:
 2188 03b1 63686172 		.ascii	"char\000"
 2188      00
 2189              	.LASF28:
 2190 03b6 7061636B 		.ascii	"packetID\000"
 2190      65744944 
 2190      00
 2191              	.LASF16:
 2192 03bf 696E7433 		.ascii	"int32_t\000"
 2192      325F7400 
 2193              	.LASF6:
 2194 03c7 73686F72 		.ascii	"short unsigned int\000"
 2194      7420756E 
 2194      7369676E 
 2194      65642069 
 2194      6E7400
 2195              	.LASF44:
 2196 03da 55426173 		.ascii	"UBaseType_t\000"
 2196      65547970 
 2196      655F7400 
 2197              	.LASF26:
 2198 03e6 4E554D42 		.ascii	"NUMBER_OF_OBJECTTYPES\000"
 2198      45525F4F 
 2198      465F4F42 
 2198      4A454354 
 2198      54595045 
 2199              	.LASF40:
 2200 03fc 64617461 		.ascii	"data\000"
 2200      00
 2201              	.LASF73:
 2202 0401 62756666 		.ascii	"buffer\000"
 2202      657200
 2203              	.LASF64:
 2204 0408 756C436F 		.ascii	"ulCountingSemaphoreLoops\000"
 2204      756E7469 
 2204      6E675365 
 2204      6D617068 
 2204      6F72654C 
 2205              	.LASF59:
 2206 0421 7854696D 		.ascii	"xTimeNow\000"
 2206      654E6F77 
 2206      00
 2207              	.LASF11:
 2208 042a 6C6F6E67 		.ascii	"long unsigned int\000"
 2208      20756E73 
 2208      69676E65 
 2208      6420696E 
 2208      7400
 2209              	.LASF54:
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 53


 2210 043c 76496E74 		.ascii	"vInterruptCountingSemaphoreTask\000"
 2210      65727275 
 2210      7074436F 
 2210      756E7469 
 2210      6E675365 
 2211              	.LASF19:
 2212 045c 646F7562 		.ascii	"double\000"
 2212      6C6500
 2213              	.LASF23:
 2214 0463 42494E41 		.ascii	"BINARY_SEMAPHORE\000"
 2214      52595F53 
 2214      454D4150 
 2214      484F5245 
 2214      00
 2215              	.LASF74:
 2216 0474 6F626A65 		.ascii	"objectList\000"
 2216      63744C69 
 2216      737400
 2217              	.LASF81:
 2218 047f 76496E74 		.ascii	"vInterruptSemaphorePeriodicTest\000"
 2218      65727275 
 2218      70745365 
 2218      6D617068 
 2218      6F726550 
 2219              	.LASF77:
 2220 049f 2E2E5C43 		.ascii	"..\\Common\\Minimal\\IntSemTest.c\000"
 2220      6F6D6D6F 
 2220      6E5C4D69 
 2220      6E696D61 
 2220      6C5C496E 
 2221              	.LASF25:
 2222 04be 5441534B 		.ascii	"TASK\000"
 2222      00
 2223              	.LASF8:
 2224 04c3 5F5F696E 		.ascii	"__int32_t\000"
 2224      7433325F 
 2224      7400
 2225              	.LASF30:
 2226 04cd 6F626A65 		.ascii	"objectType\000"
 2226      63745479 
 2226      706500
 2227              	.LASF69:
 2228 04d8 784F6B54 		.ascii	"xOkToGiveMutex\000"
 2228      6F476976 
 2228      654D7574 
 2228      657800
 2229              	.LASF57:
 2230 04e7 784C6173 		.ascii	"xLastGiveTime\000"
 2230      74476976 
 2230      6554696D 
 2230      6500
 2231              	.LASF61:
 2232 04f5 756C4C61 		.ascii	"ulLastCountingSemaphoreLoops\000"
 2232      7374436F 
 2232      756E7469 
 2232      6E675365 
 2232      6D617068 
ARM GAS  C:\Users\THUNDE~1\AppData\Local\Temp\ccjMKemp.s 			page 54


 2233              	.LASF39:
 2234 0512 4F626A65 		.ascii	"ObjectList\000"
 2234      63744C69 
 2234      737400
 2235              	.LASF71:
 2236 051d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2236      52784275 
 2236      66666572 
 2236      00
 2237              	.LASF63:
 2238 052a 756C4D61 		.ascii	"ulMasterLoops\000"
 2238      73746572 
 2238      4C6F6F70 
 2238      7300
 2239              	.LASF79:
 2240 0538 42756666 		.ascii	"Buffer\000"
 2240      657200
 2241              	.LASF78:
 2242 053f 463A5C50 		.ascii	"F:\\Programme_Scripts\\PSOC Creator\\FreeRTOS\\Free"
 2242      726F6772 
 2242      616D6D65 
 2242      5F536372 
 2242      69707473 
 2243 056e 52544F53 		.ascii	"RTOS_CY8CKIT_059-master\\FreeRTOS_Demo.cydsn\000"
 2243      5F435938 
 2243      434B4954 
 2243      5F303539 
 2243      2D6D6173 
 2244              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran

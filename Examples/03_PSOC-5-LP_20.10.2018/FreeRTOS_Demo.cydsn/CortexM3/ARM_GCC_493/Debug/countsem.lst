ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"countsem.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	xErrorDetected:
  21 0000 00000000 		.space	4
  22              		.align	2
  23              	xParameters:
  24 0004 00000000 		.space	24
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 436F756E 		.ascii	"Counting_Sem_1\000"
  28      74696E67 
  28      5F53656D 
  28      5F3100
  29 000f 00       		.align	2
  30              	.LC1:
  31 0010 436F756E 		.ascii	"Counting_Sem_2\000"
  31      74696E67 
  31      5F53656D 
  31      5F3200
  32 001f 00       		.align	2
  33              	.LC2:
  34 0020 434E5431 		.ascii	"CNT1\000"
  34      00
  35 0025 000000   		.align	2
  36              	.LC3:
  37 0028 434E5432 		.ascii	"CNT2\000"
  37      00
  38 002d 000000   		.section	.text.vStartCountingSemaphoreTasks,"ax",%progbits
  39              		.align	2
  40              		.global	vStartCountingSemaphoreTasks
  41              		.thumb
  42              		.thumb_func
  43              		.type	vStartCountingSemaphoreTasks, %function
  44              	vStartCountingSemaphoreTasks:
  45              	.LFB68:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 2


  46              		.file 1 "..\\Common\\Minimal\\countsem.c"
   1:..\Common\Minimal/countsem.c **** /*
   2:..\Common\Minimal/countsem.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/countsem.c ****     All rights reserved
   4:..\Common\Minimal/countsem.c **** 
   5:..\Common\Minimal/countsem.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/countsem.c **** 
   7:..\Common\Minimal/countsem.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/countsem.c **** 
   9:..\Common\Minimal/countsem.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/countsem.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/countsem.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/countsem.c **** 
  13:..\Common\Minimal/countsem.c ****     ***************************************************************************
  14:..\Common\Minimal/countsem.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/countsem.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/countsem.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/countsem.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/countsem.c ****     ***************************************************************************
  19:..\Common\Minimal/countsem.c **** 
  20:..\Common\Minimal/countsem.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/countsem.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/countsem.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/countsem.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/countsem.c **** 
  25:..\Common\Minimal/countsem.c ****     ***************************************************************************
  26:..\Common\Minimal/countsem.c ****      *                                                                       *
  27:..\Common\Minimal/countsem.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/countsem.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/countsem.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/countsem.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/countsem.c ****      *                                                                       *
  32:..\Common\Minimal/countsem.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/countsem.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/countsem.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/countsem.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/countsem.c ****      *                                                                       *
  37:..\Common\Minimal/countsem.c ****     ***************************************************************************
  38:..\Common\Minimal/countsem.c **** 
  39:..\Common\Minimal/countsem.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/countsem.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/countsem.c ****     defined configASSERT()?
  42:..\Common\Minimal/countsem.c **** 
  43:..\Common\Minimal/countsem.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/countsem.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/countsem.c ****     participating in the support forum.
  46:..\Common\Minimal/countsem.c **** 
  47:..\Common\Minimal/countsem.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/countsem.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/countsem.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/countsem.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/countsem.c **** 
  52:..\Common\Minimal/countsem.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/countsem.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/countsem.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Common\Minimal/countsem.c **** 
  56:..\Common\Minimal/countsem.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 3


  57:..\Common\Minimal/countsem.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/countsem.c **** 
  59:..\Common\Minimal/countsem.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/countsem.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/countsem.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/countsem.c **** 
  63:..\Common\Minimal/countsem.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/countsem.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/countsem.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/countsem.c **** 
  67:..\Common\Minimal/countsem.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/countsem.c **** */
  69:..\Common\Minimal/countsem.c **** 
  70:..\Common\Minimal/countsem.c **** 
  71:..\Common\Minimal/countsem.c **** /*
  72:..\Common\Minimal/countsem.c ****  * Simple demonstration of the usage of counting semaphore.
  73:..\Common\Minimal/countsem.c ****  */
  74:..\Common\Minimal/countsem.c **** 
  75:..\Common\Minimal/countsem.c **** /* Scheduler include files. */
  76:..\Common\Minimal/countsem.c **** #include "FreeRTOS.h"
  77:..\Common\Minimal/countsem.c **** #include "task.h"
  78:..\Common\Minimal/countsem.c **** #include "semphr.h"
  79:..\Common\Minimal/countsem.c **** 
  80:..\Common\Minimal/countsem.c **** /* Demo program include files. */
  81:..\Common\Minimal/countsem.c **** #include "countsem.h"
  82:..\Common\Minimal/countsem.c **** 
  83:..\Common\Minimal/countsem.c **** /* The maximum count value that the semaphore used for the demo can hold. */
  84:..\Common\Minimal/countsem.c **** #define countMAX_COUNT_VALUE	( 200 )
  85:..\Common\Minimal/countsem.c **** 
  86:..\Common\Minimal/countsem.c **** /* Constants used to indicate whether or not the semaphore should have been
  87:..\Common\Minimal/countsem.c **** created with its maximum count value, or its minimum count value.  These
  88:..\Common\Minimal/countsem.c **** numbers are used to ensure that the pointers passed in as the task parameters
  89:..\Common\Minimal/countsem.c **** are valid. */
  90:..\Common\Minimal/countsem.c **** #define countSTART_AT_MAX_COUNT	( 0xaa )
  91:..\Common\Minimal/countsem.c **** #define countSTART_AT_ZERO		( 0x55 )
  92:..\Common\Minimal/countsem.c **** 
  93:..\Common\Minimal/countsem.c **** /* Two tasks are created for the test.  One uses a semaphore created with its
  94:..\Common\Minimal/countsem.c **** count value set to the maximum, and one with the count value set to zero. */
  95:..\Common\Minimal/countsem.c **** #define countNUM_TEST_TASKS		( 2 )
  96:..\Common\Minimal/countsem.c **** #define countDONT_BLOCK			( 0 )
  97:..\Common\Minimal/countsem.c **** 
  98:..\Common\Minimal/countsem.c **** /*-----------------------------------------------------------*/
  99:..\Common\Minimal/countsem.c **** 
 100:..\Common\Minimal/countsem.c **** /* Flag that will be latched to pdTRUE should any unexpected behaviour be
 101:..\Common\Minimal/countsem.c **** detected in any of the tasks. */
 102:..\Common\Minimal/countsem.c **** static volatile BaseType_t xErrorDetected = pdFALSE;
 103:..\Common\Minimal/countsem.c **** 
 104:..\Common\Minimal/countsem.c **** /*-----------------------------------------------------------*/
 105:..\Common\Minimal/countsem.c **** 
 106:..\Common\Minimal/countsem.c **** /*
 107:..\Common\Minimal/countsem.c ****  * The demo task.  This simply counts the semaphore up to its maximum value,
 108:..\Common\Minimal/countsem.c ****  * the counts it back down again.  The result of each semaphore 'give' and
 109:..\Common\Minimal/countsem.c ****  * 'take' is inspected, with an error being flagged if it is found not to be
 110:..\Common\Minimal/countsem.c ****  * the expected result.
 111:..\Common\Minimal/countsem.c ****  */
 112:..\Common\Minimal/countsem.c **** static void prvCountingSemaphoreTask( void *pvParameters );
 113:..\Common\Minimal/countsem.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 4


 114:..\Common\Minimal/countsem.c **** /*
 115:..\Common\Minimal/countsem.c ****  * Utility function to increment the semaphore count value up from zero to
 116:..\Common\Minimal/countsem.c ****  * countMAX_COUNT_VALUE.
 117:..\Common\Minimal/countsem.c ****  */
 118:..\Common\Minimal/countsem.c **** static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
 119:..\Common\Minimal/countsem.c **** 
 120:..\Common\Minimal/countsem.c **** /*
 121:..\Common\Minimal/countsem.c ****  * Utility function to decrement the semaphore count value up from
 122:..\Common\Minimal/countsem.c ****  * countMAX_COUNT_VALUE to zero.
 123:..\Common\Minimal/countsem.c ****  */
 124:..\Common\Minimal/countsem.c **** static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
 125:..\Common\Minimal/countsem.c **** 
 126:..\Common\Minimal/countsem.c **** /*-----------------------------------------------------------*/
 127:..\Common\Minimal/countsem.c **** 
 128:..\Common\Minimal/countsem.c **** /* The structure that is passed into the task as the task parameter. */
 129:..\Common\Minimal/countsem.c **** typedef struct COUNT_SEM_STRUCT
 130:..\Common\Minimal/countsem.c **** {
 131:..\Common\Minimal/countsem.c **** 	/* The semaphore to be used for the demo. */
 132:..\Common\Minimal/countsem.c **** 	SemaphoreHandle_t xSemaphore;
 133:..\Common\Minimal/countsem.c **** 
 134:..\Common\Minimal/countsem.c **** 	/* Set to countSTART_AT_MAX_COUNT if the semaphore should be created with
 135:..\Common\Minimal/countsem.c **** 	its count value set to its max count value, or countSTART_AT_ZERO if it
 136:..\Common\Minimal/countsem.c **** 	should have been created with its count value set to 0. */
 137:..\Common\Minimal/countsem.c **** 	UBaseType_t uxExpectedStartCount;
 138:..\Common\Minimal/countsem.c **** 
 139:..\Common\Minimal/countsem.c **** 	/* Incremented on each cycle of the demo task.  Used to detect a stalled
 140:..\Common\Minimal/countsem.c **** 	task. */
 141:..\Common\Minimal/countsem.c **** 	UBaseType_t uxLoopCounter;
 142:..\Common\Minimal/countsem.c **** } xCountSemStruct;
 143:..\Common\Minimal/countsem.c **** 
 144:..\Common\Minimal/countsem.c **** /* Two structures are defined, one is passed to each test task. */
 145:..\Common\Minimal/countsem.c **** static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];
 146:..\Common\Minimal/countsem.c **** 
 147:..\Common\Minimal/countsem.c **** /*-----------------------------------------------------------*/
 148:..\Common\Minimal/countsem.c **** 
 149:..\Common\Minimal/countsem.c **** void vStartCountingSemaphoreTasks( void )
 150:..\Common\Minimal/countsem.c **** {
  47              		.loc 1 150 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 1, uses_anonymous_args = 0
  51 0000 80B5     		push	{r7, lr}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 7, -8
  54              		.cfi_offset 14, -4
  55 0002 82B0     		sub	sp, sp, #8
  56              		.cfi_def_cfa_offset 16
  57 0004 02AF     		add	r7, sp, #8
  58              		.cfi_def_cfa 7, 8
 151:..\Common\Minimal/countsem.c **** 	/* Create the semaphores that we are going to use for the test/demo.  The
 152:..\Common\Minimal/countsem.c **** 	first should be created such that it starts at its maximum count value,
 153:..\Common\Minimal/countsem.c **** 	the second should be created such that it starts with a count value of zero. */
 154:..\Common\Minimal/countsem.c **** 	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE
  59              		.loc 1 154 0
  60 0006 C820     		movs	r0, #200
  61 0008 C821     		movs	r1, #200
  62 000a FFF7FEFF 		bl	xQueueCreateCountingSemaphore
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 5


  63 000e 0246     		mov	r2, r0
  64 0010 1F4B     		ldr	r3, .L4
  65 0012 1A60     		str	r2, [r3]
 155:..\Common\Minimal/countsem.c **** 	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
  66              		.loc 1 155 0
  67 0014 1E4B     		ldr	r3, .L4
  68 0016 AA22     		movs	r2, #170
  69 0018 5A60     		str	r2, [r3, #4]
 156:..\Common\Minimal/countsem.c **** 	xParameters[ 0 ].uxLoopCounter = 0;
  70              		.loc 1 156 0
  71 001a 1D4B     		ldr	r3, .L4
  72 001c 0022     		movs	r2, #0
  73 001e 9A60     		str	r2, [r3, #8]
 157:..\Common\Minimal/countsem.c **** 
 158:..\Common\Minimal/countsem.c **** 	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
  74              		.loc 1 158 0
  75 0020 C820     		movs	r0, #200
  76 0022 0021     		movs	r1, #0
  77 0024 FFF7FEFF 		bl	xQueueCreateCountingSemaphore
  78 0028 0246     		mov	r2, r0
  79 002a 194B     		ldr	r3, .L4
  80 002c DA60     		str	r2, [r3, #12]
 159:..\Common\Minimal/countsem.c **** 	xParameters[ 1 ].uxExpectedStartCount = 0;
  81              		.loc 1 159 0
  82 002e 184B     		ldr	r3, .L4
  83 0030 0022     		movs	r2, #0
  84 0032 1A61     		str	r2, [r3, #16]
 160:..\Common\Minimal/countsem.c **** 	xParameters[ 1 ].uxLoopCounter = 0;
  85              		.loc 1 160 0
  86 0034 164B     		ldr	r3, .L4
  87 0036 0022     		movs	r2, #0
  88 0038 5A61     		str	r2, [r3, #20]
 161:..\Common\Minimal/countsem.c **** 
 162:..\Common\Minimal/countsem.c **** 	/* Were the semaphores created? */
 163:..\Common\Minimal/countsem.c **** 	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
  89              		.loc 1 163 0
  90 003a 154B     		ldr	r3, .L4
  91 003c 1B68     		ldr	r3, [r3]
  92 003e 002B     		cmp	r3, #0
  93 0040 03D1     		bne	.L2
  94              		.loc 1 163 0 is_stmt 0 discriminator 1
  95 0042 134B     		ldr	r3, .L4
  96 0044 DB68     		ldr	r3, [r3, #12]
  97 0046 002B     		cmp	r3, #0
  98 0048 1FD0     		beq	.L1
  99              	.L2:
 164:..\Common\Minimal/countsem.c **** 	{
 165:..\Common\Minimal/countsem.c **** 		/* vQueueAddToRegistry() adds the semaphore to the registry, if one is
 166:..\Common\Minimal/countsem.c **** 		in use.  The registry is provided as a means for kernel aware
 167:..\Common\Minimal/countsem.c **** 		debuggers to locate semaphores and has no purpose if a kernel aware
 168:..\Common\Minimal/countsem.c **** 		debugger is not being used.  The call to vQueueAddToRegistry() will be
 169:..\Common\Minimal/countsem.c **** 		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
 170:..\Common\Minimal/countsem.c **** 		defined or is defined to be less than 1. */
 171:..\Common\Minimal/countsem.c **** 		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
 100              		.loc 1 171 0 is_stmt 1
 101 004a 114B     		ldr	r3, .L4
 102 004c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 6


 103 004e 1846     		mov	r0, r3
 104 0050 1049     		ldr	r1, .L4+4
 105 0052 FFF7FEFF 		bl	vQueueAddToRegistry
 172:..\Common\Minimal/countsem.c **** 		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );
 106              		.loc 1 172 0
 107 0056 0E4B     		ldr	r3, .L4
 108 0058 DB68     		ldr	r3, [r3, #12]
 109 005a 1846     		mov	r0, r3
 110 005c 0E49     		ldr	r1, .L4+8
 111 005e FFF7FEFF 		bl	vQueueAddToRegistry
 173:..\Common\Minimal/countsem.c **** 
 174:..\Common\Minimal/countsem.c **** 		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
 175:..\Common\Minimal/countsem.c **** 		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameter
 112              		.loc 1 175 0
 113 0062 0023     		movs	r3, #0
 114 0064 0093     		str	r3, [sp]
 115 0066 0023     		movs	r3, #0
 116 0068 0193     		str	r3, [sp, #4]
 117 006a 0C48     		ldr	r0, .L4+12
 118 006c 0C49     		ldr	r1, .L4+16
 119 006e 6422     		movs	r2, #100
 120 0070 074B     		ldr	r3, .L4
 121 0072 FFF7FEFF 		bl	xTaskCreate
 176:..\Common\Minimal/countsem.c **** 		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameter
 122              		.loc 1 176 0
 123 0076 0023     		movs	r3, #0
 124 0078 0093     		str	r3, [sp]
 125 007a 0023     		movs	r3, #0
 126 007c 0193     		str	r3, [sp, #4]
 127 007e 0748     		ldr	r0, .L4+12
 128 0080 0849     		ldr	r1, .L4+20
 129 0082 6422     		movs	r2, #100
 130 0084 084B     		ldr	r3, .L4+24
 131 0086 FFF7FEFF 		bl	xTaskCreate
 132              	.L1:
 177:..\Common\Minimal/countsem.c **** 	}
 178:..\Common\Minimal/countsem.c **** }
 133              		.loc 1 178 0
 134 008a BD46     		mov	sp, r7
 135              		.cfi_def_cfa_register 13
 136              		@ sp needed
 137 008c 80BD     		pop	{r7, pc}
 138              	.L5:
 139 008e 00BF     		.align	2
 140              	.L4:
 141 0090 04000000 		.word	xParameters
 142 0094 00000000 		.word	.LC0
 143 0098 10000000 		.word	.LC1
 144 009c 00000000 		.word	prvCountingSemaphoreTask
 145 00a0 20000000 		.word	.LC2
 146 00a4 28000000 		.word	.LC3
 147 00a8 10000000 		.word	xParameters+12
 148              		.cfi_endproc
 149              	.LFE68:
 150              		.size	vStartCountingSemaphoreTasks, .-vStartCountingSemaphoreTasks
 151              		.section	.text.prvDecrementSemaphoreCount,"ax",%progbits
 152              		.align	2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 7


 153              		.thumb
 154              		.thumb_func
 155              		.type	prvDecrementSemaphoreCount, %function
 156              	prvDecrementSemaphoreCount:
 157              	.LFB69:
 179:..\Common\Minimal/countsem.c **** /*-----------------------------------------------------------*/
 180:..\Common\Minimal/countsem.c **** 
 181:..\Common\Minimal/countsem.c **** static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
 182:..\Common\Minimal/countsem.c **** {
 158              		.loc 1 182 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 16
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 84B0     		sub	sp, sp, #16
 167              		.cfi_def_cfa_offset 24
 168 0004 00AF     		add	r7, sp, #0
 169              		.cfi_def_cfa_register 7
 170 0006 7860     		str	r0, [r7, #4]
 171 0008 3960     		str	r1, [r7]
 183:..\Common\Minimal/countsem.c **** UBaseType_t ux;
 184:..\Common\Minimal/countsem.c **** 
 185:..\Common\Minimal/countsem.c **** 	/* If the semaphore count is at its maximum then we should not be able to
 186:..\Common\Minimal/countsem.c **** 	'give' the semaphore. */
 187:..\Common\Minimal/countsem.c **** 	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 172              		.loc 1 187 0
 173 000a 7868     		ldr	r0, [r7, #4]
 174 000c 0021     		movs	r1, #0
 175 000e 0022     		movs	r2, #0
 176 0010 0023     		movs	r3, #0
 177 0012 FFF7FEFF 		bl	xQueueGenericSend
 178 0016 0346     		mov	r3, r0
 179 0018 012B     		cmp	r3, #1
 180 001a 02D1     		bne	.L7
 188:..\Common\Minimal/countsem.c **** 	{
 189:..\Common\Minimal/countsem.c **** 		xErrorDetected = pdTRUE;
 181              		.loc 1 189 0
 182 001c 154B     		ldr	r3, .L12
 183 001e 0122     		movs	r2, #1
 184 0020 1A60     		str	r2, [r3]
 185              	.L7:
 190:..\Common\Minimal/countsem.c **** 	}
 191:..\Common\Minimal/countsem.c **** 
 192:..\Common\Minimal/countsem.c **** 	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
 193:..\Common\Minimal/countsem.c **** 	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 186              		.loc 1 193 0
 187 0022 0023     		movs	r3, #0
 188 0024 FB60     		str	r3, [r7, #12]
 189 0026 13E0     		b	.L8
 190              	.L10:
 194:..\Common\Minimal/countsem.c **** 	{
 195:..\Common\Minimal/countsem.c **** 		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ( countMAX_COUNT_VALUE - ux ) );
 196:..\Common\Minimal/countsem.c **** 
 197:..\Common\Minimal/countsem.c **** 		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 8


 191              		.loc 1 197 0
 192 0028 7868     		ldr	r0, [r7, #4]
 193 002a 0021     		movs	r1, #0
 194 002c 0022     		movs	r2, #0
 195 002e 0023     		movs	r3, #0
 196 0030 FFF7FEFF 		bl	xQueueGenericReceive
 197 0034 0346     		mov	r3, r0
 198 0036 012B     		cmp	r3, #1
 199 0038 02D0     		beq	.L9
 198:..\Common\Minimal/countsem.c **** 		{
 199:..\Common\Minimal/countsem.c **** 			/* We expected to be able to take the semaphore. */
 200:..\Common\Minimal/countsem.c **** 			xErrorDetected = pdTRUE;
 200              		.loc 1 200 0
 201 003a 0E4B     		ldr	r3, .L12
 202 003c 0122     		movs	r2, #1
 203 003e 1A60     		str	r2, [r3]
 204              	.L9:
 201:..\Common\Minimal/countsem.c **** 		}
 202:..\Common\Minimal/countsem.c **** 
 203:..\Common\Minimal/countsem.c **** 		( *puxLoopCounter )++;
 205              		.loc 1 203 0 discriminator 2
 206 0040 3B68     		ldr	r3, [r7]
 207 0042 1B68     		ldr	r3, [r3]
 208 0044 5A1C     		adds	r2, r3, #1
 209 0046 3B68     		ldr	r3, [r7]
 210 0048 1A60     		str	r2, [r3]
 193:..\Common\Minimal/countsem.c **** 	{
 211              		.loc 1 193 0 discriminator 2
 212 004a FB68     		ldr	r3, [r7, #12]
 213 004c 0133     		adds	r3, r3, #1
 214 004e FB60     		str	r3, [r7, #12]
 215              	.L8:
 193:..\Common\Minimal/countsem.c **** 	{
 216              		.loc 1 193 0 is_stmt 0 discriminator 1
 217 0050 FB68     		ldr	r3, [r7, #12]
 218 0052 C72B     		cmp	r3, #199
 219 0054 E8D9     		bls	.L10
 204:..\Common\Minimal/countsem.c **** 	}
 205:..\Common\Minimal/countsem.c **** 
 206:..\Common\Minimal/countsem.c **** 	#if configUSE_PREEMPTION == 0
 207:..\Common\Minimal/countsem.c **** 		taskYIELD();
 208:..\Common\Minimal/countsem.c **** 	#endif
 209:..\Common\Minimal/countsem.c **** 
 210:..\Common\Minimal/countsem.c **** 	/* If the semaphore count is zero then we should not be able to	'take'
 211:..\Common\Minimal/countsem.c **** 	the semaphore. */
 212:..\Common\Minimal/countsem.c **** 	configASSERT( uxSemaphoreGetCount( xSemaphore ) == 0 );
 213:..\Common\Minimal/countsem.c **** 	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 220              		.loc 1 213 0 is_stmt 1
 221 0056 7868     		ldr	r0, [r7, #4]
 222 0058 0021     		movs	r1, #0
 223 005a 0022     		movs	r2, #0
 224 005c 0023     		movs	r3, #0
 225 005e FFF7FEFF 		bl	xQueueGenericReceive
 226 0062 0346     		mov	r3, r0
 227 0064 012B     		cmp	r3, #1
 228 0066 02D1     		bne	.L6
 214:..\Common\Minimal/countsem.c **** 	{
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 9


 215:..\Common\Minimal/countsem.c **** 		xErrorDetected = pdTRUE;
 229              		.loc 1 215 0
 230 0068 024B     		ldr	r3, .L12
 231 006a 0122     		movs	r2, #1
 232 006c 1A60     		str	r2, [r3]
 233              	.L6:
 216:..\Common\Minimal/countsem.c **** 	}
 217:..\Common\Minimal/countsem.c **** }
 234              		.loc 1 217 0
 235 006e 1037     		adds	r7, r7, #16
 236              		.cfi_def_cfa_offset 8
 237 0070 BD46     		mov	sp, r7
 238              		.cfi_def_cfa_register 13
 239              		@ sp needed
 240 0072 80BD     		pop	{r7, pc}
 241              	.L13:
 242              		.align	2
 243              	.L12:
 244 0074 00000000 		.word	xErrorDetected
 245              		.cfi_endproc
 246              	.LFE69:
 247              		.size	prvDecrementSemaphoreCount, .-prvDecrementSemaphoreCount
 248              		.section	.text.prvIncrementSemaphoreCount,"ax",%progbits
 249              		.align	2
 250              		.thumb
 251              		.thumb_func
 252              		.type	prvIncrementSemaphoreCount, %function
 253              	prvIncrementSemaphoreCount:
 254              	.LFB70:
 218:..\Common\Minimal/countsem.c **** /*-----------------------------------------------------------*/
 219:..\Common\Minimal/countsem.c **** 
 220:..\Common\Minimal/countsem.c **** static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
 221:..\Common\Minimal/countsem.c **** {
 255              		.loc 1 221 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 16
 258              		@ frame_needed = 1, uses_anonymous_args = 0
 259 0000 80B5     		push	{r7, lr}
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 84B0     		sub	sp, sp, #16
 264              		.cfi_def_cfa_offset 24
 265 0004 00AF     		add	r7, sp, #0
 266              		.cfi_def_cfa_register 7
 267 0006 7860     		str	r0, [r7, #4]
 268 0008 3960     		str	r1, [r7]
 222:..\Common\Minimal/countsem.c **** UBaseType_t ux;
 223:..\Common\Minimal/countsem.c **** 
 224:..\Common\Minimal/countsem.c **** 	/* If the semaphore count is zero then we should not be able to	'take'
 225:..\Common\Minimal/countsem.c **** 	the semaphore. */
 226:..\Common\Minimal/countsem.c **** 	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 269              		.loc 1 226 0
 270 000a 7868     		ldr	r0, [r7, #4]
 271 000c 0021     		movs	r1, #0
 272 000e 0022     		movs	r2, #0
 273 0010 0023     		movs	r3, #0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 10


 274 0012 FFF7FEFF 		bl	xQueueGenericReceive
 275 0016 0346     		mov	r3, r0
 276 0018 012B     		cmp	r3, #1
 277 001a 02D1     		bne	.L15
 227:..\Common\Minimal/countsem.c **** 	{
 228:..\Common\Minimal/countsem.c **** 		xErrorDetected = pdTRUE;
 278              		.loc 1 228 0
 279 001c 154B     		ldr	r3, .L20
 280 001e 0122     		movs	r2, #1
 281 0020 1A60     		str	r2, [r3]
 282              	.L15:
 229:..\Common\Minimal/countsem.c **** 	}
 230:..\Common\Minimal/countsem.c **** 
 231:..\Common\Minimal/countsem.c **** 	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
 232:..\Common\Minimal/countsem.c **** 	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 283              		.loc 1 232 0
 284 0022 0023     		movs	r3, #0
 285 0024 FB60     		str	r3, [r7, #12]
 286 0026 13E0     		b	.L16
 287              	.L18:
 233:..\Common\Minimal/countsem.c **** 	{
 234:..\Common\Minimal/countsem.c **** 		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ux );
 235:..\Common\Minimal/countsem.c **** 
 236:..\Common\Minimal/countsem.c **** 		if( xSemaphoreGive( xSemaphore ) != pdPASS )
 288              		.loc 1 236 0
 289 0028 7868     		ldr	r0, [r7, #4]
 290 002a 0021     		movs	r1, #0
 291 002c 0022     		movs	r2, #0
 292 002e 0023     		movs	r3, #0
 293 0030 FFF7FEFF 		bl	xQueueGenericSend
 294 0034 0346     		mov	r3, r0
 295 0036 012B     		cmp	r3, #1
 296 0038 02D0     		beq	.L17
 237:..\Common\Minimal/countsem.c **** 		{
 238:..\Common\Minimal/countsem.c **** 			/* We expected to be able to take the semaphore. */
 239:..\Common\Minimal/countsem.c **** 			xErrorDetected = pdTRUE;
 297              		.loc 1 239 0
 298 003a 0E4B     		ldr	r3, .L20
 299 003c 0122     		movs	r2, #1
 300 003e 1A60     		str	r2, [r3]
 301              	.L17:
 240:..\Common\Minimal/countsem.c **** 		}
 241:..\Common\Minimal/countsem.c **** 
 242:..\Common\Minimal/countsem.c **** 		( *puxLoopCounter )++;
 302              		.loc 1 242 0 discriminator 2
 303 0040 3B68     		ldr	r3, [r7]
 304 0042 1B68     		ldr	r3, [r3]
 305 0044 5A1C     		adds	r2, r3, #1
 306 0046 3B68     		ldr	r3, [r7]
 307 0048 1A60     		str	r2, [r3]
 232:..\Common\Minimal/countsem.c **** 	{
 308              		.loc 1 232 0 discriminator 2
 309 004a FB68     		ldr	r3, [r7, #12]
 310 004c 0133     		adds	r3, r3, #1
 311 004e FB60     		str	r3, [r7, #12]
 312              	.L16:
 232:..\Common\Minimal/countsem.c **** 	{
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 11


 313              		.loc 1 232 0 is_stmt 0 discriminator 1
 314 0050 FB68     		ldr	r3, [r7, #12]
 315 0052 C72B     		cmp	r3, #199
 316 0054 E8D9     		bls	.L18
 243:..\Common\Minimal/countsem.c **** 	}
 244:..\Common\Minimal/countsem.c **** 
 245:..\Common\Minimal/countsem.c **** 	#if configUSE_PREEMPTION == 0
 246:..\Common\Minimal/countsem.c **** 		taskYIELD();
 247:..\Common\Minimal/countsem.c **** 	#endif
 248:..\Common\Minimal/countsem.c **** 
 249:..\Common\Minimal/countsem.c **** 	/* If the semaphore count is at its maximum then we should not be able to
 250:..\Common\Minimal/countsem.c **** 	'give' the semaphore. */
 251:..\Common\Minimal/countsem.c **** 	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 317              		.loc 1 251 0 is_stmt 1
 318 0056 7868     		ldr	r0, [r7, #4]
 319 0058 0021     		movs	r1, #0
 320 005a 0022     		movs	r2, #0
 321 005c 0023     		movs	r3, #0
 322 005e FFF7FEFF 		bl	xQueueGenericSend
 323 0062 0346     		mov	r3, r0
 324 0064 012B     		cmp	r3, #1
 325 0066 02D1     		bne	.L14
 252:..\Common\Minimal/countsem.c **** 	{
 253:..\Common\Minimal/countsem.c **** 		xErrorDetected = pdTRUE;
 326              		.loc 1 253 0
 327 0068 024B     		ldr	r3, .L20
 328 006a 0122     		movs	r2, #1
 329 006c 1A60     		str	r2, [r3]
 330              	.L14:
 254:..\Common\Minimal/countsem.c **** 	}
 255:..\Common\Minimal/countsem.c **** }
 331              		.loc 1 255 0
 332 006e 1037     		adds	r7, r7, #16
 333              		.cfi_def_cfa_offset 8
 334 0070 BD46     		mov	sp, r7
 335              		.cfi_def_cfa_register 13
 336              		@ sp needed
 337 0072 80BD     		pop	{r7, pc}
 338              	.L21:
 339              		.align	2
 340              	.L20:
 341 0074 00000000 		.word	xErrorDetected
 342              		.cfi_endproc
 343              	.LFE70:
 344              		.size	prvIncrementSemaphoreCount, .-prvIncrementSemaphoreCount
 345              		.section	.text.prvCountingSemaphoreTask,"ax",%progbits
 346              		.align	2
 347              		.thumb
 348              		.thumb_func
 349              		.type	prvCountingSemaphoreTask, %function
 350              	prvCountingSemaphoreTask:
 351              	.LFB71:
 256:..\Common\Minimal/countsem.c **** /*-----------------------------------------------------------*/
 257:..\Common\Minimal/countsem.c **** 
 258:..\Common\Minimal/countsem.c **** static void prvCountingSemaphoreTask( void *pvParameters )
 259:..\Common\Minimal/countsem.c **** {
 352              		.loc 1 259 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 12


 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 16
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356 0000 80B5     		push	{r7, lr}
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 7, -8
 359              		.cfi_offset 14, -4
 360 0002 84B0     		sub	sp, sp, #16
 361              		.cfi_def_cfa_offset 24
 362 0004 00AF     		add	r7, sp, #0
 363              		.cfi_def_cfa_register 7
 364 0006 7860     		str	r0, [r7, #4]
 260:..\Common\Minimal/countsem.c **** xCountSemStruct *pxParameter;
 261:..\Common\Minimal/countsem.c **** 
 262:..\Common\Minimal/countsem.c **** 	#ifdef USE_STDIO
 263:..\Common\Minimal/countsem.c **** 	void vPrintDisplayMessage( const char * const * ppcMessageToSend );
 264:..\Common\Minimal/countsem.c **** 
 265:..\Common\Minimal/countsem.c **** 		const char * const pcTaskStartMsg = "Counting semaphore demo started.\r\n";
 266:..\Common\Minimal/countsem.c **** 
 267:..\Common\Minimal/countsem.c **** 		/* Queue a message for printing to say the task has started. */
 268:..\Common\Minimal/countsem.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 269:..\Common\Minimal/countsem.c **** 	#endif
 270:..\Common\Minimal/countsem.c **** 
 271:..\Common\Minimal/countsem.c **** 	/* The semaphore to be used was passed as the parameter. */
 272:..\Common\Minimal/countsem.c **** 	pxParameter = ( xCountSemStruct * ) pvParameters;
 365              		.loc 1 272 0
 366 0008 7B68     		ldr	r3, [r7, #4]
 367 000a FB60     		str	r3, [r7, #12]
 273:..\Common\Minimal/countsem.c **** 
 274:..\Common\Minimal/countsem.c **** 	/* Did we expect to find the semaphore already at its max count value, or
 275:..\Common\Minimal/countsem.c **** 	at zero? */
 276:..\Common\Minimal/countsem.c **** 	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
 368              		.loc 1 276 0
 369 000c FB68     		ldr	r3, [r7, #12]
 370 000e 5B68     		ldr	r3, [r3, #4]
 371 0010 AA2B     		cmp	r3, #170
 372 0012 07D1     		bne	.L23
 277:..\Common\Minimal/countsem.c **** 	{
 278:..\Common\Minimal/countsem.c **** 		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 373              		.loc 1 278 0
 374 0014 FB68     		ldr	r3, [r7, #12]
 375 0016 1A68     		ldr	r2, [r3]
 376 0018 FB68     		ldr	r3, [r7, #12]
 377 001a 0833     		adds	r3, r3, #8
 378 001c 1046     		mov	r0, r2
 379 001e 1946     		mov	r1, r3
 380 0020 FFF7FEFF 		bl	prvDecrementSemaphoreCount
 381              	.L23:
 279:..\Common\Minimal/countsem.c **** 	}
 280:..\Common\Minimal/countsem.c **** 
 281:..\Common\Minimal/countsem.c **** 	/* Now we expect the semaphore count to be 0, so this time there is an
 282:..\Common\Minimal/countsem.c **** 	error if we can take the semaphore. */
 283:..\Common\Minimal/countsem.c **** 	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
 382              		.loc 1 283 0
 383 0024 FB68     		ldr	r3, [r7, #12]
 384 0026 1B68     		ldr	r3, [r3]
 385 0028 1846     		mov	r0, r3
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 13


 386 002a 0021     		movs	r1, #0
 387 002c 0022     		movs	r2, #0
 388 002e 0023     		movs	r3, #0
 389 0030 FFF7FEFF 		bl	xQueueGenericReceive
 390 0034 0346     		mov	r3, r0
 391 0036 012B     		cmp	r3, #1
 392 0038 02D1     		bne	.L24
 284:..\Common\Minimal/countsem.c **** 	{
 285:..\Common\Minimal/countsem.c **** 		xErrorDetected = pdTRUE;
 393              		.loc 1 285 0
 394 003a 0A4B     		ldr	r3, .L25
 395 003c 0122     		movs	r2, #1
 396 003e 1A60     		str	r2, [r3]
 397              	.L24:
 286:..\Common\Minimal/countsem.c **** 	}
 287:..\Common\Minimal/countsem.c **** 
 288:..\Common\Minimal/countsem.c **** 	for( ;; )
 289:..\Common\Minimal/countsem.c **** 	{
 290:..\Common\Minimal/countsem.c **** 		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 398              		.loc 1 290 0 discriminator 1
 399 0040 FB68     		ldr	r3, [r7, #12]
 400 0042 1A68     		ldr	r2, [r3]
 401 0044 FB68     		ldr	r3, [r7, #12]
 402 0046 0833     		adds	r3, r3, #8
 403 0048 1046     		mov	r0, r2
 404 004a 1946     		mov	r1, r3
 405 004c FFF7FEFF 		bl	prvIncrementSemaphoreCount
 291:..\Common\Minimal/countsem.c **** 		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 406              		.loc 1 291 0 discriminator 1
 407 0050 FB68     		ldr	r3, [r7, #12]
 408 0052 1A68     		ldr	r2, [r3]
 409 0054 FB68     		ldr	r3, [r7, #12]
 410 0056 0833     		adds	r3, r3, #8
 411 0058 1046     		mov	r0, r2
 412 005a 1946     		mov	r1, r3
 413 005c FFF7FEFF 		bl	prvDecrementSemaphoreCount
 292:..\Common\Minimal/countsem.c **** 	}
 414              		.loc 1 292 0 discriminator 1
 415 0060 EEE7     		b	.L24
 416              	.L26:
 417 0062 00BF     		.align	2
 418              	.L25:
 419 0064 00000000 		.word	xErrorDetected
 420              		.cfi_endproc
 421              	.LFE71:
 422              		.size	prvCountingSemaphoreTask, .-prvCountingSemaphoreTask
 423              		.section	.text.xAreCountingSemaphoreTasksStillRunning,"ax",%progbits
 424              		.align	2
 425              		.global	xAreCountingSemaphoreTasksStillRunning
 426              		.thumb
 427              		.thumb_func
 428              		.type	xAreCountingSemaphoreTasksStillRunning, %function
 429              	xAreCountingSemaphoreTasksStillRunning:
 430              	.LFB72:
 293:..\Common\Minimal/countsem.c **** }
 294:..\Common\Minimal/countsem.c **** /*-----------------------------------------------------------*/
 295:..\Common\Minimal/countsem.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 14


 296:..\Common\Minimal/countsem.c **** BaseType_t xAreCountingSemaphoreTasksStillRunning( void )
 297:..\Common\Minimal/countsem.c **** {
 431              		.loc 1 297 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 8
 434              		@ frame_needed = 1, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 436 0000 80B4     		push	{r7}
 437              		.cfi_def_cfa_offset 4
 438              		.cfi_offset 7, -4
 439 0002 83B0     		sub	sp, sp, #12
 440              		.cfi_def_cfa_offset 16
 441 0004 00AF     		add	r7, sp, #0
 442              		.cfi_def_cfa_register 7
 298:..\Common\Minimal/countsem.c **** static UBaseType_t uxLastCount0 = 0, uxLastCount1 = 0;
 299:..\Common\Minimal/countsem.c **** BaseType_t xReturn = pdPASS;
 443              		.loc 1 299 0
 444 0006 0123     		movs	r3, #1
 445 0008 7B60     		str	r3, [r7, #4]
 300:..\Common\Minimal/countsem.c **** 
 301:..\Common\Minimal/countsem.c **** 	/* Return fail if any 'give' or 'take' did not result in the expected
 302:..\Common\Minimal/countsem.c **** 	behaviour. */
 303:..\Common\Minimal/countsem.c **** 	if( xErrorDetected != pdFALSE )
 446              		.loc 1 303 0
 447 000a 134B     		ldr	r3, .L34
 448 000c 1B68     		ldr	r3, [r3]
 449 000e 002B     		cmp	r3, #0
 450 0010 01D0     		beq	.L28
 304:..\Common\Minimal/countsem.c **** 	{
 305:..\Common\Minimal/countsem.c **** 		xReturn = pdFAIL;
 451              		.loc 1 305 0
 452 0012 0023     		movs	r3, #0
 453 0014 7B60     		str	r3, [r7, #4]
 454              	.L28:
 306:..\Common\Minimal/countsem.c **** 	}
 307:..\Common\Minimal/countsem.c **** 
 308:..\Common\Minimal/countsem.c **** 	/* Return fail if either task is not still incrementing its loop counter. */
 309:..\Common\Minimal/countsem.c **** 	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
 455              		.loc 1 309 0
 456 0016 114B     		ldr	r3, .L34+4
 457 0018 9A68     		ldr	r2, [r3, #8]
 458 001a 114B     		ldr	r3, .L34+8
 459 001c 1B68     		ldr	r3, [r3]
 460 001e 9A42     		cmp	r2, r3
 461 0020 02D1     		bne	.L29
 310:..\Common\Minimal/countsem.c **** 	{
 311:..\Common\Minimal/countsem.c **** 		xReturn = pdFAIL;
 462              		.loc 1 311 0
 463 0022 0023     		movs	r3, #0
 464 0024 7B60     		str	r3, [r7, #4]
 465 0026 03E0     		b	.L30
 466              	.L29:
 312:..\Common\Minimal/countsem.c **** 	}
 313:..\Common\Minimal/countsem.c **** 	else
 314:..\Common\Minimal/countsem.c **** 	{
 315:..\Common\Minimal/countsem.c **** 		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
 467              		.loc 1 315 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 15


 468 0028 0C4B     		ldr	r3, .L34+4
 469 002a 9B68     		ldr	r3, [r3, #8]
 470 002c 0C4A     		ldr	r2, .L34+8
 471 002e 1360     		str	r3, [r2]
 472              	.L30:
 316:..\Common\Minimal/countsem.c **** 	}
 317:..\Common\Minimal/countsem.c **** 
 318:..\Common\Minimal/countsem.c **** 	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
 473              		.loc 1 318 0
 474 0030 0A4B     		ldr	r3, .L34+4
 475 0032 5A69     		ldr	r2, [r3, #20]
 476 0034 0B4B     		ldr	r3, .L34+12
 477 0036 1B68     		ldr	r3, [r3]
 478 0038 9A42     		cmp	r2, r3
 479 003a 02D1     		bne	.L31
 319:..\Common\Minimal/countsem.c **** 	{
 320:..\Common\Minimal/countsem.c **** 		xReturn = pdFAIL;
 480              		.loc 1 320 0
 481 003c 0023     		movs	r3, #0
 482 003e 7B60     		str	r3, [r7, #4]
 483 0040 03E0     		b	.L32
 484              	.L31:
 321:..\Common\Minimal/countsem.c **** 	}
 322:..\Common\Minimal/countsem.c **** 	else
 323:..\Common\Minimal/countsem.c **** 	{
 324:..\Common\Minimal/countsem.c **** 		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
 485              		.loc 1 324 0
 486 0042 064B     		ldr	r3, .L34+4
 487 0044 5B69     		ldr	r3, [r3, #20]
 488 0046 074A     		ldr	r2, .L34+12
 489 0048 1360     		str	r3, [r2]
 490              	.L32:
 325:..\Common\Minimal/countsem.c **** 	}
 326:..\Common\Minimal/countsem.c **** 
 327:..\Common\Minimal/countsem.c **** 	return xReturn;
 491              		.loc 1 327 0
 492 004a 7B68     		ldr	r3, [r7, #4]
 328:..\Common\Minimal/countsem.c **** }
 493              		.loc 1 328 0
 494 004c 1846     		mov	r0, r3
 495 004e 0C37     		adds	r7, r7, #12
 496              		.cfi_def_cfa_offset 4
 497 0050 BD46     		mov	sp, r7
 498              		.cfi_def_cfa_register 13
 499              		@ sp needed
 500 0052 5DF8047B 		ldr	r7, [sp], #4
 501              		.cfi_restore 7
 502              		.cfi_def_cfa_offset 0
 503 0056 7047     		bx	lr
 504              	.L35:
 505              		.align	2
 506              	.L34:
 507 0058 00000000 		.word	xErrorDetected
 508 005c 04000000 		.word	xParameters
 509 0060 1C000000 		.word	uxLastCount0.6675
 510 0064 20000000 		.word	uxLastCount1.6676
 511              		.cfi_endproc
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 16


 512              	.LFE72:
 513              		.size	xAreCountingSemaphoreTasksStillRunning, .-xAreCountingSemaphoreTasksStillRunning
 514              		.bss
 515              		.align	2
 516              	uxLastCount0.6675:
 517 001c 00000000 		.space	4
 518              		.align	2
 519              	uxLastCount1.6676:
 520 0020 00000000 		.space	4
 521              		.text
 522              	.Letext0:
 523              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 524              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 525              		.file 4 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 526              		.file 5 "..\\Source\\include/queue.h"
 527              		.file 6 "..\\Source\\include/semphr.h"
 528              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 529              		.section	.debug_info,"",%progbits
 530              	.Ldebug_info0:
 531 0000 90020000 		.4byte	0x290
 532 0004 0400     		.2byte	0x4
 533 0006 00000000 		.4byte	.Ldebug_abbrev0
 534 000a 04       		.byte	0x4
 535 000b 01       		.uleb128 0x1
 536 000c 7C000000 		.4byte	.LASF37
 537 0010 01       		.byte	0x1
 538 0011 9E010000 		.4byte	.LASF38
 539 0015 06030000 		.4byte	.LASF39
 540 0019 00000000 		.4byte	.Ldebug_ranges0+0
 541 001d 00000000 		.4byte	0
 542 0021 00000000 		.4byte	.Ldebug_line0
 543 0025 02       		.uleb128 0x2
 544 0026 04       		.byte	0x4
 545 0027 05       		.byte	0x5
 546 0028 696E7400 		.ascii	"int\000"
 547 002c 03       		.uleb128 0x3
 548 002d 04       		.byte	0x4
 549 002e 07       		.byte	0x7
 550 002f 21020000 		.4byte	.LASF0
 551 0033 03       		.uleb128 0x3
 552 0034 01       		.byte	0x1
 553 0035 06       		.byte	0x6
 554 0036 44010000 		.4byte	.LASF1
 555 003a 03       		.uleb128 0x3
 556 003b 01       		.byte	0x1
 557 003c 08       		.byte	0x8
 558 003d 50010000 		.4byte	.LASF2
 559 0041 03       		.uleb128 0x3
 560 0042 02       		.byte	0x2
 561 0043 05       		.byte	0x5
 562 0044 B8020000 		.4byte	.LASF3
 563 0048 03       		.uleb128 0x3
 564 0049 02       		.byte	0x2
 565 004a 07       		.byte	0x7
 566 004b 7E010000 		.4byte	.LASF4
 567 004f 04       		.uleb128 0x4
 568 0050 72000000 		.4byte	.LASF6
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 17


 569 0054 02       		.byte	0x2
 570 0055 3F       		.byte	0x3f
 571 0056 5A000000 		.4byte	0x5a
 572 005a 03       		.uleb128 0x3
 573 005b 04       		.byte	0x4
 574 005c 05       		.byte	0x5
 575 005d CB020000 		.4byte	.LASF5
 576 0061 04       		.uleb128 0x4
 577 0062 E7010000 		.4byte	.LASF7
 578 0066 02       		.byte	0x2
 579 0067 41       		.byte	0x41
 580 0068 6C000000 		.4byte	0x6c
 581 006c 03       		.uleb128 0x3
 582 006d 04       		.byte	0x4
 583 006e 07       		.byte	0x7
 584 006f 6C010000 		.4byte	.LASF8
 585 0073 03       		.uleb128 0x3
 586 0074 08       		.byte	0x8
 587 0075 05       		.byte	0x5
 588 0076 98020000 		.4byte	.LASF9
 589 007a 03       		.uleb128 0x3
 590 007b 08       		.byte	0x8
 591 007c 07       		.byte	0x7
 592 007d 2E020000 		.4byte	.LASF10
 593 0081 04       		.uleb128 0x4
 594 0082 87020000 		.4byte	.LASF11
 595 0086 03       		.byte	0x3
 596 0087 2C       		.byte	0x2c
 597 0088 4F000000 		.4byte	0x4f
 598 008c 04       		.uleb128 0x4
 599 008d C2020000 		.4byte	.LASF12
 600 0091 03       		.byte	0x3
 601 0092 2D       		.byte	0x2d
 602 0093 61000000 		.4byte	0x61
 603 0097 03       		.uleb128 0x3
 604 0098 04       		.byte	0x4
 605 0099 04       		.byte	0x4
 606 009a 3E010000 		.4byte	.LASF13
 607 009e 03       		.uleb128 0x3
 608 009f 08       		.byte	0x8
 609 00a0 04       		.byte	0x4
 610 00a1 18010000 		.4byte	.LASF14
 611 00a5 03       		.uleb128 0x3
 612 00a6 01       		.byte	0x1
 613 00a7 08       		.byte	0x8
 614 00a8 A6020000 		.4byte	.LASF15
 615 00ac 03       		.uleb128 0x3
 616 00ad 04       		.byte	0x4
 617 00ae 07       		.byte	0x7
 618 00af 8F020000 		.4byte	.LASF16
 619 00b3 05       		.uleb128 0x5
 620 00b4 04       		.byte	0x4
 621 00b5 04       		.uleb128 0x4
 622 00b6 FB020000 		.4byte	.LASF17
 623 00ba 04       		.byte	0x4
 624 00bb 62       		.byte	0x62
 625 00bc 5A000000 		.4byte	0x5a
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 18


 626 00c0 04       		.uleb128 0x4
 627 00c1 EF020000 		.4byte	.LASF18
 628 00c5 04       		.byte	0x4
 629 00c6 63       		.byte	0x63
 630 00c7 6C000000 		.4byte	0x6c
 631 00cb 04       		.uleb128 0x4
 632 00cc 56000000 		.4byte	.LASF19
 633 00d0 04       		.byte	0x4
 634 00d1 69       		.byte	0x69
 635 00d2 8C000000 		.4byte	0x8c
 636 00d6 04       		.uleb128 0x4
 637 00d7 0A010000 		.4byte	.LASF20
 638 00db 05       		.byte	0x5
 639 00dc 58       		.byte	0x58
 640 00dd B3000000 		.4byte	0xb3
 641 00e1 04       		.uleb128 0x4
 642 00e2 D5010000 		.4byte	.LASF21
 643 00e6 06       		.byte	0x6
 644 00e7 4F       		.byte	0x4f
 645 00e8 D6000000 		.4byte	0xd6
 646 00ec 06       		.uleb128 0x6
 647 00ed 61000000 		.4byte	.LASF40
 648 00f1 0C       		.byte	0xc
 649 00f2 01       		.byte	0x1
 650 00f3 81       		.byte	0x81
 651 00f4 1D010000 		.4byte	0x11d
 652 00f8 07       		.uleb128 0x7
 653 00f9 00000000 		.4byte	.LASF22
 654 00fd 01       		.byte	0x1
 655 00fe 84       		.byte	0x84
 656 00ff E1000000 		.4byte	0xe1
 657 0103 00       		.byte	0
 658 0104 07       		.uleb128 0x7
 659 0105 41000000 		.4byte	.LASF23
 660 0109 01       		.byte	0x1
 661 010a 89       		.byte	0x89
 662 010b C0000000 		.4byte	0xc0
 663 010f 04       		.byte	0x4
 664 0110 07       		.uleb128 0x7
 665 0111 5E010000 		.4byte	.LASF24
 666 0115 01       		.byte	0x1
 667 0116 8D       		.byte	0x8d
 668 0117 C0000000 		.4byte	0xc0
 669 011b 08       		.byte	0x8
 670 011c 00       		.byte	0
 671 011d 04       		.uleb128 0x4
 672 011e 1F010000 		.4byte	.LASF25
 673 0122 01       		.byte	0x1
 674 0123 8E       		.byte	0x8e
 675 0124 EC000000 		.4byte	0xec
 676 0128 08       		.uleb128 0x8
 677 0129 45020000 		.4byte	.LASF41
 678 012d 01       		.byte	0x1
 679 012e 95       		.byte	0x95
 680 012f 00000000 		.4byte	.LFB68
 681 0133 AC000000 		.4byte	.LFE68-.LFB68
 682 0137 01       		.uleb128 0x1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 19


 683 0138 9C       		.byte	0x9c
 684 0139 09       		.uleb128 0x9
 685 013a 0B000000 		.4byte	.LASF27
 686 013e 01       		.byte	0x1
 687 013f B5       		.byte	0xb5
 688 0140 00000000 		.4byte	.LFB69
 689 0144 78000000 		.4byte	.LFE69-.LFB69
 690 0148 01       		.uleb128 0x1
 691 0149 9C       		.byte	0x9c
 692 014a 78010000 		.4byte	0x178
 693 014e 0A       		.uleb128 0xa
 694 014f 00000000 		.4byte	.LASF22
 695 0153 01       		.byte	0x1
 696 0154 B5       		.byte	0xb5
 697 0155 E1000000 		.4byte	0xe1
 698 0159 02       		.uleb128 0x2
 699 015a 91       		.byte	0x91
 700 015b 6C       		.sleb128 -20
 701 015c 0A       		.uleb128 0xa
 702 015d 2F010000 		.4byte	.LASF26
 703 0161 01       		.byte	0x1
 704 0162 B5       		.byte	0xb5
 705 0163 78010000 		.4byte	0x178
 706 0167 02       		.uleb128 0x2
 707 0168 91       		.byte	0x91
 708 0169 68       		.sleb128 -24
 709 016a 0B       		.uleb128 0xb
 710 016b 757800   		.ascii	"ux\000"
 711 016e 01       		.byte	0x1
 712 016f B7       		.byte	0xb7
 713 0170 C0000000 		.4byte	0xc0
 714 0174 02       		.uleb128 0x2
 715 0175 91       		.byte	0x91
 716 0176 74       		.sleb128 -12
 717 0177 00       		.byte	0
 718 0178 0C       		.uleb128 0xc
 719 0179 04       		.byte	0x4
 720 017a C0000000 		.4byte	0xc0
 721 017e 09       		.uleb128 0x9
 722 017f 26000000 		.4byte	.LASF28
 723 0183 01       		.byte	0x1
 724 0184 DC       		.byte	0xdc
 725 0185 00000000 		.4byte	.LFB70
 726 0189 78000000 		.4byte	.LFE70-.LFB70
 727 018d 01       		.uleb128 0x1
 728 018e 9C       		.byte	0x9c
 729 018f BD010000 		.4byte	0x1bd
 730 0193 0A       		.uleb128 0xa
 731 0194 00000000 		.4byte	.LASF22
 732 0198 01       		.byte	0x1
 733 0199 DC       		.byte	0xdc
 734 019a E1000000 		.4byte	0xe1
 735 019e 02       		.uleb128 0x2
 736 019f 91       		.byte	0x91
 737 01a0 6C       		.sleb128 -20
 738 01a1 0A       		.uleb128 0xa
 739 01a2 2F010000 		.4byte	.LASF26
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 20


 740 01a6 01       		.byte	0x1
 741 01a7 DC       		.byte	0xdc
 742 01a8 78010000 		.4byte	0x178
 743 01ac 02       		.uleb128 0x2
 744 01ad 91       		.byte	0x91
 745 01ae 68       		.sleb128 -24
 746 01af 0B       		.uleb128 0xb
 747 01b0 757800   		.ascii	"ux\000"
 748 01b3 01       		.byte	0x1
 749 01b4 DE       		.byte	0xde
 750 01b5 C0000000 		.4byte	0xc0
 751 01b9 02       		.uleb128 0x2
 752 01ba 91       		.byte	0x91
 753 01bb 74       		.sleb128 -12
 754 01bc 00       		.byte	0
 755 01bd 0D       		.uleb128 0xd
 756 01be 6E020000 		.4byte	.LASF29
 757 01c2 01       		.byte	0x1
 758 01c3 0201     		.2byte	0x102
 759 01c5 00000000 		.4byte	.LFB71
 760 01c9 68000000 		.4byte	.LFE71-.LFB71
 761 01cd 01       		.uleb128 0x1
 762 01ce 9C       		.byte	0x9c
 763 01cf F2010000 		.4byte	0x1f2
 764 01d3 0E       		.uleb128 0xe
 765 01d4 AB020000 		.4byte	.LASF30
 766 01d8 01       		.byte	0x1
 767 01d9 0201     		.2byte	0x102
 768 01db B3000000 		.4byte	0xb3
 769 01df 02       		.uleb128 0x2
 770 01e0 91       		.byte	0x91
 771 01e1 6C       		.sleb128 -20
 772 01e2 0F       		.uleb128 0xf
 773 01e3 D4020000 		.4byte	.LASF31
 774 01e7 01       		.byte	0x1
 775 01e8 0401     		.2byte	0x104
 776 01ea F2010000 		.4byte	0x1f2
 777 01ee 02       		.uleb128 0x2
 778 01ef 91       		.byte	0x91
 779 01f0 74       		.sleb128 -12
 780 01f1 00       		.byte	0
 781 01f2 0C       		.uleb128 0xc
 782 01f3 04       		.byte	0x4
 783 01f4 1D010000 		.4byte	0x11d
 784 01f8 10       		.uleb128 0x10
 785 01f9 F2010000 		.4byte	.LASF42
 786 01fd 01       		.byte	0x1
 787 01fe 2801     		.2byte	0x128
 788 0200 B5000000 		.4byte	0xb5
 789 0204 00000000 		.4byte	.LFB72
 790 0208 68000000 		.4byte	.LFE72-.LFB72
 791 020c 01       		.uleb128 0x1
 792 020d 9C       		.byte	0x9c
 793 020e 46020000 		.4byte	0x246
 794 0212 0F       		.uleb128 0xf
 795 0213 BB010000 		.4byte	.LASF32
 796 0217 01       		.byte	0x1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 21


 797 0218 2A01     		.2byte	0x12a
 798 021a C0000000 		.4byte	0xc0
 799 021e 05       		.uleb128 0x5
 800 021f 03       		.byte	0x3
 801 0220 1C000000 		.4byte	uxLastCount0.6675
 802 0224 0F       		.uleb128 0xf
 803 0225 C8010000 		.4byte	.LASF33
 804 0229 01       		.byte	0x1
 805 022a 2A01     		.2byte	0x12a
 806 022c C0000000 		.4byte	0xc0
 807 0230 05       		.uleb128 0x5
 808 0231 03       		.byte	0x3
 809 0232 20000000 		.4byte	uxLastCount1.6676
 810 0236 0F       		.uleb128 0xf
 811 0237 19020000 		.4byte	.LASF34
 812 023b 01       		.byte	0x1
 813 023c 2B01     		.2byte	0x12b
 814 023e B5000000 		.4byte	0xb5
 815 0242 02       		.uleb128 0x2
 816 0243 91       		.byte	0x91
 817 0244 74       		.sleb128 -12
 818 0245 00       		.byte	0
 819 0246 11       		.uleb128 0x11
 820 0247 E0020000 		.4byte	.LASF35
 821 024b 01       		.byte	0x1
 822 024c 66       		.byte	0x66
 823 024d 57020000 		.4byte	0x257
 824 0251 05       		.uleb128 0x5
 825 0252 03       		.byte	0x3
 826 0253 00000000 		.4byte	xErrorDetected
 827 0257 12       		.uleb128 0x12
 828 0258 B5000000 		.4byte	0xb5
 829 025c 13       		.uleb128 0x13
 830 025d 1D010000 		.4byte	0x11d
 831 0261 6C020000 		.4byte	0x26c
 832 0265 14       		.uleb128 0x14
 833 0266 AC000000 		.4byte	0xac
 834 026a 01       		.byte	0x1
 835 026b 00       		.byte	0
 836 026c 11       		.uleb128 0x11
 837 026d 62020000 		.4byte	.LASF36
 838 0271 01       		.byte	0x1
 839 0272 91       		.byte	0x91
 840 0273 7D020000 		.4byte	0x27d
 841 0277 05       		.uleb128 0x5
 842 0278 03       		.byte	0x3
 843 0279 04000000 		.4byte	xParameters
 844 027d 12       		.uleb128 0x12
 845 027e 5C020000 		.4byte	0x25c
 846 0282 15       		.uleb128 0x15
 847 0283 91010000 		.4byte	.LASF43
 848 0287 07       		.byte	0x7
 849 0288 9606     		.2byte	0x696
 850 028a 8E020000 		.4byte	0x28e
 851 028e 12       		.uleb128 0x12
 852 028f 81000000 		.4byte	0x81
 853 0293 00       		.byte	0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 22


 854              		.section	.debug_abbrev,"",%progbits
 855              	.Ldebug_abbrev0:
 856 0000 01       		.uleb128 0x1
 857 0001 11       		.uleb128 0x11
 858 0002 01       		.byte	0x1
 859 0003 25       		.uleb128 0x25
 860 0004 0E       		.uleb128 0xe
 861 0005 13       		.uleb128 0x13
 862 0006 0B       		.uleb128 0xb
 863 0007 03       		.uleb128 0x3
 864 0008 0E       		.uleb128 0xe
 865 0009 1B       		.uleb128 0x1b
 866 000a 0E       		.uleb128 0xe
 867 000b 55       		.uleb128 0x55
 868 000c 17       		.uleb128 0x17
 869 000d 11       		.uleb128 0x11
 870 000e 01       		.uleb128 0x1
 871 000f 10       		.uleb128 0x10
 872 0010 17       		.uleb128 0x17
 873 0011 00       		.byte	0
 874 0012 00       		.byte	0
 875 0013 02       		.uleb128 0x2
 876 0014 24       		.uleb128 0x24
 877 0015 00       		.byte	0
 878 0016 0B       		.uleb128 0xb
 879 0017 0B       		.uleb128 0xb
 880 0018 3E       		.uleb128 0x3e
 881 0019 0B       		.uleb128 0xb
 882 001a 03       		.uleb128 0x3
 883 001b 08       		.uleb128 0x8
 884 001c 00       		.byte	0
 885 001d 00       		.byte	0
 886 001e 03       		.uleb128 0x3
 887 001f 24       		.uleb128 0x24
 888 0020 00       		.byte	0
 889 0021 0B       		.uleb128 0xb
 890 0022 0B       		.uleb128 0xb
 891 0023 3E       		.uleb128 0x3e
 892 0024 0B       		.uleb128 0xb
 893 0025 03       		.uleb128 0x3
 894 0026 0E       		.uleb128 0xe
 895 0027 00       		.byte	0
 896 0028 00       		.byte	0
 897 0029 04       		.uleb128 0x4
 898 002a 16       		.uleb128 0x16
 899 002b 00       		.byte	0
 900 002c 03       		.uleb128 0x3
 901 002d 0E       		.uleb128 0xe
 902 002e 3A       		.uleb128 0x3a
 903 002f 0B       		.uleb128 0xb
 904 0030 3B       		.uleb128 0x3b
 905 0031 0B       		.uleb128 0xb
 906 0032 49       		.uleb128 0x49
 907 0033 13       		.uleb128 0x13
 908 0034 00       		.byte	0
 909 0035 00       		.byte	0
 910 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 23


 911 0037 0F       		.uleb128 0xf
 912 0038 00       		.byte	0
 913 0039 0B       		.uleb128 0xb
 914 003a 0B       		.uleb128 0xb
 915 003b 00       		.byte	0
 916 003c 00       		.byte	0
 917 003d 06       		.uleb128 0x6
 918 003e 13       		.uleb128 0x13
 919 003f 01       		.byte	0x1
 920 0040 03       		.uleb128 0x3
 921 0041 0E       		.uleb128 0xe
 922 0042 0B       		.uleb128 0xb
 923 0043 0B       		.uleb128 0xb
 924 0044 3A       		.uleb128 0x3a
 925 0045 0B       		.uleb128 0xb
 926 0046 3B       		.uleb128 0x3b
 927 0047 0B       		.uleb128 0xb
 928 0048 01       		.uleb128 0x1
 929 0049 13       		.uleb128 0x13
 930 004a 00       		.byte	0
 931 004b 00       		.byte	0
 932 004c 07       		.uleb128 0x7
 933 004d 0D       		.uleb128 0xd
 934 004e 00       		.byte	0
 935 004f 03       		.uleb128 0x3
 936 0050 0E       		.uleb128 0xe
 937 0051 3A       		.uleb128 0x3a
 938 0052 0B       		.uleb128 0xb
 939 0053 3B       		.uleb128 0x3b
 940 0054 0B       		.uleb128 0xb
 941 0055 49       		.uleb128 0x49
 942 0056 13       		.uleb128 0x13
 943 0057 38       		.uleb128 0x38
 944 0058 0B       		.uleb128 0xb
 945 0059 00       		.byte	0
 946 005a 00       		.byte	0
 947 005b 08       		.uleb128 0x8
 948 005c 2E       		.uleb128 0x2e
 949 005d 00       		.byte	0
 950 005e 3F       		.uleb128 0x3f
 951 005f 19       		.uleb128 0x19
 952 0060 03       		.uleb128 0x3
 953 0061 0E       		.uleb128 0xe
 954 0062 3A       		.uleb128 0x3a
 955 0063 0B       		.uleb128 0xb
 956 0064 3B       		.uleb128 0x3b
 957 0065 0B       		.uleb128 0xb
 958 0066 27       		.uleb128 0x27
 959 0067 19       		.uleb128 0x19
 960 0068 11       		.uleb128 0x11
 961 0069 01       		.uleb128 0x1
 962 006a 12       		.uleb128 0x12
 963 006b 06       		.uleb128 0x6
 964 006c 40       		.uleb128 0x40
 965 006d 18       		.uleb128 0x18
 966 006e 9642     		.uleb128 0x2116
 967 0070 19       		.uleb128 0x19
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 24


 968 0071 00       		.byte	0
 969 0072 00       		.byte	0
 970 0073 09       		.uleb128 0x9
 971 0074 2E       		.uleb128 0x2e
 972 0075 01       		.byte	0x1
 973 0076 03       		.uleb128 0x3
 974 0077 0E       		.uleb128 0xe
 975 0078 3A       		.uleb128 0x3a
 976 0079 0B       		.uleb128 0xb
 977 007a 3B       		.uleb128 0x3b
 978 007b 0B       		.uleb128 0xb
 979 007c 27       		.uleb128 0x27
 980 007d 19       		.uleb128 0x19
 981 007e 11       		.uleb128 0x11
 982 007f 01       		.uleb128 0x1
 983 0080 12       		.uleb128 0x12
 984 0081 06       		.uleb128 0x6
 985 0082 40       		.uleb128 0x40
 986 0083 18       		.uleb128 0x18
 987 0084 9642     		.uleb128 0x2116
 988 0086 19       		.uleb128 0x19
 989 0087 01       		.uleb128 0x1
 990 0088 13       		.uleb128 0x13
 991 0089 00       		.byte	0
 992 008a 00       		.byte	0
 993 008b 0A       		.uleb128 0xa
 994 008c 05       		.uleb128 0x5
 995 008d 00       		.byte	0
 996 008e 03       		.uleb128 0x3
 997 008f 0E       		.uleb128 0xe
 998 0090 3A       		.uleb128 0x3a
 999 0091 0B       		.uleb128 0xb
 1000 0092 3B       		.uleb128 0x3b
 1001 0093 0B       		.uleb128 0xb
 1002 0094 49       		.uleb128 0x49
 1003 0095 13       		.uleb128 0x13
 1004 0096 02       		.uleb128 0x2
 1005 0097 18       		.uleb128 0x18
 1006 0098 00       		.byte	0
 1007 0099 00       		.byte	0
 1008 009a 0B       		.uleb128 0xb
 1009 009b 34       		.uleb128 0x34
 1010 009c 00       		.byte	0
 1011 009d 03       		.uleb128 0x3
 1012 009e 08       		.uleb128 0x8
 1013 009f 3A       		.uleb128 0x3a
 1014 00a0 0B       		.uleb128 0xb
 1015 00a1 3B       		.uleb128 0x3b
 1016 00a2 0B       		.uleb128 0xb
 1017 00a3 49       		.uleb128 0x49
 1018 00a4 13       		.uleb128 0x13
 1019 00a5 02       		.uleb128 0x2
 1020 00a6 18       		.uleb128 0x18
 1021 00a7 00       		.byte	0
 1022 00a8 00       		.byte	0
 1023 00a9 0C       		.uleb128 0xc
 1024 00aa 0F       		.uleb128 0xf
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 25


 1025 00ab 00       		.byte	0
 1026 00ac 0B       		.uleb128 0xb
 1027 00ad 0B       		.uleb128 0xb
 1028 00ae 49       		.uleb128 0x49
 1029 00af 13       		.uleb128 0x13
 1030 00b0 00       		.byte	0
 1031 00b1 00       		.byte	0
 1032 00b2 0D       		.uleb128 0xd
 1033 00b3 2E       		.uleb128 0x2e
 1034 00b4 01       		.byte	0x1
 1035 00b5 03       		.uleb128 0x3
 1036 00b6 0E       		.uleb128 0xe
 1037 00b7 3A       		.uleb128 0x3a
 1038 00b8 0B       		.uleb128 0xb
 1039 00b9 3B       		.uleb128 0x3b
 1040 00ba 05       		.uleb128 0x5
 1041 00bb 27       		.uleb128 0x27
 1042 00bc 19       		.uleb128 0x19
 1043 00bd 11       		.uleb128 0x11
 1044 00be 01       		.uleb128 0x1
 1045 00bf 12       		.uleb128 0x12
 1046 00c0 06       		.uleb128 0x6
 1047 00c1 40       		.uleb128 0x40
 1048 00c2 18       		.uleb128 0x18
 1049 00c3 9642     		.uleb128 0x2116
 1050 00c5 19       		.uleb128 0x19
 1051 00c6 01       		.uleb128 0x1
 1052 00c7 13       		.uleb128 0x13
 1053 00c8 00       		.byte	0
 1054 00c9 00       		.byte	0
 1055 00ca 0E       		.uleb128 0xe
 1056 00cb 05       		.uleb128 0x5
 1057 00cc 00       		.byte	0
 1058 00cd 03       		.uleb128 0x3
 1059 00ce 0E       		.uleb128 0xe
 1060 00cf 3A       		.uleb128 0x3a
 1061 00d0 0B       		.uleb128 0xb
 1062 00d1 3B       		.uleb128 0x3b
 1063 00d2 05       		.uleb128 0x5
 1064 00d3 49       		.uleb128 0x49
 1065 00d4 13       		.uleb128 0x13
 1066 00d5 02       		.uleb128 0x2
 1067 00d6 18       		.uleb128 0x18
 1068 00d7 00       		.byte	0
 1069 00d8 00       		.byte	0
 1070 00d9 0F       		.uleb128 0xf
 1071 00da 34       		.uleb128 0x34
 1072 00db 00       		.byte	0
 1073 00dc 03       		.uleb128 0x3
 1074 00dd 0E       		.uleb128 0xe
 1075 00de 3A       		.uleb128 0x3a
 1076 00df 0B       		.uleb128 0xb
 1077 00e0 3B       		.uleb128 0x3b
 1078 00e1 05       		.uleb128 0x5
 1079 00e2 49       		.uleb128 0x49
 1080 00e3 13       		.uleb128 0x13
 1081 00e4 02       		.uleb128 0x2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 26


 1082 00e5 18       		.uleb128 0x18
 1083 00e6 00       		.byte	0
 1084 00e7 00       		.byte	0
 1085 00e8 10       		.uleb128 0x10
 1086 00e9 2E       		.uleb128 0x2e
 1087 00ea 01       		.byte	0x1
 1088 00eb 3F       		.uleb128 0x3f
 1089 00ec 19       		.uleb128 0x19
 1090 00ed 03       		.uleb128 0x3
 1091 00ee 0E       		.uleb128 0xe
 1092 00ef 3A       		.uleb128 0x3a
 1093 00f0 0B       		.uleb128 0xb
 1094 00f1 3B       		.uleb128 0x3b
 1095 00f2 05       		.uleb128 0x5
 1096 00f3 27       		.uleb128 0x27
 1097 00f4 19       		.uleb128 0x19
 1098 00f5 49       		.uleb128 0x49
 1099 00f6 13       		.uleb128 0x13
 1100 00f7 11       		.uleb128 0x11
 1101 00f8 01       		.uleb128 0x1
 1102 00f9 12       		.uleb128 0x12
 1103 00fa 06       		.uleb128 0x6
 1104 00fb 40       		.uleb128 0x40
 1105 00fc 18       		.uleb128 0x18
 1106 00fd 9742     		.uleb128 0x2117
 1107 00ff 19       		.uleb128 0x19
 1108 0100 01       		.uleb128 0x1
 1109 0101 13       		.uleb128 0x13
 1110 0102 00       		.byte	0
 1111 0103 00       		.byte	0
 1112 0104 11       		.uleb128 0x11
 1113 0105 34       		.uleb128 0x34
 1114 0106 00       		.byte	0
 1115 0107 03       		.uleb128 0x3
 1116 0108 0E       		.uleb128 0xe
 1117 0109 3A       		.uleb128 0x3a
 1118 010a 0B       		.uleb128 0xb
 1119 010b 3B       		.uleb128 0x3b
 1120 010c 0B       		.uleb128 0xb
 1121 010d 49       		.uleb128 0x49
 1122 010e 13       		.uleb128 0x13
 1123 010f 02       		.uleb128 0x2
 1124 0110 18       		.uleb128 0x18
 1125 0111 00       		.byte	0
 1126 0112 00       		.byte	0
 1127 0113 12       		.uleb128 0x12
 1128 0114 35       		.uleb128 0x35
 1129 0115 00       		.byte	0
 1130 0116 49       		.uleb128 0x49
 1131 0117 13       		.uleb128 0x13
 1132 0118 00       		.byte	0
 1133 0119 00       		.byte	0
 1134 011a 13       		.uleb128 0x13
 1135 011b 01       		.uleb128 0x1
 1136 011c 01       		.byte	0x1
 1137 011d 49       		.uleb128 0x49
 1138 011e 13       		.uleb128 0x13
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 27


 1139 011f 01       		.uleb128 0x1
 1140 0120 13       		.uleb128 0x13
 1141 0121 00       		.byte	0
 1142 0122 00       		.byte	0
 1143 0123 14       		.uleb128 0x14
 1144 0124 21       		.uleb128 0x21
 1145 0125 00       		.byte	0
 1146 0126 49       		.uleb128 0x49
 1147 0127 13       		.uleb128 0x13
 1148 0128 2F       		.uleb128 0x2f
 1149 0129 0B       		.uleb128 0xb
 1150 012a 00       		.byte	0
 1151 012b 00       		.byte	0
 1152 012c 15       		.uleb128 0x15
 1153 012d 34       		.uleb128 0x34
 1154 012e 00       		.byte	0
 1155 012f 03       		.uleb128 0x3
 1156 0130 0E       		.uleb128 0xe
 1157 0131 3A       		.uleb128 0x3a
 1158 0132 0B       		.uleb128 0xb
 1159 0133 3B       		.uleb128 0x3b
 1160 0134 05       		.uleb128 0x5
 1161 0135 49       		.uleb128 0x49
 1162 0136 13       		.uleb128 0x13
 1163 0137 3F       		.uleb128 0x3f
 1164 0138 19       		.uleb128 0x19
 1165 0139 3C       		.uleb128 0x3c
 1166 013a 19       		.uleb128 0x19
 1167 013b 00       		.byte	0
 1168 013c 00       		.byte	0
 1169 013d 00       		.byte	0
 1170              		.section	.debug_aranges,"",%progbits
 1171 0000 3C000000 		.4byte	0x3c
 1172 0004 0200     		.2byte	0x2
 1173 0006 00000000 		.4byte	.Ldebug_info0
 1174 000a 04       		.byte	0x4
 1175 000b 00       		.byte	0
 1176 000c 0000     		.2byte	0
 1177 000e 0000     		.2byte	0
 1178 0010 00000000 		.4byte	.LFB68
 1179 0014 AC000000 		.4byte	.LFE68-.LFB68
 1180 0018 00000000 		.4byte	.LFB69
 1181 001c 78000000 		.4byte	.LFE69-.LFB69
 1182 0020 00000000 		.4byte	.LFB70
 1183 0024 78000000 		.4byte	.LFE70-.LFB70
 1184 0028 00000000 		.4byte	.LFB71
 1185 002c 68000000 		.4byte	.LFE71-.LFB71
 1186 0030 00000000 		.4byte	.LFB72
 1187 0034 68000000 		.4byte	.LFE72-.LFB72
 1188 0038 00000000 		.4byte	0
 1189 003c 00000000 		.4byte	0
 1190              		.section	.debug_ranges,"",%progbits
 1191              	.Ldebug_ranges0:
 1192 0000 00000000 		.4byte	.LFB68
 1193 0004 AC000000 		.4byte	.LFE68
 1194 0008 00000000 		.4byte	.LFB69
 1195 000c 78000000 		.4byte	.LFE69
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 28


 1196 0010 00000000 		.4byte	.LFB70
 1197 0014 78000000 		.4byte	.LFE70
 1198 0018 00000000 		.4byte	.LFB71
 1199 001c 68000000 		.4byte	.LFE71
 1200 0020 00000000 		.4byte	.LFB72
 1201 0024 68000000 		.4byte	.LFE72
 1202 0028 00000000 		.4byte	0
 1203 002c 00000000 		.4byte	0
 1204              		.section	.debug_line,"",%progbits
 1205              	.Ldebug_line0:
 1206 0000 6A020000 		.section	.debug_str,"MS",%progbits,1
 1206      0200A701 
 1206      00000201 
 1206      FB0E0D00 
 1206      01010101 
 1207              	.LASF22:
 1208 0000 7853656D 		.ascii	"xSemaphore\000"
 1208      6170686F 
 1208      726500
 1209              	.LASF27:
 1210 000b 70727644 		.ascii	"prvDecrementSemaphoreCount\000"
 1210      65637265 
 1210      6D656E74 
 1210      53656D61 
 1210      70686F72 
 1211              	.LASF28:
 1212 0026 70727649 		.ascii	"prvIncrementSemaphoreCount\000"
 1212      6E637265 
 1212      6D656E74 
 1212      53656D61 
 1212      70686F72 
 1213              	.LASF23:
 1214 0041 75784578 		.ascii	"uxExpectedStartCount\000"
 1214      70656374 
 1214      65645374 
 1214      61727443 
 1214      6F756E74 
 1215              	.LASF19:
 1216 0056 5469636B 		.ascii	"TickType_t\000"
 1216      54797065 
 1216      5F7400
 1217              	.LASF40:
 1218 0061 434F554E 		.ascii	"COUNT_SEM_STRUCT\000"
 1218      545F5345 
 1218      4D5F5354 
 1218      52554354 
 1218      00
 1219              	.LASF6:
 1220 0072 5F5F696E 		.ascii	"__int32_t\000"
 1220      7433325F 
 1220      7400
 1221              	.LASF37:
 1222 007c 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1222      4320342E 
 1222      392E3320 
 1222      32303135 
 1222      30333033 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 29


 1223 00af 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1223      20726576 
 1223      6973696F 
 1223      6E203232 
 1223      31323230 
 1224 00e2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1224      66756E63 
 1224      74696F6E 
 1224      2D736563 
 1224      74696F6E 
 1225              	.LASF20:
 1226 010a 51756575 		.ascii	"QueueHandle_t\000"
 1226      6548616E 
 1226      646C655F 
 1226      7400
 1227              	.LASF14:
 1228 0118 646F7562 		.ascii	"double\000"
 1228      6C6500
 1229              	.LASF25:
 1230 011f 78436F75 		.ascii	"xCountSemStruct\000"
 1230      6E745365 
 1230      6D537472 
 1230      75637400 
 1231              	.LASF26:
 1232 012f 7075784C 		.ascii	"puxLoopCounter\000"
 1232      6F6F7043 
 1232      6F756E74 
 1232      657200
 1233              	.LASF13:
 1234 013e 666C6F61 		.ascii	"float\000"
 1234      7400
 1235              	.LASF1:
 1236 0144 7369676E 		.ascii	"signed char\000"
 1236      65642063 
 1236      68617200 
 1237              	.LASF2:
 1238 0150 756E7369 		.ascii	"unsigned char\000"
 1238      676E6564 
 1238      20636861 
 1238      7200
 1239              	.LASF24:
 1240 015e 75784C6F 		.ascii	"uxLoopCounter\000"
 1240      6F70436F 
 1240      756E7465 
 1240      7200
 1241              	.LASF8:
 1242 016c 6C6F6E67 		.ascii	"long unsigned int\000"
 1242      20756E73 
 1242      69676E65 
 1242      6420696E 
 1242      7400
 1243              	.LASF4:
 1244 017e 73686F72 		.ascii	"short unsigned int\000"
 1244      7420756E 
 1244      7369676E 
 1244      65642069 
 1244      6E7400
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 30


 1245              	.LASF43:
 1246 0191 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1246      52784275 
 1246      66666572 
 1246      00
 1247              	.LASF38:
 1248 019e 2E2E5C43 		.ascii	"..\\Common\\Minimal\\countsem.c\000"
 1248      6F6D6D6F 
 1248      6E5C4D69 
 1248      6E696D61 
 1248      6C5C636F 
 1249              	.LASF32:
 1250 01bb 75784C61 		.ascii	"uxLastCount0\000"
 1250      7374436F 
 1250      756E7430 
 1250      00
 1251              	.LASF33:
 1252 01c8 75784C61 		.ascii	"uxLastCount1\000"
 1252      7374436F 
 1252      756E7431 
 1252      00
 1253              	.LASF21:
 1254 01d5 53656D61 		.ascii	"SemaphoreHandle_t\000"
 1254      70686F72 
 1254      6548616E 
 1254      646C655F 
 1254      7400
 1255              	.LASF7:
 1256 01e7 5F5F7569 		.ascii	"__uint32_t\000"
 1256      6E743332 
 1256      5F7400
 1257              	.LASF42:
 1258 01f2 78417265 		.ascii	"xAreCountingSemaphoreTasksStillRunning\000"
 1258      436F756E 
 1258      74696E67 
 1258      53656D61 
 1258      70686F72 
 1259              	.LASF34:
 1260 0219 78526574 		.ascii	"xReturn\000"
 1260      75726E00 
 1261              	.LASF0:
 1262 0221 756E7369 		.ascii	"unsigned int\000"
 1262      676E6564 
 1262      20696E74 
 1262      00
 1263              	.LASF10:
 1264 022e 6C6F6E67 		.ascii	"long long unsigned int\000"
 1264      206C6F6E 
 1264      6720756E 
 1264      7369676E 
 1264      65642069 
 1265              	.LASF41:
 1266 0245 76537461 		.ascii	"vStartCountingSemaphoreTasks\000"
 1266      7274436F 
 1266      756E7469 
 1266      6E675365 
 1266      6D617068 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 31


 1267              	.LASF36:
 1268 0262 78506172 		.ascii	"xParameters\000"
 1268      616D6574 
 1268      65727300 
 1269              	.LASF29:
 1270 026e 70727643 		.ascii	"prvCountingSemaphoreTask\000"
 1270      6F756E74 
 1270      696E6753 
 1270      656D6170 
 1270      686F7265 
 1271              	.LASF11:
 1272 0287 696E7433 		.ascii	"int32_t\000"
 1272      325F7400 
 1273              	.LASF16:
 1274 028f 73697A65 		.ascii	"sizetype\000"
 1274      74797065 
 1274      00
 1275              	.LASF9:
 1276 0298 6C6F6E67 		.ascii	"long long int\000"
 1276      206C6F6E 
 1276      6720696E 
 1276      7400
 1277              	.LASF15:
 1278 02a6 63686172 		.ascii	"char\000"
 1278      00
 1279              	.LASF30:
 1280 02ab 70765061 		.ascii	"pvParameters\000"
 1280      72616D65 
 1280      74657273 
 1280      00
 1281              	.LASF3:
 1282 02b8 73686F72 		.ascii	"short int\000"
 1282      7420696E 
 1282      7400
 1283              	.LASF12:
 1284 02c2 75696E74 		.ascii	"uint32_t\000"
 1284      33325F74 
 1284      00
 1285              	.LASF5:
 1286 02cb 6C6F6E67 		.ascii	"long int\000"
 1286      20696E74 
 1286      00
 1287              	.LASF31:
 1288 02d4 70785061 		.ascii	"pxParameter\000"
 1288      72616D65 
 1288      74657200 
 1289              	.LASF35:
 1290 02e0 78457272 		.ascii	"xErrorDetected\000"
 1290      6F724465 
 1290      74656374 
 1290      656400
 1291              	.LASF18:
 1292 02ef 55426173 		.ascii	"UBaseType_t\000"
 1292      65547970 
 1292      655F7400 
 1293              	.LASF17:
 1294 02fb 42617365 		.ascii	"BaseType_t\000"
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccYnayrm.s 			page 32


 1294      54797065 
 1294      5F7400
 1295              	.LASF39:
 1296 0306 433A5C55 		.ascii	"C:\\Users\\bmt\\Documents\\GitHub\\FreeRTOS_CY8CKIT"
 1296      73657273 
 1296      5C626D74 
 1296      5C446F63 
 1296      756D656E 
 1297 0334 5F303539 		.ascii	"_059\\FreeRTOS_Demo.cydsn\000"
 1297      5C467265 
 1297      6552544F 
 1297      535F4465 
 1297      6D6F2E63 
 1298              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

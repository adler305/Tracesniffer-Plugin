ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"BlockQ.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	sBlockingConsumerCount:
  21 0000 00000000 		.space	6
  21      0000
  22 0006 0000     		.align	2
  23              	sBlockingProducerCount:
  24 0008 00000000 		.space	6
  24      0000
  25              		.section	.rodata
  26              		.align	2
  27              	.LC0:
  28 0000 51436F6E 		.ascii	"QConsB1\000"
  28      73423100 
  29              		.align	2
  30              	.LC1:
  31 0008 5150726F 		.ascii	"QProdB2\000"
  31      64423200 
  32              		.align	2
  33              	.LC2:
  34 0010 51436F6E 		.ascii	"QConsB3\000"
  34      73423300 
  35              		.align	2
  36              	.LC3:
  37 0018 5150726F 		.ascii	"QProdB4\000"
  37      64423400 
  38              		.align	2
  39              	.LC4:
  40 0020 5150726F 		.ascii	"QProdB5\000"
  40      64423500 
  41              		.align	2
  42              	.LC5:
  43 0028 51436F6E 		.ascii	"QConsB6\000"
  43      73423600 
  44              		.section	.text.vStartBlockingQueueTasks,"ax",%progbits
  45              		.align	2
  46              		.global	vStartBlockingQueueTasks
  47              		.thumb
  48              		.thumb_func
  49              		.type	vStartBlockingQueueTasks, %function
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 2


  50              	vStartBlockingQueueTasks:
  51              	.LFB68:
  52              		.file 1 "..\\Common\\Minimal\\BlockQ.c"
   1:..\Common\Minimal/BlockQ.c **** /*
   2:..\Common\Minimal/BlockQ.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/BlockQ.c ****     All rights reserved
   4:..\Common\Minimal/BlockQ.c **** 
   5:..\Common\Minimal/BlockQ.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/BlockQ.c **** 
   7:..\Common\Minimal/BlockQ.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/BlockQ.c **** 
   9:..\Common\Minimal/BlockQ.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/BlockQ.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/BlockQ.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/BlockQ.c **** 
  13:..\Common\Minimal/BlockQ.c ****     ***************************************************************************
  14:..\Common\Minimal/BlockQ.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/BlockQ.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/BlockQ.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/BlockQ.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/BlockQ.c ****     ***************************************************************************
  19:..\Common\Minimal/BlockQ.c **** 
  20:..\Common\Minimal/BlockQ.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/BlockQ.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/BlockQ.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/BlockQ.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/BlockQ.c **** 
  25:..\Common\Minimal/BlockQ.c ****     ***************************************************************************
  26:..\Common\Minimal/BlockQ.c ****      *                                                                       *
  27:..\Common\Minimal/BlockQ.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/BlockQ.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/BlockQ.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/BlockQ.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/BlockQ.c ****      *                                                                       *
  32:..\Common\Minimal/BlockQ.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/BlockQ.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/BlockQ.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/BlockQ.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/BlockQ.c ****      *                                                                       *
  37:..\Common\Minimal/BlockQ.c ****     ***************************************************************************
  38:..\Common\Minimal/BlockQ.c **** 
  39:..\Common\Minimal/BlockQ.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/BlockQ.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/BlockQ.c ****     defined configASSERT()?
  42:..\Common\Minimal/BlockQ.c **** 
  43:..\Common\Minimal/BlockQ.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/BlockQ.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/BlockQ.c ****     participating in the support forum.
  46:..\Common\Minimal/BlockQ.c **** 
  47:..\Common\Minimal/BlockQ.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/BlockQ.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/BlockQ.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/BlockQ.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/BlockQ.c **** 
  52:..\Common\Minimal/BlockQ.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/BlockQ.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/BlockQ.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 3


  55:..\Common\Minimal/BlockQ.c **** 
  56:..\Common\Minimal/BlockQ.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/BlockQ.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/BlockQ.c **** 
  59:..\Common\Minimal/BlockQ.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/BlockQ.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/BlockQ.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/BlockQ.c **** 
  63:..\Common\Minimal/BlockQ.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/BlockQ.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/BlockQ.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/BlockQ.c **** 
  67:..\Common\Minimal/BlockQ.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/BlockQ.c **** */
  69:..\Common\Minimal/BlockQ.c **** 
  70:..\Common\Minimal/BlockQ.c **** /*
  71:..\Common\Minimal/BlockQ.c ****  * Creates six tasks that operate on three queues as follows:
  72:..\Common\Minimal/BlockQ.c ****  *
  73:..\Common\Minimal/BlockQ.c ****  * The first two tasks send and receive an incrementing number to/from a queue.
  74:..\Common\Minimal/BlockQ.c ****  * One task acts as a producer and the other as the consumer.  The consumer is a
  75:..\Common\Minimal/BlockQ.c ****  * higher priority than the producer and is set to block on queue reads.  The queue
  76:..\Common\Minimal/BlockQ.c ****  * only has space for one item - as soon as the producer posts a message on the
  77:..\Common\Minimal/BlockQ.c ****  * queue the consumer will unblock, pre-empt the producer, and remove the item.
  78:..\Common\Minimal/BlockQ.c ****  *
  79:..\Common\Minimal/BlockQ.c ****  * The second two tasks work the other way around.  Again the queue used only has
  80:..\Common\Minimal/BlockQ.c ****  * enough space for one item.  This time the consumer has a lower priority than the
  81:..\Common\Minimal/BlockQ.c ****  * producer.  The producer will try to post on the queue blocking when the queue is
  82:..\Common\Minimal/BlockQ.c ****  * full.  When the consumer wakes it will remove the item from the queue, causing
  83:..\Common\Minimal/BlockQ.c ****  * the producer to unblock, pre-empt the consumer, and immediately re-fill the
  84:..\Common\Minimal/BlockQ.c ****  * queue.
  85:..\Common\Minimal/BlockQ.c ****  *
  86:..\Common\Minimal/BlockQ.c ****  * The last two tasks use the same queue producer and consumer functions.  This time the queue has
  87:..\Common\Minimal/BlockQ.c ****  * enough space for lots of items and the tasks operate at the same priority.  The
  88:..\Common\Minimal/BlockQ.c ****  * producer will execute, placing items into the queue.  The consumer will start
  89:..\Common\Minimal/BlockQ.c ****  * executing when either the queue becomes full (causing the producer to block) or
  90:..\Common\Minimal/BlockQ.c ****  * a context switch occurs (tasks of the same priority will time slice).
  91:..\Common\Minimal/BlockQ.c ****  *
  92:..\Common\Minimal/BlockQ.c ****  */
  93:..\Common\Minimal/BlockQ.c **** 
  94:..\Common\Minimal/BlockQ.c **** #include <stdlib.h>
  95:..\Common\Minimal/BlockQ.c **** 
  96:..\Common\Minimal/BlockQ.c **** /* Scheduler include files. */
  97:..\Common\Minimal/BlockQ.c **** #include "FreeRTOS.h"
  98:..\Common\Minimal/BlockQ.c **** #include "task.h"
  99:..\Common\Minimal/BlockQ.c **** #include "queue.h"
 100:..\Common\Minimal/BlockQ.c **** 
 101:..\Common\Minimal/BlockQ.c **** /* Demo program include files. */
 102:..\Common\Minimal/BlockQ.c **** #include "BlockQ.h"
 103:..\Common\Minimal/BlockQ.c **** 
 104:..\Common\Minimal/BlockQ.c **** #define blckqSTACK_SIZE		configMINIMAL_STACK_SIZE
 105:..\Common\Minimal/BlockQ.c **** #define blckqNUM_TASK_SETS	( 3 )
 106:..\Common\Minimal/BlockQ.c **** 
 107:..\Common\Minimal/BlockQ.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
 108:..\Common\Minimal/BlockQ.c **** 	#error This example cannot be used if dynamic allocation is not allowed.
 109:..\Common\Minimal/BlockQ.c **** #endif
 110:..\Common\Minimal/BlockQ.c **** 
 111:..\Common\Minimal/BlockQ.c **** /* Structure used to pass parameters to the blocking queue tasks. */
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 4


 112:..\Common\Minimal/BlockQ.c **** typedef struct BLOCKING_QUEUE_PARAMETERS
 113:..\Common\Minimal/BlockQ.c **** {
 114:..\Common\Minimal/BlockQ.c **** 	QueueHandle_t xQueue;					/*< The queue to be used by the task. */
 115:..\Common\Minimal/BlockQ.c **** 	TickType_t xBlockTime;				/*< The block time to use on queue reads/writes. */
 116:..\Common\Minimal/BlockQ.c **** 	volatile short *psCheckVariable;	/*< Incremented on each successful cycle to check the task is sti
 117:..\Common\Minimal/BlockQ.c **** } xBlockingQueueParameters;
 118:..\Common\Minimal/BlockQ.c **** 
 119:..\Common\Minimal/BlockQ.c **** /* Task function that creates an incrementing number and posts it on a queue. */
 120:..\Common\Minimal/BlockQ.c **** static portTASK_FUNCTION_PROTO( vBlockingQueueProducer, pvParameters );
 121:..\Common\Minimal/BlockQ.c **** 
 122:..\Common\Minimal/BlockQ.c **** /* Task function that removes the incrementing number from a queue and checks that
 123:..\Common\Minimal/BlockQ.c **** it is the expected number. */
 124:..\Common\Minimal/BlockQ.c **** static portTASK_FUNCTION_PROTO( vBlockingQueueConsumer, pvParameters );
 125:..\Common\Minimal/BlockQ.c **** 
 126:..\Common\Minimal/BlockQ.c **** /* Variables which are incremented each time an item is removed from a queue, and
 127:..\Common\Minimal/BlockQ.c **** found to be the expected value.
 128:..\Common\Minimal/BlockQ.c **** These are used to check that the tasks are still running. */
 129:..\Common\Minimal/BlockQ.c **** static volatile short sBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t )
 130:..\Common\Minimal/BlockQ.c **** 
 131:..\Common\Minimal/BlockQ.c **** /* Variable which are incremented each time an item is posted on a queue.   These
 132:..\Common\Minimal/BlockQ.c **** are used to check that the tasks are still running. */
 133:..\Common\Minimal/BlockQ.c **** static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t )
 134:..\Common\Minimal/BlockQ.c **** 
 135:..\Common\Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 136:..\Common\Minimal/BlockQ.c **** 
 137:..\Common\Minimal/BlockQ.c **** void vStartBlockingQueueTasks( UBaseType_t uxPriority )
 138:..\Common\Minimal/BlockQ.c **** {
  53              		.loc 1 138 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 48
  56              		@ frame_needed = 1, uses_anonymous_args = 0
  57 0000 80B5     		push	{r7, lr}
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 7, -8
  60              		.cfi_offset 14, -4
  61 0002 8EB0     		sub	sp, sp, #56
  62              		.cfi_def_cfa_offset 64
  63 0004 02AF     		add	r7, sp, #8
  64              		.cfi_def_cfa 7, 56
  65 0006 7860     		str	r0, [r7, #4]
 139:..\Common\Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
 140:..\Common\Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
 141:..\Common\Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
 142:..\Common\Minimal/BlockQ.c **** const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
  66              		.loc 1 142 0
  67 0008 0123     		movs	r3, #1
  68 000a FB62     		str	r3, [r7, #44]
  69 000c 0523     		movs	r3, #5
  70 000e BB62     		str	r3, [r7, #40]
 143:..\Common\Minimal/BlockQ.c **** const TickType_t xBlockTime = pdMS_TO_TICKS( ( TickType_t ) 1000 );
  71              		.loc 1 143 0
  72 0010 4FF47A73 		mov	r3, #1000
  73 0014 7B62     		str	r3, [r7, #36]
 144:..\Common\Minimal/BlockQ.c **** const TickType_t xDontBlock = ( TickType_t ) 0;
  74              		.loc 1 144 0
  75 0016 0023     		movs	r3, #0
  76 0018 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 5


 145:..\Common\Minimal/BlockQ.c **** 
 146:..\Common\Minimal/BlockQ.c **** 	/* Create the first two tasks as described at the top of the file. */
 147:..\Common\Minimal/BlockQ.c **** 
 148:..\Common\Minimal/BlockQ.c **** 	/* First create the structure used to pass parameters to the consumer tasks. */
 149:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
  77              		.loc 1 149 0
  78 001a 0C20     		movs	r0, #12
  79 001c FFF7FEFF 		bl	pvPortMalloc
  80 0020 F861     		str	r0, [r7, #28]
 150:..\Common\Minimal/BlockQ.c **** 
 151:..\Common\Minimal/BlockQ.c **** 	/* Create the queue used by the first two tasks to pass the incrementing number.
 152:..\Common\Minimal/BlockQ.c **** 	Pass a pointer to the queue in the parameter structure. */
 153:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
  81              		.loc 1 153 0
  82 0022 F86A     		ldr	r0, [r7, #44]
  83 0024 0221     		movs	r1, #2
  84 0026 0022     		movs	r2, #0
  85 0028 FFF7FEFF 		bl	xQueueGenericCreate
  86 002c 0246     		mov	r2, r0
  87 002e FB69     		ldr	r3, [r7, #28]
  88 0030 1A60     		str	r2, [r3]
 154:..\Common\Minimal/BlockQ.c **** 
 155:..\Common\Minimal/BlockQ.c **** 	/* The consumer is created first so gets a block time as described above. */
 156:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters1->xBlockTime = xBlockTime;
  89              		.loc 1 156 0
  90 0032 FB69     		ldr	r3, [r7, #28]
  91 0034 7A6A     		ldr	r2, [r7, #36]
  92 0036 5A60     		str	r2, [r3, #4]
 157:..\Common\Minimal/BlockQ.c **** 
 158:..\Common\Minimal/BlockQ.c **** 	/* Pass in the variable that this task is going to increment so we can check it
 159:..\Common\Minimal/BlockQ.c **** 	is still running. */
 160:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
  93              		.loc 1 160 0
  94 0038 FB69     		ldr	r3, [r7, #28]
  95 003a 474A     		ldr	r2, .L2
  96 003c 9A60     		str	r2, [r3, #8]
 161:..\Common\Minimal/BlockQ.c **** 
 162:..\Common\Minimal/BlockQ.c **** 	/* Create the structure used to pass parameters to the producer task. */
 163:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
  97              		.loc 1 163 0
  98 003e 0C20     		movs	r0, #12
  99 0040 FFF7FEFF 		bl	pvPortMalloc
 100 0044 B861     		str	r0, [r7, #24]
 164:..\Common\Minimal/BlockQ.c **** 
 165:..\Common\Minimal/BlockQ.c **** 	/* Pass the queue to this task also, using the parameter structure. */
 166:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 101              		.loc 1 166 0
 102 0046 FB69     		ldr	r3, [r7, #28]
 103 0048 1A68     		ldr	r2, [r3]
 104 004a BB69     		ldr	r3, [r7, #24]
 105 004c 1A60     		str	r2, [r3]
 167:..\Common\Minimal/BlockQ.c **** 
 168:..\Common\Minimal/BlockQ.c **** 	/* The producer is not going to block - as soon as it posts the consumer will
 169:..\Common\Minimal/BlockQ.c **** 	wake and remove the item so the producer should always have room to post. */
 170:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters2->xBlockTime = xDontBlock;
 106              		.loc 1 170 0
 107 004e BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 6


 108 0050 3A6A     		ldr	r2, [r7, #32]
 109 0052 5A60     		str	r2, [r3, #4]
 171:..\Common\Minimal/BlockQ.c **** 
 172:..\Common\Minimal/BlockQ.c **** 	/* Pass in the variable that this task is going to increment so we can check
 173:..\Common\Minimal/BlockQ.c **** 	it is still running. */
 174:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 110              		.loc 1 174 0
 111 0054 BB69     		ldr	r3, [r7, #24]
 112 0056 414A     		ldr	r2, .L2+4
 113 0058 9A60     		str	r2, [r3, #8]
 175:..\Common\Minimal/BlockQ.c **** 
 176:..\Common\Minimal/BlockQ.c **** 
 177:..\Common\Minimal/BlockQ.c **** 	/* Note the producer has a lower priority than the consumer when the tasks are
 178:..\Common\Minimal/BlockQ.c **** 	spawned. */
 179:..\Common\Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, ux
 114              		.loc 1 179 0
 115 005a 7B68     		ldr	r3, [r7, #4]
 116 005c 0093     		str	r3, [sp]
 117 005e 0023     		movs	r3, #0
 118 0060 0193     		str	r3, [sp, #4]
 119 0062 3F48     		ldr	r0, .L2+8
 120 0064 3F49     		ldr	r1, .L2+12
 121 0066 6422     		movs	r2, #100
 122 0068 FB69     		ldr	r3, [r7, #28]
 123 006a FFF7FEFF 		bl	xTaskCreate
 180:..\Common\Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, ts
 124              		.loc 1 180 0
 125 006e 0023     		movs	r3, #0
 126 0070 0093     		str	r3, [sp]
 127 0072 0023     		movs	r3, #0
 128 0074 0193     		str	r3, [sp, #4]
 129 0076 3C48     		ldr	r0, .L2+16
 130 0078 3C49     		ldr	r1, .L2+20
 131 007a 6422     		movs	r2, #100
 132 007c BB69     		ldr	r3, [r7, #24]
 133 007e FFF7FEFF 		bl	xTaskCreate
 181:..\Common\Minimal/BlockQ.c **** 
 182:..\Common\Minimal/BlockQ.c **** 
 183:..\Common\Minimal/BlockQ.c **** 
 184:..\Common\Minimal/BlockQ.c **** 	/* Create the second two tasks as described at the top of the file.   This uses
 185:..\Common\Minimal/BlockQ.c **** 	the same mechanism but reverses the task priorities. */
 186:..\Common\Minimal/BlockQ.c **** 
 187:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 134              		.loc 1 187 0
 135 0082 0C20     		movs	r0, #12
 136 0084 FFF7FEFF 		bl	pvPortMalloc
 137 0088 7861     		str	r0, [r7, #20]
 188:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
 138              		.loc 1 188 0
 139 008a F86A     		ldr	r0, [r7, #44]
 140 008c 0221     		movs	r1, #2
 141 008e 0022     		movs	r2, #0
 142 0090 FFF7FEFF 		bl	xQueueGenericCreate
 143 0094 0246     		mov	r2, r0
 144 0096 7B69     		ldr	r3, [r7, #20]
 145 0098 1A60     		str	r2, [r3]
 189:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters3->xBlockTime = xDontBlock;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 7


 146              		.loc 1 189 0
 147 009a 7B69     		ldr	r3, [r7, #20]
 148 009c 3A6A     		ldr	r2, [r7, #32]
 149 009e 5A60     		str	r2, [r3, #4]
 190:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 150              		.loc 1 190 0
 151 00a0 7B69     		ldr	r3, [r7, #20]
 152 00a2 334A     		ldr	r2, .L2+24
 153 00a4 9A60     		str	r2, [r3, #8]
 191:..\Common\Minimal/BlockQ.c **** 
 192:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 154              		.loc 1 192 0
 155 00a6 0C20     		movs	r0, #12
 156 00a8 FFF7FEFF 		bl	pvPortMalloc
 157 00ac 3861     		str	r0, [r7, #16]
 193:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 158              		.loc 1 193 0
 159 00ae 7B69     		ldr	r3, [r7, #20]
 160 00b0 1A68     		ldr	r2, [r3]
 161 00b2 3B69     		ldr	r3, [r7, #16]
 162 00b4 1A60     		str	r2, [r3]
 194:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters4->xBlockTime = xBlockTime;
 163              		.loc 1 194 0
 164 00b6 3B69     		ldr	r3, [r7, #16]
 165 00b8 7A6A     		ldr	r2, [r7, #36]
 166 00ba 5A60     		str	r2, [r3, #4]
 195:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 167              		.loc 1 195 0
 168 00bc 3B69     		ldr	r3, [r7, #16]
 169 00be 2D4A     		ldr	r2, .L2+28
 170 00c0 9A60     		str	r2, [r3, #8]
 196:..\Common\Minimal/BlockQ.c **** 
 197:..\Common\Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, ts
 171              		.loc 1 197 0
 172 00c2 0023     		movs	r3, #0
 173 00c4 0093     		str	r3, [sp]
 174 00c6 0023     		movs	r3, #0
 175 00c8 0193     		str	r3, [sp, #4]
 176 00ca 2548     		ldr	r0, .L2+8
 177 00cc 2A49     		ldr	r1, .L2+32
 178 00ce 6422     		movs	r2, #100
 179 00d0 7B69     		ldr	r3, [r7, #20]
 180 00d2 FFF7FEFF 		bl	xTaskCreate
 198:..\Common\Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, ux
 181              		.loc 1 198 0
 182 00d6 7B68     		ldr	r3, [r7, #4]
 183 00d8 0093     		str	r3, [sp]
 184 00da 0023     		movs	r3, #0
 185 00dc 0193     		str	r3, [sp, #4]
 186 00de 2248     		ldr	r0, .L2+16
 187 00e0 2649     		ldr	r1, .L2+36
 188 00e2 6422     		movs	r2, #100
 189 00e4 3B69     		ldr	r3, [r7, #16]
 190 00e6 FFF7FEFF 		bl	xTaskCreate
 199:..\Common\Minimal/BlockQ.c **** 
 200:..\Common\Minimal/BlockQ.c **** 
 201:..\Common\Minimal/BlockQ.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 8


 202:..\Common\Minimal/BlockQ.c **** 	/* Create the last two tasks as described above.  The mechanism is again just
 203:..\Common\Minimal/BlockQ.c **** 	the same.  This time both parameter structures are given a block time. */
 204:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 191              		.loc 1 204 0
 192 00ea 0C20     		movs	r0, #12
 193 00ec FFF7FEFF 		bl	pvPortMalloc
 194 00f0 F860     		str	r0, [r7, #12]
 205:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
 195              		.loc 1 205 0
 196 00f2 B86A     		ldr	r0, [r7, #40]
 197 00f4 0221     		movs	r1, #2
 198 00f6 0022     		movs	r2, #0
 199 00f8 FFF7FEFF 		bl	xQueueGenericCreate
 200 00fc 0246     		mov	r2, r0
 201 00fe FB68     		ldr	r3, [r7, #12]
 202 0100 1A60     		str	r2, [r3]
 206:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters5->xBlockTime = xBlockTime;
 203              		.loc 1 206 0
 204 0102 FB68     		ldr	r3, [r7, #12]
 205 0104 7A6A     		ldr	r2, [r7, #36]
 206 0106 5A60     		str	r2, [r3, #4]
 207:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 207              		.loc 1 207 0
 208 0108 FB68     		ldr	r3, [r7, #12]
 209 010a 1D4A     		ldr	r2, .L2+40
 210 010c 9A60     		str	r2, [r3, #8]
 208:..\Common\Minimal/BlockQ.c **** 
 209:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters
 211              		.loc 1 209 0
 212 010e 0C20     		movs	r0, #12
 213 0110 FFF7FEFF 		bl	pvPortMalloc
 214 0114 B860     		str	r0, [r7, #8]
 210:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 215              		.loc 1 210 0
 216 0116 FB68     		ldr	r3, [r7, #12]
 217 0118 1A68     		ldr	r2, [r3]
 218 011a BB68     		ldr	r3, [r7, #8]
 219 011c 1A60     		str	r2, [r3]
 211:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters6->xBlockTime = xBlockTime;
 220              		.loc 1 211 0
 221 011e BB68     		ldr	r3, [r7, #8]
 222 0120 7A6A     		ldr	r2, [r7, #36]
 223 0122 5A60     		str	r2, [r3, #4]
 212:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
 224              		.loc 1 212 0
 225 0124 BB68     		ldr	r3, [r7, #8]
 226 0126 174A     		ldr	r2, .L2+44
 227 0128 9A60     		str	r2, [r3, #8]
 213:..\Common\Minimal/BlockQ.c **** 
 214:..\Common\Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, ts
 228              		.loc 1 214 0
 229 012a 0023     		movs	r3, #0
 230 012c 0093     		str	r3, [sp]
 231 012e 0023     		movs	r3, #0
 232 0130 0193     		str	r3, [sp, #4]
 233 0132 0D48     		ldr	r0, .L2+16
 234 0134 1449     		ldr	r1, .L2+48
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 9


 235 0136 6422     		movs	r2, #100
 236 0138 FB68     		ldr	r3, [r7, #12]
 237 013a FFF7FEFF 		bl	xTaskCreate
 215:..\Common\Minimal/BlockQ.c **** 	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, ts
 238              		.loc 1 215 0
 239 013e 0023     		movs	r3, #0
 240 0140 0093     		str	r3, [sp]
 241 0142 0023     		movs	r3, #0
 242 0144 0193     		str	r3, [sp, #4]
 243 0146 0648     		ldr	r0, .L2+8
 244 0148 1049     		ldr	r1, .L2+52
 245 014a 6422     		movs	r2, #100
 246 014c BB68     		ldr	r3, [r7, #8]
 247 014e FFF7FEFF 		bl	xTaskCreate
 216:..\Common\Minimal/BlockQ.c **** }
 248              		.loc 1 216 0
 249 0152 3037     		adds	r7, r7, #48
 250              		.cfi_def_cfa_offset 8
 251 0154 BD46     		mov	sp, r7
 252              		.cfi_def_cfa_register 13
 253              		@ sp needed
 254 0156 80BD     		pop	{r7, pc}
 255              	.L3:
 256              		.align	2
 257              	.L2:
 258 0158 00000000 		.word	sBlockingConsumerCount
 259 015c 08000000 		.word	sBlockingProducerCount
 260 0160 00000000 		.word	vBlockingQueueConsumer
 261 0164 00000000 		.word	.LC0
 262 0168 00000000 		.word	vBlockingQueueProducer
 263 016c 08000000 		.word	.LC1
 264 0170 0A000000 		.word	sBlockingProducerCount+2
 265 0174 02000000 		.word	sBlockingConsumerCount+2
 266 0178 10000000 		.word	.LC2
 267 017c 18000000 		.word	.LC3
 268 0180 0C000000 		.word	sBlockingProducerCount+4
 269 0184 04000000 		.word	sBlockingConsumerCount+4
 270 0188 20000000 		.word	.LC4
 271 018c 28000000 		.word	.LC5
 272              		.cfi_endproc
 273              	.LFE68:
 274              		.size	vStartBlockingQueueTasks, .-vStartBlockingQueueTasks
 275              		.section	.text.vBlockingQueueProducer,"ax",%progbits
 276              		.align	2
 277              		.thumb
 278              		.thumb_func
 279              		.type	vBlockingQueueProducer, %function
 280              	vBlockingQueueProducer:
 281              	.LFB69:
 217:..\Common\Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 218:..\Common\Minimal/BlockQ.c **** 
 219:..\Common\Minimal/BlockQ.c **** static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
 220:..\Common\Minimal/BlockQ.c **** {
 282              		.loc 1 220 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 24
 285              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 10


 286 0000 80B5     		push	{r7, lr}
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 7, -8
 289              		.cfi_offset 14, -4
 290 0002 86B0     		sub	sp, sp, #24
 291              		.cfi_def_cfa_offset 32
 292 0004 00AF     		add	r7, sp, #0
 293              		.cfi_def_cfa_register 7
 294 0006 7860     		str	r0, [r7, #4]
 221:..\Common\Minimal/BlockQ.c **** uint16_t usValue = 0;
 295              		.loc 1 221 0
 296 0008 0023     		movs	r3, #0
 297 000a FB81     		strh	r3, [r7, #14]	@ movhi
 222:..\Common\Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters;
 223:..\Common\Minimal/BlockQ.c **** short sErrorEverOccurred = pdFALSE;
 298              		.loc 1 223 0
 299 000c 0023     		movs	r3, #0
 300 000e FB82     		strh	r3, [r7, #22]	@ movhi
 224:..\Common\Minimal/BlockQ.c **** 
 225:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 301              		.loc 1 225 0
 302 0010 7B68     		ldr	r3, [r7, #4]
 303 0012 3B61     		str	r3, [r7, #16]
 304              	.L8:
 226:..\Common\Minimal/BlockQ.c **** 
 227:..\Common\Minimal/BlockQ.c **** 	for( ;; )
 228:..\Common\Minimal/BlockQ.c **** 	{
 229:..\Common\Minimal/BlockQ.c **** 		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) !
 305              		.loc 1 229 0
 306 0014 3B69     		ldr	r3, [r7, #16]
 307 0016 1968     		ldr	r1, [r3]
 308 0018 3B69     		ldr	r3, [r7, #16]
 309 001a 5B68     		ldr	r3, [r3, #4]
 310 001c 07F10E02 		add	r2, r7, #14
 311 0020 0846     		mov	r0, r1
 312 0022 1146     		mov	r1, r2
 313 0024 1A46     		mov	r2, r3
 314 0026 0023     		movs	r3, #0
 315 0028 FFF7FEFF 		bl	xQueueGenericSend
 316 002c 0346     		mov	r3, r0
 317 002e 012B     		cmp	r3, #1
 318 0030 02D0     		beq	.L5
 230:..\Common\Minimal/BlockQ.c **** 		{
 231:..\Common\Minimal/BlockQ.c **** 			sErrorEverOccurred = pdTRUE;
 319              		.loc 1 231 0
 320 0032 0123     		movs	r3, #1
 321 0034 FB82     		strh	r3, [r7, #22]	@ movhi
 322 0036 11E0     		b	.L6
 323              	.L5:
 232:..\Common\Minimal/BlockQ.c **** 		}
 233:..\Common\Minimal/BlockQ.c **** 		else
 234:..\Common\Minimal/BlockQ.c **** 		{
 235:..\Common\Minimal/BlockQ.c **** 			/* We have successfully posted a message, so increment the variable
 236:..\Common\Minimal/BlockQ.c **** 			used to check we are still running. */
 237:..\Common\Minimal/BlockQ.c **** 			if( sErrorEverOccurred == pdFALSE )
 324              		.loc 1 237 0
 325 0038 B7F91630 		ldrsh	r3, [r7, #22]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 11


 326 003c 002B     		cmp	r3, #0
 327 003e 09D1     		bne	.L7
 238:..\Common\Minimal/BlockQ.c **** 			{
 239:..\Common\Minimal/BlockQ.c **** 				( *pxQueueParameters->psCheckVariable )++;
 328              		.loc 1 239 0
 329 0040 3B69     		ldr	r3, [r7, #16]
 330 0042 9A68     		ldr	r2, [r3, #8]
 331 0044 1388     		ldrh	r3, [r2]	@ movhi
 332 0046 9BB2     		uxth	r3, r3
 333 0048 9BB2     		uxth	r3, r3
 334 004a 9BB2     		uxth	r3, r3
 335 004c 0133     		adds	r3, r3, #1
 336 004e 9BB2     		uxth	r3, r3
 337 0050 9BB2     		uxth	r3, r3
 338 0052 1380     		strh	r3, [r2]	@ movhi
 339              	.L7:
 240:..\Common\Minimal/BlockQ.c **** 			}
 241:..\Common\Minimal/BlockQ.c **** 
 242:..\Common\Minimal/BlockQ.c **** 			/* Increment the variable we are going to post next time round.  The
 243:..\Common\Minimal/BlockQ.c **** 			consumer will expect the numbers to	follow in numerical order. */
 244:..\Common\Minimal/BlockQ.c **** 			++usValue;
 340              		.loc 1 244 0
 341 0054 FB89     		ldrh	r3, [r7, #14]
 342 0056 0133     		adds	r3, r3, #1
 343 0058 9BB2     		uxth	r3, r3
 344 005a FB81     		strh	r3, [r7, #14]	@ movhi
 345              	.L6:
 245:..\Common\Minimal/BlockQ.c **** 
 246:..\Common\Minimal/BlockQ.c **** 			#if configUSE_PREEMPTION == 0
 247:..\Common\Minimal/BlockQ.c **** 				taskYIELD();
 248:..\Common\Minimal/BlockQ.c **** 			#endif
 249:..\Common\Minimal/BlockQ.c **** 		}
 250:..\Common\Minimal/BlockQ.c **** 	}
 346              		.loc 1 250 0
 347 005c DAE7     		b	.L8
 348              		.cfi_endproc
 349              	.LFE69:
 350              		.size	vBlockingQueueProducer, .-vBlockingQueueProducer
 351 005e 00BF     		.section	.text.vBlockingQueueConsumer,"ax",%progbits
 352              		.align	2
 353              		.thumb
 354              		.thumb_func
 355              		.type	vBlockingQueueConsumer, %function
 356              	vBlockingQueueConsumer:
 357              	.LFB70:
 251:..\Common\Minimal/BlockQ.c **** }
 252:..\Common\Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 253:..\Common\Minimal/BlockQ.c **** 
 254:..\Common\Minimal/BlockQ.c **** static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
 255:..\Common\Minimal/BlockQ.c **** {
 358              		.loc 1 255 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 24
 361              		@ frame_needed = 1, uses_anonymous_args = 0
 362 0000 80B5     		push	{r7, lr}
 363              		.cfi_def_cfa_offset 8
 364              		.cfi_offset 7, -8
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 12


 365              		.cfi_offset 14, -4
 366 0002 86B0     		sub	sp, sp, #24
 367              		.cfi_def_cfa_offset 32
 368 0004 00AF     		add	r7, sp, #0
 369              		.cfi_def_cfa_register 7
 370 0006 7860     		str	r0, [r7, #4]
 256:..\Common\Minimal/BlockQ.c **** uint16_t usData, usExpectedValue = 0;
 371              		.loc 1 256 0
 372 0008 0023     		movs	r3, #0
 373 000a FB82     		strh	r3, [r7, #22]	@ movhi
 257:..\Common\Minimal/BlockQ.c **** xBlockingQueueParameters *pxQueueParameters;
 258:..\Common\Minimal/BlockQ.c **** short sErrorEverOccurred = pdFALSE;
 374              		.loc 1 258 0
 375 000c 0023     		movs	r3, #0
 376 000e BB82     		strh	r3, [r7, #20]	@ movhi
 259:..\Common\Minimal/BlockQ.c **** 
 260:..\Common\Minimal/BlockQ.c **** 	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 377              		.loc 1 260 0
 378 0010 7B68     		ldr	r3, [r7, #4]
 379 0012 3B61     		str	r3, [r7, #16]
 380              	.L13:
 261:..\Common\Minimal/BlockQ.c **** 
 262:..\Common\Minimal/BlockQ.c **** 	for( ;; )
 263:..\Common\Minimal/BlockQ.c **** 	{
 264:..\Common\Minimal/BlockQ.c **** 		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS 
 381              		.loc 1 264 0
 382 0014 3B69     		ldr	r3, [r7, #16]
 383 0016 1968     		ldr	r1, [r3]
 384 0018 3B69     		ldr	r3, [r7, #16]
 385 001a 5B68     		ldr	r3, [r3, #4]
 386 001c 07F10E02 		add	r2, r7, #14
 387 0020 0846     		mov	r0, r1
 388 0022 1146     		mov	r1, r2
 389 0024 1A46     		mov	r2, r3
 390 0026 0023     		movs	r3, #0
 391 0028 FFF7FEFF 		bl	xQueueGenericReceive
 392 002c 0346     		mov	r3, r0
 393 002e 012B     		cmp	r3, #1
 394 0030 19D1     		bne	.L10
 265:..\Common\Minimal/BlockQ.c **** 		{
 266:..\Common\Minimal/BlockQ.c **** 			if( usData != usExpectedValue )
 395              		.loc 1 266 0
 396 0032 FB89     		ldrh	r3, [r7, #14]
 397 0034 FA8A     		ldrh	r2, [r7, #22]
 398 0036 9A42     		cmp	r2, r3
 399 0038 04D0     		beq	.L11
 267:..\Common\Minimal/BlockQ.c **** 			{
 268:..\Common\Minimal/BlockQ.c **** 				/* Catch-up. */
 269:..\Common\Minimal/BlockQ.c **** 				usExpectedValue = usData;
 400              		.loc 1 269 0
 401 003a FB89     		ldrh	r3, [r7, #14]	@ movhi
 402 003c FB82     		strh	r3, [r7, #22]	@ movhi
 270:..\Common\Minimal/BlockQ.c **** 
 271:..\Common\Minimal/BlockQ.c **** 				sErrorEverOccurred = pdTRUE;
 403              		.loc 1 271 0
 404 003e 0123     		movs	r3, #1
 405 0040 BB82     		strh	r3, [r7, #20]	@ movhi
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 13


 406 0042 10E0     		b	.L10
 407              	.L11:
 272:..\Common\Minimal/BlockQ.c **** 			}
 273:..\Common\Minimal/BlockQ.c **** 			else
 274:..\Common\Minimal/BlockQ.c **** 			{
 275:..\Common\Minimal/BlockQ.c **** 				/* We have successfully received a message, so increment the
 276:..\Common\Minimal/BlockQ.c **** 				variable used to check we are still running. */
 277:..\Common\Minimal/BlockQ.c **** 				if( sErrorEverOccurred == pdFALSE )
 408              		.loc 1 277 0
 409 0044 B7F91430 		ldrsh	r3, [r7, #20]
 410 0048 002B     		cmp	r3, #0
 411 004a 09D1     		bne	.L12
 278:..\Common\Minimal/BlockQ.c **** 				{
 279:..\Common\Minimal/BlockQ.c **** 					( *pxQueueParameters->psCheckVariable )++;
 412              		.loc 1 279 0
 413 004c 3B69     		ldr	r3, [r7, #16]
 414 004e 9A68     		ldr	r2, [r3, #8]
 415 0050 1388     		ldrh	r3, [r2]	@ movhi
 416 0052 9BB2     		uxth	r3, r3
 417 0054 9BB2     		uxth	r3, r3
 418 0056 9BB2     		uxth	r3, r3
 419 0058 0133     		adds	r3, r3, #1
 420 005a 9BB2     		uxth	r3, r3
 421 005c 9BB2     		uxth	r3, r3
 422 005e 1380     		strh	r3, [r2]	@ movhi
 423              	.L12:
 280:..\Common\Minimal/BlockQ.c **** 				}
 281:..\Common\Minimal/BlockQ.c **** 
 282:..\Common\Minimal/BlockQ.c **** 				/* Increment the value we expect to remove from the queue next time
 283:..\Common\Minimal/BlockQ.c **** 				round. */
 284:..\Common\Minimal/BlockQ.c **** 				++usExpectedValue;
 424              		.loc 1 284 0
 425 0060 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 426 0062 0133     		adds	r3, r3, #1
 427 0064 FB82     		strh	r3, [r7, #22]	@ movhi
 428              	.L10:
 285:..\Common\Minimal/BlockQ.c **** 			}
 286:..\Common\Minimal/BlockQ.c **** 
 287:..\Common\Minimal/BlockQ.c **** 			#if configUSE_PREEMPTION == 0
 288:..\Common\Minimal/BlockQ.c **** 			{
 289:..\Common\Minimal/BlockQ.c **** 				if( pxQueueParameters->xBlockTime == 0 )
 290:..\Common\Minimal/BlockQ.c **** 				{
 291:..\Common\Minimal/BlockQ.c **** 					taskYIELD();
 292:..\Common\Minimal/BlockQ.c **** 				}
 293:..\Common\Minimal/BlockQ.c **** 			}
 294:..\Common\Minimal/BlockQ.c **** 			#endif
 295:..\Common\Minimal/BlockQ.c **** 		}
 296:..\Common\Minimal/BlockQ.c **** 	}
 429              		.loc 1 296 0
 430 0066 D5E7     		b	.L13
 431              		.cfi_endproc
 432              	.LFE70:
 433              		.size	vBlockingQueueConsumer, .-vBlockingQueueConsumer
 434              		.section	.text.xAreBlockingQueuesStillRunning,"ax",%progbits
 435              		.align	2
 436              		.global	xAreBlockingQueuesStillRunning
 437              		.thumb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 14


 438              		.thumb_func
 439              		.type	xAreBlockingQueuesStillRunning, %function
 440              	xAreBlockingQueuesStillRunning:
 441              	.LFB71:
 297:..\Common\Minimal/BlockQ.c **** }
 298:..\Common\Minimal/BlockQ.c **** /*-----------------------------------------------------------*/
 299:..\Common\Minimal/BlockQ.c **** 
 300:..\Common\Minimal/BlockQ.c **** /* This is called to check that all the created tasks are still running. */
 301:..\Common\Minimal/BlockQ.c **** BaseType_t xAreBlockingQueuesStillRunning( void )
 302:..\Common\Minimal/BlockQ.c **** {
 442              		.loc 1 302 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447 0000 80B4     		push	{r7}
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 7, -4
 450 0002 83B0     		sub	sp, sp, #12
 451              		.cfi_def_cfa_offset 16
 452 0004 00AF     		add	r7, sp, #0
 453              		.cfi_def_cfa_register 7
 303:..\Common\Minimal/BlockQ.c **** static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, (
 304:..\Common\Minimal/BlockQ.c **** static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, (
 305:..\Common\Minimal/BlockQ.c **** BaseType_t xReturn = pdPASS, xTasks;
 454              		.loc 1 305 0
 455 0006 0123     		movs	r3, #1
 456 0008 7B60     		str	r3, [r7, #4]
 306:..\Common\Minimal/BlockQ.c **** 
 307:..\Common\Minimal/BlockQ.c **** 	/* Not too worried about mutual exclusion on these variables as they are 16
 308:..\Common\Minimal/BlockQ.c **** 	bits and we are only reading them. We also only care to see if they have
 309:..\Common\Minimal/BlockQ.c **** 	changed or not.
 310:..\Common\Minimal/BlockQ.c **** 
 311:..\Common\Minimal/BlockQ.c **** 	Loop through each check variable to and return pdFALSE if any are found not
 312:..\Common\Minimal/BlockQ.c **** 	to have changed since the last call. */
 313:..\Common\Minimal/BlockQ.c **** 
 314:..\Common\Minimal/BlockQ.c **** 	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 457              		.loc 1 314 0
 458 000a 0023     		movs	r3, #0
 459 000c 3B60     		str	r3, [r7]
 460 000e 32E0     		b	.L15
 461              	.L18:
 315:..\Common\Minimal/BlockQ.c **** 	{
 316:..\Common\Minimal/BlockQ.c **** 		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 462              		.loc 1 316 0
 463 0010 1E4A     		ldr	r2, .L20
 464 0012 3B68     		ldr	r3, [r7]
 465 0014 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 466 0018 99B2     		uxth	r1, r3
 467 001a 1D4A     		ldr	r2, .L20+4
 468 001c 3B68     		ldr	r3, [r7]
 469 001e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 470 0022 0AB2     		sxth	r2, r1
 471 0024 1BB2     		sxth	r3, r3
 472 0026 9A42     		cmp	r2, r3
 473 0028 01D1     		bne	.L16
 317:..\Common\Minimal/BlockQ.c **** 		{
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 15


 318:..\Common\Minimal/BlockQ.c **** 			xReturn = pdFALSE;
 474              		.loc 1 318 0
 475 002a 0023     		movs	r3, #0
 476 002c 7B60     		str	r3, [r7, #4]
 477              	.L16:
 319:..\Common\Minimal/BlockQ.c **** 		}
 320:..\Common\Minimal/BlockQ.c **** 		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 478              		.loc 1 320 0
 479 002e 174A     		ldr	r2, .L20
 480 0030 3B68     		ldr	r3, [r7]
 481 0032 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 482 0036 99B2     		uxth	r1, r3
 483 0038 154A     		ldr	r2, .L20+4
 484 003a 3B68     		ldr	r3, [r7]
 485 003c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 321:..\Common\Minimal/BlockQ.c **** 
 322:..\Common\Minimal/BlockQ.c **** 
 323:..\Common\Minimal/BlockQ.c **** 		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 486              		.loc 1 323 0
 487 0040 144A     		ldr	r2, .L20+8
 488 0042 3B68     		ldr	r3, [r7]
 489 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 490 0048 99B2     		uxth	r1, r3
 491 004a 134A     		ldr	r2, .L20+12
 492 004c 3B68     		ldr	r3, [r7]
 493 004e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 494 0052 0AB2     		sxth	r2, r1
 495 0054 1BB2     		sxth	r3, r3
 496 0056 9A42     		cmp	r2, r3
 497 0058 01D1     		bne	.L17
 324:..\Common\Minimal/BlockQ.c **** 		{
 325:..\Common\Minimal/BlockQ.c **** 			xReturn = pdFALSE;
 498              		.loc 1 325 0
 499 005a 0023     		movs	r3, #0
 500 005c 7B60     		str	r3, [r7, #4]
 501              	.L17:
 326:..\Common\Minimal/BlockQ.c **** 		}
 327:..\Common\Minimal/BlockQ.c **** 		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 502              		.loc 1 327 0 discriminator 2
 503 005e 0D4A     		ldr	r2, .L20+8
 504 0060 3B68     		ldr	r3, [r7]
 505 0062 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 506 0066 99B2     		uxth	r1, r3
 507 0068 0B4A     		ldr	r2, .L20+12
 508 006a 3B68     		ldr	r3, [r7]
 509 006c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 314:..\Common\Minimal/BlockQ.c **** 	{
 510              		.loc 1 314 0 discriminator 2
 511 0070 3B68     		ldr	r3, [r7]
 512 0072 0133     		adds	r3, r3, #1
 513 0074 3B60     		str	r3, [r7]
 514              	.L15:
 314:..\Common\Minimal/BlockQ.c **** 	{
 515              		.loc 1 314 0 is_stmt 0 discriminator 1
 516 0076 3B68     		ldr	r3, [r7]
 517 0078 022B     		cmp	r3, #2
 518 007a C9DD     		ble	.L18
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 16


 328:..\Common\Minimal/BlockQ.c **** 	}
 329:..\Common\Minimal/BlockQ.c **** 
 330:..\Common\Minimal/BlockQ.c **** 	return xReturn;
 519              		.loc 1 330 0 is_stmt 1
 520 007c 7B68     		ldr	r3, [r7, #4]
 331:..\Common\Minimal/BlockQ.c **** }
 521              		.loc 1 331 0
 522 007e 1846     		mov	r0, r3
 523 0080 0C37     		adds	r7, r7, #12
 524              		.cfi_def_cfa_offset 4
 525 0082 BD46     		mov	sp, r7
 526              		.cfi_def_cfa_register 13
 527              		@ sp needed
 528 0084 5DF8047B 		ldr	r7, [sp], #4
 529              		.cfi_restore 7
 530              		.cfi_def_cfa_offset 0
 531 0088 7047     		bx	lr
 532              	.L21:
 533 008a 00BF     		.align	2
 534              	.L20:
 535 008c 00000000 		.word	sBlockingConsumerCount
 536 0090 10000000 		.word	sLastBlockingConsumerCount.7094
 537 0094 08000000 		.word	sBlockingProducerCount
 538 0098 18000000 		.word	sLastBlockingProducerCount.7095
 539              		.cfi_endproc
 540              	.LFE71:
 541              		.size	xAreBlockingQueuesStillRunning, .-xAreBlockingQueuesStillRunning
 542              		.bss
 543 000e 0000     		.align	2
 544              	sLastBlockingConsumerCount.7094:
 545 0010 00000000 		.space	6
 545      0000
 546 0016 0000     		.align	2
 547              	sLastBlockingProducerCount.7095:
 548 0018 00000000 		.space	6
 548      0000
 549 001e 0000     		.text
 550              	.Letext0:
 551              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 552              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 553              		.file 4 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 554              		.file 5 "..\\Source\\include/queue.h"
 555              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 556              		.section	.debug_info,"",%progbits
 557              	.Ldebug_info0:
 558 0000 69030000 		.4byte	0x369
 559 0004 0400     		.2byte	0x4
 560 0006 00000000 		.4byte	.Ldebug_abbrev0
 561 000a 04       		.byte	0x4
 562 000b 01       		.uleb128 0x1
 563 000c 6F000000 		.4byte	.LASF53
 564 0010 01       		.byte	0x1
 565 0011 99010000 		.4byte	.LASF54
 566 0015 F2030000 		.4byte	.LASF55
 567 0019 00000000 		.4byte	.Ldebug_ranges0+0
 568 001d 00000000 		.4byte	0
 569 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 17


 570 0025 02       		.uleb128 0x2
 571 0026 04       		.byte	0x4
 572 0027 07       		.byte	0x7
 573 0028 C4020000 		.4byte	.LASF0
 574 002c 03       		.uleb128 0x3
 575 002d 04       		.byte	0x4
 576 002e 05       		.byte	0x5
 577 002f 696E7400 		.ascii	"int\000"
 578 0033 02       		.uleb128 0x2
 579 0034 01       		.byte	0x1
 580 0035 06       		.byte	0x6
 581 0036 BA030000 		.4byte	.LASF1
 582 003a 04       		.uleb128 0x4
 583 003b 29000000 		.4byte	.LASF4
 584 003f 02       		.byte	0x2
 585 0040 1D       		.byte	0x1d
 586 0041 45000000 		.4byte	0x45
 587 0045 02       		.uleb128 0x2
 588 0046 01       		.byte	0x1
 589 0047 08       		.byte	0x8
 590 0048 02020000 		.4byte	.LASF2
 591 004c 02       		.uleb128 0x2
 592 004d 02       		.byte	0x2
 593 004e 05       		.byte	0x5
 594 004f 55030000 		.4byte	.LASF3
 595 0053 04       		.uleb128 0x4
 596 0054 10020000 		.4byte	.LASF5
 597 0058 02       		.byte	0x2
 598 0059 2B       		.byte	0x2b
 599 005a 5E000000 		.4byte	0x5e
 600 005e 02       		.uleb128 0x2
 601 005f 02       		.byte	0x2
 602 0060 07       		.byte	0x7
 603 0061 B4010000 		.4byte	.LASF6
 604 0065 04       		.uleb128 0x4
 605 0066 55000000 		.4byte	.LASF7
 606 006a 02       		.byte	0x2
 607 006b 3F       		.byte	0x3f
 608 006c 70000000 		.4byte	0x70
 609 0070 02       		.uleb128 0x2
 610 0071 04       		.byte	0x4
 611 0072 05       		.byte	0x5
 612 0073 66000000 		.4byte	.LASF8
 613 0077 04       		.uleb128 0x4
 614 0078 22020000 		.4byte	.LASF9
 615 007c 02       		.byte	0x2
 616 007d 41       		.byte	0x41
 617 007e 82000000 		.4byte	0x82
 618 0082 02       		.uleb128 0x2
 619 0083 04       		.byte	0x4
 620 0084 07       		.byte	0x7
 621 0085 87010000 		.4byte	.LASF10
 622 0089 02       		.uleb128 0x2
 623 008a 08       		.byte	0x8
 624 008b 05       		.byte	0x5
 625 008c 04030000 		.4byte	.LASF11
 626 0090 02       		.uleb128 0x2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 18


 627 0091 08       		.byte	0x8
 628 0092 07       		.byte	0x7
 629 0093 D1020000 		.4byte	.LASF12
 630 0097 02       		.uleb128 0x2
 631 0098 04       		.byte	0x4
 632 0099 07       		.byte	0x7
 633 009a FB020000 		.4byte	.LASF13
 634 009e 05       		.uleb128 0x5
 635 009f 04       		.byte	0x4
 636 00a0 02       		.uleb128 0x2
 637 00a1 01       		.byte	0x1
 638 00a2 08       		.byte	0x8
 639 00a3 9D030000 		.4byte	.LASF14
 640 00a7 04       		.uleb128 0x4
 641 00a8 E8020000 		.4byte	.LASF15
 642 00ac 03       		.byte	0x3
 643 00ad 15       		.byte	0x15
 644 00ae 3A000000 		.4byte	0x3a
 645 00b2 04       		.uleb128 0x4
 646 00b3 5F030000 		.4byte	.LASF16
 647 00b7 03       		.byte	0x3
 648 00b8 21       		.byte	0x21
 649 00b9 53000000 		.4byte	0x53
 650 00bd 04       		.uleb128 0x4
 651 00be 4D030000 		.4byte	.LASF17
 652 00c2 03       		.byte	0x3
 653 00c3 2C       		.byte	0x2c
 654 00c4 65000000 		.4byte	0x65
 655 00c8 04       		.uleb128 0x4
 656 00c9 87030000 		.4byte	.LASF18
 657 00cd 03       		.byte	0x3
 658 00ce 2D       		.byte	0x2d
 659 00cf 77000000 		.4byte	0x77
 660 00d3 02       		.uleb128 0x2
 661 00d4 04       		.byte	0x4
 662 00d5 04       		.byte	0x4
 663 00d6 67010000 		.4byte	.LASF19
 664 00da 02       		.uleb128 0x2
 665 00db 08       		.byte	0x8
 666 00dc 04       		.byte	0x4
 667 00dd 1B020000 		.4byte	.LASF20
 668 00e1 04       		.uleb128 0x4
 669 00e2 E7030000 		.4byte	.LASF21
 670 00e6 04       		.byte	0x4
 671 00e7 62       		.byte	0x62
 672 00e8 70000000 		.4byte	0x70
 673 00ec 04       		.uleb128 0x4
 674 00ed 74010000 		.4byte	.LASF22
 675 00f1 04       		.byte	0x4
 676 00f2 63       		.byte	0x63
 677 00f3 82000000 		.4byte	0x82
 678 00f7 04       		.uleb128 0x4
 679 00f8 4A000000 		.4byte	.LASF23
 680 00fc 04       		.byte	0x4
 681 00fd 69       		.byte	0x69
 682 00fe C8000000 		.4byte	0xc8
 683 0102 04       		.uleb128 0x4
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 19


 684 0103 FD000000 		.4byte	.LASF24
 685 0107 05       		.byte	0x5
 686 0108 58       		.byte	0x58
 687 0109 9E000000 		.4byte	0x9e
 688 010d 06       		.uleb128 0x6
 689 010e 2D020000 		.4byte	.LASF56
 690 0112 0C       		.byte	0xc
 691 0113 01       		.byte	0x1
 692 0114 70       		.byte	0x70
 693 0115 3E010000 		.4byte	0x13e
 694 0119 07       		.uleb128 0x7
 695 011a 5F000000 		.4byte	.LASF25
 696 011e 01       		.byte	0x1
 697 011f 72       		.byte	0x72
 698 0120 02010000 		.4byte	0x102
 699 0124 00       		.byte	0
 700 0125 07       		.uleb128 0x7
 701 0126 F0020000 		.4byte	.LASF26
 702 012a 01       		.byte	0x1
 703 012b 73       		.byte	0x73
 704 012c F7000000 		.4byte	0xf7
 705 0130 04       		.byte	0x4
 706 0131 07       		.uleb128 0x7
 707 0132 A2030000 		.4byte	.LASF27
 708 0136 01       		.byte	0x1
 709 0137 74       		.byte	0x74
 710 0138 3E010000 		.4byte	0x13e
 711 013c 08       		.byte	0x8
 712 013d 00       		.byte	0
 713 013e 08       		.uleb128 0x8
 714 013f 04       		.byte	0x4
 715 0140 44010000 		.4byte	0x144
 716 0144 09       		.uleb128 0x9
 717 0145 4C000000 		.4byte	0x4c
 718 0149 04       		.uleb128 0x4
 719 014a CE030000 		.4byte	.LASF28
 720 014e 01       		.byte	0x1
 721 014f 75       		.byte	0x75
 722 0150 0D010000 		.4byte	0x10d
 723 0154 0A       		.uleb128 0xa
 724 0155 10000000 		.4byte	.LASF57
 725 0159 01       		.byte	0x1
 726 015a 89       		.byte	0x89
 727 015b 00000000 		.4byte	.LFB68
 728 015f 90010000 		.4byte	.LFE68-.LFB68
 729 0163 01       		.uleb128 0x1
 730 0164 9C       		.byte	0x9c
 731 0165 04020000 		.4byte	0x204
 732 0169 0B       		.uleb128 0xb
 733 016a B9020000 		.4byte	.LASF38
 734 016e 01       		.byte	0x1
 735 016f 89       		.byte	0x89
 736 0170 EC000000 		.4byte	0xec
 737 0174 02       		.uleb128 0x2
 738 0175 91       		.byte	0x91
 739 0176 4C       		.sleb128 -52
 740 0177 0C       		.uleb128 0xc
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 20


 741 0178 47020000 		.4byte	.LASF29
 742 017c 01       		.byte	0x1
 743 017d 8B       		.byte	0x8b
 744 017e 04020000 		.4byte	0x204
 745 0182 02       		.uleb128 0x2
 746 0183 91       		.byte	0x91
 747 0184 64       		.sleb128 -28
 748 0185 0C       		.uleb128 0xc
 749 0186 5A020000 		.4byte	.LASF30
 750 018a 01       		.byte	0x1
 751 018b 8B       		.byte	0x8b
 752 018c 04020000 		.4byte	0x204
 753 0190 02       		.uleb128 0x2
 754 0191 91       		.byte	0x91
 755 0192 60       		.sleb128 -32
 756 0193 0C       		.uleb128 0xc
 757 0194 6D020000 		.4byte	.LASF31
 758 0198 01       		.byte	0x1
 759 0199 8C       		.byte	0x8c
 760 019a 04020000 		.4byte	0x204
 761 019e 02       		.uleb128 0x2
 762 019f 91       		.byte	0x91
 763 01a0 5C       		.sleb128 -36
 764 01a1 0C       		.uleb128 0xc
 765 01a2 80020000 		.4byte	.LASF32
 766 01a6 01       		.byte	0x1
 767 01a7 8C       		.byte	0x8c
 768 01a8 04020000 		.4byte	0x204
 769 01ac 02       		.uleb128 0x2
 770 01ad 91       		.byte	0x91
 771 01ae 58       		.sleb128 -40
 772 01af 0C       		.uleb128 0xc
 773 01b0 93020000 		.4byte	.LASF33
 774 01b4 01       		.byte	0x1
 775 01b5 8D       		.byte	0x8d
 776 01b6 04020000 		.4byte	0x204
 777 01ba 02       		.uleb128 0x2
 778 01bb 91       		.byte	0x91
 779 01bc 54       		.sleb128 -44
 780 01bd 0C       		.uleb128 0xc
 781 01be A6020000 		.4byte	.LASF34
 782 01c2 01       		.byte	0x1
 783 01c3 8D       		.byte	0x8d
 784 01c4 04020000 		.4byte	0x204
 785 01c8 02       		.uleb128 0x2
 786 01c9 91       		.byte	0x91
 787 01ca 50       		.sleb128 -48
 788 01cb 0C       		.uleb128 0xc
 789 01cc 68030000 		.4byte	.LASF35
 790 01d0 01       		.byte	0x1
 791 01d1 8E       		.byte	0x8e
 792 01d2 0A020000 		.4byte	0x20a
 793 01d6 02       		.uleb128 0x2
 794 01d7 91       		.byte	0x91
 795 01d8 74       		.sleb128 -12
 796 01d9 0C       		.uleb128 0xc
 797 01da 90030000 		.4byte	.LASF36
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 21


 798 01de 01       		.byte	0x1
 799 01df 8E       		.byte	0x8e
 800 01e0 0A020000 		.4byte	0x20a
 801 01e4 02       		.uleb128 0x2
 802 01e5 91       		.byte	0x91
 803 01e6 70       		.sleb128 -16
 804 01e7 0C       		.uleb128 0xc
 805 01e8 F0020000 		.4byte	.LASF26
 806 01ec 01       		.byte	0x1
 807 01ed 8F       		.byte	0x8f
 808 01ee 0F020000 		.4byte	0x20f
 809 01f2 02       		.uleb128 0x2
 810 01f3 91       		.byte	0x91
 811 01f4 6C       		.sleb128 -20
 812 01f5 0C       		.uleb128 0xc
 813 01f6 22010000 		.4byte	.LASF37
 814 01fa 01       		.byte	0x1
 815 01fb 90       		.byte	0x90
 816 01fc 0F020000 		.4byte	0x20f
 817 0200 02       		.uleb128 0x2
 818 0201 91       		.byte	0x91
 819 0202 68       		.sleb128 -24
 820 0203 00       		.byte	0
 821 0204 08       		.uleb128 0x8
 822 0205 04       		.byte	0x4
 823 0206 49010000 		.4byte	0x149
 824 020a 0D       		.uleb128 0xd
 825 020b EC000000 		.4byte	0xec
 826 020f 0D       		.uleb128 0xd
 827 0210 F7000000 		.4byte	0xf7
 828 0214 0E       		.uleb128 0xe
 829 0215 29030000 		.4byte	.LASF43
 830 0219 01       		.byte	0x1
 831 021a DB       		.byte	0xdb
 832 021b 00000000 		.4byte	.LFB69
 833 021f 5E000000 		.4byte	.LFE69-.LFB69
 834 0223 01       		.uleb128 0x1
 835 0224 9C       		.byte	0x9c
 836 0225 62020000 		.4byte	0x262
 837 0229 0B       		.uleb128 0xb
 838 022a 40030000 		.4byte	.LASF39
 839 022e 01       		.byte	0x1
 840 022f DB       		.byte	0xdb
 841 0230 9E000000 		.4byte	0x9e
 842 0234 02       		.uleb128 0x2
 843 0235 91       		.byte	0x91
 844 0236 64       		.sleb128 -28
 845 0237 0C       		.uleb128 0xc
 846 0238 C6030000 		.4byte	.LASF40
 847 023c 01       		.byte	0x1
 848 023d DD       		.byte	0xdd
 849 023e B2000000 		.4byte	0xb2
 850 0242 02       		.uleb128 0x2
 851 0243 91       		.byte	0x91
 852 0244 6E       		.sleb128 -18
 853 0245 0C       		.uleb128 0xc
 854 0246 75030000 		.4byte	.LASF41
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 22


 855 024a 01       		.byte	0x1
 856 024b DE       		.byte	0xde
 857 024c 04020000 		.4byte	0x204
 858 0250 02       		.uleb128 0x2
 859 0251 91       		.byte	0x91
 860 0252 70       		.sleb128 -16
 861 0253 0C       		.uleb128 0xc
 862 0254 EF010000 		.4byte	.LASF42
 863 0258 01       		.byte	0x1
 864 0259 DF       		.byte	0xdf
 865 025a 4C000000 		.4byte	0x4c
 866 025e 02       		.uleb128 0x2
 867 025f 91       		.byte	0x91
 868 0260 76       		.sleb128 -10
 869 0261 00       		.byte	0
 870 0262 0E       		.uleb128 0xe
 871 0263 12030000 		.4byte	.LASF44
 872 0267 01       		.byte	0x1
 873 0268 FE       		.byte	0xfe
 874 0269 00000000 		.4byte	.LFB70
 875 026d 68000000 		.4byte	.LFE70-.LFB70
 876 0271 01       		.uleb128 0x1
 877 0272 9C       		.byte	0x9c
 878 0273 C2020000 		.4byte	0x2c2
 879 0277 0B       		.uleb128 0xb
 880 0278 40030000 		.4byte	.LASF39
 881 027c 01       		.byte	0x1
 882 027d FE       		.byte	0xfe
 883 027e 9E000000 		.4byte	0x9e
 884 0282 02       		.uleb128 0x2
 885 0283 91       		.byte	0x91
 886 0284 64       		.sleb128 -28
 887 0285 0F       		.uleb128 0xf
 888 0286 80010000 		.4byte	.LASF45
 889 028a 01       		.byte	0x1
 890 028b 0001     		.2byte	0x100
 891 028d B2000000 		.4byte	0xb2
 892 0291 02       		.uleb128 0x2
 893 0292 91       		.byte	0x91
 894 0293 6E       		.sleb128 -18
 895 0294 0F       		.uleb128 0xf
 896 0295 00000000 		.4byte	.LASF46
 897 0299 01       		.byte	0x1
 898 029a 0001     		.2byte	0x100
 899 029c B2000000 		.4byte	0xb2
 900 02a0 02       		.uleb128 0x2
 901 02a1 91       		.byte	0x91
 902 02a2 76       		.sleb128 -10
 903 02a3 0F       		.uleb128 0xf
 904 02a4 75030000 		.4byte	.LASF41
 905 02a8 01       		.byte	0x1
 906 02a9 0101     		.2byte	0x101
 907 02ab 04020000 		.4byte	0x204
 908 02af 02       		.uleb128 0x2
 909 02b0 91       		.byte	0x91
 910 02b1 70       		.sleb128 -16
 911 02b2 0F       		.uleb128 0xf
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 23


 912 02b3 EF010000 		.4byte	.LASF42
 913 02b7 01       		.byte	0x1
 914 02b8 0201     		.2byte	0x102
 915 02ba 4C000000 		.4byte	0x4c
 916 02be 02       		.uleb128 0x2
 917 02bf 91       		.byte	0x91
 918 02c0 74       		.sleb128 -12
 919 02c1 00       		.byte	0
 920 02c2 10       		.uleb128 0x10
 921 02c3 48010000 		.4byte	.LASF58
 922 02c7 01       		.byte	0x1
 923 02c8 2D01     		.2byte	0x12d
 924 02ca E1000000 		.4byte	0xe1
 925 02ce 00000000 		.4byte	.LFB71
 926 02d2 9C000000 		.4byte	.LFE71-.LFB71
 927 02d6 01       		.uleb128 0x1
 928 02d7 9C       		.byte	0x9c
 929 02d8 1F030000 		.4byte	0x31f
 930 02dc 0F       		.uleb128 0xf
 931 02dd C7010000 		.4byte	.LASF47
 932 02e1 01       		.byte	0x1
 933 02e2 2F01     		.2byte	0x12f
 934 02e4 1F030000 		.4byte	0x31f
 935 02e8 05       		.uleb128 0x5
 936 02e9 03       		.byte	0x3
 937 02ea 10000000 		.4byte	sLastBlockingConsumerCount.7094
 938 02ee 0F       		.uleb128 0xf
 939 02ef 2D010000 		.4byte	.LASF48
 940 02f3 01       		.byte	0x1
 941 02f4 3001     		.2byte	0x130
 942 02f6 1F030000 		.4byte	0x31f
 943 02fa 05       		.uleb128 0x5
 944 02fb 03       		.byte	0x3
 945 02fc 18000000 		.4byte	sLastBlockingProducerCount.7095
 946 0300 0F       		.uleb128 0xf
 947 0301 B2030000 		.4byte	.LASF49
 948 0305 01       		.byte	0x1
 949 0306 3101     		.2byte	0x131
 950 0308 E1000000 		.4byte	0xe1
 951 030c 02       		.uleb128 0x2
 952 030d 91       		.byte	0x91
 953 030e 74       		.sleb128 -12
 954 030f 0F       		.uleb128 0xf
 955 0310 6D010000 		.4byte	.LASF50
 956 0314 01       		.byte	0x1
 957 0315 3101     		.2byte	0x131
 958 0317 E1000000 		.4byte	0xe1
 959 031b 02       		.uleb128 0x2
 960 031c 91       		.byte	0x91
 961 031d 70       		.sleb128 -16
 962 031e 00       		.byte	0
 963 031f 11       		.uleb128 0x11
 964 0320 4C000000 		.4byte	0x4c
 965 0324 2F030000 		.4byte	0x32f
 966 0328 12       		.uleb128 0x12
 967 0329 97000000 		.4byte	0x97
 968 032d 02       		.byte	0x2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 24


 969 032e 00       		.byte	0
 970 032f 0C       		.uleb128 0xc
 971 0330 0B010000 		.4byte	.LASF51
 972 0334 01       		.byte	0x1
 973 0335 81       		.byte	0x81
 974 0336 40030000 		.4byte	0x340
 975 033a 05       		.uleb128 0x5
 976 033b 03       		.byte	0x3
 977 033c 00000000 		.4byte	sBlockingConsumerCount
 978 0340 09       		.uleb128 0x9
 979 0341 1F030000 		.4byte	0x31f
 980 0345 0C       		.uleb128 0xc
 981 0346 33000000 		.4byte	.LASF52
 982 034a 01       		.byte	0x1
 983 034b 85       		.byte	0x85
 984 034c 56030000 		.4byte	0x356
 985 0350 05       		.uleb128 0x5
 986 0351 03       		.byte	0x3
 987 0352 08000000 		.4byte	sBlockingProducerCount
 988 0356 09       		.uleb128 0x9
 989 0357 1F030000 		.4byte	0x31f
 990 035b 13       		.uleb128 0x13
 991 035c E2010000 		.4byte	.LASF59
 992 0360 06       		.byte	0x6
 993 0361 9606     		.2byte	0x696
 994 0363 67030000 		.4byte	0x367
 995 0367 09       		.uleb128 0x9
 996 0368 BD000000 		.4byte	0xbd
 997 036c 00       		.byte	0
 998              		.section	.debug_abbrev,"",%progbits
 999              	.Ldebug_abbrev0:
 1000 0000 01       		.uleb128 0x1
 1001 0001 11       		.uleb128 0x11
 1002 0002 01       		.byte	0x1
 1003 0003 25       		.uleb128 0x25
 1004 0004 0E       		.uleb128 0xe
 1005 0005 13       		.uleb128 0x13
 1006 0006 0B       		.uleb128 0xb
 1007 0007 03       		.uleb128 0x3
 1008 0008 0E       		.uleb128 0xe
 1009 0009 1B       		.uleb128 0x1b
 1010 000a 0E       		.uleb128 0xe
 1011 000b 55       		.uleb128 0x55
 1012 000c 17       		.uleb128 0x17
 1013 000d 11       		.uleb128 0x11
 1014 000e 01       		.uleb128 0x1
 1015 000f 10       		.uleb128 0x10
 1016 0010 17       		.uleb128 0x17
 1017 0011 00       		.byte	0
 1018 0012 00       		.byte	0
 1019 0013 02       		.uleb128 0x2
 1020 0014 24       		.uleb128 0x24
 1021 0015 00       		.byte	0
 1022 0016 0B       		.uleb128 0xb
 1023 0017 0B       		.uleb128 0xb
 1024 0018 3E       		.uleb128 0x3e
 1025 0019 0B       		.uleb128 0xb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 25


 1026 001a 03       		.uleb128 0x3
 1027 001b 0E       		.uleb128 0xe
 1028 001c 00       		.byte	0
 1029 001d 00       		.byte	0
 1030 001e 03       		.uleb128 0x3
 1031 001f 24       		.uleb128 0x24
 1032 0020 00       		.byte	0
 1033 0021 0B       		.uleb128 0xb
 1034 0022 0B       		.uleb128 0xb
 1035 0023 3E       		.uleb128 0x3e
 1036 0024 0B       		.uleb128 0xb
 1037 0025 03       		.uleb128 0x3
 1038 0026 08       		.uleb128 0x8
 1039 0027 00       		.byte	0
 1040 0028 00       		.byte	0
 1041 0029 04       		.uleb128 0x4
 1042 002a 16       		.uleb128 0x16
 1043 002b 00       		.byte	0
 1044 002c 03       		.uleb128 0x3
 1045 002d 0E       		.uleb128 0xe
 1046 002e 3A       		.uleb128 0x3a
 1047 002f 0B       		.uleb128 0xb
 1048 0030 3B       		.uleb128 0x3b
 1049 0031 0B       		.uleb128 0xb
 1050 0032 49       		.uleb128 0x49
 1051 0033 13       		.uleb128 0x13
 1052 0034 00       		.byte	0
 1053 0035 00       		.byte	0
 1054 0036 05       		.uleb128 0x5
 1055 0037 0F       		.uleb128 0xf
 1056 0038 00       		.byte	0
 1057 0039 0B       		.uleb128 0xb
 1058 003a 0B       		.uleb128 0xb
 1059 003b 00       		.byte	0
 1060 003c 00       		.byte	0
 1061 003d 06       		.uleb128 0x6
 1062 003e 13       		.uleb128 0x13
 1063 003f 01       		.byte	0x1
 1064 0040 03       		.uleb128 0x3
 1065 0041 0E       		.uleb128 0xe
 1066 0042 0B       		.uleb128 0xb
 1067 0043 0B       		.uleb128 0xb
 1068 0044 3A       		.uleb128 0x3a
 1069 0045 0B       		.uleb128 0xb
 1070 0046 3B       		.uleb128 0x3b
 1071 0047 0B       		.uleb128 0xb
 1072 0048 01       		.uleb128 0x1
 1073 0049 13       		.uleb128 0x13
 1074 004a 00       		.byte	0
 1075 004b 00       		.byte	0
 1076 004c 07       		.uleb128 0x7
 1077 004d 0D       		.uleb128 0xd
 1078 004e 00       		.byte	0
 1079 004f 03       		.uleb128 0x3
 1080 0050 0E       		.uleb128 0xe
 1081 0051 3A       		.uleb128 0x3a
 1082 0052 0B       		.uleb128 0xb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 26


 1083 0053 3B       		.uleb128 0x3b
 1084 0054 0B       		.uleb128 0xb
 1085 0055 49       		.uleb128 0x49
 1086 0056 13       		.uleb128 0x13
 1087 0057 38       		.uleb128 0x38
 1088 0058 0B       		.uleb128 0xb
 1089 0059 00       		.byte	0
 1090 005a 00       		.byte	0
 1091 005b 08       		.uleb128 0x8
 1092 005c 0F       		.uleb128 0xf
 1093 005d 00       		.byte	0
 1094 005e 0B       		.uleb128 0xb
 1095 005f 0B       		.uleb128 0xb
 1096 0060 49       		.uleb128 0x49
 1097 0061 13       		.uleb128 0x13
 1098 0062 00       		.byte	0
 1099 0063 00       		.byte	0
 1100 0064 09       		.uleb128 0x9
 1101 0065 35       		.uleb128 0x35
 1102 0066 00       		.byte	0
 1103 0067 49       		.uleb128 0x49
 1104 0068 13       		.uleb128 0x13
 1105 0069 00       		.byte	0
 1106 006a 00       		.byte	0
 1107 006b 0A       		.uleb128 0xa
 1108 006c 2E       		.uleb128 0x2e
 1109 006d 01       		.byte	0x1
 1110 006e 3F       		.uleb128 0x3f
 1111 006f 19       		.uleb128 0x19
 1112 0070 03       		.uleb128 0x3
 1113 0071 0E       		.uleb128 0xe
 1114 0072 3A       		.uleb128 0x3a
 1115 0073 0B       		.uleb128 0xb
 1116 0074 3B       		.uleb128 0x3b
 1117 0075 0B       		.uleb128 0xb
 1118 0076 27       		.uleb128 0x27
 1119 0077 19       		.uleb128 0x19
 1120 0078 11       		.uleb128 0x11
 1121 0079 01       		.uleb128 0x1
 1122 007a 12       		.uleb128 0x12
 1123 007b 06       		.uleb128 0x6
 1124 007c 40       		.uleb128 0x40
 1125 007d 18       		.uleb128 0x18
 1126 007e 9642     		.uleb128 0x2116
 1127 0080 19       		.uleb128 0x19
 1128 0081 01       		.uleb128 0x1
 1129 0082 13       		.uleb128 0x13
 1130 0083 00       		.byte	0
 1131 0084 00       		.byte	0
 1132 0085 0B       		.uleb128 0xb
 1133 0086 05       		.uleb128 0x5
 1134 0087 00       		.byte	0
 1135 0088 03       		.uleb128 0x3
 1136 0089 0E       		.uleb128 0xe
 1137 008a 3A       		.uleb128 0x3a
 1138 008b 0B       		.uleb128 0xb
 1139 008c 3B       		.uleb128 0x3b
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 27


 1140 008d 0B       		.uleb128 0xb
 1141 008e 49       		.uleb128 0x49
 1142 008f 13       		.uleb128 0x13
 1143 0090 02       		.uleb128 0x2
 1144 0091 18       		.uleb128 0x18
 1145 0092 00       		.byte	0
 1146 0093 00       		.byte	0
 1147 0094 0C       		.uleb128 0xc
 1148 0095 34       		.uleb128 0x34
 1149 0096 00       		.byte	0
 1150 0097 03       		.uleb128 0x3
 1151 0098 0E       		.uleb128 0xe
 1152 0099 3A       		.uleb128 0x3a
 1153 009a 0B       		.uleb128 0xb
 1154 009b 3B       		.uleb128 0x3b
 1155 009c 0B       		.uleb128 0xb
 1156 009d 49       		.uleb128 0x49
 1157 009e 13       		.uleb128 0x13
 1158 009f 02       		.uleb128 0x2
 1159 00a0 18       		.uleb128 0x18
 1160 00a1 00       		.byte	0
 1161 00a2 00       		.byte	0
 1162 00a3 0D       		.uleb128 0xd
 1163 00a4 26       		.uleb128 0x26
 1164 00a5 00       		.byte	0
 1165 00a6 49       		.uleb128 0x49
 1166 00a7 13       		.uleb128 0x13
 1167 00a8 00       		.byte	0
 1168 00a9 00       		.byte	0
 1169 00aa 0E       		.uleb128 0xe
 1170 00ab 2E       		.uleb128 0x2e
 1171 00ac 01       		.byte	0x1
 1172 00ad 03       		.uleb128 0x3
 1173 00ae 0E       		.uleb128 0xe
 1174 00af 3A       		.uleb128 0x3a
 1175 00b0 0B       		.uleb128 0xb
 1176 00b1 3B       		.uleb128 0x3b
 1177 00b2 0B       		.uleb128 0xb
 1178 00b3 27       		.uleb128 0x27
 1179 00b4 19       		.uleb128 0x19
 1180 00b5 11       		.uleb128 0x11
 1181 00b6 01       		.uleb128 0x1
 1182 00b7 12       		.uleb128 0x12
 1183 00b8 06       		.uleb128 0x6
 1184 00b9 40       		.uleb128 0x40
 1185 00ba 18       		.uleb128 0x18
 1186 00bb 9642     		.uleb128 0x2116
 1187 00bd 19       		.uleb128 0x19
 1188 00be 01       		.uleb128 0x1
 1189 00bf 13       		.uleb128 0x13
 1190 00c0 00       		.byte	0
 1191 00c1 00       		.byte	0
 1192 00c2 0F       		.uleb128 0xf
 1193 00c3 34       		.uleb128 0x34
 1194 00c4 00       		.byte	0
 1195 00c5 03       		.uleb128 0x3
 1196 00c6 0E       		.uleb128 0xe
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 28


 1197 00c7 3A       		.uleb128 0x3a
 1198 00c8 0B       		.uleb128 0xb
 1199 00c9 3B       		.uleb128 0x3b
 1200 00ca 05       		.uleb128 0x5
 1201 00cb 49       		.uleb128 0x49
 1202 00cc 13       		.uleb128 0x13
 1203 00cd 02       		.uleb128 0x2
 1204 00ce 18       		.uleb128 0x18
 1205 00cf 00       		.byte	0
 1206 00d0 00       		.byte	0
 1207 00d1 10       		.uleb128 0x10
 1208 00d2 2E       		.uleb128 0x2e
 1209 00d3 01       		.byte	0x1
 1210 00d4 3F       		.uleb128 0x3f
 1211 00d5 19       		.uleb128 0x19
 1212 00d6 03       		.uleb128 0x3
 1213 00d7 0E       		.uleb128 0xe
 1214 00d8 3A       		.uleb128 0x3a
 1215 00d9 0B       		.uleb128 0xb
 1216 00da 3B       		.uleb128 0x3b
 1217 00db 05       		.uleb128 0x5
 1218 00dc 27       		.uleb128 0x27
 1219 00dd 19       		.uleb128 0x19
 1220 00de 49       		.uleb128 0x49
 1221 00df 13       		.uleb128 0x13
 1222 00e0 11       		.uleb128 0x11
 1223 00e1 01       		.uleb128 0x1
 1224 00e2 12       		.uleb128 0x12
 1225 00e3 06       		.uleb128 0x6
 1226 00e4 40       		.uleb128 0x40
 1227 00e5 18       		.uleb128 0x18
 1228 00e6 9742     		.uleb128 0x2117
 1229 00e8 19       		.uleb128 0x19
 1230 00e9 01       		.uleb128 0x1
 1231 00ea 13       		.uleb128 0x13
 1232 00eb 00       		.byte	0
 1233 00ec 00       		.byte	0
 1234 00ed 11       		.uleb128 0x11
 1235 00ee 01       		.uleb128 0x1
 1236 00ef 01       		.byte	0x1
 1237 00f0 49       		.uleb128 0x49
 1238 00f1 13       		.uleb128 0x13
 1239 00f2 01       		.uleb128 0x1
 1240 00f3 13       		.uleb128 0x13
 1241 00f4 00       		.byte	0
 1242 00f5 00       		.byte	0
 1243 00f6 12       		.uleb128 0x12
 1244 00f7 21       		.uleb128 0x21
 1245 00f8 00       		.byte	0
 1246 00f9 49       		.uleb128 0x49
 1247 00fa 13       		.uleb128 0x13
 1248 00fb 2F       		.uleb128 0x2f
 1249 00fc 0B       		.uleb128 0xb
 1250 00fd 00       		.byte	0
 1251 00fe 00       		.byte	0
 1252 00ff 13       		.uleb128 0x13
 1253 0100 34       		.uleb128 0x34
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 29


 1254 0101 00       		.byte	0
 1255 0102 03       		.uleb128 0x3
 1256 0103 0E       		.uleb128 0xe
 1257 0104 3A       		.uleb128 0x3a
 1258 0105 0B       		.uleb128 0xb
 1259 0106 3B       		.uleb128 0x3b
 1260 0107 05       		.uleb128 0x5
 1261 0108 49       		.uleb128 0x49
 1262 0109 13       		.uleb128 0x13
 1263 010a 3F       		.uleb128 0x3f
 1264 010b 19       		.uleb128 0x19
 1265 010c 3C       		.uleb128 0x3c
 1266 010d 19       		.uleb128 0x19
 1267 010e 00       		.byte	0
 1268 010f 00       		.byte	0
 1269 0110 00       		.byte	0
 1270              		.section	.debug_aranges,"",%progbits
 1271 0000 34000000 		.4byte	0x34
 1272 0004 0200     		.2byte	0x2
 1273 0006 00000000 		.4byte	.Ldebug_info0
 1274 000a 04       		.byte	0x4
 1275 000b 00       		.byte	0
 1276 000c 0000     		.2byte	0
 1277 000e 0000     		.2byte	0
 1278 0010 00000000 		.4byte	.LFB68
 1279 0014 90010000 		.4byte	.LFE68-.LFB68
 1280 0018 00000000 		.4byte	.LFB69
 1281 001c 5E000000 		.4byte	.LFE69-.LFB69
 1282 0020 00000000 		.4byte	.LFB70
 1283 0024 68000000 		.4byte	.LFE70-.LFB70
 1284 0028 00000000 		.4byte	.LFB71
 1285 002c 9C000000 		.4byte	.LFE71-.LFB71
 1286 0030 00000000 		.4byte	0
 1287 0034 00000000 		.4byte	0
 1288              		.section	.debug_ranges,"",%progbits
 1289              	.Ldebug_ranges0:
 1290 0000 00000000 		.4byte	.LFB68
 1291 0004 90010000 		.4byte	.LFE68
 1292 0008 00000000 		.4byte	.LFB69
 1293 000c 5E000000 		.4byte	.LFE69
 1294 0010 00000000 		.4byte	.LFB70
 1295 0014 68000000 		.4byte	.LFE70
 1296 0018 00000000 		.4byte	.LFB71
 1297 001c 9C000000 		.4byte	.LFE71
 1298 0020 00000000 		.4byte	0
 1299 0024 00000000 		.4byte	0
 1300              		.section	.debug_line,"",%progbits
 1301              	.Ldebug_line0:
 1302 0000 37020000 		.section	.debug_str,"MS",%progbits,1
 1302      02009901 
 1302      00000201 
 1302      FB0E0D00 
 1302      01010101 
 1303              	.LASF46:
 1304 0000 75734578 		.ascii	"usExpectedValue\000"
 1304      70656374 
 1304      65645661 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 30


 1304      6C756500 
 1305              	.LASF57:
 1306 0010 76537461 		.ascii	"vStartBlockingQueueTasks\000"
 1306      7274426C 
 1306      6F636B69 
 1306      6E675175 
 1306      65756554 
 1307              	.LASF4:
 1308 0029 5F5F7569 		.ascii	"__uint8_t\000"
 1308      6E74385F 
 1308      7400
 1309              	.LASF52:
 1310 0033 73426C6F 		.ascii	"sBlockingProducerCount\000"
 1310      636B696E 
 1310      6750726F 
 1310      64756365 
 1310      72436F75 
 1311              	.LASF23:
 1312 004a 5469636B 		.ascii	"TickType_t\000"
 1312      54797065 
 1312      5F7400
 1313              	.LASF7:
 1314 0055 5F5F696E 		.ascii	"__int32_t\000"
 1314      7433325F 
 1314      7400
 1315              	.LASF25:
 1316 005f 78517565 		.ascii	"xQueue\000"
 1316      756500
 1317              	.LASF8:
 1318 0066 6C6F6E67 		.ascii	"long int\000"
 1318      20696E74 
 1318      00
 1319              	.LASF53:
 1320 006f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1320      4320342E 
 1320      392E3320 
 1320      32303135 
 1320      30333033 
 1321 00a2 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1321      20726576 
 1321      6973696F 
 1321      6E203232 
 1321      31323230 
 1322 00d5 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1322      66756E63 
 1322      74696F6E 
 1322      2D736563 
 1322      74696F6E 
 1323              	.LASF24:
 1324 00fd 51756575 		.ascii	"QueueHandle_t\000"
 1324      6548616E 
 1324      646C655F 
 1324      7400
 1325              	.LASF51:
 1326 010b 73426C6F 		.ascii	"sBlockingConsumerCount\000"
 1326      636B696E 
 1326      67436F6E 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 31


 1326      73756D65 
 1326      72436F75 
 1327              	.LASF37:
 1328 0122 78446F6E 		.ascii	"xDontBlock\000"
 1328      74426C6F 
 1328      636B00
 1329              	.LASF48:
 1330 012d 734C6173 		.ascii	"sLastBlockingProducerCount\000"
 1330      74426C6F 
 1330      636B696E 
 1330      6750726F 
 1330      64756365 
 1331              	.LASF58:
 1332 0148 78417265 		.ascii	"xAreBlockingQueuesStillRunning\000"
 1332      426C6F63 
 1332      6B696E67 
 1332      51756575 
 1332      65735374 
 1333              	.LASF19:
 1334 0167 666C6F61 		.ascii	"float\000"
 1334      7400
 1335              	.LASF50:
 1336 016d 78546173 		.ascii	"xTasks\000"
 1336      6B7300
 1337              	.LASF22:
 1338 0174 55426173 		.ascii	"UBaseType_t\000"
 1338      65547970 
 1338      655F7400 
 1339              	.LASF45:
 1340 0180 75734461 		.ascii	"usData\000"
 1340      746100
 1341              	.LASF10:
 1342 0187 6C6F6E67 		.ascii	"long unsigned int\000"
 1342      20756E73 
 1342      69676E65 
 1342      6420696E 
 1342      7400
 1343              	.LASF54:
 1344 0199 2E2E5C43 		.ascii	"..\\Common\\Minimal\\BlockQ.c\000"
 1344      6F6D6D6F 
 1344      6E5C4D69 
 1344      6E696D61 
 1344      6C5C426C 
 1345              	.LASF6:
 1346 01b4 73686F72 		.ascii	"short unsigned int\000"
 1346      7420756E 
 1346      7369676E 
 1346      65642069 
 1346      6E7400
 1347              	.LASF47:
 1348 01c7 734C6173 		.ascii	"sLastBlockingConsumerCount\000"
 1348      74426C6F 
 1348      636B696E 
 1348      67436F6E 
 1348      73756D65 
 1349              	.LASF59:
 1350 01e2 49544D5F 		.ascii	"ITM_RxBuffer\000"
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 32


 1350      52784275 
 1350      66666572 
 1350      00
 1351              	.LASF42:
 1352 01ef 73457272 		.ascii	"sErrorEverOccurred\000"
 1352      6F724576 
 1352      65724F63 
 1352      63757272 
 1352      656400
 1353              	.LASF2:
 1354 0202 756E7369 		.ascii	"unsigned char\000"
 1354      676E6564 
 1354      20636861 
 1354      7200
 1355              	.LASF5:
 1356 0210 5F5F7569 		.ascii	"__uint16_t\000"
 1356      6E743136 
 1356      5F7400
 1357              	.LASF20:
 1358 021b 646F7562 		.ascii	"double\000"
 1358      6C6500
 1359              	.LASF9:
 1360 0222 5F5F7569 		.ascii	"__uint32_t\000"
 1360      6E743332 
 1360      5F7400
 1361              	.LASF56:
 1362 022d 424C4F43 		.ascii	"BLOCKING_QUEUE_PARAMETERS\000"
 1362      4B494E47 
 1362      5F515545 
 1362      55455F50 
 1362      4152414D 
 1363              	.LASF29:
 1364 0247 70785175 		.ascii	"pxQueueParameters1\000"
 1364      65756550 
 1364      6172616D 
 1364      65746572 
 1364      733100
 1365              	.LASF30:
 1366 025a 70785175 		.ascii	"pxQueueParameters2\000"
 1366      65756550 
 1366      6172616D 
 1366      65746572 
 1366      733200
 1367              	.LASF31:
 1368 026d 70785175 		.ascii	"pxQueueParameters3\000"
 1368      65756550 
 1368      6172616D 
 1368      65746572 
 1368      733300
 1369              	.LASF32:
 1370 0280 70785175 		.ascii	"pxQueueParameters4\000"
 1370      65756550 
 1370      6172616D 
 1370      65746572 
 1370      733400
 1371              	.LASF33:
 1372 0293 70785175 		.ascii	"pxQueueParameters5\000"
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 33


 1372      65756550 
 1372      6172616D 
 1372      65746572 
 1372      733500
 1373              	.LASF34:
 1374 02a6 70785175 		.ascii	"pxQueueParameters6\000"
 1374      65756550 
 1374      6172616D 
 1374      65746572 
 1374      733600
 1375              	.LASF38:
 1376 02b9 75785072 		.ascii	"uxPriority\000"
 1376      696F7269 
 1376      747900
 1377              	.LASF0:
 1378 02c4 756E7369 		.ascii	"unsigned int\000"
 1378      676E6564 
 1378      20696E74 
 1378      00
 1379              	.LASF12:
 1380 02d1 6C6F6E67 		.ascii	"long long unsigned int\000"
 1380      206C6F6E 
 1380      6720756E 
 1380      7369676E 
 1380      65642069 
 1381              	.LASF15:
 1382 02e8 75696E74 		.ascii	"uint8_t\000"
 1382      385F7400 
 1383              	.LASF26:
 1384 02f0 78426C6F 		.ascii	"xBlockTime\000"
 1384      636B5469 
 1384      6D6500
 1385              	.LASF13:
 1386 02fb 73697A65 		.ascii	"sizetype\000"
 1386      74797065 
 1386      00
 1387              	.LASF11:
 1388 0304 6C6F6E67 		.ascii	"long long int\000"
 1388      206C6F6E 
 1388      6720696E 
 1388      7400
 1389              	.LASF44:
 1390 0312 76426C6F 		.ascii	"vBlockingQueueConsumer\000"
 1390      636B696E 
 1390      67517565 
 1390      7565436F 
 1390      6E73756D 
 1391              	.LASF43:
 1392 0329 76426C6F 		.ascii	"vBlockingQueueProducer\000"
 1392      636B696E 
 1392      67517565 
 1392      75655072 
 1392      6F647563 
 1393              	.LASF39:
 1394 0340 70765061 		.ascii	"pvParameters\000"
 1394      72616D65 
 1394      74657273 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 34


 1394      00
 1395              	.LASF17:
 1396 034d 696E7433 		.ascii	"int32_t\000"
 1396      325F7400 
 1397              	.LASF3:
 1398 0355 73686F72 		.ascii	"short int\000"
 1398      7420696E 
 1398      7400
 1399              	.LASF16:
 1400 035f 75696E74 		.ascii	"uint16_t\000"
 1400      31365F74 
 1400      00
 1401              	.LASF35:
 1402 0368 75785175 		.ascii	"uxQueueSize1\000"
 1402      65756553 
 1402      697A6531 
 1402      00
 1403              	.LASF41:
 1404 0375 70785175 		.ascii	"pxQueueParameters\000"
 1404      65756550 
 1404      6172616D 
 1404      65746572 
 1404      7300
 1405              	.LASF18:
 1406 0387 75696E74 		.ascii	"uint32_t\000"
 1406      33325F74 
 1406      00
 1407              	.LASF36:
 1408 0390 75785175 		.ascii	"uxQueueSize5\000"
 1408      65756553 
 1408      697A6535 
 1408      00
 1409              	.LASF14:
 1410 039d 63686172 		.ascii	"char\000"
 1410      00
 1411              	.LASF27:
 1412 03a2 70734368 		.ascii	"psCheckVariable\000"
 1412      65636B56 
 1412      61726961 
 1412      626C6500 
 1413              	.LASF49:
 1414 03b2 78526574 		.ascii	"xReturn\000"
 1414      75726E00 
 1415              	.LASF1:
 1416 03ba 7369676E 		.ascii	"signed char\000"
 1416      65642063 
 1416      68617200 
 1417              	.LASF40:
 1418 03c6 75735661 		.ascii	"usValue\000"
 1418      6C756500 
 1419              	.LASF28:
 1420 03ce 78426C6F 		.ascii	"xBlockingQueueParameters\000"
 1420      636B696E 
 1420      67517565 
 1420      75655061 
 1420      72616D65 
 1421              	.LASF21:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccDxMJSM.s 			page 35


 1422 03e7 42617365 		.ascii	"BaseType_t\000"
 1422      54797065 
 1422      5F7400
 1423              	.LASF55:
 1424 03f2 433A5C55 		.ascii	"C:\\Users\\bmt\\Documents\\GitHub\\FreeRTOS_CY8CKIT"
 1424      73657273 
 1424      5C626D74 
 1424      5C446F63 
 1424      756D656E 
 1425 0420 5F303539 		.ascii	"_059\\FreeRTOS_Demo.cydsn\000"
 1425      5C467265 
 1425      6552544F 
 1425      535F4465 
 1425      6D6F2E63 
 1426              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

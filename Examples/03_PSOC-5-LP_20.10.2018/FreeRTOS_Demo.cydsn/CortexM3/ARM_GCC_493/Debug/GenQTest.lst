ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"GenQTest.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	xErrorDetected:
  21 0000 00000000 		.space	4
  22              		.align	2
  23              	ulLoopCounter:
  24 0004 00000000 		.space	4
  25              		.align	2
  26              	ulLoopCounter2:
  27 0008 00000000 		.space	4
  28              		.align	2
  29              	ulGuardedVariable:
  30 000c 00000000 		.space	4
  31              		.align	2
  32              	xHighPriorityMutexTask:
  33 0010 00000000 		.space	4
  34              		.align	2
  35              	xMediumPriorityMutexTask:
  36 0014 00000000 		.space	4
  37              		.section	.rodata
  38              		.align	2
  39              	.LC0:
  40 0000 47656E5F 		.ascii	"Gen_Queue_Test\000"
  40      51756575 
  40      655F5465 
  40      737400
  41 000f 00       		.align	2
  42              	.LC1:
  43 0010 47656E51 		.ascii	"GenQ\000"
  43      00
  44 0015 000000   		.align	2
  45              	.LC2:
  46 0018 47656E5F 		.ascii	"Gen_Queue_Mutex\000"
  46      51756575 
  46      655F4D75 
  46      74657800 
  47              		.align	2
  48              	.LC3:
  49 0028 4D754C6F 		.ascii	"MuLow\000"
  49      7700
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 2


  50 002e 0000     		.align	2
  51              	.LC4:
  52 0030 4D754D65 		.ascii	"MuMed\000"
  52      6400
  53 0036 0000     		.align	2
  54              	.LC5:
  55 0038 4D754869 		.ascii	"MuHigh\000"
  55      676800
  56 003f 00       		.section	.text.vStartGenericQueueTasks,"ax",%progbits
  57              		.align	2
  58              		.global	vStartGenericQueueTasks
  59              		.thumb
  60              		.thumb_func
  61              		.type	vStartGenericQueueTasks, %function
  62              	vStartGenericQueueTasks:
  63              	.LFB68:
  64              		.file 1 "..\\Common\\Minimal\\GenQTest.c"
   1:..\Common\Minimal/GenQTest.c **** /*
   2:..\Common\Minimal/GenQTest.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/GenQTest.c ****     All rights reserved
   4:..\Common\Minimal/GenQTest.c **** 
   5:..\Common\Minimal/GenQTest.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/GenQTest.c **** 
   7:..\Common\Minimal/GenQTest.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/GenQTest.c **** 
   9:..\Common\Minimal/GenQTest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/GenQTest.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/GenQTest.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/GenQTest.c **** 
  13:..\Common\Minimal/GenQTest.c ****     ***************************************************************************
  14:..\Common\Minimal/GenQTest.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/GenQTest.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/GenQTest.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/GenQTest.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/GenQTest.c ****     ***************************************************************************
  19:..\Common\Minimal/GenQTest.c **** 
  20:..\Common\Minimal/GenQTest.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/GenQTest.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/GenQTest.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/GenQTest.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/GenQTest.c **** 
  25:..\Common\Minimal/GenQTest.c ****     ***************************************************************************
  26:..\Common\Minimal/GenQTest.c ****      *                                                                       *
  27:..\Common\Minimal/GenQTest.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/GenQTest.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/GenQTest.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/GenQTest.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/GenQTest.c ****      *                                                                       *
  32:..\Common\Minimal/GenQTest.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/GenQTest.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/GenQTest.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/GenQTest.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/GenQTest.c ****      *                                                                       *
  37:..\Common\Minimal/GenQTest.c ****     ***************************************************************************
  38:..\Common\Minimal/GenQTest.c **** 
  39:..\Common\Minimal/GenQTest.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/GenQTest.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 3


  41:..\Common\Minimal/GenQTest.c ****     defined configASSERT()?
  42:..\Common\Minimal/GenQTest.c **** 
  43:..\Common\Minimal/GenQTest.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/GenQTest.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/GenQTest.c ****     participating in the support forum.
  46:..\Common\Minimal/GenQTest.c **** 
  47:..\Common\Minimal/GenQTest.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/GenQTest.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/GenQTest.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/GenQTest.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/GenQTest.c **** 
  52:..\Common\Minimal/GenQTest.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/GenQTest.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/GenQTest.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Common\Minimal/GenQTest.c **** 
  56:..\Common\Minimal/GenQTest.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/GenQTest.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/GenQTest.c **** 
  59:..\Common\Minimal/GenQTest.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/GenQTest.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/GenQTest.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/GenQTest.c **** 
  63:..\Common\Minimal/GenQTest.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/GenQTest.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/GenQTest.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/GenQTest.c **** 
  67:..\Common\Minimal/GenQTest.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/GenQTest.c **** */
  69:..\Common\Minimal/GenQTest.c **** 
  70:..\Common\Minimal/GenQTest.c **** 
  71:..\Common\Minimal/GenQTest.c **** /*
  72:..\Common\Minimal/GenQTest.c ****  * Tests the extra queue functionality introduced in FreeRTOS.org V4.5.0 -
  73:..\Common\Minimal/GenQTest.c ****  * including xQueueSendToFront(), xQueueSendToBack(), xQueuePeek() and
  74:..\Common\Minimal/GenQTest.c ****  * mutex behaviour.
  75:..\Common\Minimal/GenQTest.c ****  *
  76:..\Common\Minimal/GenQTest.c ****  * See the comments above the prvSendFrontAndBackTest() and
  77:..\Common\Minimal/GenQTest.c ****  * prvLowPriorityMutexTask() prototypes below for more information.
  78:..\Common\Minimal/GenQTest.c ****  */
  79:..\Common\Minimal/GenQTest.c **** 
  80:..\Common\Minimal/GenQTest.c **** /* Standard includes. */
  81:..\Common\Minimal/GenQTest.c **** #include <stdlib.h>
  82:..\Common\Minimal/GenQTest.c **** 
  83:..\Common\Minimal/GenQTest.c **** /* Scheduler include files. */
  84:..\Common\Minimal/GenQTest.c **** #include "FreeRTOS.h"
  85:..\Common\Minimal/GenQTest.c **** #include "task.h"
  86:..\Common\Minimal/GenQTest.c **** #include "queue.h"
  87:..\Common\Minimal/GenQTest.c **** #include "semphr.h"
  88:..\Common\Minimal/GenQTest.c **** 
  89:..\Common\Minimal/GenQTest.c **** /* Demo program include files. */
  90:..\Common\Minimal/GenQTest.c **** #include "GenQTest.h"
  91:..\Common\Minimal/GenQTest.c **** 
  92:..\Common\Minimal/GenQTest.c **** #define genqQUEUE_LENGTH		( 5 )
  93:..\Common\Minimal/GenQTest.c **** #define intsemNO_BLOCK			( 0 )
  94:..\Common\Minimal/GenQTest.c **** 
  95:..\Common\Minimal/GenQTest.c **** #define genqMUTEX_LOW_PRIORITY		( tskIDLE_PRIORITY )
  96:..\Common\Minimal/GenQTest.c **** #define genqMUTEX_TEST_PRIORITY		( tskIDLE_PRIORITY + 1 )
  97:..\Common\Minimal/GenQTest.c **** #define genqMUTEX_MEDIUM_PRIORITY	( tskIDLE_PRIORITY + 2 )
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 4


  98:..\Common\Minimal/GenQTest.c **** #define genqMUTEX_HIGH_PRIORITY		( tskIDLE_PRIORITY + 3 )
  99:..\Common\Minimal/GenQTest.c **** 
 100:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 101:..\Common\Minimal/GenQTest.c **** 
 102:..\Common\Minimal/GenQTest.c **** /*
 103:..\Common\Minimal/GenQTest.c ****  * Tests the behaviour of the xQueueSendToFront() and xQueueSendToBack()
 104:..\Common\Minimal/GenQTest.c ****  * macros by using both to fill a queue, then reading from the queue to
 105:..\Common\Minimal/GenQTest.c ****  * check the resultant queue order is as expected.  Queue data is also
 106:..\Common\Minimal/GenQTest.c ****  * peeked.
 107:..\Common\Minimal/GenQTest.c ****  */
 108:..\Common\Minimal/GenQTest.c **** static void prvSendFrontAndBackTest( void *pvParameters );
 109:..\Common\Minimal/GenQTest.c **** 
 110:..\Common\Minimal/GenQTest.c **** /*
 111:..\Common\Minimal/GenQTest.c ****  * The following three tasks are used to demonstrate the mutex behaviour.
 112:..\Common\Minimal/GenQTest.c ****  * Each task is given a different priority to demonstrate the priority
 113:..\Common\Minimal/GenQTest.c ****  * inheritance mechanism.
 114:..\Common\Minimal/GenQTest.c ****  *
 115:..\Common\Minimal/GenQTest.c ****  * The low priority task obtains a mutex.  After this a high priority task
 116:..\Common\Minimal/GenQTest.c ****  * attempts to obtain the same mutex, causing its priority to be inherited
 117:..\Common\Minimal/GenQTest.c ****  * by the low priority task.  The task with the inherited high priority then
 118:..\Common\Minimal/GenQTest.c ****  * resumes a medium priority task to ensure it is not blocked by the medium
 119:..\Common\Minimal/GenQTest.c ****  * priority task while it holds the inherited high priority.  Once the mutex
 120:..\Common\Minimal/GenQTest.c ****  * is returned the task with the inherited priority returns to its original
 121:..\Common\Minimal/GenQTest.c ****  * low priority, and is therefore immediately preempted by first the high
 122:..\Common\Minimal/GenQTest.c ****  * priority task and then the medium priority task before it can continue.
 123:..\Common\Minimal/GenQTest.c ****  */
 124:..\Common\Minimal/GenQTest.c **** static void prvLowPriorityMutexTask( void *pvParameters );
 125:..\Common\Minimal/GenQTest.c **** static void prvMediumPriorityMutexTask( void *pvParameters );
 126:..\Common\Minimal/GenQTest.c **** static void prvHighPriorityMutexTask( void *pvParameters );
 127:..\Common\Minimal/GenQTest.c **** 
 128:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 129:..\Common\Minimal/GenQTest.c **** 
 130:..\Common\Minimal/GenQTest.c **** /* Flag that will be latched to pdTRUE should any unexpected behaviour be
 131:..\Common\Minimal/GenQTest.c **** detected in any of the tasks. */
 132:..\Common\Minimal/GenQTest.c **** static volatile BaseType_t xErrorDetected = pdFALSE;
 133:..\Common\Minimal/GenQTest.c **** 
 134:..\Common\Minimal/GenQTest.c **** /* Counters that are incremented on each cycle of a test.  This is used to
 135:..\Common\Minimal/GenQTest.c **** detect a stalled task - a test that is no longer running. */
 136:..\Common\Minimal/GenQTest.c **** static volatile uint32_t ulLoopCounter = 0;
 137:..\Common\Minimal/GenQTest.c **** static volatile uint32_t ulLoopCounter2 = 0;
 138:..\Common\Minimal/GenQTest.c **** 
 139:..\Common\Minimal/GenQTest.c **** /* The variable that is guarded by the mutex in the mutex demo tasks. */
 140:..\Common\Minimal/GenQTest.c **** static volatile uint32_t ulGuardedVariable = 0;
 141:..\Common\Minimal/GenQTest.c **** 
 142:..\Common\Minimal/GenQTest.c **** /* Handles used in the mutex test to suspend and resume the high and medium
 143:..\Common\Minimal/GenQTest.c **** priority mutex test tasks. */
 144:..\Common\Minimal/GenQTest.c **** static TaskHandle_t xHighPriorityMutexTask, xMediumPriorityMutexTask;
 145:..\Common\Minimal/GenQTest.c **** 
 146:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 147:..\Common\Minimal/GenQTest.c **** 
 148:..\Common\Minimal/GenQTest.c **** void vStartGenericQueueTasks( UBaseType_t uxPriority )
 149:..\Common\Minimal/GenQTest.c **** {
  65              		.loc 1 149 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 16
  68              		@ frame_needed = 1, uses_anonymous_args = 0
  69 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 5


  70              		.cfi_def_cfa_offset 8
  71              		.cfi_offset 7, -8
  72              		.cfi_offset 14, -4
  73 0002 86B0     		sub	sp, sp, #24
  74              		.cfi_def_cfa_offset 32
  75 0004 02AF     		add	r7, sp, #8
  76              		.cfi_def_cfa 7, 24
  77 0006 7860     		str	r0, [r7, #4]
 150:..\Common\Minimal/GenQTest.c **** QueueHandle_t xQueue;
 151:..\Common\Minimal/GenQTest.c **** SemaphoreHandle_t xMutex;
 152:..\Common\Minimal/GenQTest.c **** 
 153:..\Common\Minimal/GenQTest.c **** 	/* Create the queue that we are going to use for the
 154:..\Common\Minimal/GenQTest.c **** 	prvSendFrontAndBackTest demo. */
 155:..\Common\Minimal/GenQTest.c **** 	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
  78              		.loc 1 155 0
  79 0008 0520     		movs	r0, #5
  80 000a 0421     		movs	r1, #4
  81 000c 0022     		movs	r2, #0
  82 000e FFF7FEFF 		bl	xQueueGenericCreate
  83 0012 F860     		str	r0, [r7, #12]
 156:..\Common\Minimal/GenQTest.c **** 
 157:..\Common\Minimal/GenQTest.c **** 	if( xQueue != NULL )
  84              		.loc 1 157 0
  85 0014 FB68     		ldr	r3, [r7, #12]
  86 0016 002B     		cmp	r3, #0
  87 0018 0DD0     		beq	.L2
 158:..\Common\Minimal/GenQTest.c **** 	{
 159:..\Common\Minimal/GenQTest.c **** 		/* vQueueAddToRegistry() adds the queue to the queue registry, if one
 160:..\Common\Minimal/GenQTest.c **** 		is in use.  The queue registry is provided as a means for kernel aware
 161:..\Common\Minimal/GenQTest.c **** 		debuggers to locate queues and has no purpose if a kernel aware debugger
 162:..\Common\Minimal/GenQTest.c **** 		is not being used.  The call to vQueueAddToRegistry() will be removed
 163:..\Common\Minimal/GenQTest.c **** 		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 164:..\Common\Minimal/GenQTest.c **** 		defined to be less than 1. */
 165:..\Common\Minimal/GenQTest.c **** 		vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );
  88              		.loc 1 165 0
  89 001a F868     		ldr	r0, [r7, #12]
  90 001c 1C49     		ldr	r1, .L4
  91 001e FFF7FEFF 		bl	vQueueAddToRegistry
 166:..\Common\Minimal/GenQTest.c **** 
 167:..\Common\Minimal/GenQTest.c **** 		/* Create the demo task and pass it the queue just created.  We are
 168:..\Common\Minimal/GenQTest.c **** 		passing the queue handle by value so it does not matter that it is
 169:..\Common\Minimal/GenQTest.c **** 		declared on the stack here. */
 170:..\Common\Minimal/GenQTest.c **** 		xTaskCreate( prvSendFrontAndBackTest, "GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPrio
  92              		.loc 1 170 0
  93 0022 7B68     		ldr	r3, [r7, #4]
  94 0024 0093     		str	r3, [sp]
  95 0026 0023     		movs	r3, #0
  96 0028 0193     		str	r3, [sp, #4]
  97 002a 1A48     		ldr	r0, .L4+4
  98 002c 1A49     		ldr	r1, .L4+8
  99 002e 6422     		movs	r2, #100
 100 0030 FB68     		ldr	r3, [r7, #12]
 101 0032 FFF7FEFF 		bl	xTaskCreate
 102              	.L2:
 171:..\Common\Minimal/GenQTest.c **** 	}
 172:..\Common\Minimal/GenQTest.c **** 
 173:..\Common\Minimal/GenQTest.c **** 	/* Create the mutex used by the prvMutexTest task. */
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 6


 174:..\Common\Minimal/GenQTest.c **** 	xMutex = xSemaphoreCreateMutex();
 103              		.loc 1 174 0
 104 0036 0120     		movs	r0, #1
 105 0038 FFF7FEFF 		bl	xQueueCreateMutex
 106 003c B860     		str	r0, [r7, #8]
 175:..\Common\Minimal/GenQTest.c **** 
 176:..\Common\Minimal/GenQTest.c **** 	if( xMutex != NULL )
 107              		.loc 1 176 0
 108 003e BB68     		ldr	r3, [r7, #8]
 109 0040 002B     		cmp	r3, #0
 110 0042 21D0     		beq	.L1
 177:..\Common\Minimal/GenQTest.c **** 	{
 178:..\Common\Minimal/GenQTest.c **** 		/* vQueueAddToRegistry() adds the mutex to the registry, if one is
 179:..\Common\Minimal/GenQTest.c **** 		in use.  The registry is provided as a means for kernel aware
 180:..\Common\Minimal/GenQTest.c **** 		debuggers to locate mutexes and has no purpose if a kernel aware
 181:..\Common\Minimal/GenQTest.c **** 		debugger is not being used.  The call to vQueueAddToRegistry() will be
 182:..\Common\Minimal/GenQTest.c **** 		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
 183:..\Common\Minimal/GenQTest.c **** 		defined or is defined to be less than 1. */
 184:..\Common\Minimal/GenQTest.c **** 		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );
 111              		.loc 1 184 0
 112 0044 B868     		ldr	r0, [r7, #8]
 113 0046 1549     		ldr	r1, .L4+12
 114 0048 FFF7FEFF 		bl	vQueueAddToRegistry
 185:..\Common\Minimal/GenQTest.c **** 
 186:..\Common\Minimal/GenQTest.c **** 		/* Create the mutex demo tasks and pass it the mutex just created.  We
 187:..\Common\Minimal/GenQTest.c **** 		are passing the mutex handle by value so it does not matter that it is
 188:..\Common\Minimal/GenQTest.c **** 		declared on the stack here. */
 189:..\Common\Minimal/GenQTest.c **** 		xTaskCreate( prvLowPriorityMutexTask, "MuLow", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqM
 115              		.loc 1 189 0
 116 004c 0023     		movs	r3, #0
 117 004e 0093     		str	r3, [sp]
 118 0050 0023     		movs	r3, #0
 119 0052 0193     		str	r3, [sp, #4]
 120 0054 1248     		ldr	r0, .L4+16
 121 0056 1349     		ldr	r1, .L4+20
 122 0058 6422     		movs	r2, #100
 123 005a BB68     		ldr	r3, [r7, #8]
 124 005c FFF7FEFF 		bl	xTaskCreate
 190:..\Common\Minimal/GenQTest.c **** 		xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIU
 125              		.loc 1 190 0
 126 0060 0223     		movs	r3, #2
 127 0062 0093     		str	r3, [sp]
 128 0064 104B     		ldr	r3, .L4+24
 129 0066 0193     		str	r3, [sp, #4]
 130 0068 1048     		ldr	r0, .L4+28
 131 006a 1149     		ldr	r1, .L4+32
 132 006c 6422     		movs	r2, #100
 133 006e 0023     		movs	r3, #0
 134 0070 FFF7FEFF 		bl	xTaskCreate
 191:..\Common\Minimal/GenQTest.c **** 		xTaskCreate( prvHighPriorityMutexTask, "MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, gen
 135              		.loc 1 191 0
 136 0074 0323     		movs	r3, #3
 137 0076 0093     		str	r3, [sp]
 138 0078 0E4B     		ldr	r3, .L4+36
 139 007a 0193     		str	r3, [sp, #4]
 140 007c 0E48     		ldr	r0, .L4+40
 141 007e 0F49     		ldr	r1, .L4+44
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 7


 142 0080 6422     		movs	r2, #100
 143 0082 BB68     		ldr	r3, [r7, #8]
 144 0084 FFF7FEFF 		bl	xTaskCreate
 145              	.L1:
 192:..\Common\Minimal/GenQTest.c **** 	}
 193:..\Common\Minimal/GenQTest.c **** }
 146              		.loc 1 193 0
 147 0088 1037     		adds	r7, r7, #16
 148              		.cfi_def_cfa_offset 8
 149 008a BD46     		mov	sp, r7
 150              		.cfi_def_cfa_register 13
 151              		@ sp needed
 152 008c 80BD     		pop	{r7, pc}
 153              	.L5:
 154 008e 00BF     		.align	2
 155              	.L4:
 156 0090 00000000 		.word	.LC0
 157 0094 00000000 		.word	prvSendFrontAndBackTest
 158 0098 10000000 		.word	.LC1
 159 009c 18000000 		.word	.LC2
 160 00a0 00000000 		.word	prvLowPriorityMutexTask
 161 00a4 28000000 		.word	.LC3
 162 00a8 14000000 		.word	xMediumPriorityMutexTask
 163 00ac 00000000 		.word	prvMediumPriorityMutexTask
 164 00b0 30000000 		.word	.LC4
 165 00b4 10000000 		.word	xHighPriorityMutexTask
 166 00b8 00000000 		.word	prvHighPriorityMutexTask
 167 00bc 38000000 		.word	.LC5
 168              		.cfi_endproc
 169              	.LFE68:
 170              		.size	vStartGenericQueueTasks, .-vStartGenericQueueTasks
 171              		.section	.text.prvSendFrontAndBackTest,"ax",%progbits
 172              		.align	2
 173              		.thumb
 174              		.thumb_func
 175              		.type	prvSendFrontAndBackTest, %function
 176              	prvSendFrontAndBackTest:
 177              	.LFB69:
 194:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 195:..\Common\Minimal/GenQTest.c **** 
 196:..\Common\Minimal/GenQTest.c **** static void prvSendFrontAndBackTest( void *pvParameters )
 197:..\Common\Minimal/GenQTest.c **** {
 178              		.loc 1 197 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 24
 181              		@ frame_needed = 1, uses_anonymous_args = 0
 182 0000 80B5     		push	{r7, lr}
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 86B0     		sub	sp, sp, #24
 187              		.cfi_def_cfa_offset 32
 188 0004 00AF     		add	r7, sp, #0
 189              		.cfi_def_cfa_register 7
 190 0006 7860     		str	r0, [r7, #4]
 198:..\Common\Minimal/GenQTest.c **** uint32_t ulData, ulData2;
 199:..\Common\Minimal/GenQTest.c **** QueueHandle_t xQueue;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 8


 200:..\Common\Minimal/GenQTest.c **** 
 201:..\Common\Minimal/GenQTest.c **** 	#ifdef USE_STDIO
 202:..\Common\Minimal/GenQTest.c **** 	void vPrintDisplayMessage( const char * const * ppcMessageToSend );
 203:..\Common\Minimal/GenQTest.c **** 
 204:..\Common\Minimal/GenQTest.c **** 		const char * const pcTaskStartMsg = "Queue SendToFront/SendToBack/Peek test started.\r\n";
 205:..\Common\Minimal/GenQTest.c **** 
 206:..\Common\Minimal/GenQTest.c **** 		/* Queue a message for printing to say the task has started. */
 207:..\Common\Minimal/GenQTest.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 208:..\Common\Minimal/GenQTest.c **** 	#endif
 209:..\Common\Minimal/GenQTest.c **** 
 210:..\Common\Minimal/GenQTest.c **** 	xQueue = ( QueueHandle_t ) pvParameters;
 191              		.loc 1 210 0
 192 0008 7B68     		ldr	r3, [r7, #4]
 193 000a 7B61     		str	r3, [r7, #20]
 194              	.L42:
 211:..\Common\Minimal/GenQTest.c **** 
 212:..\Common\Minimal/GenQTest.c **** 	for( ;; )
 213:..\Common\Minimal/GenQTest.c **** 	{
 214:..\Common\Minimal/GenQTest.c **** 		/* The queue is empty, so sending an item to the back of the queue
 215:..\Common\Minimal/GenQTest.c **** 		should have the same efect as sending it to the front of the queue.
 216:..\Common\Minimal/GenQTest.c **** 
 217:..\Common\Minimal/GenQTest.c **** 		First send to the front and check everything is as expected. */
 218:..\Common\Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, intsemNO_BLOCK );
 195              		.loc 1 218 0
 196 000c 7869     		ldr	r0, [r7, #20]
 197 000e AA49     		ldr	r1, .L43
 198 0010 0022     		movs	r2, #0
 199 0012 0123     		movs	r3, #1
 200 0014 FFF7FEFF 		bl	xQueueGenericSend
 219:..\Common\Minimal/GenQTest.c **** 
 220:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 201              		.loc 1 220 0
 202 0018 7869     		ldr	r0, [r7, #20]
 203 001a FFF7FEFF 		bl	uxQueueMessagesWaiting
 204 001e 0346     		mov	r3, r0
 205 0020 012B     		cmp	r3, #1
 206 0022 02D0     		beq	.L7
 221:..\Common\Minimal/GenQTest.c **** 		{
 222:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 207              		.loc 1 222 0
 208 0024 A54B     		ldr	r3, .L43+4
 209 0026 0122     		movs	r2, #1
 210 0028 1A60     		str	r2, [r3]
 211              	.L7:
 223:..\Common\Minimal/GenQTest.c **** 		}
 224:..\Common\Minimal/GenQTest.c **** 
 225:..\Common\Minimal/GenQTest.c **** 		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 212              		.loc 1 225 0
 213 002a 07F11003 		add	r3, r7, #16
 214 002e 7869     		ldr	r0, [r7, #20]
 215 0030 1946     		mov	r1, r3
 216 0032 0022     		movs	r2, #0
 217 0034 0023     		movs	r3, #0
 218 0036 FFF7FEFF 		bl	xQueueGenericReceive
 219 003a 0346     		mov	r3, r0
 220 003c 012B     		cmp	r3, #1
 221 003e 02D0     		beq	.L8
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 9


 226:..\Common\Minimal/GenQTest.c **** 		{
 227:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 222              		.loc 1 227 0
 223 0040 9E4B     		ldr	r3, .L43+4
 224 0042 0122     		movs	r2, #1
 225 0044 1A60     		str	r2, [r3]
 226              	.L8:
 228:..\Common\Minimal/GenQTest.c **** 		}
 229:..\Common\Minimal/GenQTest.c **** 
 230:..\Common\Minimal/GenQTest.c **** 		/* The data we sent to the queue should equal the data we just received
 231:..\Common\Minimal/GenQTest.c **** 		from the queue. */
 232:..\Common\Minimal/GenQTest.c **** 		if( ulLoopCounter != ulData )
 227              		.loc 1 232 0
 228 0046 9C4B     		ldr	r3, .L43
 229 0048 1A68     		ldr	r2, [r3]
 230 004a 3B69     		ldr	r3, [r7, #16]
 231 004c 9A42     		cmp	r2, r3
 232 004e 02D0     		beq	.L9
 233:..\Common\Minimal/GenQTest.c **** 		{
 234:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 233              		.loc 1 234 0
 234 0050 9A4B     		ldr	r3, .L43+4
 235 0052 0122     		movs	r2, #1
 236 0054 1A60     		str	r2, [r3]
 237              	.L9:
 235:..\Common\Minimal/GenQTest.c **** 		}
 236:..\Common\Minimal/GenQTest.c **** 
 237:..\Common\Minimal/GenQTest.c **** 		/* Then do the same, sending the data to the back, checking everything
 238:..\Common\Minimal/GenQTest.c **** 		is as expected. */
 239:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 238              		.loc 1 239 0
 239 0056 7869     		ldr	r0, [r7, #20]
 240 0058 FFF7FEFF 		bl	uxQueueMessagesWaiting
 241 005c 0346     		mov	r3, r0
 242 005e 002B     		cmp	r3, #0
 243 0060 02D0     		beq	.L10
 240:..\Common\Minimal/GenQTest.c **** 		{
 241:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 244              		.loc 1 241 0
 245 0062 964B     		ldr	r3, .L43+4
 246 0064 0122     		movs	r2, #1
 247 0066 1A60     		str	r2, [r3]
 248              	.L10:
 242:..\Common\Minimal/GenQTest.c **** 		}
 243:..\Common\Minimal/GenQTest.c **** 
 244:..\Common\Minimal/GenQTest.c **** 		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, intsemNO_BLOCK );
 249              		.loc 1 244 0
 250 0068 7869     		ldr	r0, [r7, #20]
 251 006a 9349     		ldr	r1, .L43
 252 006c 0022     		movs	r2, #0
 253 006e 0023     		movs	r3, #0
 254 0070 FFF7FEFF 		bl	xQueueGenericSend
 245:..\Common\Minimal/GenQTest.c **** 
 246:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 255              		.loc 1 246 0
 256 0074 7869     		ldr	r0, [r7, #20]
 257 0076 FFF7FEFF 		bl	uxQueueMessagesWaiting
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 10


 258 007a 0346     		mov	r3, r0
 259 007c 012B     		cmp	r3, #1
 260 007e 02D0     		beq	.L11
 247:..\Common\Minimal/GenQTest.c **** 		{
 248:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 261              		.loc 1 248 0
 262 0080 8E4B     		ldr	r3, .L43+4
 263 0082 0122     		movs	r2, #1
 264 0084 1A60     		str	r2, [r3]
 265              	.L11:
 249:..\Common\Minimal/GenQTest.c **** 		}
 250:..\Common\Minimal/GenQTest.c **** 
 251:..\Common\Minimal/GenQTest.c **** 		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 266              		.loc 1 251 0
 267 0086 07F11003 		add	r3, r7, #16
 268 008a 7869     		ldr	r0, [r7, #20]
 269 008c 1946     		mov	r1, r3
 270 008e 0022     		movs	r2, #0
 271 0090 0023     		movs	r3, #0
 272 0092 FFF7FEFF 		bl	xQueueGenericReceive
 273 0096 0346     		mov	r3, r0
 274 0098 012B     		cmp	r3, #1
 275 009a 02D0     		beq	.L12
 252:..\Common\Minimal/GenQTest.c **** 		{
 253:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 276              		.loc 1 253 0
 277 009c 874B     		ldr	r3, .L43+4
 278 009e 0122     		movs	r2, #1
 279 00a0 1A60     		str	r2, [r3]
 280              	.L12:
 254:..\Common\Minimal/GenQTest.c **** 		}
 255:..\Common\Minimal/GenQTest.c **** 
 256:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 281              		.loc 1 256 0
 282 00a2 7869     		ldr	r0, [r7, #20]
 283 00a4 FFF7FEFF 		bl	uxQueueMessagesWaiting
 284 00a8 0346     		mov	r3, r0
 285 00aa 002B     		cmp	r3, #0
 286 00ac 02D0     		beq	.L13
 257:..\Common\Minimal/GenQTest.c **** 		{
 258:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 287              		.loc 1 258 0
 288 00ae 834B     		ldr	r3, .L43+4
 289 00b0 0122     		movs	r2, #1
 290 00b2 1A60     		str	r2, [r3]
 291              	.L13:
 259:..\Common\Minimal/GenQTest.c **** 		}
 260:..\Common\Minimal/GenQTest.c **** 
 261:..\Common\Minimal/GenQTest.c **** 		/* The data we sent to the queue should equal the data we just received
 262:..\Common\Minimal/GenQTest.c **** 		from the queue. */
 263:..\Common\Minimal/GenQTest.c **** 		if( ulLoopCounter != ulData )
 292              		.loc 1 263 0
 293 00b4 804B     		ldr	r3, .L43
 294 00b6 1A68     		ldr	r2, [r3]
 295 00b8 3B69     		ldr	r3, [r7, #16]
 296 00ba 9A42     		cmp	r2, r3
 297 00bc 02D0     		beq	.L14
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 11


 264:..\Common\Minimal/GenQTest.c **** 		{
 265:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 298              		.loc 1 265 0
 299 00be 7F4B     		ldr	r3, .L43+4
 300 00c0 0122     		movs	r2, #1
 301 00c2 1A60     		str	r2, [r3]
 302              	.L14:
 266:..\Common\Minimal/GenQTest.c **** 		}
 267:..\Common\Minimal/GenQTest.c **** 
 268:..\Common\Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 269:..\Common\Minimal/GenQTest.c **** 			taskYIELD();
 270:..\Common\Minimal/GenQTest.c **** 		#endif
 271:..\Common\Minimal/GenQTest.c **** 
 272:..\Common\Minimal/GenQTest.c **** 
 273:..\Common\Minimal/GenQTest.c **** 
 274:..\Common\Minimal/GenQTest.c **** 		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
 275:..\Common\Minimal/GenQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 303              		.loc 1 275 0
 304 00c4 0223     		movs	r3, #2
 305 00c6 3B61     		str	r3, [r7, #16]
 306 00c8 0AE0     		b	.L15
 307              	.L16:
 276:..\Common\Minimal/GenQTest.c **** 		{
 277:..\Common\Minimal/GenQTest.c **** 			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 308              		.loc 1 277 0 discriminator 3
 309 00ca 07F11003 		add	r3, r7, #16
 310 00ce 7869     		ldr	r0, [r7, #20]
 311 00d0 1946     		mov	r1, r3
 312 00d2 0022     		movs	r2, #0
 313 00d4 0023     		movs	r3, #0
 314 00d6 FFF7FEFF 		bl	xQueueGenericSend
 275:..\Common\Minimal/GenQTest.c **** 		{
 315              		.loc 1 275 0 discriminator 3
 316 00da 3B69     		ldr	r3, [r7, #16]
 317 00dc 0133     		adds	r3, r3, #1
 318 00de 3B61     		str	r3, [r7, #16]
 319              	.L15:
 275:..\Common\Minimal/GenQTest.c **** 		{
 320              		.loc 1 275 0 is_stmt 0 discriminator 1
 321 00e0 3B69     		ldr	r3, [r7, #16]
 322 00e2 042B     		cmp	r3, #4
 323 00e4 F1D9     		bls	.L16
 278:..\Common\Minimal/GenQTest.c **** 		}
 279:..\Common\Minimal/GenQTest.c **** 
 280:..\Common\Minimal/GenQTest.c **** 		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
 281:..\Common\Minimal/GenQTest.c **** 		thing to be read out.  Now add 1 then 0 to the front of the queue. */
 282:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 324              		.loc 1 282 0 is_stmt 1
 325 00e6 7869     		ldr	r0, [r7, #20]
 326 00e8 FFF7FEFF 		bl	uxQueueMessagesWaiting
 327 00ec 0346     		mov	r3, r0
 328 00ee 032B     		cmp	r3, #3
 329 00f0 02D0     		beq	.L17
 283:..\Common\Minimal/GenQTest.c **** 		{
 284:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 330              		.loc 1 284 0
 331 00f2 724B     		ldr	r3, .L43+4
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 12


 332 00f4 0122     		movs	r2, #1
 333 00f6 1A60     		str	r2, [r3]
 334              	.L17:
 285:..\Common\Minimal/GenQTest.c **** 		}
 286:..\Common\Minimal/GenQTest.c **** 		ulData = 1;
 335              		.loc 1 286 0
 336 00f8 0123     		movs	r3, #1
 337 00fa 3B61     		str	r3, [r7, #16]
 287:..\Common\Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 338              		.loc 1 287 0
 339 00fc 07F11003 		add	r3, r7, #16
 340 0100 7869     		ldr	r0, [r7, #20]
 341 0102 1946     		mov	r1, r3
 342 0104 0022     		movs	r2, #0
 343 0106 0123     		movs	r3, #1
 344 0108 FFF7FEFF 		bl	xQueueGenericSend
 288:..\Common\Minimal/GenQTest.c **** 		ulData = 0;
 345              		.loc 1 288 0
 346 010c 0023     		movs	r3, #0
 347 010e 3B61     		str	r3, [r7, #16]
 289:..\Common\Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 348              		.loc 1 289 0
 349 0110 07F11003 		add	r3, r7, #16
 350 0114 7869     		ldr	r0, [r7, #20]
 351 0116 1946     		mov	r1, r3
 352 0118 0022     		movs	r2, #0
 353 011a 0123     		movs	r3, #1
 354 011c FFF7FEFF 		bl	xQueueGenericSend
 290:..\Common\Minimal/GenQTest.c **** 
 291:..\Common\Minimal/GenQTest.c **** 		/* Now the queue should be full, and when we read the data out we
 292:..\Common\Minimal/GenQTest.c **** 		should receive 0, 1, 2, 3, 4. */
 293:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 355              		.loc 1 293 0
 356 0120 7869     		ldr	r0, [r7, #20]
 357 0122 FFF7FEFF 		bl	uxQueueMessagesWaiting
 358 0126 0346     		mov	r3, r0
 359 0128 052B     		cmp	r3, #5
 360 012a 02D0     		beq	.L18
 294:..\Common\Minimal/GenQTest.c **** 		{
 295:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 361              		.loc 1 295 0
 362 012c 634B     		ldr	r3, .L43+4
 363 012e 0122     		movs	r2, #1
 364 0130 1A60     		str	r2, [r3]
 365              	.L18:
 296:..\Common\Minimal/GenQTest.c **** 		}
 297:..\Common\Minimal/GenQTest.c **** 
 298:..\Common\Minimal/GenQTest.c **** 		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 366              		.loc 1 298 0
 367 0132 07F11003 		add	r3, r7, #16
 368 0136 7869     		ldr	r0, [r7, #20]
 369 0138 1946     		mov	r1, r3
 370 013a 0022     		movs	r2, #0
 371 013c 0123     		movs	r3, #1
 372 013e FFF7FEFF 		bl	xQueueGenericSend
 373 0142 0346     		mov	r3, r0
 374 0144 002B     		cmp	r3, #0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 13


 375 0146 02D0     		beq	.L19
 299:..\Common\Minimal/GenQTest.c **** 		{
 300:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 376              		.loc 1 300 0
 377 0148 5C4B     		ldr	r3, .L43+4
 378 014a 0122     		movs	r2, #1
 379 014c 1A60     		str	r2, [r3]
 380              	.L19:
 301:..\Common\Minimal/GenQTest.c **** 		}
 302:..\Common\Minimal/GenQTest.c **** 
 303:..\Common\Minimal/GenQTest.c **** 		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 381              		.loc 1 303 0
 382 014e 07F11003 		add	r3, r7, #16
 383 0152 7869     		ldr	r0, [r7, #20]
 384 0154 1946     		mov	r1, r3
 385 0156 0022     		movs	r2, #0
 386 0158 0023     		movs	r3, #0
 387 015a FFF7FEFF 		bl	xQueueGenericSend
 388 015e 0346     		mov	r3, r0
 389 0160 002B     		cmp	r3, #0
 390 0162 02D0     		beq	.L20
 304:..\Common\Minimal/GenQTest.c **** 		{
 305:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 391              		.loc 1 305 0
 392 0164 554B     		ldr	r3, .L43+4
 393 0166 0122     		movs	r2, #1
 394 0168 1A60     		str	r2, [r3]
 395              	.L20:
 306:..\Common\Minimal/GenQTest.c **** 		}
 307:..\Common\Minimal/GenQTest.c **** 
 308:..\Common\Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 309:..\Common\Minimal/GenQTest.c **** 			taskYIELD();
 310:..\Common\Minimal/GenQTest.c **** 		#endif
 311:..\Common\Minimal/GenQTest.c **** 
 312:..\Common\Minimal/GenQTest.c **** 		/* Check the data we read out is in the expected order. */
 313:..\Common\Minimal/GenQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 396              		.loc 1 313 0
 397 016a 0023     		movs	r3, #0
 398 016c 3B61     		str	r3, [r7, #16]
 399 016e 2FE0     		b	.L21
 400              	.L26:
 314:..\Common\Minimal/GenQTest.c **** 		{
 315:..\Common\Minimal/GenQTest.c **** 			/* Try peeking the data first. */
 316:..\Common\Minimal/GenQTest.c **** 			if( xQueuePeek( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 401              		.loc 1 316 0
 402 0170 07F10C03 		add	r3, r7, #12
 403 0174 7869     		ldr	r0, [r7, #20]
 404 0176 1946     		mov	r1, r3
 405 0178 0022     		movs	r2, #0
 406 017a 0123     		movs	r3, #1
 407 017c FFF7FEFF 		bl	xQueueGenericReceive
 408 0180 0346     		mov	r3, r0
 409 0182 012B     		cmp	r3, #1
 410 0184 02D0     		beq	.L22
 317:..\Common\Minimal/GenQTest.c **** 			{
 318:..\Common\Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 411              		.loc 1 318 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 14


 412 0186 4D4B     		ldr	r3, .L43+4
 413 0188 0122     		movs	r2, #1
 414 018a 1A60     		str	r2, [r3]
 415              	.L22:
 319:..\Common\Minimal/GenQTest.c **** 			}
 320:..\Common\Minimal/GenQTest.c **** 
 321:..\Common\Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 416              		.loc 1 321 0
 417 018c 3A69     		ldr	r2, [r7, #16]
 418 018e FB68     		ldr	r3, [r7, #12]
 419 0190 9A42     		cmp	r2, r3
 420 0192 02D0     		beq	.L23
 322:..\Common\Minimal/GenQTest.c **** 			{
 323:..\Common\Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 421              		.loc 1 323 0
 422 0194 494B     		ldr	r3, .L43+4
 423 0196 0122     		movs	r2, #1
 424 0198 1A60     		str	r2, [r3]
 425              	.L23:
 324:..\Common\Minimal/GenQTest.c **** 			}
 325:..\Common\Minimal/GenQTest.c **** 
 326:..\Common\Minimal/GenQTest.c **** 
 327:..\Common\Minimal/GenQTest.c **** 			/* Now try receiving the data for real.  The value should be the
 328:..\Common\Minimal/GenQTest.c **** 			same.  Clobber the value first so we know we really received it. */
 329:..\Common\Minimal/GenQTest.c **** 			ulData2 = ~ulData2;
 426              		.loc 1 329 0
 427 019a FB68     		ldr	r3, [r7, #12]
 428 019c DB43     		mvns	r3, r3
 429 019e FB60     		str	r3, [r7, #12]
 330:..\Common\Minimal/GenQTest.c **** 			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 430              		.loc 1 330 0
 431 01a0 07F10C03 		add	r3, r7, #12
 432 01a4 7869     		ldr	r0, [r7, #20]
 433 01a6 1946     		mov	r1, r3
 434 01a8 0022     		movs	r2, #0
 435 01aa 0023     		movs	r3, #0
 436 01ac FFF7FEFF 		bl	xQueueGenericReceive
 437 01b0 0346     		mov	r3, r0
 438 01b2 012B     		cmp	r3, #1
 439 01b4 02D0     		beq	.L24
 331:..\Common\Minimal/GenQTest.c **** 			{
 332:..\Common\Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 440              		.loc 1 332 0
 441 01b6 414B     		ldr	r3, .L43+4
 442 01b8 0122     		movs	r2, #1
 443 01ba 1A60     		str	r2, [r3]
 444              	.L24:
 333:..\Common\Minimal/GenQTest.c **** 			}
 334:..\Common\Minimal/GenQTest.c **** 
 335:..\Common\Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 445              		.loc 1 335 0
 446 01bc 3A69     		ldr	r2, [r7, #16]
 447 01be FB68     		ldr	r3, [r7, #12]
 448 01c0 9A42     		cmp	r2, r3
 449 01c2 02D0     		beq	.L25
 336:..\Common\Minimal/GenQTest.c **** 			{
 337:..\Common\Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 15


 450              		.loc 1 337 0
 451 01c4 3D4B     		ldr	r3, .L43+4
 452 01c6 0122     		movs	r2, #1
 453 01c8 1A60     		str	r2, [r3]
 454              	.L25:
 313:..\Common\Minimal/GenQTest.c **** 		{
 455              		.loc 1 313 0 discriminator 2
 456 01ca 3B69     		ldr	r3, [r7, #16]
 457 01cc 0133     		adds	r3, r3, #1
 458 01ce 3B61     		str	r3, [r7, #16]
 459              	.L21:
 313:..\Common\Minimal/GenQTest.c **** 		{
 460              		.loc 1 313 0 is_stmt 0 discriminator 1
 461 01d0 3B69     		ldr	r3, [r7, #16]
 462 01d2 042B     		cmp	r3, #4
 463 01d4 CCD9     		bls	.L26
 338:..\Common\Minimal/GenQTest.c **** 			}
 339:..\Common\Minimal/GenQTest.c **** 		}
 340:..\Common\Minimal/GenQTest.c **** 
 341:..\Common\Minimal/GenQTest.c **** 		/* The queue should now be empty again. */
 342:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 464              		.loc 1 342 0 is_stmt 1
 465 01d6 7869     		ldr	r0, [r7, #20]
 466 01d8 FFF7FEFF 		bl	uxQueueMessagesWaiting
 467 01dc 0346     		mov	r3, r0
 468 01de 002B     		cmp	r3, #0
 469 01e0 02D0     		beq	.L27
 343:..\Common\Minimal/GenQTest.c **** 		{
 344:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 470              		.loc 1 344 0
 471 01e2 364B     		ldr	r3, .L43+4
 472 01e4 0122     		movs	r2, #1
 473 01e6 1A60     		str	r2, [r3]
 474              	.L27:
 345:..\Common\Minimal/GenQTest.c **** 		}
 346:..\Common\Minimal/GenQTest.c **** 
 347:..\Common\Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 348:..\Common\Minimal/GenQTest.c **** 			taskYIELD();
 349:..\Common\Minimal/GenQTest.c **** 		#endif
 350:..\Common\Minimal/GenQTest.c **** 
 351:..\Common\Minimal/GenQTest.c **** 
 352:..\Common\Minimal/GenQTest.c **** 		/* Our queue is empty once more, add 10, 11 to the back. */
 353:..\Common\Minimal/GenQTest.c **** 		ulData = 10;
 475              		.loc 1 353 0
 476 01e8 0A23     		movs	r3, #10
 477 01ea 3B61     		str	r3, [r7, #16]
 354:..\Common\Minimal/GenQTest.c **** 		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 478              		.loc 1 354 0
 479 01ec 07F11003 		add	r3, r7, #16
 480 01f0 7869     		ldr	r0, [r7, #20]
 481 01f2 1946     		mov	r1, r3
 482 01f4 0022     		movs	r2, #0
 483 01f6 0023     		movs	r3, #0
 484 01f8 FFF7FEFF 		bl	xQueueGenericSend
 485 01fc 0346     		mov	r3, r0
 486 01fe 012B     		cmp	r3, #1
 487 0200 02D0     		beq	.L28
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 16


 355:..\Common\Minimal/GenQTest.c **** 		{
 356:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 488              		.loc 1 356 0
 489 0202 2E4B     		ldr	r3, .L43+4
 490 0204 0122     		movs	r2, #1
 491 0206 1A60     		str	r2, [r3]
 492              	.L28:
 357:..\Common\Minimal/GenQTest.c **** 		}
 358:..\Common\Minimal/GenQTest.c **** 		ulData = 11;
 493              		.loc 1 358 0
 494 0208 0B23     		movs	r3, #11
 495 020a 3B61     		str	r3, [r7, #16]
 359:..\Common\Minimal/GenQTest.c **** 		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 496              		.loc 1 359 0
 497 020c 07F11003 		add	r3, r7, #16
 498 0210 7869     		ldr	r0, [r7, #20]
 499 0212 1946     		mov	r1, r3
 500 0214 0022     		movs	r2, #0
 501 0216 0023     		movs	r3, #0
 502 0218 FFF7FEFF 		bl	xQueueGenericSend
 503 021c 0346     		mov	r3, r0
 504 021e 012B     		cmp	r3, #1
 505 0220 02D0     		beq	.L29
 360:..\Common\Minimal/GenQTest.c **** 		{
 361:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 506              		.loc 1 361 0
 507 0222 264B     		ldr	r3, .L43+4
 508 0224 0122     		movs	r2, #1
 509 0226 1A60     		str	r2, [r3]
 510              	.L29:
 362:..\Common\Minimal/GenQTest.c **** 		}
 363:..\Common\Minimal/GenQTest.c **** 
 364:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 511              		.loc 1 364 0
 512 0228 7869     		ldr	r0, [r7, #20]
 513 022a FFF7FEFF 		bl	uxQueueMessagesWaiting
 514 022e 0346     		mov	r3, r0
 515 0230 022B     		cmp	r3, #2
 516 0232 02D0     		beq	.L30
 365:..\Common\Minimal/GenQTest.c **** 		{
 366:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 517              		.loc 1 366 0
 518 0234 214B     		ldr	r3, .L43+4
 519 0236 0122     		movs	r2, #1
 520 0238 1A60     		str	r2, [r3]
 521              	.L30:
 367:..\Common\Minimal/GenQTest.c **** 		}
 368:..\Common\Minimal/GenQTest.c **** 
 369:..\Common\Minimal/GenQTest.c **** 		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
 370:..\Common\Minimal/GenQTest.c **** 		front. */
 371:..\Common\Minimal/GenQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 522              		.loc 1 371 0
 523 023a 0923     		movs	r3, #9
 524 023c 3B61     		str	r3, [r7, #16]
 525 023e 10E0     		b	.L31
 526              	.L33:
 372:..\Common\Minimal/GenQTest.c **** 		{
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 17


 373:..\Common\Minimal/GenQTest.c **** 			if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 527              		.loc 1 373 0
 528 0240 07F11003 		add	r3, r7, #16
 529 0244 7869     		ldr	r0, [r7, #20]
 530 0246 1946     		mov	r1, r3
 531 0248 0022     		movs	r2, #0
 532 024a 0123     		movs	r3, #1
 533 024c FFF7FEFF 		bl	xQueueGenericSend
 534 0250 0346     		mov	r3, r0
 535 0252 012B     		cmp	r3, #1
 536 0254 02D0     		beq	.L32
 374:..\Common\Minimal/GenQTest.c **** 			{
 375:..\Common\Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 537              		.loc 1 375 0
 538 0256 194B     		ldr	r3, .L43+4
 539 0258 0122     		movs	r2, #1
 540 025a 1A60     		str	r2, [r3]
 541              	.L32:
 371:..\Common\Minimal/GenQTest.c **** 		{
 542              		.loc 1 371 0 discriminator 2
 543 025c 3B69     		ldr	r3, [r7, #16]
 544 025e 013B     		subs	r3, r3, #1
 545 0260 3B61     		str	r3, [r7, #16]
 546              	.L31:
 371:..\Common\Minimal/GenQTest.c **** 		{
 547              		.loc 1 371 0 is_stmt 0 discriminator 1
 548 0262 3B69     		ldr	r3, [r7, #16]
 549 0264 062B     		cmp	r3, #6
 550 0266 EBD8     		bhi	.L33
 376:..\Common\Minimal/GenQTest.c **** 			}
 377:..\Common\Minimal/GenQTest.c **** 		}
 378:..\Common\Minimal/GenQTest.c **** 
 379:..\Common\Minimal/GenQTest.c **** 		/* Now check that the queue is full, and that receiving data provides
 380:..\Common\Minimal/GenQTest.c **** 		the expected sequence of 7, 8, 9, 10, 11. */
 381:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 551              		.loc 1 381 0 is_stmt 1
 552 0268 7869     		ldr	r0, [r7, #20]
 553 026a FFF7FEFF 		bl	uxQueueMessagesWaiting
 554 026e 0346     		mov	r3, r0
 555 0270 052B     		cmp	r3, #5
 556 0272 02D0     		beq	.L34
 382:..\Common\Minimal/GenQTest.c **** 		{
 383:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 557              		.loc 1 383 0
 558 0274 114B     		ldr	r3, .L43+4
 559 0276 0122     		movs	r2, #1
 560 0278 1A60     		str	r2, [r3]
 561              	.L34:
 384:..\Common\Minimal/GenQTest.c **** 		}
 385:..\Common\Minimal/GenQTest.c **** 
 386:..\Common\Minimal/GenQTest.c **** 		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 562              		.loc 1 386 0
 563 027a 07F11003 		add	r3, r7, #16
 564 027e 7869     		ldr	r0, [r7, #20]
 565 0280 1946     		mov	r1, r3
 566 0282 0022     		movs	r2, #0
 567 0284 0123     		movs	r3, #1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 18


 568 0286 FFF7FEFF 		bl	xQueueGenericSend
 569 028a 0346     		mov	r3, r0
 570 028c 002B     		cmp	r3, #0
 571 028e 02D0     		beq	.L35
 387:..\Common\Minimal/GenQTest.c **** 		{
 388:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 572              		.loc 1 388 0
 573 0290 0A4B     		ldr	r3, .L43+4
 574 0292 0122     		movs	r2, #1
 575 0294 1A60     		str	r2, [r3]
 576              	.L35:
 389:..\Common\Minimal/GenQTest.c **** 		}
 390:..\Common\Minimal/GenQTest.c **** 
 391:..\Common\Minimal/GenQTest.c **** 		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 577              		.loc 1 391 0
 578 0296 07F11003 		add	r3, r7, #16
 579 029a 7869     		ldr	r0, [r7, #20]
 580 029c 1946     		mov	r1, r3
 581 029e 0022     		movs	r2, #0
 582 02a0 0023     		movs	r3, #0
 583 02a2 FFF7FEFF 		bl	xQueueGenericSend
 584 02a6 0346     		mov	r3, r0
 585 02a8 002B     		cmp	r3, #0
 586 02aa 02D0     		beq	.L36
 392:..\Common\Minimal/GenQTest.c **** 		{
 393:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 587              		.loc 1 393 0
 588 02ac 034B     		ldr	r3, .L43+4
 589 02ae 0122     		movs	r2, #1
 590 02b0 1A60     		str	r2, [r3]
 591              	.L36:
 394:..\Common\Minimal/GenQTest.c **** 		}
 395:..\Common\Minimal/GenQTest.c **** 
 396:..\Common\Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 397:..\Common\Minimal/GenQTest.c **** 			taskYIELD();
 398:..\Common\Minimal/GenQTest.c **** 		#endif
 399:..\Common\Minimal/GenQTest.c **** 
 400:..\Common\Minimal/GenQTest.c **** 		/* Check the data we read out is in the expected order. */
 401:..\Common\Minimal/GenQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 592              		.loc 1 401 0
 593 02b2 0723     		movs	r3, #7
 594 02b4 3B61     		str	r3, [r7, #16]
 595 02b6 1BE0     		b	.L37
 596              	.L44:
 597              		.align	2
 598              	.L43:
 599 02b8 04000000 		.word	ulLoopCounter
 600 02bc 00000000 		.word	xErrorDetected
 601              	.L40:
 402:..\Common\Minimal/GenQTest.c **** 		{
 403:..\Common\Minimal/GenQTest.c **** 			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 602              		.loc 1 403 0
 603 02c0 07F10C03 		add	r3, r7, #12
 604 02c4 7869     		ldr	r0, [r7, #20]
 605 02c6 1946     		mov	r1, r3
 606 02c8 0022     		movs	r2, #0
 607 02ca 0023     		movs	r3, #0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 19


 608 02cc FFF7FEFF 		bl	xQueueGenericReceive
 609 02d0 0346     		mov	r3, r0
 610 02d2 012B     		cmp	r3, #1
 611 02d4 02D0     		beq	.L38
 404:..\Common\Minimal/GenQTest.c **** 			{
 405:..\Common\Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 612              		.loc 1 405 0
 613 02d6 0F4B     		ldr	r3, .L45
 614 02d8 0122     		movs	r2, #1
 615 02da 1A60     		str	r2, [r3]
 616              	.L38:
 406:..\Common\Minimal/GenQTest.c **** 			}
 407:..\Common\Minimal/GenQTest.c **** 
 408:..\Common\Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 617              		.loc 1 408 0
 618 02dc 3A69     		ldr	r2, [r7, #16]
 619 02de FB68     		ldr	r3, [r7, #12]
 620 02e0 9A42     		cmp	r2, r3
 621 02e2 02D0     		beq	.L39
 409:..\Common\Minimal/GenQTest.c **** 			{
 410:..\Common\Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 622              		.loc 1 410 0
 623 02e4 0B4B     		ldr	r3, .L45
 624 02e6 0122     		movs	r2, #1
 625 02e8 1A60     		str	r2, [r3]
 626              	.L39:
 401:..\Common\Minimal/GenQTest.c **** 		{
 627              		.loc 1 401 0 discriminator 2
 628 02ea 3B69     		ldr	r3, [r7, #16]
 629 02ec 0133     		adds	r3, r3, #1
 630 02ee 3B61     		str	r3, [r7, #16]
 631              	.L37:
 401:..\Common\Minimal/GenQTest.c **** 		{
 632              		.loc 1 401 0 is_stmt 0 discriminator 1
 633 02f0 3B69     		ldr	r3, [r7, #16]
 634 02f2 0B2B     		cmp	r3, #11
 635 02f4 E4D9     		bls	.L40
 411:..\Common\Minimal/GenQTest.c **** 			}
 412:..\Common\Minimal/GenQTest.c **** 		}
 413:..\Common\Minimal/GenQTest.c **** 
 414:..\Common\Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 636              		.loc 1 414 0 is_stmt 1
 637 02f6 7869     		ldr	r0, [r7, #20]
 638 02f8 FFF7FEFF 		bl	uxQueueMessagesWaiting
 639 02fc 0346     		mov	r3, r0
 640 02fe 002B     		cmp	r3, #0
 641 0300 02D0     		beq	.L41
 415:..\Common\Minimal/GenQTest.c **** 		{
 416:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 642              		.loc 1 416 0
 643 0302 044B     		ldr	r3, .L45
 644 0304 0122     		movs	r2, #1
 645 0306 1A60     		str	r2, [r3]
 646              	.L41:
 417:..\Common\Minimal/GenQTest.c **** 		}
 418:..\Common\Minimal/GenQTest.c **** 
 419:..\Common\Minimal/GenQTest.c **** 		ulLoopCounter++;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 20


 647              		.loc 1 419 0
 648 0308 034B     		ldr	r3, .L45+4
 649 030a 1B68     		ldr	r3, [r3]
 650 030c 0133     		adds	r3, r3, #1
 651 030e 024A     		ldr	r2, .L45+4
 652 0310 1360     		str	r3, [r2]
 420:..\Common\Minimal/GenQTest.c **** 	}
 653              		.loc 1 420 0
 654 0312 7BE6     		b	.L42
 655              	.L46:
 656              		.align	2
 657              	.L45:
 658 0314 00000000 		.word	xErrorDetected
 659 0318 04000000 		.word	ulLoopCounter
 660              		.cfi_endproc
 661              	.LFE69:
 662              		.size	prvSendFrontAndBackTest, .-prvSendFrontAndBackTest
 663              		.section	.text.prvTakeTwoMutexesReturnInDifferentOrder,"ax",%progbits
 664              		.align	2
 665              		.thumb
 666              		.thumb_func
 667              		.type	prvTakeTwoMutexesReturnInDifferentOrder, %function
 668              	prvTakeTwoMutexesReturnInDifferentOrder:
 669              	.LFB70:
 421:..\Common\Minimal/GenQTest.c **** }
 422:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 423:..\Common\Minimal/GenQTest.c **** 
 424:..\Common\Minimal/GenQTest.c **** static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xL
 425:..\Common\Minimal/GenQTest.c **** {
 670              		.loc 1 425 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 8
 673              		@ frame_needed = 1, uses_anonymous_args = 0
 674 0000 80B5     		push	{r7, lr}
 675              		.cfi_def_cfa_offset 8
 676              		.cfi_offset 7, -8
 677              		.cfi_offset 14, -4
 678 0002 82B0     		sub	sp, sp, #8
 679              		.cfi_def_cfa_offset 16
 680 0004 00AF     		add	r7, sp, #0
 681              		.cfi_def_cfa_register 7
 682 0006 7860     		str	r0, [r7, #4]
 683 0008 3960     		str	r1, [r7]
 426:..\Common\Minimal/GenQTest.c **** 	/* Take the mutex.  It should be available now. */
 427:..\Common\Minimal/GenQTest.c **** 	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 684              		.loc 1 427 0
 685 000a 7868     		ldr	r0, [r7, #4]
 686 000c 0021     		movs	r1, #0
 687 000e 0022     		movs	r2, #0
 688 0010 0023     		movs	r3, #0
 689 0012 FFF7FEFF 		bl	xQueueGenericReceive
 690 0016 0346     		mov	r3, r0
 691 0018 012B     		cmp	r3, #1
 692 001a 02D0     		beq	.L48
 428:..\Common\Minimal/GenQTest.c **** 	{
 429:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 693              		.loc 1 429 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 21


 694 001c 404B     		ldr	r3, .L60
 695 001e 0122     		movs	r2, #1
 696 0020 1A60     		str	r2, [r3]
 697              	.L48:
 430:..\Common\Minimal/GenQTest.c **** 	}
 431:..\Common\Minimal/GenQTest.c **** 
 432:..\Common\Minimal/GenQTest.c **** 	/* Set the guarded variable to a known start value. */
 433:..\Common\Minimal/GenQTest.c **** 	ulGuardedVariable = 0;
 698              		.loc 1 433 0
 699 0022 404B     		ldr	r3, .L60+4
 700 0024 0022     		movs	r2, #0
 701 0026 1A60     		str	r2, [r3]
 434:..\Common\Minimal/GenQTest.c **** 
 435:..\Common\Minimal/GenQTest.c **** 	/* This task's priority should be as per that assigned when the task was
 436:..\Common\Minimal/GenQTest.c **** 	created. */
 437:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 702              		.loc 1 437 0
 703 0028 0020     		movs	r0, #0
 704 002a FFF7FEFF 		bl	uxTaskPriorityGet
 705 002e 0346     		mov	r3, r0
 706 0030 002B     		cmp	r3, #0
 707 0032 02D0     		beq	.L49
 438:..\Common\Minimal/GenQTest.c **** 	{
 439:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 708              		.loc 1 439 0
 709 0034 3A4B     		ldr	r3, .L60
 710 0036 0122     		movs	r2, #1
 711 0038 1A60     		str	r2, [r3]
 712              	.L49:
 440:..\Common\Minimal/GenQTest.c **** 	}
 441:..\Common\Minimal/GenQTest.c **** 
 442:..\Common\Minimal/GenQTest.c **** 	/* Now unsuspend the high priority task.  This will attempt to take the
 443:..\Common\Minimal/GenQTest.c **** 	mutex, and block when it finds it cannot obtain it. */
 444:..\Common\Minimal/GenQTest.c **** 	vTaskResume( xHighPriorityMutexTask );
 713              		.loc 1 444 0
 714 003a 3B4B     		ldr	r3, .L60+8
 715 003c 1B68     		ldr	r3, [r3]
 716 003e 1846     		mov	r0, r3
 717 0040 FFF7FEFF 		bl	vTaskResume
 445:..\Common\Minimal/GenQTest.c **** 
 446:..\Common\Minimal/GenQTest.c **** 	#if configUSE_PREEMPTION == 0
 447:..\Common\Minimal/GenQTest.c **** 		taskYIELD();
 448:..\Common\Minimal/GenQTest.c **** 	#endif
 449:..\Common\Minimal/GenQTest.c **** 
 450:..\Common\Minimal/GenQTest.c **** 	/* Ensure the task is reporting its priority as blocked and not
 451:..\Common\Minimal/GenQTest.c **** 	suspended (as it would have done in versions up to V7.5.3). */
 452:..\Common\Minimal/GenQTest.c **** 	#if( INCLUDE_eTaskGetState == 1 )
 453:..\Common\Minimal/GenQTest.c **** 	{
 454:..\Common\Minimal/GenQTest.c **** 		configASSERT( eTaskGetState( xHighPriorityMutexTask ) == eBlocked );
 455:..\Common\Minimal/GenQTest.c **** 	}
 456:..\Common\Minimal/GenQTest.c **** 	#endif /* INCLUDE_eTaskGetState */
 457:..\Common\Minimal/GenQTest.c **** 
 458:..\Common\Minimal/GenQTest.c **** 	/* The priority of the high priority task should now have been inherited
 459:..\Common\Minimal/GenQTest.c **** 	as by now it will have attempted to get the mutex. */
 460:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 718              		.loc 1 460 0
 719 0044 0020     		movs	r0, #0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 22


 720 0046 FFF7FEFF 		bl	uxTaskPriorityGet
 721 004a 0346     		mov	r3, r0
 722 004c 032B     		cmp	r3, #3
 723 004e 02D0     		beq	.L50
 461:..\Common\Minimal/GenQTest.c **** 	{
 462:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 724              		.loc 1 462 0
 725 0050 334B     		ldr	r3, .L60
 726 0052 0122     		movs	r2, #1
 727 0054 1A60     		str	r2, [r3]
 728              	.L50:
 463:..\Common\Minimal/GenQTest.c **** 	}
 464:..\Common\Minimal/GenQTest.c **** 
 465:..\Common\Minimal/GenQTest.c **** 	/* Attempt to set the priority of this task to the test priority -
 466:..\Common\Minimal/GenQTest.c **** 	between the	idle priority and the medium/high test priorities, but the
 467:..\Common\Minimal/GenQTest.c **** 	actual priority should remain at the high priority. */
 468:..\Common\Minimal/GenQTest.c **** 	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 729              		.loc 1 468 0
 730 0056 0020     		movs	r0, #0
 731 0058 0121     		movs	r1, #1
 732 005a FFF7FEFF 		bl	vTaskPrioritySet
 469:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 733              		.loc 1 469 0
 734 005e 0020     		movs	r0, #0
 735 0060 FFF7FEFF 		bl	uxTaskPriorityGet
 736 0064 0346     		mov	r3, r0
 737 0066 032B     		cmp	r3, #3
 738 0068 02D0     		beq	.L51
 470:..\Common\Minimal/GenQTest.c **** 	{
 471:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 739              		.loc 1 471 0
 740 006a 2D4B     		ldr	r3, .L60
 741 006c 0122     		movs	r2, #1
 742 006e 1A60     		str	r2, [r3]
 743              	.L51:
 472:..\Common\Minimal/GenQTest.c **** 	}
 473:..\Common\Minimal/GenQTest.c **** 
 474:..\Common\Minimal/GenQTest.c **** 	/* Now unsuspend the medium priority task.  This should not run as the
 475:..\Common\Minimal/GenQTest.c **** 	inherited priority of this task is above that of the medium priority
 476:..\Common\Minimal/GenQTest.c **** 	task. */
 477:..\Common\Minimal/GenQTest.c **** 	vTaskResume( xMediumPriorityMutexTask );
 744              		.loc 1 477 0
 745 0070 2E4B     		ldr	r3, .L60+12
 746 0072 1B68     		ldr	r3, [r3]
 747 0074 1846     		mov	r0, r3
 748 0076 FFF7FEFF 		bl	vTaskResume
 478:..\Common\Minimal/GenQTest.c **** 
 479:..\Common\Minimal/GenQTest.c **** 	/* If the medium priority task did run then it will have incremented the
 480:..\Common\Minimal/GenQTest.c **** 	guarded variable. */
 481:..\Common\Minimal/GenQTest.c **** 	if( ulGuardedVariable != 0 )
 749              		.loc 1 481 0
 750 007a 2A4B     		ldr	r3, .L60+4
 751 007c 1B68     		ldr	r3, [r3]
 752 007e 002B     		cmp	r3, #0
 753 0080 02D0     		beq	.L52
 482:..\Common\Minimal/GenQTest.c **** 	{
 483:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 23


 754              		.loc 1 483 0
 755 0082 274B     		ldr	r3, .L60
 756 0084 0122     		movs	r2, #1
 757 0086 1A60     		str	r2, [r3]
 758              	.L52:
 484:..\Common\Minimal/GenQTest.c **** 	}
 485:..\Common\Minimal/GenQTest.c **** 
 486:..\Common\Minimal/GenQTest.c **** 	/* Take the local mutex too, so two mutexes are now held. */
 487:..\Common\Minimal/GenQTest.c **** 	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 759              		.loc 1 487 0
 760 0088 3868     		ldr	r0, [r7]
 761 008a 0021     		movs	r1, #0
 762 008c 0022     		movs	r2, #0
 763 008e 0023     		movs	r3, #0
 764 0090 FFF7FEFF 		bl	xQueueGenericReceive
 765 0094 0346     		mov	r3, r0
 766 0096 012B     		cmp	r3, #1
 767 0098 02D0     		beq	.L53
 488:..\Common\Minimal/GenQTest.c **** 	{
 489:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 768              		.loc 1 489 0
 769 009a 214B     		ldr	r3, .L60
 770 009c 0122     		movs	r2, #1
 771 009e 1A60     		str	r2, [r3]
 772              	.L53:
 490:..\Common\Minimal/GenQTest.c **** 	}
 491:..\Common\Minimal/GenQTest.c **** 
 492:..\Common\Minimal/GenQTest.c **** 	/* When the semaphore is given back the priority of this task should not
 493:..\Common\Minimal/GenQTest.c **** 	yet be disinherited because the local mutex is still held.  This is a
 494:..\Common\Minimal/GenQTest.c **** 	simplification to allow FreeRTOS to be integrated with middleware that
 495:..\Common\Minimal/GenQTest.c **** 	attempts to hold multiple mutexes without bloating the code with complex
 496:..\Common\Minimal/GenQTest.c **** 	algorithms.  It is possible that the high priority mutex task will
 497:..\Common\Minimal/GenQTest.c **** 	execute as it shares a priority with this task. */
 498:..\Common\Minimal/GenQTest.c **** 	if( xSemaphoreGive( xMutex ) != pdPASS )
 773              		.loc 1 498 0
 774 00a0 7868     		ldr	r0, [r7, #4]
 775 00a2 0021     		movs	r1, #0
 776 00a4 0022     		movs	r2, #0
 777 00a6 0023     		movs	r3, #0
 778 00a8 FFF7FEFF 		bl	xQueueGenericSend
 779 00ac 0346     		mov	r3, r0
 780 00ae 012B     		cmp	r3, #1
 781 00b0 02D0     		beq	.L54
 499:..\Common\Minimal/GenQTest.c **** 	{
 500:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 782              		.loc 1 500 0
 783 00b2 1B4B     		ldr	r3, .L60
 784 00b4 0122     		movs	r2, #1
 785 00b6 1A60     		str	r2, [r3]
 786              	.L54:
 501:..\Common\Minimal/GenQTest.c **** 	}
 502:..\Common\Minimal/GenQTest.c **** 
 503:..\Common\Minimal/GenQTest.c **** 	#if configUSE_PREEMPTION == 0
 504:..\Common\Minimal/GenQTest.c **** 		taskYIELD();
 505:..\Common\Minimal/GenQTest.c **** 	#endif
 506:..\Common\Minimal/GenQTest.c **** 
 507:..\Common\Minimal/GenQTest.c **** 	/* The guarded variable is only incremented by the medium priority task,
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 24


 508:..\Common\Minimal/GenQTest.c **** 	which still should not have executed as this task should remain at the
 509:..\Common\Minimal/GenQTest.c **** 	higher priority, ensure this is the case. */
 510:..\Common\Minimal/GenQTest.c **** 	if( ulGuardedVariable != 0 )
 787              		.loc 1 510 0
 788 00b8 1A4B     		ldr	r3, .L60+4
 789 00ba 1B68     		ldr	r3, [r3]
 790 00bc 002B     		cmp	r3, #0
 791 00be 02D0     		beq	.L55
 511:..\Common\Minimal/GenQTest.c **** 	{
 512:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 792              		.loc 1 512 0
 793 00c0 174B     		ldr	r3, .L60
 794 00c2 0122     		movs	r2, #1
 795 00c4 1A60     		str	r2, [r3]
 796              	.L55:
 513:..\Common\Minimal/GenQTest.c **** 	}
 514:..\Common\Minimal/GenQTest.c **** 
 515:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 797              		.loc 1 515 0
 798 00c6 0020     		movs	r0, #0
 799 00c8 FFF7FEFF 		bl	uxTaskPriorityGet
 800 00cc 0346     		mov	r3, r0
 801 00ce 032B     		cmp	r3, #3
 802 00d0 02D0     		beq	.L56
 516:..\Common\Minimal/GenQTest.c **** 	{
 517:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 803              		.loc 1 517 0
 804 00d2 134B     		ldr	r3, .L60
 805 00d4 0122     		movs	r2, #1
 806 00d6 1A60     		str	r2, [r3]
 807              	.L56:
 518:..\Common\Minimal/GenQTest.c **** 	}
 519:..\Common\Minimal/GenQTest.c **** 
 520:..\Common\Minimal/GenQTest.c **** 	/* Now also give back the local mutex, taking the held count back to 0.
 521:..\Common\Minimal/GenQTest.c **** 	This time the priority of this task should be disinherited back to the
 522:..\Common\Minimal/GenQTest.c **** 	priority to which it was set while the mutex was held.  This means
 523:..\Common\Minimal/GenQTest.c **** 	the medium priority task should execute and increment the guarded
 524:..\Common\Minimal/GenQTest.c **** 	variable.   When this task next	runs both the high and medium priority
 525:..\Common\Minimal/GenQTest.c **** 	tasks will have been suspended again. */
 526:..\Common\Minimal/GenQTest.c **** 	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 808              		.loc 1 526 0
 809 00d8 3868     		ldr	r0, [r7]
 810 00da 0021     		movs	r1, #0
 811 00dc 0022     		movs	r2, #0
 812 00de 0023     		movs	r3, #0
 813 00e0 FFF7FEFF 		bl	xQueueGenericSend
 814 00e4 0346     		mov	r3, r0
 815 00e6 012B     		cmp	r3, #1
 816 00e8 02D0     		beq	.L57
 527:..\Common\Minimal/GenQTest.c **** 	{
 528:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 817              		.loc 1 528 0
 818 00ea 0D4B     		ldr	r3, .L60
 819 00ec 0122     		movs	r2, #1
 820 00ee 1A60     		str	r2, [r3]
 821              	.L57:
 529:..\Common\Minimal/GenQTest.c **** 	}
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 25


 530:..\Common\Minimal/GenQTest.c **** 
 531:..\Common\Minimal/GenQTest.c **** 	#if configUSE_PREEMPTION == 0
 532:..\Common\Minimal/GenQTest.c **** 		taskYIELD();
 533:..\Common\Minimal/GenQTest.c **** 	#endif
 534:..\Common\Minimal/GenQTest.c **** 
 535:..\Common\Minimal/GenQTest.c **** 	/* Check the guarded variable did indeed increment... */
 536:..\Common\Minimal/GenQTest.c **** 	if( ulGuardedVariable != 1 )
 822              		.loc 1 536 0
 823 00f0 0C4B     		ldr	r3, .L60+4
 824 00f2 1B68     		ldr	r3, [r3]
 825 00f4 012B     		cmp	r3, #1
 826 00f6 02D0     		beq	.L58
 537:..\Common\Minimal/GenQTest.c **** 	{
 538:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 827              		.loc 1 538 0
 828 00f8 094B     		ldr	r3, .L60
 829 00fa 0122     		movs	r2, #1
 830 00fc 1A60     		str	r2, [r3]
 831              	.L58:
 539:..\Common\Minimal/GenQTest.c **** 	}
 540:..\Common\Minimal/GenQTest.c **** 
 541:..\Common\Minimal/GenQTest.c **** 	/* ... and that the priority of this task has been disinherited to
 542:..\Common\Minimal/GenQTest.c **** 	genqMUTEX_TEST_PRIORITY. */
 543:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 832              		.loc 1 543 0
 833 00fe 0020     		movs	r0, #0
 834 0100 FFF7FEFF 		bl	uxTaskPriorityGet
 835 0104 0346     		mov	r3, r0
 836 0106 012B     		cmp	r3, #1
 837 0108 02D0     		beq	.L59
 544:..\Common\Minimal/GenQTest.c **** 	{
 545:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 838              		.loc 1 545 0
 839 010a 054B     		ldr	r3, .L60
 840 010c 0122     		movs	r2, #1
 841 010e 1A60     		str	r2, [r3]
 842              	.L59:
 546:..\Common\Minimal/GenQTest.c **** 	}
 547:..\Common\Minimal/GenQTest.c **** 
 548:..\Common\Minimal/GenQTest.c **** 	/* Set the priority of this task back to its original value, ready for
 549:..\Common\Minimal/GenQTest.c **** 	the next loop around this test. */
 550:..\Common\Minimal/GenQTest.c **** 	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 843              		.loc 1 550 0
 844 0110 0020     		movs	r0, #0
 845 0112 0021     		movs	r1, #0
 846 0114 FFF7FEFF 		bl	vTaskPrioritySet
 551:..\Common\Minimal/GenQTest.c **** }
 847              		.loc 1 551 0
 848 0118 0837     		adds	r7, r7, #8
 849              		.cfi_def_cfa_offset 8
 850 011a BD46     		mov	sp, r7
 851              		.cfi_def_cfa_register 13
 852              		@ sp needed
 853 011c 80BD     		pop	{r7, pc}
 854              	.L61:
 855 011e 00BF     		.align	2
 856              	.L60:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 26


 857 0120 00000000 		.word	xErrorDetected
 858 0124 0C000000 		.word	ulGuardedVariable
 859 0128 10000000 		.word	xHighPriorityMutexTask
 860 012c 14000000 		.word	xMediumPriorityMutexTask
 861              		.cfi_endproc
 862              	.LFE70:
 863              		.size	prvTakeTwoMutexesReturnInDifferentOrder, .-prvTakeTwoMutexesReturnInDifferentOrder
 864              		.section	.text.prvTakeTwoMutexesReturnInSameOrder,"ax",%progbits
 865              		.align	2
 866              		.thumb
 867              		.thumb_func
 868              		.type	prvTakeTwoMutexesReturnInSameOrder, %function
 869              	prvTakeTwoMutexesReturnInSameOrder:
 870              	.LFB71:
 552:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 553:..\Common\Minimal/GenQTest.c **** 
 554:..\Common\Minimal/GenQTest.c **** static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalM
 555:..\Common\Minimal/GenQTest.c **** {
 871              		.loc 1 555 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 8
 874              		@ frame_needed = 1, uses_anonymous_args = 0
 875 0000 80B5     		push	{r7, lr}
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 7, -8
 878              		.cfi_offset 14, -4
 879 0002 82B0     		sub	sp, sp, #8
 880              		.cfi_def_cfa_offset 16
 881 0004 00AF     		add	r7, sp, #0
 882              		.cfi_def_cfa_register 7
 883 0006 7860     		str	r0, [r7, #4]
 884 0008 3960     		str	r1, [r7]
 556:..\Common\Minimal/GenQTest.c **** 	/* Take the mutex.  It should be available now. */
 557:..\Common\Minimal/GenQTest.c **** 	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 885              		.loc 1 557 0
 886 000a 7868     		ldr	r0, [r7, #4]
 887 000c 0021     		movs	r1, #0
 888 000e 0022     		movs	r2, #0
 889 0010 0023     		movs	r3, #0
 890 0012 FFF7FEFF 		bl	xQueueGenericReceive
 891 0016 0346     		mov	r3, r0
 892 0018 012B     		cmp	r3, #1
 893 001a 02D0     		beq	.L63
 558:..\Common\Minimal/GenQTest.c **** 	{
 559:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 894              		.loc 1 559 0
 895 001c 374B     		ldr	r3, .L74
 896 001e 0122     		movs	r2, #1
 897 0020 1A60     		str	r2, [r3]
 898              	.L63:
 560:..\Common\Minimal/GenQTest.c **** 	}
 561:..\Common\Minimal/GenQTest.c **** 
 562:..\Common\Minimal/GenQTest.c **** 	/* Set the guarded variable to a known start value. */
 563:..\Common\Minimal/GenQTest.c **** 	ulGuardedVariable = 0;
 899              		.loc 1 563 0
 900 0022 374B     		ldr	r3, .L74+4
 901 0024 0022     		movs	r2, #0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 27


 902 0026 1A60     		str	r2, [r3]
 564:..\Common\Minimal/GenQTest.c **** 
 565:..\Common\Minimal/GenQTest.c **** 	/* This task's priority should be as per that assigned when the task was
 566:..\Common\Minimal/GenQTest.c **** 	created. */
 567:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 903              		.loc 1 567 0
 904 0028 0020     		movs	r0, #0
 905 002a FFF7FEFF 		bl	uxTaskPriorityGet
 906 002e 0346     		mov	r3, r0
 907 0030 002B     		cmp	r3, #0
 908 0032 02D0     		beq	.L64
 568:..\Common\Minimal/GenQTest.c **** 	{
 569:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 909              		.loc 1 569 0
 910 0034 314B     		ldr	r3, .L74
 911 0036 0122     		movs	r2, #1
 912 0038 1A60     		str	r2, [r3]
 913              	.L64:
 570:..\Common\Minimal/GenQTest.c **** 	}
 571:..\Common\Minimal/GenQTest.c **** 
 572:..\Common\Minimal/GenQTest.c **** 	/* Now unsuspend the high priority task.  This will attempt to take the
 573:..\Common\Minimal/GenQTest.c **** 	mutex, and block when it finds it cannot obtain it. */
 574:..\Common\Minimal/GenQTest.c **** 	vTaskResume( xHighPriorityMutexTask );
 914              		.loc 1 574 0
 915 003a 324B     		ldr	r3, .L74+8
 916 003c 1B68     		ldr	r3, [r3]
 917 003e 1846     		mov	r0, r3
 918 0040 FFF7FEFF 		bl	vTaskResume
 575:..\Common\Minimal/GenQTest.c **** 
 576:..\Common\Minimal/GenQTest.c **** 	#if configUSE_PREEMPTION == 0
 577:..\Common\Minimal/GenQTest.c **** 		taskYIELD();
 578:..\Common\Minimal/GenQTest.c **** 	#endif
 579:..\Common\Minimal/GenQTest.c **** 
 580:..\Common\Minimal/GenQTest.c **** 	/* Ensure the task is reporting its priority as blocked and not
 581:..\Common\Minimal/GenQTest.c **** 	suspended (as it would have done in versions up to V7.5.3). */
 582:..\Common\Minimal/GenQTest.c **** 	#if( INCLUDE_eTaskGetState == 1 )
 583:..\Common\Minimal/GenQTest.c **** 	{
 584:..\Common\Minimal/GenQTest.c **** 		configASSERT( eTaskGetState( xHighPriorityMutexTask ) == eBlocked );
 585:..\Common\Minimal/GenQTest.c **** 	}
 586:..\Common\Minimal/GenQTest.c **** 	#endif /* INCLUDE_eTaskGetState */
 587:..\Common\Minimal/GenQTest.c **** 
 588:..\Common\Minimal/GenQTest.c **** 	/* The priority of the high priority task should now have been inherited
 589:..\Common\Minimal/GenQTest.c **** 	as by now it will have attempted to get the mutex. */
 590:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 919              		.loc 1 590 0
 920 0044 0020     		movs	r0, #0
 921 0046 FFF7FEFF 		bl	uxTaskPriorityGet
 922 004a 0346     		mov	r3, r0
 923 004c 032B     		cmp	r3, #3
 924 004e 02D0     		beq	.L65
 591:..\Common\Minimal/GenQTest.c **** 	{
 592:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 925              		.loc 1 592 0
 926 0050 2A4B     		ldr	r3, .L74
 927 0052 0122     		movs	r2, #1
 928 0054 1A60     		str	r2, [r3]
 929              	.L65:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 28


 593:..\Common\Minimal/GenQTest.c **** 	}
 594:..\Common\Minimal/GenQTest.c **** 
 595:..\Common\Minimal/GenQTest.c **** 	/* Now unsuspend the medium priority task.  This should not run as the
 596:..\Common\Minimal/GenQTest.c **** 	inherited priority of this task is above that of the medium priority
 597:..\Common\Minimal/GenQTest.c **** 	task. */
 598:..\Common\Minimal/GenQTest.c **** 	vTaskResume( xMediumPriorityMutexTask );
 930              		.loc 1 598 0
 931 0056 2C4B     		ldr	r3, .L74+12
 932 0058 1B68     		ldr	r3, [r3]
 933 005a 1846     		mov	r0, r3
 934 005c FFF7FEFF 		bl	vTaskResume
 599:..\Common\Minimal/GenQTest.c **** 
 600:..\Common\Minimal/GenQTest.c **** 	/* If the medium priority task did run then it will have incremented the
 601:..\Common\Minimal/GenQTest.c **** 	guarded variable. */
 602:..\Common\Minimal/GenQTest.c **** 	if( ulGuardedVariable != 0 )
 935              		.loc 1 602 0
 936 0060 274B     		ldr	r3, .L74+4
 937 0062 1B68     		ldr	r3, [r3]
 938 0064 002B     		cmp	r3, #0
 939 0066 02D0     		beq	.L66
 603:..\Common\Minimal/GenQTest.c **** 	{
 604:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 940              		.loc 1 604 0
 941 0068 244B     		ldr	r3, .L74
 942 006a 0122     		movs	r2, #1
 943 006c 1A60     		str	r2, [r3]
 944              	.L66:
 605:..\Common\Minimal/GenQTest.c **** 	}
 606:..\Common\Minimal/GenQTest.c **** 
 607:..\Common\Minimal/GenQTest.c **** 	/* Take the local mutex too, so two mutexes are now held. */
 608:..\Common\Minimal/GenQTest.c **** 	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 945              		.loc 1 608 0
 946 006e 3868     		ldr	r0, [r7]
 947 0070 0021     		movs	r1, #0
 948 0072 0022     		movs	r2, #0
 949 0074 0023     		movs	r3, #0
 950 0076 FFF7FEFF 		bl	xQueueGenericReceive
 951 007a 0346     		mov	r3, r0
 952 007c 012B     		cmp	r3, #1
 953 007e 02D0     		beq	.L67
 609:..\Common\Minimal/GenQTest.c **** 	{
 610:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 954              		.loc 1 610 0
 955 0080 1E4B     		ldr	r3, .L74
 956 0082 0122     		movs	r2, #1
 957 0084 1A60     		str	r2, [r3]
 958              	.L67:
 611:..\Common\Minimal/GenQTest.c **** 	}
 612:..\Common\Minimal/GenQTest.c **** 
 613:..\Common\Minimal/GenQTest.c **** 	/* When the local semaphore is given back the priority of this task should
 614:..\Common\Minimal/GenQTest.c **** 	not	yet be disinherited because the shared mutex is still held.  This is a
 615:..\Common\Minimal/GenQTest.c **** 	simplification to allow FreeRTOS to be integrated with middleware that
 616:..\Common\Minimal/GenQTest.c **** 	attempts to hold multiple mutexes without bloating the code with complex
 617:..\Common\Minimal/GenQTest.c **** 	algorithms.  It is possible that the high priority mutex task will
 618:..\Common\Minimal/GenQTest.c **** 	execute as it shares a priority with this task. */
 619:..\Common\Minimal/GenQTest.c **** 	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 959              		.loc 1 619 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 29


 960 0086 3868     		ldr	r0, [r7]
 961 0088 0021     		movs	r1, #0
 962 008a 0022     		movs	r2, #0
 963 008c 0023     		movs	r3, #0
 964 008e FFF7FEFF 		bl	xQueueGenericSend
 965 0092 0346     		mov	r3, r0
 966 0094 012B     		cmp	r3, #1
 967 0096 02D0     		beq	.L68
 620:..\Common\Minimal/GenQTest.c **** 	{
 621:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 968              		.loc 1 621 0
 969 0098 184B     		ldr	r3, .L74
 970 009a 0122     		movs	r2, #1
 971 009c 1A60     		str	r2, [r3]
 972              	.L68:
 622:..\Common\Minimal/GenQTest.c **** 	}
 623:..\Common\Minimal/GenQTest.c **** 
 624:..\Common\Minimal/GenQTest.c **** 	#if configUSE_PREEMPTION == 0
 625:..\Common\Minimal/GenQTest.c **** 		taskYIELD();
 626:..\Common\Minimal/GenQTest.c **** 	#endif
 627:..\Common\Minimal/GenQTest.c **** 
 628:..\Common\Minimal/GenQTest.c **** 	/* The guarded variable is only incremented by the medium priority task,
 629:..\Common\Minimal/GenQTest.c **** 	which still should not have executed as this task should remain at the
 630:..\Common\Minimal/GenQTest.c **** 	higher priority, ensure this is the case. */
 631:..\Common\Minimal/GenQTest.c **** 	if( ulGuardedVariable != 0 )
 973              		.loc 1 631 0
 974 009e 184B     		ldr	r3, .L74+4
 975 00a0 1B68     		ldr	r3, [r3]
 976 00a2 002B     		cmp	r3, #0
 977 00a4 02D0     		beq	.L69
 632:..\Common\Minimal/GenQTest.c **** 	{
 633:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 978              		.loc 1 633 0
 979 00a6 154B     		ldr	r3, .L74
 980 00a8 0122     		movs	r2, #1
 981 00aa 1A60     		str	r2, [r3]
 982              	.L69:
 634:..\Common\Minimal/GenQTest.c **** 	}
 635:..\Common\Minimal/GenQTest.c **** 
 636:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 983              		.loc 1 636 0
 984 00ac 0020     		movs	r0, #0
 985 00ae FFF7FEFF 		bl	uxTaskPriorityGet
 986 00b2 0346     		mov	r3, r0
 987 00b4 032B     		cmp	r3, #3
 988 00b6 02D0     		beq	.L70
 637:..\Common\Minimal/GenQTest.c **** 	{
 638:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 989              		.loc 1 638 0
 990 00b8 104B     		ldr	r3, .L74
 991 00ba 0122     		movs	r2, #1
 992 00bc 1A60     		str	r2, [r3]
 993              	.L70:
 639:..\Common\Minimal/GenQTest.c **** 	}
 640:..\Common\Minimal/GenQTest.c **** 
 641:..\Common\Minimal/GenQTest.c **** 	/* Now also give back the shared mutex, taking the held count back to 0.
 642:..\Common\Minimal/GenQTest.c **** 	This time the priority of this task should be disinherited back to the
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 30


 643:..\Common\Minimal/GenQTest.c **** 	priority at which it was created.  This means the medium priority task
 644:..\Common\Minimal/GenQTest.c **** 	should execute and increment the guarded variable.  When this task next runs
 645:..\Common\Minimal/GenQTest.c **** 	both the high and medium priority tasks will have been suspended again. */
 646:..\Common\Minimal/GenQTest.c **** 	if( xSemaphoreGive( xMutex ) != pdPASS )
 994              		.loc 1 646 0
 995 00be 7868     		ldr	r0, [r7, #4]
 996 00c0 0021     		movs	r1, #0
 997 00c2 0022     		movs	r2, #0
 998 00c4 0023     		movs	r3, #0
 999 00c6 FFF7FEFF 		bl	xQueueGenericSend
 1000 00ca 0346     		mov	r3, r0
 1001 00cc 012B     		cmp	r3, #1
 1002 00ce 02D0     		beq	.L71
 647:..\Common\Minimal/GenQTest.c **** 	{
 648:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 1003              		.loc 1 648 0
 1004 00d0 0A4B     		ldr	r3, .L74
 1005 00d2 0122     		movs	r2, #1
 1006 00d4 1A60     		str	r2, [r3]
 1007              	.L71:
 649:..\Common\Minimal/GenQTest.c **** 	}
 650:..\Common\Minimal/GenQTest.c **** 
 651:..\Common\Minimal/GenQTest.c **** 	#if configUSE_PREEMPTION == 0
 652:..\Common\Minimal/GenQTest.c **** 		taskYIELD();
 653:..\Common\Minimal/GenQTest.c **** 	#endif
 654:..\Common\Minimal/GenQTest.c **** 
 655:..\Common\Minimal/GenQTest.c **** 	/* Check the guarded variable did indeed increment... */
 656:..\Common\Minimal/GenQTest.c **** 	if( ulGuardedVariable != 1 )
 1008              		.loc 1 656 0
 1009 00d6 0A4B     		ldr	r3, .L74+4
 1010 00d8 1B68     		ldr	r3, [r3]
 1011 00da 012B     		cmp	r3, #1
 1012 00dc 02D0     		beq	.L72
 657:..\Common\Minimal/GenQTest.c **** 	{
 658:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 1013              		.loc 1 658 0
 1014 00de 074B     		ldr	r3, .L74
 1015 00e0 0122     		movs	r2, #1
 1016 00e2 1A60     		str	r2, [r3]
 1017              	.L72:
 659:..\Common\Minimal/GenQTest.c **** 	}
 660:..\Common\Minimal/GenQTest.c **** 
 661:..\Common\Minimal/GenQTest.c **** 	/* ... and that the priority of this task has been disinherited to
 662:..\Common\Minimal/GenQTest.c **** 	genqMUTEX_LOW_PRIORITY. */
 663:..\Common\Minimal/GenQTest.c **** 	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 1018              		.loc 1 663 0
 1019 00e4 0020     		movs	r0, #0
 1020 00e6 FFF7FEFF 		bl	uxTaskPriorityGet
 1021 00ea 0346     		mov	r3, r0
 1022 00ec 002B     		cmp	r3, #0
 1023 00ee 02D0     		beq	.L62
 664:..\Common\Minimal/GenQTest.c **** 	{
 665:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 1024              		.loc 1 665 0
 1025 00f0 024B     		ldr	r3, .L74
 1026 00f2 0122     		movs	r2, #1
 1027 00f4 1A60     		str	r2, [r3]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 31


 1028              	.L62:
 666:..\Common\Minimal/GenQTest.c **** 	}
 667:..\Common\Minimal/GenQTest.c **** }
 1029              		.loc 1 667 0
 1030 00f6 0837     		adds	r7, r7, #8
 1031              		.cfi_def_cfa_offset 8
 1032 00f8 BD46     		mov	sp, r7
 1033              		.cfi_def_cfa_register 13
 1034              		@ sp needed
 1035 00fa 80BD     		pop	{r7, pc}
 1036              	.L75:
 1037              		.align	2
 1038              	.L74:
 1039 00fc 00000000 		.word	xErrorDetected
 1040 0100 0C000000 		.word	ulGuardedVariable
 1041 0104 10000000 		.word	xHighPriorityMutexTask
 1042 0108 14000000 		.word	xMediumPriorityMutexTask
 1043              		.cfi_endproc
 1044              	.LFE71:
 1045              		.size	prvTakeTwoMutexesReturnInSameOrder, .-prvTakeTwoMutexesReturnInSameOrder
 1046              		.section	.text.prvLowPriorityMutexTask,"ax",%progbits
 1047              		.align	2
 1048              		.thumb
 1049              		.thumb_func
 1050              		.type	prvLowPriorityMutexTask, %function
 1051              	prvLowPriorityMutexTask:
 1052              	.LFB72:
 668:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 669:..\Common\Minimal/GenQTest.c **** 
 670:..\Common\Minimal/GenQTest.c **** static void prvLowPriorityMutexTask( void *pvParameters )
 671:..\Common\Minimal/GenQTest.c **** {
 1053              		.loc 1 671 0
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 16
 1056              		@ frame_needed = 1, uses_anonymous_args = 0
 1057 0000 80B5     		push	{r7, lr}
 1058              		.cfi_def_cfa_offset 8
 1059              		.cfi_offset 7, -8
 1060              		.cfi_offset 14, -4
 1061 0002 84B0     		sub	sp, sp, #16
 1062              		.cfi_def_cfa_offset 24
 1063 0004 00AF     		add	r7, sp, #0
 1064              		.cfi_def_cfa_register 7
 1065 0006 7860     		str	r0, [r7, #4]
 672:..\Common\Minimal/GenQTest.c **** SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
 1066              		.loc 1 672 0
 1067 0008 7B68     		ldr	r3, [r7, #4]
 1068 000a FB60     		str	r3, [r7, #12]
 673:..\Common\Minimal/GenQTest.c **** 
 674:..\Common\Minimal/GenQTest.c **** 	#ifdef USE_STDIO
 675:..\Common\Minimal/GenQTest.c **** 	void vPrintDisplayMessage( const char * const * ppcMessageToSend );
 676:..\Common\Minimal/GenQTest.c **** 
 677:..\Common\Minimal/GenQTest.c **** 		const char * const pcTaskStartMsg = "Mutex with priority inheritance test started.\r\n";
 678:..\Common\Minimal/GenQTest.c **** 
 679:..\Common\Minimal/GenQTest.c **** 		/* Queue a message for printing to say the task has started. */
 680:..\Common\Minimal/GenQTest.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 681:..\Common\Minimal/GenQTest.c **** 	#endif
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 32


 682:..\Common\Minimal/GenQTest.c **** 
 683:..\Common\Minimal/GenQTest.c **** 	/* The local mutex is used to check the 'mutexs held' count. */
 684:..\Common\Minimal/GenQTest.c **** 	xLocalMutex = xSemaphoreCreateMutex();
 1069              		.loc 1 684 0
 1070 000c 0120     		movs	r0, #1
 1071 000e FFF7FEFF 		bl	xQueueCreateMutex
 1072 0012 B860     		str	r0, [r7, #8]
 1073              	.L77:
 685:..\Common\Minimal/GenQTest.c **** 	configASSERT( xLocalMutex );
 686:..\Common\Minimal/GenQTest.c **** 
 687:..\Common\Minimal/GenQTest.c **** 	for( ;; )
 688:..\Common\Minimal/GenQTest.c **** 	{
 689:..\Common\Minimal/GenQTest.c **** 		/* The first tests exercise the priority inheritance when two mutexes
 690:..\Common\Minimal/GenQTest.c **** 		are taken then returned in a different order to which they were
 691:..\Common\Minimal/GenQTest.c **** 		taken. */
 692:..\Common\Minimal/GenQTest.c **** 		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 1074              		.loc 1 692 0 discriminator 1
 1075 0014 F868     		ldr	r0, [r7, #12]
 1076 0016 B968     		ldr	r1, [r7, #8]
 1077 0018 FFF7FEFF 		bl	prvTakeTwoMutexesReturnInDifferentOrder
 693:..\Common\Minimal/GenQTest.c **** 
 694:..\Common\Minimal/GenQTest.c **** 		/* Just to show this task is still running. */
 695:..\Common\Minimal/GenQTest.c **** 		ulLoopCounter2++;
 1078              		.loc 1 695 0 discriminator 1
 1079 001c 074B     		ldr	r3, .L78
 1080 001e 1B68     		ldr	r3, [r3]
 1081 0020 0133     		adds	r3, r3, #1
 1082 0022 064A     		ldr	r2, .L78
 1083 0024 1360     		str	r3, [r2]
 696:..\Common\Minimal/GenQTest.c **** 
 697:..\Common\Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 698:..\Common\Minimal/GenQTest.c **** 			taskYIELD();
 699:..\Common\Minimal/GenQTest.c **** 		#endif
 700:..\Common\Minimal/GenQTest.c **** 
 701:..\Common\Minimal/GenQTest.c **** 		/* The second tests exercise the priority inheritance when two mutexes
 702:..\Common\Minimal/GenQTest.c **** 		are taken then returned in the same order in which they were taken. */
 703:..\Common\Minimal/GenQTest.c **** 		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
 1084              		.loc 1 703 0 discriminator 1
 1085 0026 F868     		ldr	r0, [r7, #12]
 1086 0028 B968     		ldr	r1, [r7, #8]
 1087 002a FFF7FEFF 		bl	prvTakeTwoMutexesReturnInSameOrder
 704:..\Common\Minimal/GenQTest.c **** 
 705:..\Common\Minimal/GenQTest.c **** 		/* Just to show this task is still running. */
 706:..\Common\Minimal/GenQTest.c **** 		ulLoopCounter2++;
 1088              		.loc 1 706 0 discriminator 1
 1089 002e 034B     		ldr	r3, .L78
 1090 0030 1B68     		ldr	r3, [r3]
 1091 0032 0133     		adds	r3, r3, #1
 1092 0034 014A     		ldr	r2, .L78
 1093 0036 1360     		str	r3, [r2]
 707:..\Common\Minimal/GenQTest.c **** 
 708:..\Common\Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 709:..\Common\Minimal/GenQTest.c **** 			taskYIELD();
 710:..\Common\Minimal/GenQTest.c **** 		#endif
 711:..\Common\Minimal/GenQTest.c **** 	}
 1094              		.loc 1 711 0 discriminator 1
 1095 0038 ECE7     		b	.L77
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 33


 1096              	.L79:
 1097 003a 00BF     		.align	2
 1098              	.L78:
 1099 003c 08000000 		.word	ulLoopCounter2
 1100              		.cfi_endproc
 1101              	.LFE72:
 1102              		.size	prvLowPriorityMutexTask, .-prvLowPriorityMutexTask
 1103              		.section	.text.prvMediumPriorityMutexTask,"ax",%progbits
 1104              		.align	2
 1105              		.thumb
 1106              		.thumb_func
 1107              		.type	prvMediumPriorityMutexTask, %function
 1108              	prvMediumPriorityMutexTask:
 1109              	.LFB73:
 712:..\Common\Minimal/GenQTest.c **** }
 713:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 714:..\Common\Minimal/GenQTest.c **** 
 715:..\Common\Minimal/GenQTest.c **** static void prvMediumPriorityMutexTask( void *pvParameters )
 716:..\Common\Minimal/GenQTest.c **** {
 1110              		.loc 1 716 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 8
 1113              		@ frame_needed = 1, uses_anonymous_args = 0
 1114 0000 80B5     		push	{r7, lr}
 1115              		.cfi_def_cfa_offset 8
 1116              		.cfi_offset 7, -8
 1117              		.cfi_offset 14, -4
 1118 0002 82B0     		sub	sp, sp, #8
 1119              		.cfi_def_cfa_offset 16
 1120 0004 00AF     		add	r7, sp, #0
 1121              		.cfi_def_cfa_register 7
 1122 0006 7860     		str	r0, [r7, #4]
 1123              	.L81:
 717:..\Common\Minimal/GenQTest.c **** 	( void ) pvParameters;
 718:..\Common\Minimal/GenQTest.c **** 
 719:..\Common\Minimal/GenQTest.c **** 	for( ;; )
 720:..\Common\Minimal/GenQTest.c **** 	{
 721:..\Common\Minimal/GenQTest.c **** 		/* The medium priority task starts by suspending itself.  The low
 722:..\Common\Minimal/GenQTest.c **** 		priority task will unsuspend this task when required. */
 723:..\Common\Minimal/GenQTest.c **** 		vTaskSuspend( NULL );
 1124              		.loc 1 723 0 discriminator 1
 1125 0008 0020     		movs	r0, #0
 1126 000a FFF7FEFF 		bl	vTaskSuspend
 724:..\Common\Minimal/GenQTest.c **** 
 725:..\Common\Minimal/GenQTest.c **** 		/* When this task unsuspends all it does is increment the guarded
 726:..\Common\Minimal/GenQTest.c **** 		variable, this is so the low priority task knows that it has
 727:..\Common\Minimal/GenQTest.c **** 		executed. */
 728:..\Common\Minimal/GenQTest.c **** 		ulGuardedVariable++;
 1127              		.loc 1 728 0 discriminator 1
 1128 000e 034B     		ldr	r3, .L82
 1129 0010 1B68     		ldr	r3, [r3]
 1130 0012 0133     		adds	r3, r3, #1
 1131 0014 014A     		ldr	r2, .L82
 1132 0016 1360     		str	r3, [r2]
 729:..\Common\Minimal/GenQTest.c **** 	}
 1133              		.loc 1 729 0 discriminator 1
 1134 0018 F6E7     		b	.L81
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 34


 1135              	.L83:
 1136 001a 00BF     		.align	2
 1137              	.L82:
 1138 001c 0C000000 		.word	ulGuardedVariable
 1139              		.cfi_endproc
 1140              	.LFE73:
 1141              		.size	prvMediumPriorityMutexTask, .-prvMediumPriorityMutexTask
 1142              		.section	.text.prvHighPriorityMutexTask,"ax",%progbits
 1143              		.align	2
 1144              		.thumb
 1145              		.thumb_func
 1146              		.type	prvHighPriorityMutexTask, %function
 1147              	prvHighPriorityMutexTask:
 1148              	.LFB74:
 730:..\Common\Minimal/GenQTest.c **** }
 731:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 732:..\Common\Minimal/GenQTest.c **** 
 733:..\Common\Minimal/GenQTest.c **** static void prvHighPriorityMutexTask( void *pvParameters )
 734:..\Common\Minimal/GenQTest.c **** {
 1149              		.loc 1 734 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 16
 1152              		@ frame_needed = 1, uses_anonymous_args = 0
 1153 0000 80B5     		push	{r7, lr}
 1154              		.cfi_def_cfa_offset 8
 1155              		.cfi_offset 7, -8
 1156              		.cfi_offset 14, -4
 1157 0002 84B0     		sub	sp, sp, #16
 1158              		.cfi_def_cfa_offset 24
 1159 0004 00AF     		add	r7, sp, #0
 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
 735:..\Common\Minimal/GenQTest.c **** SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
 1162              		.loc 1 735 0
 1163 0008 7B68     		ldr	r3, [r7, #4]
 1164 000a FB60     		str	r3, [r7, #12]
 1165              	.L87:
 736:..\Common\Minimal/GenQTest.c **** 
 737:..\Common\Minimal/GenQTest.c **** 	for( ;; )
 738:..\Common\Minimal/GenQTest.c **** 	{
 739:..\Common\Minimal/GenQTest.c **** 		/* The high priority task starts by suspending itself.  The low
 740:..\Common\Minimal/GenQTest.c **** 		priority task will unsuspend this task when required. */
 741:..\Common\Minimal/GenQTest.c **** 		vTaskSuspend( NULL );
 1166              		.loc 1 741 0
 1167 000c 0020     		movs	r0, #0
 1168 000e FFF7FEFF 		bl	vTaskSuspend
 742:..\Common\Minimal/GenQTest.c **** 
 743:..\Common\Minimal/GenQTest.c **** 		/* When this task unsuspends all it does is attempt to obtain
 744:..\Common\Minimal/GenQTest.c **** 		the mutex.  It should find the mutex is not available so a
 745:..\Common\Minimal/GenQTest.c **** 		block time is specified. */
 746:..\Common\Minimal/GenQTest.c **** 		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 1169              		.loc 1 746 0
 1170 0012 F868     		ldr	r0, [r7, #12]
 1171 0014 0021     		movs	r1, #0
 1172 0016 4FF0FF32 		mov	r2, #-1
 1173 001a 0023     		movs	r3, #0
 1174 001c FFF7FEFF 		bl	xQueueGenericReceive
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 35


 1175 0020 0346     		mov	r3, r0
 1176 0022 012B     		cmp	r3, #1
 1177 0024 02D0     		beq	.L85
 747:..\Common\Minimal/GenQTest.c **** 		{
 748:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 1178              		.loc 1 748 0
 1179 0026 084B     		ldr	r3, .L88
 1180 0028 0122     		movs	r2, #1
 1181 002a 1A60     		str	r2, [r3]
 1182              	.L85:
 749:..\Common\Minimal/GenQTest.c **** 		}
 750:..\Common\Minimal/GenQTest.c **** 
 751:..\Common\Minimal/GenQTest.c **** 		/* When the mutex is eventually obtained it is just given back before
 752:..\Common\Minimal/GenQTest.c **** 		returning to suspend ready for the next cycle. */
 753:..\Common\Minimal/GenQTest.c **** 		if( xSemaphoreGive( xMutex ) != pdPASS )
 1183              		.loc 1 753 0
 1184 002c F868     		ldr	r0, [r7, #12]
 1185 002e 0021     		movs	r1, #0
 1186 0030 0022     		movs	r2, #0
 1187 0032 0023     		movs	r3, #0
 1188 0034 FFF7FEFF 		bl	xQueueGenericSend
 1189 0038 0346     		mov	r3, r0
 1190 003a 012B     		cmp	r3, #1
 1191 003c 02D0     		beq	.L86
 754:..\Common\Minimal/GenQTest.c **** 		{
 755:..\Common\Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 1192              		.loc 1 755 0
 1193 003e 024B     		ldr	r3, .L88
 1194 0040 0122     		movs	r2, #1
 1195 0042 1A60     		str	r2, [r3]
 1196              	.L86:
 756:..\Common\Minimal/GenQTest.c **** 		}
 757:..\Common\Minimal/GenQTest.c **** 	}
 1197              		.loc 1 757 0
 1198 0044 E2E7     		b	.L87
 1199              	.L89:
 1200 0046 00BF     		.align	2
 1201              	.L88:
 1202 0048 00000000 		.word	xErrorDetected
 1203              		.cfi_endproc
 1204              	.LFE74:
 1205              		.size	prvHighPriorityMutexTask, .-prvHighPriorityMutexTask
 1206              		.section	.text.xAreGenericQueueTasksStillRunning,"ax",%progbits
 1207              		.align	2
 1208              		.global	xAreGenericQueueTasksStillRunning
 1209              		.thumb
 1210              		.thumb_func
 1211              		.type	xAreGenericQueueTasksStillRunning, %function
 1212              	xAreGenericQueueTasksStillRunning:
 1213              	.LFB75:
 758:..\Common\Minimal/GenQTest.c **** }
 759:..\Common\Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 760:..\Common\Minimal/GenQTest.c **** 
 761:..\Common\Minimal/GenQTest.c **** 
 762:..\Common\Minimal/GenQTest.c **** /* This is called to check that all the created tasks are still running. */
 763:..\Common\Minimal/GenQTest.c **** BaseType_t xAreGenericQueueTasksStillRunning( void )
 764:..\Common\Minimal/GenQTest.c **** {
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 36


 1214              		.loc 1 764 0
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 1, uses_anonymous_args = 0
 1218              		@ link register save eliminated.
 1219 0000 80B4     		push	{r7}
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 7, -4
 1222 0002 00AF     		add	r7, sp, #0
 1223              		.cfi_def_cfa_register 7
 765:..\Common\Minimal/GenQTest.c **** static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;
 766:..\Common\Minimal/GenQTest.c **** 
 767:..\Common\Minimal/GenQTest.c **** 	/* If the demo task is still running then we expect the loop counters to
 768:..\Common\Minimal/GenQTest.c **** 	have incremented since this function was last called. */
 769:..\Common\Minimal/GenQTest.c **** 	if( ulLastLoopCounter == ulLoopCounter )
 1224              		.loc 1 769 0
 1225 0004 124B     		ldr	r3, .L94
 1226 0006 1A68     		ldr	r2, [r3]
 1227 0008 124B     		ldr	r3, .L94+4
 1228 000a 1B68     		ldr	r3, [r3]
 1229 000c 9A42     		cmp	r2, r3
 1230 000e 02D1     		bne	.L91
 770:..\Common\Minimal/GenQTest.c **** 	{
 771:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 1231              		.loc 1 771 0
 1232 0010 114B     		ldr	r3, .L94+8
 1233 0012 0122     		movs	r2, #1
 1234 0014 1A60     		str	r2, [r3]
 1235              	.L91:
 772:..\Common\Minimal/GenQTest.c **** 	}
 773:..\Common\Minimal/GenQTest.c **** 
 774:..\Common\Minimal/GenQTest.c **** 	if( ulLastLoopCounter2 == ulLoopCounter2 )
 1236              		.loc 1 774 0
 1237 0016 114B     		ldr	r3, .L94+12
 1238 0018 1A68     		ldr	r2, [r3]
 1239 001a 114B     		ldr	r3, .L94+16
 1240 001c 1B68     		ldr	r3, [r3]
 1241 001e 9A42     		cmp	r2, r3
 1242 0020 02D1     		bne	.L92
 775:..\Common\Minimal/GenQTest.c **** 	{
 776:..\Common\Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 1243              		.loc 1 776 0
 1244 0022 0D4B     		ldr	r3, .L94+8
 1245 0024 0122     		movs	r2, #1
 1246 0026 1A60     		str	r2, [r3]
 1247              	.L92:
 777:..\Common\Minimal/GenQTest.c **** 	}
 778:..\Common\Minimal/GenQTest.c **** 
 779:..\Common\Minimal/GenQTest.c **** 	ulLastLoopCounter = ulLoopCounter;
 1248              		.loc 1 779 0
 1249 0028 0A4B     		ldr	r3, .L94+4
 1250 002a 1B68     		ldr	r3, [r3]
 1251 002c 084A     		ldr	r2, .L94
 1252 002e 1360     		str	r3, [r2]
 780:..\Common\Minimal/GenQTest.c **** 	ulLastLoopCounter2 = ulLoopCounter2;
 1253              		.loc 1 780 0
 1254 0030 0B4B     		ldr	r3, .L94+16
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 37


 1255 0032 1B68     		ldr	r3, [r3]
 1256 0034 094A     		ldr	r2, .L94+12
 1257 0036 1360     		str	r3, [r2]
 781:..\Common\Minimal/GenQTest.c **** 
 782:..\Common\Minimal/GenQTest.c **** 	/* Errors detected in the task itself will have latched xErrorDetected
 783:..\Common\Minimal/GenQTest.c **** 	to true. */
 784:..\Common\Minimal/GenQTest.c **** 
 785:..\Common\Minimal/GenQTest.c **** 	return ( BaseType_t ) !xErrorDetected;
 1258              		.loc 1 785 0
 1259 0038 074B     		ldr	r3, .L94+8
 1260 003a 1B68     		ldr	r3, [r3]
 1261 003c 002B     		cmp	r3, #0
 1262 003e 0CBF     		ite	eq
 1263 0040 0123     		moveq	r3, #1
 1264 0042 0023     		movne	r3, #0
 1265 0044 DBB2     		uxtb	r3, r3
 786:..\Common\Minimal/GenQTest.c **** }
 1266              		.loc 1 786 0
 1267 0046 1846     		mov	r0, r3
 1268 0048 BD46     		mov	sp, r7
 1269              		.cfi_def_cfa_register 13
 1270              		@ sp needed
 1271 004a 5DF8047B 		ldr	r7, [sp], #4
 1272              		.cfi_restore 7
 1273              		.cfi_def_cfa_offset 0
 1274 004e 7047     		bx	lr
 1275              	.L95:
 1276              		.align	2
 1277              	.L94:
 1278 0050 18000000 		.word	ulLastLoopCounter.7119
 1279 0054 04000000 		.word	ulLoopCounter
 1280 0058 00000000 		.word	xErrorDetected
 1281 005c 1C000000 		.word	ulLastLoopCounter2.7120
 1282 0060 08000000 		.word	ulLoopCounter2
 1283              		.cfi_endproc
 1284              	.LFE75:
 1285              		.size	xAreGenericQueueTasksStillRunning, .-xAreGenericQueueTasksStillRunning
 1286              		.bss
 1287              		.align	2
 1288              	ulLastLoopCounter.7119:
 1289 0018 00000000 		.space	4
 1290              		.align	2
 1291              	ulLastLoopCounter2.7120:
 1292 001c 00000000 		.space	4
 1293              		.text
 1294              	.Letext0:
 1295              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1296              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1297              		.file 4 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 1298              		.file 5 "..\\Source\\include/task.h"
 1299              		.file 6 "..\\Source\\include/queue.h"
 1300              		.file 7 "..\\Source\\include/semphr.h"
 1301              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 1302              		.section	.debug_info,"",%progbits
 1303              	.Ldebug_info0:
 1304 0000 61030000 		.4byte	0x361
 1305 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 38


 1306 0006 00000000 		.4byte	.Ldebug_abbrev0
 1307 000a 04       		.byte	0x4
 1308 000b 01       		.uleb128 0x1
 1309 000c CB000000 		.4byte	.LASF46
 1310 0010 01       		.byte	0x1
 1311 0011 AE000000 		.4byte	.LASF47
 1312 0015 9B030000 		.4byte	.LASF48
 1313 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1314 001d 00000000 		.4byte	0
 1315 0021 00000000 		.4byte	.Ldebug_line0
 1316 0025 02       		.uleb128 0x2
 1317 0026 04       		.byte	0x4
 1318 0027 07       		.byte	0x7
 1319 0028 98020000 		.4byte	.LASF0
 1320 002c 03       		.uleb128 0x3
 1321 002d 04       		.byte	0x4
 1322 002e 05       		.byte	0x5
 1323 002f 696E7400 		.ascii	"int\000"
 1324 0033 02       		.uleb128 0x2
 1325 0034 01       		.byte	0x1
 1326 0035 06       		.byte	0x6
 1327 0036 7F010000 		.4byte	.LASF1
 1328 003a 04       		.uleb128 0x4
 1329 003b 22000000 		.4byte	.LASF5
 1330 003f 02       		.byte	0x2
 1331 0040 1D       		.byte	0x1d
 1332 0041 45000000 		.4byte	0x45
 1333 0045 02       		.uleb128 0x2
 1334 0046 01       		.byte	0x1
 1335 0047 08       		.byte	0x8
 1336 0048 9E010000 		.4byte	.LASF2
 1337 004c 02       		.uleb128 0x2
 1338 004d 02       		.byte	0x2
 1339 004e 05       		.byte	0x5
 1340 004f 20030000 		.4byte	.LASF3
 1341 0053 02       		.uleb128 0x2
 1342 0054 02       		.byte	0x2
 1343 0055 07       		.byte	0x7
 1344 0056 71030000 		.4byte	.LASF4
 1345 005a 04       		.uleb128 0x4
 1346 005b 85000000 		.4byte	.LASF6
 1347 005f 02       		.byte	0x2
 1348 0060 3F       		.byte	0x3f
 1349 0061 65000000 		.4byte	0x65
 1350 0065 02       		.uleb128 0x2
 1351 0066 04       		.byte	0x4
 1352 0067 05       		.byte	0x5
 1353 0068 59030000 		.4byte	.LASF7
 1354 006c 04       		.uleb128 0x4
 1355 006d 74020000 		.4byte	.LASF8
 1356 0071 02       		.byte	0x2
 1357 0072 41       		.byte	0x41
 1358 0073 77000000 		.4byte	0x77
 1359 0077 02       		.uleb128 0x2
 1360 0078 04       		.byte	0x4
 1361 0079 07       		.byte	0x7
 1362 007a B8010000 		.4byte	.LASF9
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 39


 1363 007e 02       		.uleb128 0x2
 1364 007f 08       		.byte	0x8
 1365 0080 05       		.byte	0x5
 1366 0081 00030000 		.4byte	.LASF10
 1367 0085 02       		.uleb128 0x2
 1368 0086 08       		.byte	0x8
 1369 0087 07       		.byte	0x7
 1370 0088 AD020000 		.4byte	.LASF11
 1371 008c 02       		.uleb128 0x2
 1372 008d 04       		.byte	0x4
 1373 008e 07       		.byte	0x7
 1374 008f D4020000 		.4byte	.LASF12
 1375 0093 05       		.uleb128 0x5
 1376 0094 04       		.byte	0x4
 1377 0095 02       		.uleb128 0x2
 1378 0096 01       		.byte	0x1
 1379 0097 08       		.byte	0x8
 1380 0098 0E030000 		.4byte	.LASF13
 1381 009c 04       		.uleb128 0x4
 1382 009d C4020000 		.4byte	.LASF14
 1383 00a1 03       		.byte	0x3
 1384 00a2 15       		.byte	0x15
 1385 00a3 3A000000 		.4byte	0x3a
 1386 00a7 04       		.uleb128 0x4
 1387 00a8 CC020000 		.4byte	.LASF15
 1388 00ac 03       		.byte	0x3
 1389 00ad 2C       		.byte	0x2c
 1390 00ae 5A000000 		.4byte	0x5a
 1391 00b2 04       		.uleb128 0x4
 1392 00b3 50030000 		.4byte	.LASF16
 1393 00b7 03       		.byte	0x3
 1394 00b8 2D       		.byte	0x2d
 1395 00b9 6C000000 		.4byte	0x6c
 1396 00bd 02       		.uleb128 0x2
 1397 00be 04       		.byte	0x4
 1398 00bf 04       		.byte	0x4
 1399 00c0 79010000 		.4byte	.LASF17
 1400 00c4 02       		.uleb128 0x2
 1401 00c5 08       		.byte	0x8
 1402 00c6 04       		.byte	0x4
 1403 00c7 49020000 		.4byte	.LASF18
 1404 00cb 06       		.uleb128 0x6
 1405 00cc B2000000 		.4byte	0xb2
 1406 00d0 04       		.uleb128 0x4
 1407 00d1 90030000 		.4byte	.LASF19
 1408 00d5 04       		.byte	0x4
 1409 00d6 62       		.byte	0x62
 1410 00d7 65000000 		.4byte	0x65
 1411 00db 04       		.uleb128 0x4
 1412 00dc 84030000 		.4byte	.LASF20
 1413 00e0 04       		.byte	0x4
 1414 00e1 63       		.byte	0x63
 1415 00e2 77000000 		.4byte	0x77
 1416 00e6 04       		.uleb128 0x4
 1417 00e7 62000000 		.4byte	.LASF21
 1418 00eb 04       		.byte	0x4
 1419 00ec 69       		.byte	0x69
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 40


 1420 00ed B2000000 		.4byte	0xb2
 1421 00f1 04       		.uleb128 0x4
 1422 00f2 43030000 		.4byte	.LASF22
 1423 00f6 05       		.byte	0x5
 1424 00f7 67       		.byte	0x67
 1425 00f8 93000000 		.4byte	0x93
 1426 00fc 04       		.uleb128 0x4
 1427 00fd 59010000 		.4byte	.LASF23
 1428 0101 06       		.byte	0x6
 1429 0102 58       		.byte	0x58
 1430 0103 93000000 		.4byte	0x93
 1431 0107 04       		.uleb128 0x4
 1432 0108 62020000 		.4byte	.LASF24
 1433 010c 07       		.byte	0x7
 1434 010d 4F       		.byte	0x4f
 1435 010e FC000000 		.4byte	0xfc
 1436 0112 07       		.uleb128 0x7
 1437 0113 8F000000 		.4byte	.LASF49
 1438 0117 01       		.byte	0x1
 1439 0118 94       		.byte	0x94
 1440 0119 00000000 		.4byte	.LFB68
 1441 011d C0000000 		.4byte	.LFE68-.LFB68
 1442 0121 01       		.uleb128 0x1
 1443 0122 9C       		.byte	0x9c
 1444 0123 52010000 		.4byte	0x152
 1445 0127 08       		.uleb128 0x8
 1446 0128 8D020000 		.4byte	.LASF27
 1447 012c 01       		.byte	0x1
 1448 012d 94       		.byte	0x94
 1449 012e DB000000 		.4byte	0xdb
 1450 0132 02       		.uleb128 0x2
 1451 0133 91       		.byte	0x91
 1452 0134 6C       		.sleb128 -20
 1453 0135 09       		.uleb128 0x9
 1454 0136 A7000000 		.4byte	.LASF25
 1455 013a 01       		.byte	0x1
 1456 013b 96       		.byte	0x96
 1457 013c FC000000 		.4byte	0xfc
 1458 0140 02       		.uleb128 0x2
 1459 0141 91       		.byte	0x91
 1460 0142 74       		.sleb128 -12
 1461 0143 09       		.uleb128 0x9
 1462 0144 43000000 		.4byte	.LASF26
 1463 0148 01       		.byte	0x1
 1464 0149 97       		.byte	0x97
 1465 014a 07010000 		.4byte	0x107
 1466 014e 02       		.uleb128 0x2
 1467 014f 91       		.byte	0x91
 1468 0150 70       		.sleb128 -16
 1469 0151 00       		.byte	0
 1470 0152 0A       		.uleb128 0xa
 1471 0153 4A000000 		.4byte	.LASF31
 1472 0157 01       		.byte	0x1
 1473 0158 C4       		.byte	0xc4
 1474 0159 00000000 		.4byte	.LFB69
 1475 015d 1C030000 		.4byte	.LFE69-.LFB69
 1476 0161 01       		.uleb128 0x1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 41


 1477 0162 9C       		.byte	0x9c
 1478 0163 A0010000 		.4byte	0x1a0
 1479 0167 08       		.uleb128 0x8
 1480 0168 13030000 		.4byte	.LASF28
 1481 016c 01       		.byte	0x1
 1482 016d C4       		.byte	0xc4
 1483 016e 93000000 		.4byte	0x93
 1484 0172 02       		.uleb128 0x2
 1485 0173 91       		.byte	0x91
 1486 0174 64       		.sleb128 -28
 1487 0175 09       		.uleb128 0x9
 1488 0176 1A020000 		.4byte	.LASF29
 1489 017a 01       		.byte	0x1
 1490 017b C6       		.byte	0xc6
 1491 017c B2000000 		.4byte	0xb2
 1492 0180 02       		.uleb128 0x2
 1493 0181 91       		.byte	0x91
 1494 0182 70       		.sleb128 -16
 1495 0183 09       		.uleb128 0x9
 1496 0184 A5020000 		.4byte	.LASF30
 1497 0188 01       		.byte	0x1
 1498 0189 C6       		.byte	0xc6
 1499 018a B2000000 		.4byte	0xb2
 1500 018e 02       		.uleb128 0x2
 1501 018f 91       		.byte	0x91
 1502 0190 6C       		.sleb128 -20
 1503 0191 09       		.uleb128 0x9
 1504 0192 A7000000 		.4byte	.LASF25
 1505 0196 01       		.byte	0x1
 1506 0197 C7       		.byte	0xc7
 1507 0198 FC000000 		.4byte	0xfc
 1508 019c 02       		.uleb128 0x2
 1509 019d 91       		.byte	0x91
 1510 019e 74       		.sleb128 -12
 1511 019f 00       		.byte	0
 1512 01a0 0B       		.uleb128 0xb
 1513 01a1 21020000 		.4byte	.LASF32
 1514 01a5 01       		.byte	0x1
 1515 01a6 A801     		.2byte	0x1a8
 1516 01a8 00000000 		.4byte	.LFB70
 1517 01ac 30010000 		.4byte	.LFE70-.LFB70
 1518 01b0 01       		.uleb128 0x1
 1519 01b1 9C       		.byte	0x9c
 1520 01b2 D5010000 		.4byte	0x1d5
 1521 01b6 0C       		.uleb128 0xc
 1522 01b7 43000000 		.4byte	.LASF26
 1523 01bb 01       		.byte	0x1
 1524 01bc A801     		.2byte	0x1a8
 1525 01be 07010000 		.4byte	0x107
 1526 01c2 02       		.uleb128 0x2
 1527 01c3 91       		.byte	0x91
 1528 01c4 74       		.sleb128 -12
 1529 01c5 0C       		.uleb128 0xc
 1530 01c6 AC010000 		.4byte	.LASF33
 1531 01ca 01       		.byte	0x1
 1532 01cb A801     		.2byte	0x1a8
 1533 01cd 07010000 		.4byte	0x107
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 42


 1534 01d1 02       		.uleb128 0x2
 1535 01d2 91       		.byte	0x91
 1536 01d3 70       		.sleb128 -16
 1537 01d4 00       		.byte	0
 1538 01d5 0B       		.uleb128 0xb
 1539 01d6 DD020000 		.4byte	.LASF34
 1540 01da 01       		.byte	0x1
 1541 01db 2A02     		.2byte	0x22a
 1542 01dd 00000000 		.4byte	.LFB71
 1543 01e1 0C010000 		.4byte	.LFE71-.LFB71
 1544 01e5 01       		.uleb128 0x1
 1545 01e6 9C       		.byte	0x9c
 1546 01e7 0A020000 		.4byte	0x20a
 1547 01eb 0C       		.uleb128 0xc
 1548 01ec 43000000 		.4byte	.LASF26
 1549 01f0 01       		.byte	0x1
 1550 01f1 2A02     		.2byte	0x22a
 1551 01f3 07010000 		.4byte	0x107
 1552 01f7 02       		.uleb128 0x2
 1553 01f8 91       		.byte	0x91
 1554 01f9 74       		.sleb128 -12
 1555 01fa 0C       		.uleb128 0xc
 1556 01fb AC010000 		.4byte	.LASF33
 1557 01ff 01       		.byte	0x1
 1558 0200 2A02     		.2byte	0x22a
 1559 0202 07010000 		.4byte	0x107
 1560 0206 02       		.uleb128 0x2
 1561 0207 91       		.byte	0x91
 1562 0208 70       		.sleb128 -16
 1563 0209 00       		.byte	0
 1564 020a 0B       		.uleb128 0xb
 1565 020b 6D000000 		.4byte	.LASF35
 1566 020f 01       		.byte	0x1
 1567 0210 9E02     		.2byte	0x29e
 1568 0212 00000000 		.4byte	.LFB72
 1569 0216 40000000 		.4byte	.LFE72-.LFB72
 1570 021a 01       		.uleb128 0x1
 1571 021b 9C       		.byte	0x9c
 1572 021c 4E020000 		.4byte	0x24e
 1573 0220 0C       		.uleb128 0xc
 1574 0221 13030000 		.4byte	.LASF28
 1575 0225 01       		.byte	0x1
 1576 0226 9E02     		.2byte	0x29e
 1577 0228 93000000 		.4byte	0x93
 1578 022c 02       		.uleb128 0x2
 1579 022d 91       		.byte	0x91
 1580 022e 6C       		.sleb128 -20
 1581 022f 0D       		.uleb128 0xd
 1582 0230 43000000 		.4byte	.LASF26
 1583 0234 01       		.byte	0x1
 1584 0235 A002     		.2byte	0x2a0
 1585 0237 07010000 		.4byte	0x107
 1586 023b 02       		.uleb128 0x2
 1587 023c 91       		.byte	0x91
 1588 023d 74       		.sleb128 -12
 1589 023e 0D       		.uleb128 0xd
 1590 023f AC010000 		.4byte	.LASF33
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 43


 1591 0243 01       		.byte	0x1
 1592 0244 A002     		.2byte	0x2a0
 1593 0246 07010000 		.4byte	0x107
 1594 024a 02       		.uleb128 0x2
 1595 024b 91       		.byte	0x91
 1596 024c 70       		.sleb128 -16
 1597 024d 00       		.byte	0
 1598 024e 0B       		.uleb128 0xb
 1599 024f E3010000 		.4byte	.LASF36
 1600 0253 01       		.byte	0x1
 1601 0254 CB02     		.2byte	0x2cb
 1602 0256 00000000 		.4byte	.LFB73
 1603 025a 20000000 		.4byte	.LFE73-.LFB73
 1604 025e 01       		.uleb128 0x1
 1605 025f 9C       		.byte	0x9c
 1606 0260 74020000 		.4byte	0x274
 1607 0264 0C       		.uleb128 0xc
 1608 0265 13030000 		.4byte	.LASF28
 1609 0269 01       		.byte	0x1
 1610 026a CB02     		.2byte	0x2cb
 1611 026c 93000000 		.4byte	0x93
 1612 0270 02       		.uleb128 0x2
 1613 0271 91       		.byte	0x91
 1614 0272 74       		.sleb128 -12
 1615 0273 00       		.byte	0
 1616 0274 0B       		.uleb128 0xb
 1617 0275 CA010000 		.4byte	.LASF37
 1618 0279 01       		.byte	0x1
 1619 027a DD02     		.2byte	0x2dd
 1620 027c 00000000 		.4byte	.LFB74
 1621 0280 4C000000 		.4byte	.LFE74-.LFB74
 1622 0284 01       		.uleb128 0x1
 1623 0285 9C       		.byte	0x9c
 1624 0286 A9020000 		.4byte	0x2a9
 1625 028a 0C       		.uleb128 0xc
 1626 028b 13030000 		.4byte	.LASF28
 1627 028f 01       		.byte	0x1
 1628 0290 DD02     		.2byte	0x2dd
 1629 0292 93000000 		.4byte	0x93
 1630 0296 02       		.uleb128 0x2
 1631 0297 91       		.byte	0x91
 1632 0298 6C       		.sleb128 -20
 1633 0299 0D       		.uleb128 0xd
 1634 029a 43000000 		.4byte	.LASF26
 1635 029e 01       		.byte	0x1
 1636 029f DF02     		.2byte	0x2df
 1637 02a1 07010000 		.4byte	0x107
 1638 02a5 02       		.uleb128 0x2
 1639 02a6 91       		.byte	0x91
 1640 02a7 74       		.sleb128 -12
 1641 02a8 00       		.byte	0
 1642 02a9 0E       		.uleb128 0xe
 1643 02aa 00000000 		.4byte	.LASF50
 1644 02ae 01       		.byte	0x1
 1645 02af FB02     		.2byte	0x2fb
 1646 02b1 D0000000 		.4byte	0xd0
 1647 02b5 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 44


 1648 02b9 64000000 		.4byte	.LFE75-.LFB75
 1649 02bd 01       		.uleb128 0x1
 1650 02be 9C       		.byte	0x9c
 1651 02bf E8020000 		.4byte	0x2e8
 1652 02c3 0D       		.uleb128 0xd
 1653 02c4 67010000 		.4byte	.LASF38
 1654 02c8 01       		.byte	0x1
 1655 02c9 FD02     		.2byte	0x2fd
 1656 02cb B2000000 		.4byte	0xb2
 1657 02cf 05       		.uleb128 0x5
 1658 02d0 03       		.byte	0x3
 1659 02d1 18000000 		.4byte	ulLastLoopCounter.7119
 1660 02d5 0D       		.uleb128 0xd
 1661 02d6 8B010000 		.4byte	.LASF39
 1662 02da 01       		.byte	0x1
 1663 02db FD02     		.2byte	0x2fd
 1664 02dd B2000000 		.4byte	0xb2
 1665 02e1 05       		.uleb128 0x5
 1666 02e2 03       		.byte	0x3
 1667 02e3 1C000000 		.4byte	ulLastLoopCounter2.7120
 1668 02e7 00       		.byte	0
 1669 02e8 09       		.uleb128 0x9
 1670 02e9 62030000 		.4byte	.LASF40
 1671 02ed 01       		.byte	0x1
 1672 02ee 84       		.byte	0x84
 1673 02ef F9020000 		.4byte	0x2f9
 1674 02f3 05       		.uleb128 0x5
 1675 02f4 03       		.byte	0x3
 1676 02f5 00000000 		.4byte	xErrorDetected
 1677 02f9 06       		.uleb128 0x6
 1678 02fa D0000000 		.4byte	0xd0
 1679 02fe 09       		.uleb128 0x9
 1680 02ff 7F020000 		.4byte	.LASF41
 1681 0303 01       		.byte	0x1
 1682 0304 88       		.byte	0x88
 1683 0305 CB000000 		.4byte	0xcb
 1684 0309 05       		.uleb128 0x5
 1685 030a 03       		.byte	0x3
 1686 030b 04000000 		.4byte	ulLoopCounter
 1687 030f 09       		.uleb128 0x9
 1688 0310 FE010000 		.4byte	.LASF42
 1689 0314 01       		.byte	0x1
 1690 0315 89       		.byte	0x89
 1691 0316 CB000000 		.4byte	0xcb
 1692 031a 05       		.uleb128 0x5
 1693 031b 03       		.byte	0x3
 1694 031c 08000000 		.4byte	ulLoopCounter2
 1695 0320 09       		.uleb128 0x9
 1696 0321 50020000 		.4byte	.LASF43
 1697 0325 01       		.byte	0x1
 1698 0326 8C       		.byte	0x8c
 1699 0327 CB000000 		.4byte	0xcb
 1700 032b 05       		.uleb128 0x5
 1701 032c 03       		.byte	0x3
 1702 032d 0C000000 		.4byte	ulGuardedVariable
 1703 0331 09       		.uleb128 0x9
 1704 0332 2C000000 		.4byte	.LASF44
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 45


 1705 0336 01       		.byte	0x1
 1706 0337 90       		.byte	0x90
 1707 0338 F1000000 		.4byte	0xf1
 1708 033c 05       		.uleb128 0x5
 1709 033d 03       		.byte	0x3
 1710 033e 10000000 		.4byte	xHighPriorityMutexTask
 1711 0342 09       		.uleb128 0x9
 1712 0343 2A030000 		.4byte	.LASF45
 1713 0347 01       		.byte	0x1
 1714 0348 90       		.byte	0x90
 1715 0349 F1000000 		.4byte	0xf1
 1716 034d 05       		.uleb128 0x5
 1717 034e 03       		.byte	0x3
 1718 034f 14000000 		.4byte	xMediumPriorityMutexTask
 1719 0353 0F       		.uleb128 0xf
 1720 0354 0D020000 		.4byte	.LASF51
 1721 0358 08       		.byte	0x8
 1722 0359 9606     		.2byte	0x696
 1723 035b 5F030000 		.4byte	0x35f
 1724 035f 06       		.uleb128 0x6
 1725 0360 A7000000 		.4byte	0xa7
 1726 0364 00       		.byte	0
 1727              		.section	.debug_abbrev,"",%progbits
 1728              	.Ldebug_abbrev0:
 1729 0000 01       		.uleb128 0x1
 1730 0001 11       		.uleb128 0x11
 1731 0002 01       		.byte	0x1
 1732 0003 25       		.uleb128 0x25
 1733 0004 0E       		.uleb128 0xe
 1734 0005 13       		.uleb128 0x13
 1735 0006 0B       		.uleb128 0xb
 1736 0007 03       		.uleb128 0x3
 1737 0008 0E       		.uleb128 0xe
 1738 0009 1B       		.uleb128 0x1b
 1739 000a 0E       		.uleb128 0xe
 1740 000b 55       		.uleb128 0x55
 1741 000c 17       		.uleb128 0x17
 1742 000d 11       		.uleb128 0x11
 1743 000e 01       		.uleb128 0x1
 1744 000f 10       		.uleb128 0x10
 1745 0010 17       		.uleb128 0x17
 1746 0011 00       		.byte	0
 1747 0012 00       		.byte	0
 1748 0013 02       		.uleb128 0x2
 1749 0014 24       		.uleb128 0x24
 1750 0015 00       		.byte	0
 1751 0016 0B       		.uleb128 0xb
 1752 0017 0B       		.uleb128 0xb
 1753 0018 3E       		.uleb128 0x3e
 1754 0019 0B       		.uleb128 0xb
 1755 001a 03       		.uleb128 0x3
 1756 001b 0E       		.uleb128 0xe
 1757 001c 00       		.byte	0
 1758 001d 00       		.byte	0
 1759 001e 03       		.uleb128 0x3
 1760 001f 24       		.uleb128 0x24
 1761 0020 00       		.byte	0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 46


 1762 0021 0B       		.uleb128 0xb
 1763 0022 0B       		.uleb128 0xb
 1764 0023 3E       		.uleb128 0x3e
 1765 0024 0B       		.uleb128 0xb
 1766 0025 03       		.uleb128 0x3
 1767 0026 08       		.uleb128 0x8
 1768 0027 00       		.byte	0
 1769 0028 00       		.byte	0
 1770 0029 04       		.uleb128 0x4
 1771 002a 16       		.uleb128 0x16
 1772 002b 00       		.byte	0
 1773 002c 03       		.uleb128 0x3
 1774 002d 0E       		.uleb128 0xe
 1775 002e 3A       		.uleb128 0x3a
 1776 002f 0B       		.uleb128 0xb
 1777 0030 3B       		.uleb128 0x3b
 1778 0031 0B       		.uleb128 0xb
 1779 0032 49       		.uleb128 0x49
 1780 0033 13       		.uleb128 0x13
 1781 0034 00       		.byte	0
 1782 0035 00       		.byte	0
 1783 0036 05       		.uleb128 0x5
 1784 0037 0F       		.uleb128 0xf
 1785 0038 00       		.byte	0
 1786 0039 0B       		.uleb128 0xb
 1787 003a 0B       		.uleb128 0xb
 1788 003b 00       		.byte	0
 1789 003c 00       		.byte	0
 1790 003d 06       		.uleb128 0x6
 1791 003e 35       		.uleb128 0x35
 1792 003f 00       		.byte	0
 1793 0040 49       		.uleb128 0x49
 1794 0041 13       		.uleb128 0x13
 1795 0042 00       		.byte	0
 1796 0043 00       		.byte	0
 1797 0044 07       		.uleb128 0x7
 1798 0045 2E       		.uleb128 0x2e
 1799 0046 01       		.byte	0x1
 1800 0047 3F       		.uleb128 0x3f
 1801 0048 19       		.uleb128 0x19
 1802 0049 03       		.uleb128 0x3
 1803 004a 0E       		.uleb128 0xe
 1804 004b 3A       		.uleb128 0x3a
 1805 004c 0B       		.uleb128 0xb
 1806 004d 3B       		.uleb128 0x3b
 1807 004e 0B       		.uleb128 0xb
 1808 004f 27       		.uleb128 0x27
 1809 0050 19       		.uleb128 0x19
 1810 0051 11       		.uleb128 0x11
 1811 0052 01       		.uleb128 0x1
 1812 0053 12       		.uleb128 0x12
 1813 0054 06       		.uleb128 0x6
 1814 0055 40       		.uleb128 0x40
 1815 0056 18       		.uleb128 0x18
 1816 0057 9642     		.uleb128 0x2116
 1817 0059 19       		.uleb128 0x19
 1818 005a 01       		.uleb128 0x1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 47


 1819 005b 13       		.uleb128 0x13
 1820 005c 00       		.byte	0
 1821 005d 00       		.byte	0
 1822 005e 08       		.uleb128 0x8
 1823 005f 05       		.uleb128 0x5
 1824 0060 00       		.byte	0
 1825 0061 03       		.uleb128 0x3
 1826 0062 0E       		.uleb128 0xe
 1827 0063 3A       		.uleb128 0x3a
 1828 0064 0B       		.uleb128 0xb
 1829 0065 3B       		.uleb128 0x3b
 1830 0066 0B       		.uleb128 0xb
 1831 0067 49       		.uleb128 0x49
 1832 0068 13       		.uleb128 0x13
 1833 0069 02       		.uleb128 0x2
 1834 006a 18       		.uleb128 0x18
 1835 006b 00       		.byte	0
 1836 006c 00       		.byte	0
 1837 006d 09       		.uleb128 0x9
 1838 006e 34       		.uleb128 0x34
 1839 006f 00       		.byte	0
 1840 0070 03       		.uleb128 0x3
 1841 0071 0E       		.uleb128 0xe
 1842 0072 3A       		.uleb128 0x3a
 1843 0073 0B       		.uleb128 0xb
 1844 0074 3B       		.uleb128 0x3b
 1845 0075 0B       		.uleb128 0xb
 1846 0076 49       		.uleb128 0x49
 1847 0077 13       		.uleb128 0x13
 1848 0078 02       		.uleb128 0x2
 1849 0079 18       		.uleb128 0x18
 1850 007a 00       		.byte	0
 1851 007b 00       		.byte	0
 1852 007c 0A       		.uleb128 0xa
 1853 007d 2E       		.uleb128 0x2e
 1854 007e 01       		.byte	0x1
 1855 007f 03       		.uleb128 0x3
 1856 0080 0E       		.uleb128 0xe
 1857 0081 3A       		.uleb128 0x3a
 1858 0082 0B       		.uleb128 0xb
 1859 0083 3B       		.uleb128 0x3b
 1860 0084 0B       		.uleb128 0xb
 1861 0085 27       		.uleb128 0x27
 1862 0086 19       		.uleb128 0x19
 1863 0087 11       		.uleb128 0x11
 1864 0088 01       		.uleb128 0x1
 1865 0089 12       		.uleb128 0x12
 1866 008a 06       		.uleb128 0x6
 1867 008b 40       		.uleb128 0x40
 1868 008c 18       		.uleb128 0x18
 1869 008d 9642     		.uleb128 0x2116
 1870 008f 19       		.uleb128 0x19
 1871 0090 01       		.uleb128 0x1
 1872 0091 13       		.uleb128 0x13
 1873 0092 00       		.byte	0
 1874 0093 00       		.byte	0
 1875 0094 0B       		.uleb128 0xb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 48


 1876 0095 2E       		.uleb128 0x2e
 1877 0096 01       		.byte	0x1
 1878 0097 03       		.uleb128 0x3
 1879 0098 0E       		.uleb128 0xe
 1880 0099 3A       		.uleb128 0x3a
 1881 009a 0B       		.uleb128 0xb
 1882 009b 3B       		.uleb128 0x3b
 1883 009c 05       		.uleb128 0x5
 1884 009d 27       		.uleb128 0x27
 1885 009e 19       		.uleb128 0x19
 1886 009f 11       		.uleb128 0x11
 1887 00a0 01       		.uleb128 0x1
 1888 00a1 12       		.uleb128 0x12
 1889 00a2 06       		.uleb128 0x6
 1890 00a3 40       		.uleb128 0x40
 1891 00a4 18       		.uleb128 0x18
 1892 00a5 9642     		.uleb128 0x2116
 1893 00a7 19       		.uleb128 0x19
 1894 00a8 01       		.uleb128 0x1
 1895 00a9 13       		.uleb128 0x13
 1896 00aa 00       		.byte	0
 1897 00ab 00       		.byte	0
 1898 00ac 0C       		.uleb128 0xc
 1899 00ad 05       		.uleb128 0x5
 1900 00ae 00       		.byte	0
 1901 00af 03       		.uleb128 0x3
 1902 00b0 0E       		.uleb128 0xe
 1903 00b1 3A       		.uleb128 0x3a
 1904 00b2 0B       		.uleb128 0xb
 1905 00b3 3B       		.uleb128 0x3b
 1906 00b4 05       		.uleb128 0x5
 1907 00b5 49       		.uleb128 0x49
 1908 00b6 13       		.uleb128 0x13
 1909 00b7 02       		.uleb128 0x2
 1910 00b8 18       		.uleb128 0x18
 1911 00b9 00       		.byte	0
 1912 00ba 00       		.byte	0
 1913 00bb 0D       		.uleb128 0xd
 1914 00bc 34       		.uleb128 0x34
 1915 00bd 00       		.byte	0
 1916 00be 03       		.uleb128 0x3
 1917 00bf 0E       		.uleb128 0xe
 1918 00c0 3A       		.uleb128 0x3a
 1919 00c1 0B       		.uleb128 0xb
 1920 00c2 3B       		.uleb128 0x3b
 1921 00c3 05       		.uleb128 0x5
 1922 00c4 49       		.uleb128 0x49
 1923 00c5 13       		.uleb128 0x13
 1924 00c6 02       		.uleb128 0x2
 1925 00c7 18       		.uleb128 0x18
 1926 00c8 00       		.byte	0
 1927 00c9 00       		.byte	0
 1928 00ca 0E       		.uleb128 0xe
 1929 00cb 2E       		.uleb128 0x2e
 1930 00cc 01       		.byte	0x1
 1931 00cd 3F       		.uleb128 0x3f
 1932 00ce 19       		.uleb128 0x19
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 49


 1933 00cf 03       		.uleb128 0x3
 1934 00d0 0E       		.uleb128 0xe
 1935 00d1 3A       		.uleb128 0x3a
 1936 00d2 0B       		.uleb128 0xb
 1937 00d3 3B       		.uleb128 0x3b
 1938 00d4 05       		.uleb128 0x5
 1939 00d5 27       		.uleb128 0x27
 1940 00d6 19       		.uleb128 0x19
 1941 00d7 49       		.uleb128 0x49
 1942 00d8 13       		.uleb128 0x13
 1943 00d9 11       		.uleb128 0x11
 1944 00da 01       		.uleb128 0x1
 1945 00db 12       		.uleb128 0x12
 1946 00dc 06       		.uleb128 0x6
 1947 00dd 40       		.uleb128 0x40
 1948 00de 18       		.uleb128 0x18
 1949 00df 9742     		.uleb128 0x2117
 1950 00e1 19       		.uleb128 0x19
 1951 00e2 01       		.uleb128 0x1
 1952 00e3 13       		.uleb128 0x13
 1953 00e4 00       		.byte	0
 1954 00e5 00       		.byte	0
 1955 00e6 0F       		.uleb128 0xf
 1956 00e7 34       		.uleb128 0x34
 1957 00e8 00       		.byte	0
 1958 00e9 03       		.uleb128 0x3
 1959 00ea 0E       		.uleb128 0xe
 1960 00eb 3A       		.uleb128 0x3a
 1961 00ec 0B       		.uleb128 0xb
 1962 00ed 3B       		.uleb128 0x3b
 1963 00ee 05       		.uleb128 0x5
 1964 00ef 49       		.uleb128 0x49
 1965 00f0 13       		.uleb128 0x13
 1966 00f1 3F       		.uleb128 0x3f
 1967 00f2 19       		.uleb128 0x19
 1968 00f3 3C       		.uleb128 0x3c
 1969 00f4 19       		.uleb128 0x19
 1970 00f5 00       		.byte	0
 1971 00f6 00       		.byte	0
 1972 00f7 00       		.byte	0
 1973              		.section	.debug_aranges,"",%progbits
 1974 0000 54000000 		.4byte	0x54
 1975 0004 0200     		.2byte	0x2
 1976 0006 00000000 		.4byte	.Ldebug_info0
 1977 000a 04       		.byte	0x4
 1978 000b 00       		.byte	0
 1979 000c 0000     		.2byte	0
 1980 000e 0000     		.2byte	0
 1981 0010 00000000 		.4byte	.LFB68
 1982 0014 C0000000 		.4byte	.LFE68-.LFB68
 1983 0018 00000000 		.4byte	.LFB69
 1984 001c 1C030000 		.4byte	.LFE69-.LFB69
 1985 0020 00000000 		.4byte	.LFB70
 1986 0024 30010000 		.4byte	.LFE70-.LFB70
 1987 0028 00000000 		.4byte	.LFB71
 1988 002c 0C010000 		.4byte	.LFE71-.LFB71
 1989 0030 00000000 		.4byte	.LFB72
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 50


 1990 0034 40000000 		.4byte	.LFE72-.LFB72
 1991 0038 00000000 		.4byte	.LFB73
 1992 003c 20000000 		.4byte	.LFE73-.LFB73
 1993 0040 00000000 		.4byte	.LFB74
 1994 0044 4C000000 		.4byte	.LFE74-.LFB74
 1995 0048 00000000 		.4byte	.LFB75
 1996 004c 64000000 		.4byte	.LFE75-.LFB75
 1997 0050 00000000 		.4byte	0
 1998 0054 00000000 		.4byte	0
 1999              		.section	.debug_ranges,"",%progbits
 2000              	.Ldebug_ranges0:
 2001 0000 00000000 		.4byte	.LFB68
 2002 0004 C0000000 		.4byte	.LFE68
 2003 0008 00000000 		.4byte	.LFB69
 2004 000c 1C030000 		.4byte	.LFE69
 2005 0010 00000000 		.4byte	.LFB70
 2006 0014 30010000 		.4byte	.LFE70
 2007 0018 00000000 		.4byte	.LFB71
 2008 001c 0C010000 		.4byte	.LFE71
 2009 0020 00000000 		.4byte	.LFB72
 2010 0024 40000000 		.4byte	.LFE72
 2011 0028 00000000 		.4byte	.LFB73
 2012 002c 20000000 		.4byte	.LFE73
 2013 0030 00000000 		.4byte	.LFB74
 2014 0034 4C000000 		.4byte	.LFE74
 2015 0038 00000000 		.4byte	.LFB75
 2016 003c 64000000 		.4byte	.LFE75
 2017 0040 00000000 		.4byte	0
 2018 0044 00000000 		.4byte	0
 2019              		.section	.debug_line,"",%progbits
 2020              	.Ldebug_line0:
 2021 0000 4E030000 		.section	.debug_str,"MS",%progbits,1
 2021      0200B101 
 2021      00000201 
 2021      FB0E0D00 
 2021      01010101 
 2022              	.LASF50:
 2023 0000 78417265 		.ascii	"xAreGenericQueueTasksStillRunning\000"
 2023      47656E65 
 2023      72696351 
 2023      75657565 
 2023      5461736B 
 2024              	.LASF5:
 2025 0022 5F5F7569 		.ascii	"__uint8_t\000"
 2025      6E74385F 
 2025      7400
 2026              	.LASF44:
 2027 002c 78486967 		.ascii	"xHighPriorityMutexTask\000"
 2027      68507269 
 2027      6F726974 
 2027      794D7574 
 2027      65785461 
 2028              	.LASF26:
 2029 0043 784D7574 		.ascii	"xMutex\000"
 2029      657800
 2030              	.LASF31:
 2031 004a 70727653 		.ascii	"prvSendFrontAndBackTest\000"
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 51


 2031      656E6446 
 2031      726F6E74 
 2031      416E6442 
 2031      61636B54 
 2032              	.LASF21:
 2033 0062 5469636B 		.ascii	"TickType_t\000"
 2033      54797065 
 2033      5F7400
 2034              	.LASF35:
 2035 006d 7072764C 		.ascii	"prvLowPriorityMutexTask\000"
 2035      6F775072 
 2035      696F7269 
 2035      74794D75 
 2035      74657854 
 2036              	.LASF6:
 2037 0085 5F5F696E 		.ascii	"__int32_t\000"
 2037      7433325F 
 2037      7400
 2038              	.LASF49:
 2039 008f 76537461 		.ascii	"vStartGenericQueueTasks\000"
 2039      72744765 
 2039      6E657269 
 2039      63517565 
 2039      75655461 
 2040              	.LASF25:
 2041 00a7 78517565 		.ascii	"xQueue\000"
 2041      756500
 2042              	.LASF47:
 2043 00ae 2E2E5C43 		.ascii	"..\\Common\\Minimal\\GenQTest.c\000"
 2043      6F6D6D6F 
 2043      6E5C4D69 
 2043      6E696D61 
 2043      6C5C4765 
 2044              	.LASF46:
 2045 00cb 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2045      4320342E 
 2045      392E3320 
 2045      32303135 
 2045      30333033 
 2046 00fe 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2046      20726576 
 2046      6973696F 
 2046      6E203232 
 2046      31323230 
 2047 0131 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2047      66756E63 
 2047      74696F6E 
 2047      2D736563 
 2047      74696F6E 
 2048              	.LASF23:
 2049 0159 51756575 		.ascii	"QueueHandle_t\000"
 2049      6548616E 
 2049      646C655F 
 2049      7400
 2050              	.LASF38:
 2051 0167 756C4C61 		.ascii	"ulLastLoopCounter\000"
 2051      73744C6F 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 52


 2051      6F70436F 
 2051      756E7465 
 2051      7200
 2052              	.LASF17:
 2053 0179 666C6F61 		.ascii	"float\000"
 2053      7400
 2054              	.LASF1:
 2055 017f 7369676E 		.ascii	"signed char\000"
 2055      65642063 
 2055      68617200 
 2056              	.LASF39:
 2057 018b 756C4C61 		.ascii	"ulLastLoopCounter2\000"
 2057      73744C6F 
 2057      6F70436F 
 2057      756E7465 
 2057      723200
 2058              	.LASF2:
 2059 019e 756E7369 		.ascii	"unsigned char\000"
 2059      676E6564 
 2059      20636861 
 2059      7200
 2060              	.LASF33:
 2061 01ac 784C6F63 		.ascii	"xLocalMutex\000"
 2061      616C4D75 
 2061      74657800 
 2062              	.LASF9:
 2063 01b8 6C6F6E67 		.ascii	"long unsigned int\000"
 2063      20756E73 
 2063      69676E65 
 2063      6420696E 
 2063      7400
 2064              	.LASF37:
 2065 01ca 70727648 		.ascii	"prvHighPriorityMutexTask\000"
 2065      69676850 
 2065      72696F72 
 2065      6974794D 
 2065      75746578 
 2066              	.LASF36:
 2067 01e3 7072764D 		.ascii	"prvMediumPriorityMutexTask\000"
 2067      65646975 
 2067      6D507269 
 2067      6F726974 
 2067      794D7574 
 2068              	.LASF42:
 2069 01fe 756C4C6F 		.ascii	"ulLoopCounter2\000"
 2069      6F70436F 
 2069      756E7465 
 2069      723200
 2070              	.LASF51:
 2071 020d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2071      52784275 
 2071      66666572 
 2071      00
 2072              	.LASF29:
 2073 021a 756C4461 		.ascii	"ulData\000"
 2073      746100
 2074              	.LASF32:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 53


 2075 0221 70727654 		.ascii	"prvTakeTwoMutexesReturnInDifferentOrder\000"
 2075      616B6554 
 2075      776F4D75 
 2075      74657865 
 2075      73526574 
 2076              	.LASF18:
 2077 0249 646F7562 		.ascii	"double\000"
 2077      6C6500
 2078              	.LASF43:
 2079 0250 756C4775 		.ascii	"ulGuardedVariable\000"
 2079      61726465 
 2079      64566172 
 2079      6961626C 
 2079      6500
 2080              	.LASF24:
 2081 0262 53656D61 		.ascii	"SemaphoreHandle_t\000"
 2081      70686F72 
 2081      6548616E 
 2081      646C655F 
 2081      7400
 2082              	.LASF8:
 2083 0274 5F5F7569 		.ascii	"__uint32_t\000"
 2083      6E743332 
 2083      5F7400
 2084              	.LASF41:
 2085 027f 756C4C6F 		.ascii	"ulLoopCounter\000"
 2085      6F70436F 
 2085      756E7465 
 2085      7200
 2086              	.LASF27:
 2087 028d 75785072 		.ascii	"uxPriority\000"
 2087      696F7269 
 2087      747900
 2088              	.LASF0:
 2089 0298 756E7369 		.ascii	"unsigned int\000"
 2089      676E6564 
 2089      20696E74 
 2089      00
 2090              	.LASF30:
 2091 02a5 756C4461 		.ascii	"ulData2\000"
 2091      74613200 
 2092              	.LASF11:
 2093 02ad 6C6F6E67 		.ascii	"long long unsigned int\000"
 2093      206C6F6E 
 2093      6720756E 
 2093      7369676E 
 2093      65642069 
 2094              	.LASF14:
 2095 02c4 75696E74 		.ascii	"uint8_t\000"
 2095      385F7400 
 2096              	.LASF15:
 2097 02cc 696E7433 		.ascii	"int32_t\000"
 2097      325F7400 
 2098              	.LASF12:
 2099 02d4 73697A65 		.ascii	"sizetype\000"
 2099      74797065 
 2099      00
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 54


 2100              	.LASF34:
 2101 02dd 70727654 		.ascii	"prvTakeTwoMutexesReturnInSameOrder\000"
 2101      616B6554 
 2101      776F4D75 
 2101      74657865 
 2101      73526574 
 2102              	.LASF10:
 2103 0300 6C6F6E67 		.ascii	"long long int\000"
 2103      206C6F6E 
 2103      6720696E 
 2103      7400
 2104              	.LASF13:
 2105 030e 63686172 		.ascii	"char\000"
 2105      00
 2106              	.LASF28:
 2107 0313 70765061 		.ascii	"pvParameters\000"
 2107      72616D65 
 2107      74657273 
 2107      00
 2108              	.LASF3:
 2109 0320 73686F72 		.ascii	"short int\000"
 2109      7420696E 
 2109      7400
 2110              	.LASF45:
 2111 032a 784D6564 		.ascii	"xMediumPriorityMutexTask\000"
 2111      69756D50 
 2111      72696F72 
 2111      6974794D 
 2111      75746578 
 2112              	.LASF22:
 2113 0343 5461736B 		.ascii	"TaskHandle_t\000"
 2113      48616E64 
 2113      6C655F74 
 2113      00
 2114              	.LASF16:
 2115 0350 75696E74 		.ascii	"uint32_t\000"
 2115      33325F74 
 2115      00
 2116              	.LASF7:
 2117 0359 6C6F6E67 		.ascii	"long int\000"
 2117      20696E74 
 2117      00
 2118              	.LASF40:
 2119 0362 78457272 		.ascii	"xErrorDetected\000"
 2119      6F724465 
 2119      74656374 
 2119      656400
 2120              	.LASF4:
 2121 0371 73686F72 		.ascii	"short unsigned int\000"
 2121      7420756E 
 2121      7369676E 
 2121      65642069 
 2121      6E7400
 2122              	.LASF20:
 2123 0384 55426173 		.ascii	"UBaseType_t\000"
 2123      65547970 
 2123      655F7400 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccPKiSon.s 			page 55


 2124              	.LASF19:
 2125 0390 42617365 		.ascii	"BaseType_t\000"
 2125      54797065 
 2125      5F7400
 2126              	.LASF48:
 2127 039b 433A5C55 		.ascii	"C:\\Users\\bmt\\Documents\\GitHub\\FreeRTOS_CY8CKIT"
 2127      73657273 
 2127      5C626D74 
 2127      5C446F63 
 2127      756D656E 
 2128 03c9 5F303539 		.ascii	"_059\\FreeRTOS_Demo.cydsn\000"
 2128      5C467265 
 2128      6552544F 
 2128      535F4465 
 2128      6D6F2E63 
 2129              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

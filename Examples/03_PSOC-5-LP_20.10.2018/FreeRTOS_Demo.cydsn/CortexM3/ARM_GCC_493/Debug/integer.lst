ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"integer.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	xTaskCheck:
  21 0000 00000000 		.space	4
  22              		.section	.rodata
  23              		.align	2
  24              	.LC0:
  25 0000 496E744D 		.ascii	"IntMath\000"
  25      61746800 
  26              		.section	.text.vStartIntegerMathTasks,"ax",%progbits
  27              		.align	2
  28              		.global	vStartIntegerMathTasks
  29              		.thumb
  30              		.thumb_func
  31              		.type	vStartIntegerMathTasks, %function
  32              	vStartIntegerMathTasks:
  33              	.LFB68:
  34              		.file 1 "..\\Common\\Minimal\\integer.c"
   1:..\Common\Minimal/integer.c **** /*
   2:..\Common\Minimal/integer.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/integer.c ****     All rights reserved
   4:..\Common\Minimal/integer.c **** 
   5:..\Common\Minimal/integer.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/integer.c **** 
   7:..\Common\Minimal/integer.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/integer.c **** 
   9:..\Common\Minimal/integer.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/integer.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/integer.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/integer.c **** 
  13:..\Common\Minimal/integer.c ****     ***************************************************************************
  14:..\Common\Minimal/integer.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/integer.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/integer.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/integer.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/integer.c ****     ***************************************************************************
  19:..\Common\Minimal/integer.c **** 
  20:..\Common\Minimal/integer.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/integer.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/integer.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 2


  23:..\Common\Minimal/integer.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/integer.c **** 
  25:..\Common\Minimal/integer.c ****     ***************************************************************************
  26:..\Common\Minimal/integer.c ****      *                                                                       *
  27:..\Common\Minimal/integer.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/integer.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/integer.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/integer.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/integer.c ****      *                                                                       *
  32:..\Common\Minimal/integer.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/integer.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/integer.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/integer.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/integer.c ****      *                                                                       *
  37:..\Common\Minimal/integer.c ****     ***************************************************************************
  38:..\Common\Minimal/integer.c **** 
  39:..\Common\Minimal/integer.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/integer.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/integer.c ****     defined configASSERT()?
  42:..\Common\Minimal/integer.c **** 
  43:..\Common\Minimal/integer.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/integer.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/integer.c ****     participating in the support forum.
  46:..\Common\Minimal/integer.c **** 
  47:..\Common\Minimal/integer.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/integer.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/integer.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/integer.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/integer.c **** 
  52:..\Common\Minimal/integer.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/integer.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/integer.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Common\Minimal/integer.c **** 
  56:..\Common\Minimal/integer.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/integer.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/integer.c **** 
  59:..\Common\Minimal/integer.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/integer.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/integer.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/integer.c **** 
  63:..\Common\Minimal/integer.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/integer.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/integer.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/integer.c **** 
  67:..\Common\Minimal/integer.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/integer.c **** */
  69:..\Common\Minimal/integer.c **** 
  70:..\Common\Minimal/integer.c **** /*
  71:..\Common\Minimal/integer.c ****  * Creates one or more tasks that repeatedly perform a set of integer
  72:..\Common\Minimal/integer.c ****  * calculations.  The result of each run-time calculation is compared to the 
  73:..\Common\Minimal/integer.c ****  * known expected result - with a mismatch being indicative of an error in the
  74:..\Common\Minimal/integer.c ****  * context switch mechanism.
  75:..\Common\Minimal/integer.c ****  */
  76:..\Common\Minimal/integer.c **** 
  77:..\Common\Minimal/integer.c **** #include <stdlib.h>
  78:..\Common\Minimal/integer.c **** 
  79:..\Common\Minimal/integer.c **** /* Scheduler include files. */
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 3


  80:..\Common\Minimal/integer.c **** #include "FreeRTOS.h"
  81:..\Common\Minimal/integer.c **** #include "task.h"
  82:..\Common\Minimal/integer.c **** 
  83:..\Common\Minimal/integer.c **** /* Demo program include files. */
  84:..\Common\Minimal/integer.c **** #include "integer.h"
  85:..\Common\Minimal/integer.c **** 
  86:..\Common\Minimal/integer.c **** /* The constants used in the calculation. */
  87:..\Common\Minimal/integer.c **** #define intgCONST1				( ( long ) 123 )
  88:..\Common\Minimal/integer.c **** #define intgCONST2				( ( long ) 234567 )
  89:..\Common\Minimal/integer.c **** #define intgCONST3				( ( long ) -3 )
  90:..\Common\Minimal/integer.c **** #define intgCONST4				( ( long ) 7 )
  91:..\Common\Minimal/integer.c **** #define intgEXPECTED_ANSWER		( ( ( intgCONST1 + intgCONST2 ) * intgCONST3 ) / intgCONST4 )
  92:..\Common\Minimal/integer.c **** 
  93:..\Common\Minimal/integer.c **** #define intgSTACK_SIZE			configMINIMAL_STACK_SIZE
  94:..\Common\Minimal/integer.c **** 
  95:..\Common\Minimal/integer.c **** /* As this is the minimal version, we will only create one task. */
  96:..\Common\Minimal/integer.c **** #define intgNUMBER_OF_TASKS		( 1 )
  97:..\Common\Minimal/integer.c **** 
  98:..\Common\Minimal/integer.c **** /* The task function.  Repeatedly performs a 32 bit calculation, checking the
  99:..\Common\Minimal/integer.c **** result against the expected result.  If the result is incorrect then the
 100:..\Common\Minimal/integer.c **** context switch must have caused some corruption. */
 101:..\Common\Minimal/integer.c **** static portTASK_FUNCTION_PROTO( vCompeteingIntMathTask, pvParameters );
 102:..\Common\Minimal/integer.c **** 
 103:..\Common\Minimal/integer.c **** /* Variables that are set to true within the calculation task to indicate
 104:..\Common\Minimal/integer.c **** that the task is still executing.  The check task sets the variable back to
 105:..\Common\Minimal/integer.c **** false, flagging an error if the variable is still false the next time it
 106:..\Common\Minimal/integer.c **** is called. */
 107:..\Common\Minimal/integer.c **** static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };
 108:..\Common\Minimal/integer.c **** 
 109:..\Common\Minimal/integer.c **** /*-----------------------------------------------------------*/
 110:..\Common\Minimal/integer.c **** 
 111:..\Common\Minimal/integer.c **** void vStartIntegerMathTasks( UBaseType_t uxPriority )
 112:..\Common\Minimal/integer.c **** {
  35              		.loc 1 112 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 16
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 90B5     		push	{r4, r7, lr}
  40              		.cfi_def_cfa_offset 12
  41              		.cfi_offset 4, -12
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
  44 0002 87B0     		sub	sp, sp, #28
  45              		.cfi_def_cfa_offset 40
  46 0004 02AF     		add	r7, sp, #8
  47              		.cfi_def_cfa 7, 32
  48 0006 7860     		str	r0, [r7, #4]
 113:..\Common\Minimal/integer.c **** short sTask;
 114:..\Common\Minimal/integer.c **** 
 115:..\Common\Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
  49              		.loc 1 115 0
  50 0008 0023     		movs	r3, #0
  51 000a FB81     		strh	r3, [r7, #14]	@ movhi
  52 000c 13E0     		b	.L2
  53              	.L3:
 116:..\Common\Minimal/integer.c **** 	{
 117:..\Common\Minimal/integer.c **** 		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 4


  54              		.loc 1 117 0 discriminator 3
  55 000e B7F90E30 		ldrsh	r3, [r7, #14]
  56 0012 9B00     		lsls	r3, r3, #2
  57 0014 0B4A     		ldr	r2, .L4
  58 0016 9C18     		adds	r4, r3, r2
  59 0018 7B68     		ldr	r3, [r7, #4]
  60 001a 0093     		str	r3, [sp]
  61 001c 0023     		movs	r3, #0
  62 001e 0193     		str	r3, [sp, #4]
  63 0020 0948     		ldr	r0, .L4+4
  64 0022 0A49     		ldr	r1, .L4+8
  65 0024 6422     		movs	r2, #100
  66 0026 2346     		mov	r3, r4
  67 0028 FFF7FEFF 		bl	xTaskCreate
 115:..\Common\Minimal/integer.c **** 	{
  68              		.loc 1 115 0 discriminator 3
  69 002c FB89     		ldrh	r3, [r7, #14]
  70 002e 9BB2     		uxth	r3, r3
  71 0030 0133     		adds	r3, r3, #1
  72 0032 9BB2     		uxth	r3, r3
  73 0034 FB81     		strh	r3, [r7, #14]	@ movhi
  74              	.L2:
 115:..\Common\Minimal/integer.c **** 	{
  75              		.loc 1 115 0 is_stmt 0 discriminator 1
  76 0036 B7F90E30 		ldrsh	r3, [r7, #14]
  77 003a 002B     		cmp	r3, #0
  78 003c E7DD     		ble	.L3
 118:..\Common\Minimal/integer.c **** 	}
 119:..\Common\Minimal/integer.c **** }
  79              		.loc 1 119 0 is_stmt 1
  80 003e 1437     		adds	r7, r7, #20
  81              		.cfi_def_cfa_offset 12
  82 0040 BD46     		mov	sp, r7
  83              		.cfi_def_cfa_register 13
  84              		@ sp needed
  85 0042 90BD     		pop	{r4, r7, pc}
  86              	.L5:
  87              		.align	2
  88              	.L4:
  89 0044 00000000 		.word	xTaskCheck
  90 0048 00000000 		.word	vCompeteingIntMathTask
  91 004c 00000000 		.word	.LC0
  92              		.cfi_endproc
  93              	.LFE68:
  94              		.size	vStartIntegerMathTasks, .-vStartIntegerMathTasks
  95              		.section	.text.vCompeteingIntMathTask,"ax",%progbits
  96              		.align	2
  97              		.thumb
  98              		.thumb_func
  99              		.type	vCompeteingIntMathTask, %function
 100              	vCompeteingIntMathTask:
 101              	.LFB69:
 120:..\Common\Minimal/integer.c **** /*-----------------------------------------------------------*/
 121:..\Common\Minimal/integer.c **** 
 122:..\Common\Minimal/integer.c **** static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
 123:..\Common\Minimal/integer.c **** {
 102              		.loc 1 123 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 5


 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 24
 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106 0000 80B5     		push	{r7, lr}
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 86B0     		sub	sp, sp, #24
 111              		.cfi_def_cfa_offset 32
 112 0004 00AF     		add	r7, sp, #0
 113              		.cfi_def_cfa_register 7
 114 0006 7860     		str	r0, [r7, #4]
 124:..\Common\Minimal/integer.c **** /* These variables are all effectively set to constants so they are volatile to
 125:..\Common\Minimal/integer.c **** ensure the compiler does not just get rid of them. */
 126:..\Common\Minimal/integer.c **** volatile long lValue;
 127:..\Common\Minimal/integer.c **** short sError = pdFALSE;
 115              		.loc 1 127 0
 116 0008 0023     		movs	r3, #0
 117 000a FB82     		strh	r3, [r7, #22]	@ movhi
 128:..\Common\Minimal/integer.c **** volatile BaseType_t *pxTaskHasExecuted;
 129:..\Common\Minimal/integer.c **** 
 130:..\Common\Minimal/integer.c **** 	/* Set a pointer to the variable we are going to set to true each
 131:..\Common\Minimal/integer.c **** 	iteration.  This is also a good test of the parameter passing mechanism
 132:..\Common\Minimal/integer.c **** 	within each port. */
 133:..\Common\Minimal/integer.c **** 	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
 118              		.loc 1 133 0
 119 000c 7B68     		ldr	r3, [r7, #4]
 120 000e 3B61     		str	r3, [r7, #16]
 121              	.L9:
 134:..\Common\Minimal/integer.c **** 
 135:..\Common\Minimal/integer.c **** 	/* Keep performing a calculation and checking the result against a constant. */
 136:..\Common\Minimal/integer.c **** 	for( ;; )
 137:..\Common\Minimal/integer.c **** 	{
 138:..\Common\Minimal/integer.c **** 		/* Perform the calculation.  This will store partial value in
 139:..\Common\Minimal/integer.c **** 		registers, resulting in a good test of the context switch mechanism. */
 140:..\Common\Minimal/integer.c **** 		lValue = intgCONST1;
 122              		.loc 1 140 0
 123 0010 7B23     		movs	r3, #123
 124 0012 FB60     		str	r3, [r7, #12]
 141:..\Common\Minimal/integer.c **** 		lValue += intgCONST2;
 125              		.loc 1 141 0
 126 0014 FB68     		ldr	r3, [r7, #12]
 127 0016 03F56533 		add	r3, r3, #234496
 128 001a 4733     		adds	r3, r3, #71
 129 001c FB60     		str	r3, [r7, #12]
 142:..\Common\Minimal/integer.c **** 
 143:..\Common\Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 144:..\Common\Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
 145:..\Common\Minimal/integer.c **** 		{
 146:..\Common\Minimal/integer.c **** 			taskYIELD();
 147:..\Common\Minimal/integer.c **** 		}
 148:..\Common\Minimal/integer.c **** 		#endif
 149:..\Common\Minimal/integer.c **** 
 150:..\Common\Minimal/integer.c **** 		/* Finish off the calculation. */
 151:..\Common\Minimal/integer.c **** 		lValue *= intgCONST3;
 130              		.loc 1 151 0
 131 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 6


 132 0020 1A46     		mov	r2, r3
 133 0022 9B00     		lsls	r3, r3, #2
 134 0024 D31A     		subs	r3, r2, r3
 135 0026 FB60     		str	r3, [r7, #12]
 152:..\Common\Minimal/integer.c **** 		lValue /= intgCONST4;
 136              		.loc 1 152 0
 137 0028 FB68     		ldr	r3, [r7, #12]
 138 002a 0D4A     		ldr	r2, .L10
 139 002c 82FB0312 		smull	r1, r2, r2, r3
 140 0030 1A44     		add	r2, r2, r3
 141 0032 9210     		asrs	r2, r2, #2
 142 0034 DB17     		asrs	r3, r3, #31
 143 0036 D31A     		subs	r3, r2, r3
 144 0038 FB60     		str	r3, [r7, #12]
 153:..\Common\Minimal/integer.c **** 
 154:..\Common\Minimal/integer.c **** 		/* If the calculation is found to be incorrect we stop setting the 
 155:..\Common\Minimal/integer.c **** 		TaskHasExecuted variable so the check task can see an error has 
 156:..\Common\Minimal/integer.c **** 		occurred. */
 157:..\Common\Minimal/integer.c **** 		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised ou
 145              		.loc 1 157 0
 146 003a FB68     		ldr	r3, [r7, #12]
 147 003c 094A     		ldr	r2, .L10+4
 148 003e 9342     		cmp	r3, r2
 149 0040 01D0     		beq	.L7
 158:..\Common\Minimal/integer.c **** 		{
 159:..\Common\Minimal/integer.c **** 			sError = pdTRUE;
 150              		.loc 1 159 0
 151 0042 0123     		movs	r3, #1
 152 0044 FB82     		strh	r3, [r7, #22]	@ movhi
 153              	.L7:
 160:..\Common\Minimal/integer.c **** 		}
 161:..\Common\Minimal/integer.c **** 
 162:..\Common\Minimal/integer.c **** 		if( sError == pdFALSE )
 154              		.loc 1 162 0
 155 0046 B7F91630 		ldrsh	r3, [r7, #22]
 156 004a 002B     		cmp	r3, #0
 157 004c 06D1     		bne	.L8
 163:..\Common\Minimal/integer.c **** 		{
 164:..\Common\Minimal/integer.c **** 			/* We have not encountered any errors, so set the flag that show
 165:..\Common\Minimal/integer.c **** 			we are still executing.  This will be periodically cleared by
 166:..\Common\Minimal/integer.c **** 			the check task. */
 167:..\Common\Minimal/integer.c **** 			portENTER_CRITICAL();
 158              		.loc 1 167 0
 159 004e FFF7FEFF 		bl	vPortEnterCritical
 168:..\Common\Minimal/integer.c **** 				*pxTaskHasExecuted = pdTRUE;
 160              		.loc 1 168 0
 161 0052 3B69     		ldr	r3, [r7, #16]
 162 0054 0122     		movs	r2, #1
 163 0056 1A60     		str	r2, [r3]
 169:..\Common\Minimal/integer.c **** 			portEXIT_CRITICAL();
 164              		.loc 1 169 0
 165 0058 FFF7FEFF 		bl	vPortExitCritical
 166              	.L8:
 170:..\Common\Minimal/integer.c **** 		}
 171:..\Common\Minimal/integer.c **** 
 172:..\Common\Minimal/integer.c **** 		/* Yield in case cooperative scheduling is being used. */
 173:..\Common\Minimal/integer.c **** 		#if configUSE_PREEMPTION == 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 7


 174:..\Common\Minimal/integer.c **** 		{
 175:..\Common\Minimal/integer.c **** 			taskYIELD();
 176:..\Common\Minimal/integer.c **** 		}
 177:..\Common\Minimal/integer.c **** 		#endif
 178:..\Common\Minimal/integer.c **** 	}
 167              		.loc 1 178 0
 168 005c D8E7     		b	.L9
 169              	.L11:
 170 005e 00BF     		.align	2
 171              	.L10:
 172 0060 93244992 		.word	-1840700269
 173 0064 1B77FEFF 		.word	-100581
 174              		.cfi_endproc
 175              	.LFE69:
 176              		.size	vCompeteingIntMathTask, .-vCompeteingIntMathTask
 177              		.section	.text.xAreIntegerMathsTaskStillRunning,"ax",%progbits
 178              		.align	2
 179              		.global	xAreIntegerMathsTaskStillRunning
 180              		.thumb
 181              		.thumb_func
 182              		.type	xAreIntegerMathsTaskStillRunning, %function
 183              	xAreIntegerMathsTaskStillRunning:
 184              	.LFB70:
 179:..\Common\Minimal/integer.c **** }
 180:..\Common\Minimal/integer.c **** /*-----------------------------------------------------------*/
 181:..\Common\Minimal/integer.c **** 
 182:..\Common\Minimal/integer.c **** /* This is called to check that all the created tasks are still running. */
 183:..\Common\Minimal/integer.c **** BaseType_t xAreIntegerMathsTaskStillRunning( void )
 184:..\Common\Minimal/integer.c **** {
 185              		.loc 1 184 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 8
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 190 0000 80B4     		push	{r7}
 191              		.cfi_def_cfa_offset 4
 192              		.cfi_offset 7, -4
 193 0002 83B0     		sub	sp, sp, #12
 194              		.cfi_def_cfa_offset 16
 195 0004 00AF     		add	r7, sp, #0
 196              		.cfi_def_cfa_register 7
 185:..\Common\Minimal/integer.c **** BaseType_t xReturn = pdTRUE;
 197              		.loc 1 185 0
 198 0006 0123     		movs	r3, #1
 199 0008 7B60     		str	r3, [r7, #4]
 186:..\Common\Minimal/integer.c **** short sTask;
 187:..\Common\Minimal/integer.c **** 
 188:..\Common\Minimal/integer.c **** 	/* Check the maths tasks are still running by ensuring their check variables 
 189:..\Common\Minimal/integer.c **** 	are still being set to true. */
 190:..\Common\Minimal/integer.c **** 	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
 200              		.loc 1 190 0
 201 000a 0023     		movs	r3, #0
 202 000c 7B80     		strh	r3, [r7, #2]	@ movhi
 203 000e 13E0     		b	.L13
 204              	.L15:
 191:..\Common\Minimal/integer.c **** 	{
 192:..\Common\Minimal/integer.c **** 		if( xTaskCheck[ sTask ] == pdFALSE )
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 8


 205              		.loc 1 192 0
 206 0010 B7F90230 		ldrsh	r3, [r7, #2]
 207 0014 0E4A     		ldr	r2, .L17
 208 0016 52F82330 		ldr	r3, [r2, r3, lsl #2]
 209 001a 002B     		cmp	r3, #0
 210 001c 01D1     		bne	.L14
 193:..\Common\Minimal/integer.c **** 		{
 194:..\Common\Minimal/integer.c **** 			/* The check has not incremented so an error exists. */
 195:..\Common\Minimal/integer.c **** 			xReturn = pdFALSE;
 211              		.loc 1 195 0
 212 001e 0023     		movs	r3, #0
 213 0020 7B60     		str	r3, [r7, #4]
 214              	.L14:
 196:..\Common\Minimal/integer.c **** 		}
 197:..\Common\Minimal/integer.c **** 
 198:..\Common\Minimal/integer.c **** 		/* Reset the check variable so we can tell if it has been set by
 199:..\Common\Minimal/integer.c **** 		the next time around. */
 200:..\Common\Minimal/integer.c **** 		xTaskCheck[ sTask ] = pdFALSE;
 215              		.loc 1 200 0 discriminator 2
 216 0022 B7F90230 		ldrsh	r3, [r7, #2]
 217 0026 0A4A     		ldr	r2, .L17
 218 0028 0021     		movs	r1, #0
 219 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 190:..\Common\Minimal/integer.c **** 	{
 220              		.loc 1 190 0 discriminator 2
 221 002e 7B88     		ldrh	r3, [r7, #2]
 222 0030 9BB2     		uxth	r3, r3
 223 0032 0133     		adds	r3, r3, #1
 224 0034 9BB2     		uxth	r3, r3
 225 0036 7B80     		strh	r3, [r7, #2]	@ movhi
 226              	.L13:
 190:..\Common\Minimal/integer.c **** 	{
 227              		.loc 1 190 0 is_stmt 0 discriminator 1
 228 0038 B7F90230 		ldrsh	r3, [r7, #2]
 229 003c 002B     		cmp	r3, #0
 230 003e E7DD     		ble	.L15
 201:..\Common\Minimal/integer.c **** 	}
 202:..\Common\Minimal/integer.c **** 
 203:..\Common\Minimal/integer.c **** 	return xReturn;
 231              		.loc 1 203 0 is_stmt 1
 232 0040 7B68     		ldr	r3, [r7, #4]
 204:..\Common\Minimal/integer.c **** }
 233              		.loc 1 204 0
 234 0042 1846     		mov	r0, r3
 235 0044 0C37     		adds	r7, r7, #12
 236              		.cfi_def_cfa_offset 4
 237 0046 BD46     		mov	sp, r7
 238              		.cfi_def_cfa_register 13
 239              		@ sp needed
 240 0048 5DF8047B 		ldr	r7, [sp], #4
 241              		.cfi_restore 7
 242              		.cfi_def_cfa_offset 0
 243 004c 7047     		bx	lr
 244              	.L18:
 245 004e 00BF     		.align	2
 246              	.L17:
 247 0050 00000000 		.word	xTaskCheck
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 9


 248              		.cfi_endproc
 249              	.LFE70:
 250              		.size	xAreIntegerMathsTaskStillRunning, .-xAreIntegerMathsTaskStillRunning
 251              		.text
 252              	.Letext0:
 253              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 254              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 255              		.file 4 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 256              		.file 5 "..\\Source\\include/task.h"
 257              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 258              		.section	.debug_info,"",%progbits
 259              	.Ldebug_info0:
 260 0000 BA010000 		.4byte	0x1ba
 261 0004 0400     		.2byte	0x4
 262 0006 00000000 		.4byte	.Ldebug_abbrev0
 263 000a 04       		.byte	0x4
 264 000b 01       		.uleb128 0x1
 265 000c 2B000000 		.4byte	.LASF26
 266 0010 01       		.byte	0x1
 267 0011 F2000000 		.4byte	.LASF27
 268 0015 2C020000 		.4byte	.LASF28
 269 0019 00000000 		.4byte	.Ldebug_ranges0+0
 270 001d 00000000 		.4byte	0
 271 0021 00000000 		.4byte	.Ldebug_line0
 272 0025 02       		.uleb128 0x2
 273 0026 04       		.byte	0x4
 274 0027 07       		.byte	0x7
 275 0028 47010000 		.4byte	.LASF0
 276 002c 03       		.uleb128 0x3
 277 002d 04       		.byte	0x4
 278 002e 05       		.byte	0x5
 279 002f 696E7400 		.ascii	"int\000"
 280 0033 02       		.uleb128 0x2
 281 0034 01       		.byte	0x1
 282 0035 06       		.byte	0x6
 283 0036 F2010000 		.4byte	.LASF1
 284 003a 02       		.uleb128 0x2
 285 003b 01       		.byte	0x1
 286 003c 08       		.byte	0x8
 287 003d BF000000 		.4byte	.LASF2
 288 0041 02       		.uleb128 0x2
 289 0042 02       		.byte	0x2
 290 0043 05       		.byte	0x5
 291 0044 C0010000 		.4byte	.LASF3
 292 0048 02       		.uleb128 0x2
 293 0049 02       		.byte	0x2
 294 004a 07       		.byte	0x7
 295 004b DF000000 		.4byte	.LASF4
 296 004f 04       		.uleb128 0x4
 297 0050 00000000 		.4byte	.LASF11
 298 0054 02       		.byte	0x2
 299 0055 3F       		.byte	0x3f
 300 0056 5A000000 		.4byte	0x5a
 301 005a 02       		.uleb128 0x2
 302 005b 04       		.byte	0x4
 303 005c 05       		.byte	0x5
 304 005d E9010000 		.4byte	.LASF5
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 10


 305 0061 02       		.uleb128 0x2
 306 0062 04       		.byte	0x4
 307 0063 07       		.byte	0x7
 308 0064 CD000000 		.4byte	.LASF6
 309 0068 02       		.uleb128 0x2
 310 0069 08       		.byte	0x8
 311 006a 05       		.byte	0x5
 312 006b 93010000 		.4byte	.LASF7
 313 006f 02       		.uleb128 0x2
 314 0070 08       		.byte	0x8
 315 0071 07       		.byte	0x7
 316 0072 54010000 		.4byte	.LASF8
 317 0076 02       		.uleb128 0x2
 318 0077 04       		.byte	0x4
 319 0078 07       		.byte	0x7
 320 0079 8A010000 		.4byte	.LASF9
 321 007d 05       		.uleb128 0x5
 322 007e 04       		.byte	0x4
 323 007f 02       		.uleb128 0x2
 324 0080 01       		.byte	0x1
 325 0081 08       		.byte	0x8
 326 0082 A1010000 		.4byte	.LASF10
 327 0086 04       		.uleb128 0x4
 328 0087 82010000 		.4byte	.LASF12
 329 008b 03       		.byte	0x3
 330 008c 2C       		.byte	0x2c
 331 008d 4F000000 		.4byte	0x4f
 332 0091 02       		.uleb128 0x2
 333 0092 04       		.byte	0x4
 334 0093 04       		.byte	0x4
 335 0094 B9000000 		.4byte	.LASF13
 336 0098 02       		.uleb128 0x2
 337 0099 08       		.byte	0x8
 338 009a 04       		.byte	0x4
 339 009b 1B010000 		.4byte	.LASF14
 340 009f 04       		.uleb128 0x4
 341 00a0 21020000 		.4byte	.LASF15
 342 00a4 04       		.byte	0x4
 343 00a5 62       		.byte	0x62
 344 00a6 5A000000 		.4byte	0x5a
 345 00aa 04       		.uleb128 0x4
 346 00ab 15020000 		.4byte	.LASF16
 347 00af 04       		.byte	0x4
 348 00b0 63       		.byte	0x63
 349 00b1 61000000 		.4byte	0x61
 350 00b5 04       		.uleb128 0x4
 351 00b6 DC010000 		.4byte	.LASF17
 352 00ba 05       		.byte	0x5
 353 00bb 67       		.byte	0x67
 354 00bc 7D000000 		.4byte	0x7d
 355 00c0 06       		.uleb128 0x6
 356 00c1 6B010000 		.4byte	.LASF29
 357 00c5 01       		.byte	0x1
 358 00c6 6F       		.byte	0x6f
 359 00c7 00000000 		.4byte	.LFB68
 360 00cb 50000000 		.4byte	.LFE68-.LFB68
 361 00cf 01       		.uleb128 0x1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 11


 362 00d0 9C       		.byte	0x9c
 363 00d1 F2000000 		.4byte	0xf2
 364 00d5 07       		.uleb128 0x7
 365 00d6 3C010000 		.4byte	.LASF18
 366 00da 01       		.byte	0x1
 367 00db 6F       		.byte	0x6f
 368 00dc AA000000 		.4byte	0xaa
 369 00e0 02       		.uleb128 0x2
 370 00e1 91       		.byte	0x91
 371 00e2 64       		.sleb128 -28
 372 00e3 08       		.uleb128 0x8
 373 00e4 BA010000 		.4byte	.LASF20
 374 00e8 01       		.byte	0x1
 375 00e9 71       		.byte	0x71
 376 00ea 41000000 		.4byte	0x41
 377 00ee 02       		.uleb128 0x2
 378 00ef 91       		.byte	0x91
 379 00f0 6E       		.sleb128 -18
 380 00f1 00       		.byte	0
 381 00f2 09       		.uleb128 0x9
 382 00f3 FE010000 		.4byte	.LASF30
 383 00f7 01       		.byte	0x1
 384 00f8 7A       		.byte	0x7a
 385 00f9 00000000 		.4byte	.LFB69
 386 00fd 68000000 		.4byte	.LFE69-.LFB69
 387 0101 01       		.uleb128 0x1
 388 0102 9C       		.byte	0x9c
 389 0103 40010000 		.4byte	0x140
 390 0107 07       		.uleb128 0x7
 391 0108 A6010000 		.4byte	.LASF19
 392 010c 01       		.byte	0x1
 393 010d 7A       		.byte	0x7a
 394 010e 7D000000 		.4byte	0x7d
 395 0112 02       		.uleb128 0x2
 396 0113 91       		.byte	0x91
 397 0114 64       		.sleb128 -28
 398 0115 08       		.uleb128 0x8
 399 0116 B3010000 		.4byte	.LASF21
 400 011a 01       		.byte	0x1
 401 011b 7E       		.byte	0x7e
 402 011c 40010000 		.4byte	0x140
 403 0120 02       		.uleb128 0x2
 404 0121 91       		.byte	0x91
 405 0122 6C       		.sleb128 -20
 406 0123 08       		.uleb128 0x8
 407 0124 22010000 		.4byte	.LASF22
 408 0128 01       		.byte	0x1
 409 0129 7F       		.byte	0x7f
 410 012a 41000000 		.4byte	0x41
 411 012e 02       		.uleb128 0x2
 412 012f 91       		.byte	0x91
 413 0130 76       		.sleb128 -10
 414 0131 08       		.uleb128 0x8
 415 0132 CA010000 		.4byte	.LASF23
 416 0136 01       		.byte	0x1
 417 0137 80       		.byte	0x80
 418 0138 45010000 		.4byte	0x145
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 12


 419 013c 02       		.uleb128 0x2
 420 013d 91       		.byte	0x91
 421 013e 70       		.sleb128 -16
 422 013f 00       		.byte	0
 423 0140 0A       		.uleb128 0xa
 424 0141 5A000000 		.4byte	0x5a
 425 0145 0B       		.uleb128 0xb
 426 0146 04       		.byte	0x4
 427 0147 4B010000 		.4byte	0x14b
 428 014b 0A       		.uleb128 0xa
 429 014c 9F000000 		.4byte	0x9f
 430 0150 0C       		.uleb128 0xc
 431 0151 0A000000 		.4byte	.LASF31
 432 0155 01       		.byte	0x1
 433 0156 B7       		.byte	0xb7
 434 0157 9F000000 		.4byte	0x9f
 435 015b 00000000 		.4byte	.LFB70
 436 015f 54000000 		.4byte	.LFE70-.LFB70
 437 0163 01       		.uleb128 0x1
 438 0164 9C       		.byte	0x9c
 439 0165 86010000 		.4byte	0x186
 440 0169 08       		.uleb128 0x8
 441 016a 34010000 		.4byte	.LASF24
 442 016e 01       		.byte	0x1
 443 016f B9       		.byte	0xb9
 444 0170 9F000000 		.4byte	0x9f
 445 0174 02       		.uleb128 0x2
 446 0175 91       		.byte	0x91
 447 0176 74       		.sleb128 -12
 448 0177 08       		.uleb128 0x8
 449 0178 BA010000 		.4byte	.LASF20
 450 017c 01       		.byte	0x1
 451 017d BA       		.byte	0xba
 452 017e 41000000 		.4byte	0x41
 453 0182 02       		.uleb128 0x2
 454 0183 91       		.byte	0x91
 455 0184 72       		.sleb128 -14
 456 0185 00       		.byte	0
 457 0186 0D       		.uleb128 0xd
 458 0187 9F000000 		.4byte	0x9f
 459 018b 96010000 		.4byte	0x196
 460 018f 0E       		.uleb128 0xe
 461 0190 76000000 		.4byte	0x76
 462 0194 00       		.byte	0
 463 0195 00       		.byte	0
 464 0196 08       		.uleb128 0x8
 465 0197 29010000 		.4byte	.LASF25
 466 019b 01       		.byte	0x1
 467 019c 6B       		.byte	0x6b
 468 019d A7010000 		.4byte	0x1a7
 469 01a1 05       		.uleb128 0x5
 470 01a2 03       		.byte	0x3
 471 01a3 00000000 		.4byte	xTaskCheck
 472 01a7 0A       		.uleb128 0xa
 473 01a8 86010000 		.4byte	0x186
 474 01ac 0F       		.uleb128 0xf
 475 01ad 0E010000 		.4byte	.LASF32
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 13


 476 01b1 06       		.byte	0x6
 477 01b2 9606     		.2byte	0x696
 478 01b4 B8010000 		.4byte	0x1b8
 479 01b8 0A       		.uleb128 0xa
 480 01b9 86000000 		.4byte	0x86
 481 01bd 00       		.byte	0
 482              		.section	.debug_abbrev,"",%progbits
 483              	.Ldebug_abbrev0:
 484 0000 01       		.uleb128 0x1
 485 0001 11       		.uleb128 0x11
 486 0002 01       		.byte	0x1
 487 0003 25       		.uleb128 0x25
 488 0004 0E       		.uleb128 0xe
 489 0005 13       		.uleb128 0x13
 490 0006 0B       		.uleb128 0xb
 491 0007 03       		.uleb128 0x3
 492 0008 0E       		.uleb128 0xe
 493 0009 1B       		.uleb128 0x1b
 494 000a 0E       		.uleb128 0xe
 495 000b 55       		.uleb128 0x55
 496 000c 17       		.uleb128 0x17
 497 000d 11       		.uleb128 0x11
 498 000e 01       		.uleb128 0x1
 499 000f 10       		.uleb128 0x10
 500 0010 17       		.uleb128 0x17
 501 0011 00       		.byte	0
 502 0012 00       		.byte	0
 503 0013 02       		.uleb128 0x2
 504 0014 24       		.uleb128 0x24
 505 0015 00       		.byte	0
 506 0016 0B       		.uleb128 0xb
 507 0017 0B       		.uleb128 0xb
 508 0018 3E       		.uleb128 0x3e
 509 0019 0B       		.uleb128 0xb
 510 001a 03       		.uleb128 0x3
 511 001b 0E       		.uleb128 0xe
 512 001c 00       		.byte	0
 513 001d 00       		.byte	0
 514 001e 03       		.uleb128 0x3
 515 001f 24       		.uleb128 0x24
 516 0020 00       		.byte	0
 517 0021 0B       		.uleb128 0xb
 518 0022 0B       		.uleb128 0xb
 519 0023 3E       		.uleb128 0x3e
 520 0024 0B       		.uleb128 0xb
 521 0025 03       		.uleb128 0x3
 522 0026 08       		.uleb128 0x8
 523 0027 00       		.byte	0
 524 0028 00       		.byte	0
 525 0029 04       		.uleb128 0x4
 526 002a 16       		.uleb128 0x16
 527 002b 00       		.byte	0
 528 002c 03       		.uleb128 0x3
 529 002d 0E       		.uleb128 0xe
 530 002e 3A       		.uleb128 0x3a
 531 002f 0B       		.uleb128 0xb
 532 0030 3B       		.uleb128 0x3b
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 14


 533 0031 0B       		.uleb128 0xb
 534 0032 49       		.uleb128 0x49
 535 0033 13       		.uleb128 0x13
 536 0034 00       		.byte	0
 537 0035 00       		.byte	0
 538 0036 05       		.uleb128 0x5
 539 0037 0F       		.uleb128 0xf
 540 0038 00       		.byte	0
 541 0039 0B       		.uleb128 0xb
 542 003a 0B       		.uleb128 0xb
 543 003b 00       		.byte	0
 544 003c 00       		.byte	0
 545 003d 06       		.uleb128 0x6
 546 003e 2E       		.uleb128 0x2e
 547 003f 01       		.byte	0x1
 548 0040 3F       		.uleb128 0x3f
 549 0041 19       		.uleb128 0x19
 550 0042 03       		.uleb128 0x3
 551 0043 0E       		.uleb128 0xe
 552 0044 3A       		.uleb128 0x3a
 553 0045 0B       		.uleb128 0xb
 554 0046 3B       		.uleb128 0x3b
 555 0047 0B       		.uleb128 0xb
 556 0048 27       		.uleb128 0x27
 557 0049 19       		.uleb128 0x19
 558 004a 11       		.uleb128 0x11
 559 004b 01       		.uleb128 0x1
 560 004c 12       		.uleb128 0x12
 561 004d 06       		.uleb128 0x6
 562 004e 40       		.uleb128 0x40
 563 004f 18       		.uleb128 0x18
 564 0050 9642     		.uleb128 0x2116
 565 0052 19       		.uleb128 0x19
 566 0053 01       		.uleb128 0x1
 567 0054 13       		.uleb128 0x13
 568 0055 00       		.byte	0
 569 0056 00       		.byte	0
 570 0057 07       		.uleb128 0x7
 571 0058 05       		.uleb128 0x5
 572 0059 00       		.byte	0
 573 005a 03       		.uleb128 0x3
 574 005b 0E       		.uleb128 0xe
 575 005c 3A       		.uleb128 0x3a
 576 005d 0B       		.uleb128 0xb
 577 005e 3B       		.uleb128 0x3b
 578 005f 0B       		.uleb128 0xb
 579 0060 49       		.uleb128 0x49
 580 0061 13       		.uleb128 0x13
 581 0062 02       		.uleb128 0x2
 582 0063 18       		.uleb128 0x18
 583 0064 00       		.byte	0
 584 0065 00       		.byte	0
 585 0066 08       		.uleb128 0x8
 586 0067 34       		.uleb128 0x34
 587 0068 00       		.byte	0
 588 0069 03       		.uleb128 0x3
 589 006a 0E       		.uleb128 0xe
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 15


 590 006b 3A       		.uleb128 0x3a
 591 006c 0B       		.uleb128 0xb
 592 006d 3B       		.uleb128 0x3b
 593 006e 0B       		.uleb128 0xb
 594 006f 49       		.uleb128 0x49
 595 0070 13       		.uleb128 0x13
 596 0071 02       		.uleb128 0x2
 597 0072 18       		.uleb128 0x18
 598 0073 00       		.byte	0
 599 0074 00       		.byte	0
 600 0075 09       		.uleb128 0x9
 601 0076 2E       		.uleb128 0x2e
 602 0077 01       		.byte	0x1
 603 0078 03       		.uleb128 0x3
 604 0079 0E       		.uleb128 0xe
 605 007a 3A       		.uleb128 0x3a
 606 007b 0B       		.uleb128 0xb
 607 007c 3B       		.uleb128 0x3b
 608 007d 0B       		.uleb128 0xb
 609 007e 27       		.uleb128 0x27
 610 007f 19       		.uleb128 0x19
 611 0080 11       		.uleb128 0x11
 612 0081 01       		.uleb128 0x1
 613 0082 12       		.uleb128 0x12
 614 0083 06       		.uleb128 0x6
 615 0084 40       		.uleb128 0x40
 616 0085 18       		.uleb128 0x18
 617 0086 9642     		.uleb128 0x2116
 618 0088 19       		.uleb128 0x19
 619 0089 01       		.uleb128 0x1
 620 008a 13       		.uleb128 0x13
 621 008b 00       		.byte	0
 622 008c 00       		.byte	0
 623 008d 0A       		.uleb128 0xa
 624 008e 35       		.uleb128 0x35
 625 008f 00       		.byte	0
 626 0090 49       		.uleb128 0x49
 627 0091 13       		.uleb128 0x13
 628 0092 00       		.byte	0
 629 0093 00       		.byte	0
 630 0094 0B       		.uleb128 0xb
 631 0095 0F       		.uleb128 0xf
 632 0096 00       		.byte	0
 633 0097 0B       		.uleb128 0xb
 634 0098 0B       		.uleb128 0xb
 635 0099 49       		.uleb128 0x49
 636 009a 13       		.uleb128 0x13
 637 009b 00       		.byte	0
 638 009c 00       		.byte	0
 639 009d 0C       		.uleb128 0xc
 640 009e 2E       		.uleb128 0x2e
 641 009f 01       		.byte	0x1
 642 00a0 3F       		.uleb128 0x3f
 643 00a1 19       		.uleb128 0x19
 644 00a2 03       		.uleb128 0x3
 645 00a3 0E       		.uleb128 0xe
 646 00a4 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 16


 647 00a5 0B       		.uleb128 0xb
 648 00a6 3B       		.uleb128 0x3b
 649 00a7 0B       		.uleb128 0xb
 650 00a8 27       		.uleb128 0x27
 651 00a9 19       		.uleb128 0x19
 652 00aa 49       		.uleb128 0x49
 653 00ab 13       		.uleb128 0x13
 654 00ac 11       		.uleb128 0x11
 655 00ad 01       		.uleb128 0x1
 656 00ae 12       		.uleb128 0x12
 657 00af 06       		.uleb128 0x6
 658 00b0 40       		.uleb128 0x40
 659 00b1 18       		.uleb128 0x18
 660 00b2 9742     		.uleb128 0x2117
 661 00b4 19       		.uleb128 0x19
 662 00b5 01       		.uleb128 0x1
 663 00b6 13       		.uleb128 0x13
 664 00b7 00       		.byte	0
 665 00b8 00       		.byte	0
 666 00b9 0D       		.uleb128 0xd
 667 00ba 01       		.uleb128 0x1
 668 00bb 01       		.byte	0x1
 669 00bc 49       		.uleb128 0x49
 670 00bd 13       		.uleb128 0x13
 671 00be 01       		.uleb128 0x1
 672 00bf 13       		.uleb128 0x13
 673 00c0 00       		.byte	0
 674 00c1 00       		.byte	0
 675 00c2 0E       		.uleb128 0xe
 676 00c3 21       		.uleb128 0x21
 677 00c4 00       		.byte	0
 678 00c5 49       		.uleb128 0x49
 679 00c6 13       		.uleb128 0x13
 680 00c7 2F       		.uleb128 0x2f
 681 00c8 0B       		.uleb128 0xb
 682 00c9 00       		.byte	0
 683 00ca 00       		.byte	0
 684 00cb 0F       		.uleb128 0xf
 685 00cc 34       		.uleb128 0x34
 686 00cd 00       		.byte	0
 687 00ce 03       		.uleb128 0x3
 688 00cf 0E       		.uleb128 0xe
 689 00d0 3A       		.uleb128 0x3a
 690 00d1 0B       		.uleb128 0xb
 691 00d2 3B       		.uleb128 0x3b
 692 00d3 05       		.uleb128 0x5
 693 00d4 49       		.uleb128 0x49
 694 00d5 13       		.uleb128 0x13
 695 00d6 3F       		.uleb128 0x3f
 696 00d7 19       		.uleb128 0x19
 697 00d8 3C       		.uleb128 0x3c
 698 00d9 19       		.uleb128 0x19
 699 00da 00       		.byte	0
 700 00db 00       		.byte	0
 701 00dc 00       		.byte	0
 702              		.section	.debug_aranges,"",%progbits
 703 0000 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 17


 704 0004 0200     		.2byte	0x2
 705 0006 00000000 		.4byte	.Ldebug_info0
 706 000a 04       		.byte	0x4
 707 000b 00       		.byte	0
 708 000c 0000     		.2byte	0
 709 000e 0000     		.2byte	0
 710 0010 00000000 		.4byte	.LFB68
 711 0014 50000000 		.4byte	.LFE68-.LFB68
 712 0018 00000000 		.4byte	.LFB69
 713 001c 68000000 		.4byte	.LFE69-.LFB69
 714 0020 00000000 		.4byte	.LFB70
 715 0024 54000000 		.4byte	.LFE70-.LFB70
 716 0028 00000000 		.4byte	0
 717 002c 00000000 		.4byte	0
 718              		.section	.debug_ranges,"",%progbits
 719              	.Ldebug_ranges0:
 720 0000 00000000 		.4byte	.LFB68
 721 0004 50000000 		.4byte	.LFE68
 722 0008 00000000 		.4byte	.LFB69
 723 000c 68000000 		.4byte	.LFE69
 724 0010 00000000 		.4byte	.LFB70
 725 0014 54000000 		.4byte	.LFE70
 726 0018 00000000 		.4byte	0
 727 001c 00000000 		.4byte	0
 728              		.section	.debug_line,"",%progbits
 729              	.Ldebug_line0:
 730 0000 0E020000 		.section	.debug_str,"MS",%progbits,1
 730      02009901 
 730      00000201 
 730      FB0E0D00 
 730      01010101 
 731              	.LASF11:
 732 0000 5F5F696E 		.ascii	"__int32_t\000"
 732      7433325F 
 732      7400
 733              	.LASF31:
 734 000a 78417265 		.ascii	"xAreIntegerMathsTaskStillRunning\000"
 734      496E7465 
 734      6765724D 
 734      61746873 
 734      5461736B 
 735              	.LASF26:
 736 002b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 736      4320342E 
 736      392E3320 
 736      32303135 
 736      30333033 
 737 005e 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 737      20726576 
 737      6973696F 
 737      6E203232 
 737      31323230 
 738 0091 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 738      66756E63 
 738      74696F6E 
 738      2D736563 
 738      74696F6E 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 18


 739              	.LASF13:
 740 00b9 666C6F61 		.ascii	"float\000"
 740      7400
 741              	.LASF2:
 742 00bf 756E7369 		.ascii	"unsigned char\000"
 742      676E6564 
 742      20636861 
 742      7200
 743              	.LASF6:
 744 00cd 6C6F6E67 		.ascii	"long unsigned int\000"
 744      20756E73 
 744      69676E65 
 744      6420696E 
 744      7400
 745              	.LASF4:
 746 00df 73686F72 		.ascii	"short unsigned int\000"
 746      7420756E 
 746      7369676E 
 746      65642069 
 746      6E7400
 747              	.LASF27:
 748 00f2 2E2E5C43 		.ascii	"..\\Common\\Minimal\\integer.c\000"
 748      6F6D6D6F 
 748      6E5C4D69 
 748      6E696D61 
 748      6C5C696E 
 749              	.LASF32:
 750 010e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 750      52784275 
 750      66666572 
 750      00
 751              	.LASF14:
 752 011b 646F7562 		.ascii	"double\000"
 752      6C6500
 753              	.LASF22:
 754 0122 73457272 		.ascii	"sError\000"
 754      6F7200
 755              	.LASF25:
 756 0129 78546173 		.ascii	"xTaskCheck\000"
 756      6B436865 
 756      636B00
 757              	.LASF24:
 758 0134 78526574 		.ascii	"xReturn\000"
 758      75726E00 
 759              	.LASF18:
 760 013c 75785072 		.ascii	"uxPriority\000"
 760      696F7269 
 760      747900
 761              	.LASF0:
 762 0147 756E7369 		.ascii	"unsigned int\000"
 762      676E6564 
 762      20696E74 
 762      00
 763              	.LASF8:
 764 0154 6C6F6E67 		.ascii	"long long unsigned int\000"
 764      206C6F6E 
 764      6720756E 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 19


 764      7369676E 
 764      65642069 
 765              	.LASF29:
 766 016b 76537461 		.ascii	"vStartIntegerMathTasks\000"
 766      7274496E 
 766      74656765 
 766      724D6174 
 766      68546173 
 767              	.LASF12:
 768 0182 696E7433 		.ascii	"int32_t\000"
 768      325F7400 
 769              	.LASF9:
 770 018a 73697A65 		.ascii	"sizetype\000"
 770      74797065 
 770      00
 771              	.LASF7:
 772 0193 6C6F6E67 		.ascii	"long long int\000"
 772      206C6F6E 
 772      6720696E 
 772      7400
 773              	.LASF10:
 774 01a1 63686172 		.ascii	"char\000"
 774      00
 775              	.LASF19:
 776 01a6 70765061 		.ascii	"pvParameters\000"
 776      72616D65 
 776      74657273 
 776      00
 777              	.LASF21:
 778 01b3 6C56616C 		.ascii	"lValue\000"
 778      756500
 779              	.LASF20:
 780 01ba 73546173 		.ascii	"sTask\000"
 780      6B00
 781              	.LASF3:
 782 01c0 73686F72 		.ascii	"short int\000"
 782      7420696E 
 782      7400
 783              	.LASF23:
 784 01ca 70785461 		.ascii	"pxTaskHasExecuted\000"
 784      736B4861 
 784      73457865 
 784      63757465 
 784      6400
 785              	.LASF17:
 786 01dc 5461736B 		.ascii	"TaskHandle_t\000"
 786      48616E64 
 786      6C655F74 
 786      00
 787              	.LASF5:
 788 01e9 6C6F6E67 		.ascii	"long int\000"
 788      20696E74 
 788      00
 789              	.LASF1:
 790 01f2 7369676E 		.ascii	"signed char\000"
 790      65642063 
 790      68617200 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc94eA2z.s 			page 20


 791              	.LASF30:
 792 01fe 76436F6D 		.ascii	"vCompeteingIntMathTask\000"
 792      70657465 
 792      696E6749 
 792      6E744D61 
 792      74685461 
 793              	.LASF16:
 794 0215 55426173 		.ascii	"UBaseType_t\000"
 794      65547970 
 794      655F7400 
 795              	.LASF15:
 796 0221 42617365 		.ascii	"BaseType_t\000"
 796      54797065 
 796      5F7400
 797              	.LASF28:
 798 022c 433A5C55 		.ascii	"C:\\Users\\bmt\\Documents\\GitHub\\FreeRTOS_CY8CKIT"
 798      73657273 
 798      5C626D74 
 798      5C446F63 
 798      756D656E 
 799 025a 5F303539 		.ascii	"_059\\FreeRTOS_Demo.cydsn\000"
 799      5C467265 
 799      6552544F 
 799      535F4465 
 799      6D6F2E63 
 800              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

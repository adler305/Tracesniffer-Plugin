ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"QPeek.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	xErrorDetected:
  21 0000 00000000 		.space	4
  22              		.align	2
  23              	ulLoopCounter:
  24 0004 00000000 		.space	4
  25              		.comm	xMediumPriorityTask,4,4
  26              		.comm	xHighPriorityTask,4,4
  27              		.comm	xHighestPriorityTask,4,4
  28              		.section	.rodata
  29              		.align	2
  30              	.LC0:
  31 0000 51506565 		.ascii	"QPeek_Test_Queue\000"
  31      6B5F5465 
  31      73745F51 
  31      75657565 
  31      00
  32 0011 000000   		.align	2
  33              	.LC1:
  34 0014 5065656B 		.ascii	"PeekL\000"
  34      4C00
  35 001a 0000     		.align	2
  36              	.LC2:
  37 001c 5065656B 		.ascii	"PeekM\000"
  37      4D00
  38 0022 0000     		.align	2
  39              	.LC3:
  40 0024 5065656B 		.ascii	"PeekH1\000"
  40      483100
  41 002b 00       		.align	2
  42              	.LC4:
  43 002c 5065656B 		.ascii	"PeekH2\000"
  43      483200
  44 0033 00       		.section	.text.vStartQueuePeekTasks,"ax",%progbits
  45              		.align	2
  46              		.global	vStartQueuePeekTasks
  47              		.thumb
  48              		.thumb_func
  49              		.type	vStartQueuePeekTasks, %function
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 2


  50              	vStartQueuePeekTasks:
  51              	.LFB68:
  52              		.file 1 "..\\Common\\Minimal\\QPeek.c"
   1:..\Common\Minimal/QPeek.c **** /*
   2:..\Common\Minimal/QPeek.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/QPeek.c ****     All rights reserved
   4:..\Common\Minimal/QPeek.c **** 
   5:..\Common\Minimal/QPeek.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/QPeek.c **** 
   7:..\Common\Minimal/QPeek.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/QPeek.c **** 
   9:..\Common\Minimal/QPeek.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/QPeek.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/QPeek.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/QPeek.c **** 
  13:..\Common\Minimal/QPeek.c ****     ***************************************************************************
  14:..\Common\Minimal/QPeek.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/QPeek.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/QPeek.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/QPeek.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/QPeek.c ****     ***************************************************************************
  19:..\Common\Minimal/QPeek.c **** 
  20:..\Common\Minimal/QPeek.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/QPeek.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/QPeek.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/QPeek.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/QPeek.c **** 
  25:..\Common\Minimal/QPeek.c ****     ***************************************************************************
  26:..\Common\Minimal/QPeek.c ****      *                                                                       *
  27:..\Common\Minimal/QPeek.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/QPeek.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/QPeek.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/QPeek.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/QPeek.c ****      *                                                                       *
  32:..\Common\Minimal/QPeek.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/QPeek.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/QPeek.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/QPeek.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/QPeek.c ****      *                                                                       *
  37:..\Common\Minimal/QPeek.c ****     ***************************************************************************
  38:..\Common\Minimal/QPeek.c **** 
  39:..\Common\Minimal/QPeek.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/QPeek.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/QPeek.c ****     defined configASSERT()?
  42:..\Common\Minimal/QPeek.c **** 
  43:..\Common\Minimal/QPeek.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/QPeek.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/QPeek.c ****     participating in the support forum.
  46:..\Common\Minimal/QPeek.c **** 
  47:..\Common\Minimal/QPeek.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/QPeek.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/QPeek.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/QPeek.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/QPeek.c **** 
  52:..\Common\Minimal/QPeek.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/QPeek.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/QPeek.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 3


  55:..\Common\Minimal/QPeek.c **** 
  56:..\Common\Minimal/QPeek.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/QPeek.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/QPeek.c **** 
  59:..\Common\Minimal/QPeek.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/QPeek.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/QPeek.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/QPeek.c **** 
  63:..\Common\Minimal/QPeek.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/QPeek.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/QPeek.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/QPeek.c **** 
  67:..\Common\Minimal/QPeek.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/QPeek.c **** */
  69:..\Common\Minimal/QPeek.c **** 
  70:..\Common\Minimal/QPeek.c **** 
  71:..\Common\Minimal/QPeek.c **** /*
  72:..\Common\Minimal/QPeek.c ****  * Tests the behaviour when data is peeked from a queue when there are
  73:..\Common\Minimal/QPeek.c ****  * multiple tasks blocked on the queue.
  74:..\Common\Minimal/QPeek.c ****  */
  75:..\Common\Minimal/QPeek.c **** 
  76:..\Common\Minimal/QPeek.c **** 
  77:..\Common\Minimal/QPeek.c **** #include <stdlib.h>
  78:..\Common\Minimal/QPeek.c **** 
  79:..\Common\Minimal/QPeek.c **** /* Scheduler include files. */
  80:..\Common\Minimal/QPeek.c **** #include "FreeRTOS.h"
  81:..\Common\Minimal/QPeek.c **** #include "task.h"
  82:..\Common\Minimal/QPeek.c **** #include "queue.h"
  83:..\Common\Minimal/QPeek.c **** #include "semphr.h"
  84:..\Common\Minimal/QPeek.c **** 
  85:..\Common\Minimal/QPeek.c **** /* Demo program include files. */
  86:..\Common\Minimal/QPeek.c **** #include "QPeek.h"
  87:..\Common\Minimal/QPeek.c **** 
  88:..\Common\Minimal/QPeek.c **** #define qpeekQUEUE_LENGTH		( 5 )
  89:..\Common\Minimal/QPeek.c **** #define qpeekNO_BLOCK			( 0 )
  90:..\Common\Minimal/QPeek.c **** #define qpeekSHORT_DELAY		( 10 )
  91:..\Common\Minimal/QPeek.c **** 
  92:..\Common\Minimal/QPeek.c **** #define qpeekLOW_PRIORITY			( tskIDLE_PRIORITY + 0 )
  93:..\Common\Minimal/QPeek.c **** #define qpeekMEDIUM_PRIORITY		( tskIDLE_PRIORITY + 1 )
  94:..\Common\Minimal/QPeek.c **** #define qpeekHIGH_PRIORITY			( tskIDLE_PRIORITY + 2 )
  95:..\Common\Minimal/QPeek.c **** #define qpeekHIGHEST_PRIORITY		( tskIDLE_PRIORITY + 3 )
  96:..\Common\Minimal/QPeek.c **** 
  97:..\Common\Minimal/QPeek.c **** /*-----------------------------------------------------------*/
  98:..\Common\Minimal/QPeek.c **** 
  99:..\Common\Minimal/QPeek.c **** /*
 100:..\Common\Minimal/QPeek.c ****  * The following three tasks are used to demonstrate the peeking behaviour.
 101:..\Common\Minimal/QPeek.c ****  * Each task is given a different priority to demonstrate the order in which
 102:..\Common\Minimal/QPeek.c ****  * tasks are woken as data is peeked from a queue.
 103:..\Common\Minimal/QPeek.c ****  */
 104:..\Common\Minimal/QPeek.c **** static void prvLowPriorityPeekTask( void *pvParameters );
 105:..\Common\Minimal/QPeek.c **** static void prvMediumPriorityPeekTask( void *pvParameters );
 106:..\Common\Minimal/QPeek.c **** static void prvHighPriorityPeekTask( void *pvParameters );
 107:..\Common\Minimal/QPeek.c **** static void prvHighestPriorityPeekTask( void *pvParameters );
 108:..\Common\Minimal/QPeek.c **** 
 109:..\Common\Minimal/QPeek.c **** /*-----------------------------------------------------------*/
 110:..\Common\Minimal/QPeek.c **** 
 111:..\Common\Minimal/QPeek.c **** /* Flag that will be latched to pdTRUE should any unexpected behaviour be
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 4


 112:..\Common\Minimal/QPeek.c **** detected in any of the tasks. */
 113:..\Common\Minimal/QPeek.c **** static volatile BaseType_t xErrorDetected = pdFALSE;
 114:..\Common\Minimal/QPeek.c **** 
 115:..\Common\Minimal/QPeek.c **** /* Counter that is incremented on each cycle of a test.  This is used to
 116:..\Common\Minimal/QPeek.c **** detect a stalled task - a test that is no longer running. */
 117:..\Common\Minimal/QPeek.c **** static volatile uint32_t ulLoopCounter = 0;
 118:..\Common\Minimal/QPeek.c **** 
 119:..\Common\Minimal/QPeek.c **** /* Handles to the test tasks. */
 120:..\Common\Minimal/QPeek.c **** TaskHandle_t xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
 121:..\Common\Minimal/QPeek.c **** /*-----------------------------------------------------------*/
 122:..\Common\Minimal/QPeek.c **** 
 123:..\Common\Minimal/QPeek.c **** void vStartQueuePeekTasks( void )
 124:..\Common\Minimal/QPeek.c **** {
  53              		.loc 1 124 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 8
  56              		@ frame_needed = 1, uses_anonymous_args = 0
  57 0000 80B5     		push	{r7, lr}
  58              		.cfi_def_cfa_offset 8
  59              		.cfi_offset 7, -8
  60              		.cfi_offset 14, -4
  61 0002 84B0     		sub	sp, sp, #16
  62              		.cfi_def_cfa_offset 24
  63 0004 02AF     		add	r7, sp, #8
  64              		.cfi_def_cfa 7, 16
 125:..\Common\Minimal/QPeek.c **** QueueHandle_t xQueue;
 126:..\Common\Minimal/QPeek.c **** 
 127:..\Common\Minimal/QPeek.c **** 	/* Create the queue that we are going to use for the test/demo. */
 128:..\Common\Minimal/QPeek.c **** 	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( uint32_t ) );
  65              		.loc 1 128 0
  66 0006 0520     		movs	r0, #5
  67 0008 0421     		movs	r1, #4
  68 000a 0022     		movs	r2, #0
  69 000c FFF7FEFF 		bl	xQueueGenericCreate
  70 0010 7860     		str	r0, [r7, #4]
 129:..\Common\Minimal/QPeek.c **** 
 130:..\Common\Minimal/QPeek.c **** 	if( xQueue != NULL )
  71              		.loc 1 130 0
  72 0012 7B68     		ldr	r3, [r7, #4]
  73 0014 002B     		cmp	r3, #0
  74 0016 2BD0     		beq	.L1
 131:..\Common\Minimal/QPeek.c **** 	{
 132:..\Common\Minimal/QPeek.c **** 		/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 133:..\Common\Minimal/QPeek.c **** 		in use.  The queue registry is provided as a means for kernel aware
 134:..\Common\Minimal/QPeek.c **** 		debuggers to locate queues and has no purpose if a kernel aware debugger
 135:..\Common\Minimal/QPeek.c **** 		is not being used.  The call to vQueueAddToRegistry() will be removed
 136:..\Common\Minimal/QPeek.c **** 		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 137:..\Common\Minimal/QPeek.c **** 		defined to be less than 1. */
 138:..\Common\Minimal/QPeek.c **** 		vQueueAddToRegistry( xQueue, "QPeek_Test_Queue" );
  75              		.loc 1 138 0
  76 0018 7868     		ldr	r0, [r7, #4]
  77 001a 1749     		ldr	r1, .L3
  78 001c FFF7FEFF 		bl	vQueueAddToRegistry
 139:..\Common\Minimal/QPeek.c **** 
 140:..\Common\Minimal/QPeek.c **** 		/* Create the demo tasks and pass it the queue just created.  We are
 141:..\Common\Minimal/QPeek.c **** 		passing the queue handle by value so it does not matter that it is declared
 142:..\Common\Minimal/QPeek.c **** 		on the stack here. */
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 5


 143:..\Common\Minimal/QPeek.c **** 		xTaskCreate( prvLowPriorityPeekTask, "PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekL
  79              		.loc 1 143 0
  80 0020 0023     		movs	r3, #0
  81 0022 0093     		str	r3, [sp]
  82 0024 0023     		movs	r3, #0
  83 0026 0193     		str	r3, [sp, #4]
  84 0028 1448     		ldr	r0, .L3+4
  85 002a 1549     		ldr	r1, .L3+8
  86 002c 6422     		movs	r2, #100
  87 002e 7B68     		ldr	r3, [r7, #4]
  88 0030 FFF7FEFF 		bl	xTaskCreate
 144:..\Common\Minimal/QPeek.c **** 		xTaskCreate( prvMediumPriorityPeekTask, "PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpe
  89              		.loc 1 144 0
  90 0034 0123     		movs	r3, #1
  91 0036 0093     		str	r3, [sp]
  92 0038 124B     		ldr	r3, .L3+12
  93 003a 0193     		str	r3, [sp, #4]
  94 003c 1248     		ldr	r0, .L3+16
  95 003e 1349     		ldr	r1, .L3+20
  96 0040 6422     		movs	r2, #100
  97 0042 7B68     		ldr	r3, [r7, #4]
  98 0044 FFF7FEFF 		bl	xTaskCreate
 145:..\Common\Minimal/QPeek.c **** 		xTaskCreate( prvHighPriorityPeekTask, "PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpee
  99              		.loc 1 145 0
 100 0048 0223     		movs	r3, #2
 101 004a 0093     		str	r3, [sp]
 102 004c 104B     		ldr	r3, .L3+24
 103 004e 0193     		str	r3, [sp, #4]
 104 0050 1048     		ldr	r0, .L3+28
 105 0052 1149     		ldr	r1, .L3+32
 106 0054 6422     		movs	r2, #100
 107 0056 7B68     		ldr	r3, [r7, #4]
 108 0058 FFF7FEFF 		bl	xTaskCreate
 146:..\Common\Minimal/QPeek.c **** 		xTaskCreate( prvHighestPriorityPeekTask, "PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, q
 109              		.loc 1 146 0
 110 005c 0323     		movs	r3, #3
 111 005e 0093     		str	r3, [sp]
 112 0060 0E4B     		ldr	r3, .L3+36
 113 0062 0193     		str	r3, [sp, #4]
 114 0064 0E48     		ldr	r0, .L3+40
 115 0066 0F49     		ldr	r1, .L3+44
 116 0068 6422     		movs	r2, #100
 117 006a 7B68     		ldr	r3, [r7, #4]
 118 006c FFF7FEFF 		bl	xTaskCreate
 119              	.L1:
 147:..\Common\Minimal/QPeek.c **** 	}
 148:..\Common\Minimal/QPeek.c **** }
 120              		.loc 1 148 0
 121 0070 0837     		adds	r7, r7, #8
 122              		.cfi_def_cfa_offset 8
 123 0072 BD46     		mov	sp, r7
 124              		.cfi_def_cfa_register 13
 125              		@ sp needed
 126 0074 80BD     		pop	{r7, pc}
 127              	.L4:
 128 0076 00BF     		.align	2
 129              	.L3:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 6


 130 0078 00000000 		.word	.LC0
 131 007c 00000000 		.word	prvLowPriorityPeekTask
 132 0080 14000000 		.word	.LC1
 133 0084 00000000 		.word	xMediumPriorityTask
 134 0088 00000000 		.word	prvMediumPriorityPeekTask
 135 008c 1C000000 		.word	.LC2
 136 0090 00000000 		.word	xHighPriorityTask
 137 0094 00000000 		.word	prvHighPriorityPeekTask
 138 0098 24000000 		.word	.LC3
 139 009c 00000000 		.word	xHighestPriorityTask
 140 00a0 00000000 		.word	prvHighestPriorityPeekTask
 141 00a4 2C000000 		.word	.LC4
 142              		.cfi_endproc
 143              	.LFE68:
 144              		.size	vStartQueuePeekTasks, .-vStartQueuePeekTasks
 145              		.section	.text.prvHighestPriorityPeekTask,"ax",%progbits
 146              		.align	2
 147              		.thumb
 148              		.thumb_func
 149              		.type	prvHighestPriorityPeekTask, %function
 150              	prvHighestPriorityPeekTask:
 151              	.LFB69:
 149:..\Common\Minimal/QPeek.c **** /*-----------------------------------------------------------*/
 150:..\Common\Minimal/QPeek.c **** 
 151:..\Common\Minimal/QPeek.c **** static void prvHighestPriorityPeekTask( void *pvParameters )
 152:..\Common\Minimal/QPeek.c **** {
 152              		.loc 1 152 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 16
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156 0000 80B5     		push	{r7, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 7, -8
 159              		.cfi_offset 14, -4
 160 0002 84B0     		sub	sp, sp, #16
 161              		.cfi_def_cfa_offset 24
 162 0004 00AF     		add	r7, sp, #0
 163              		.cfi_def_cfa_register 7
 164 0006 7860     		str	r0, [r7, #4]
 153:..\Common\Minimal/QPeek.c **** QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 165              		.loc 1 153 0
 166 0008 7B68     		ldr	r3, [r7, #4]
 167 000a FB60     		str	r3, [r7, #12]
 168              	.L16:
 154:..\Common\Minimal/QPeek.c **** uint32_t ulValue;
 155:..\Common\Minimal/QPeek.c **** 
 156:..\Common\Minimal/QPeek.c **** 	#ifdef USE_STDIO
 157:..\Common\Minimal/QPeek.c **** 	{
 158:..\Common\Minimal/QPeek.c **** 		void vPrintDisplayMessage( const char * const * ppcMessageToSend );
 159:..\Common\Minimal/QPeek.c **** 
 160:..\Common\Minimal/QPeek.c **** 		const char * const pcTaskStartMsg = "Queue peek test started.\r\n";
 161:..\Common\Minimal/QPeek.c **** 
 162:..\Common\Minimal/QPeek.c **** 		/* Queue a message for printing to say the task has started. */
 163:..\Common\Minimal/QPeek.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 164:..\Common\Minimal/QPeek.c **** 	}
 165:..\Common\Minimal/QPeek.c **** 	#endif
 166:..\Common\Minimal/QPeek.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 7


 167:..\Common\Minimal/QPeek.c **** 	for( ;; )
 168:..\Common\Minimal/QPeek.c **** 	{
 169:..\Common\Minimal/QPeek.c **** 		/* Try peeking from the queue.  The queue should be empty so we will
 170:..\Common\Minimal/QPeek.c **** 		block, allowing the high priority task to execute. */
 171:..\Common\Minimal/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 169              		.loc 1 171 0
 170 000c 07F10803 		add	r3, r7, #8
 171 0010 F868     		ldr	r0, [r7, #12]
 172 0012 1946     		mov	r1, r3
 173 0014 4FF0FF32 		mov	r2, #-1
 174 0018 0123     		movs	r3, #1
 175 001a FFF7FEFF 		bl	xQueueGenericReceive
 176 001e 0346     		mov	r3, r0
 177 0020 012B     		cmp	r3, #1
 178 0022 02D0     		beq	.L6
 172:..\Common\Minimal/QPeek.c **** 		{
 173:..\Common\Minimal/QPeek.c **** 			/* We expected to have received something by the time we unblock. */
 174:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 179              		.loc 1 174 0
 180 0024 324B     		ldr	r3, .L17
 181 0026 0122     		movs	r2, #1
 182 0028 1A60     		str	r2, [r3]
 183              	.L6:
 175:..\Common\Minimal/QPeek.c **** 		}
 176:..\Common\Minimal/QPeek.c **** 
 177:..\Common\Minimal/QPeek.c **** 		/* When we reach here the high and medium priority tasks should still
 178:..\Common\Minimal/QPeek.c **** 		be blocked on the queue.  We unblocked because the low priority task
 179:..\Common\Minimal/QPeek.c **** 		wrote a value to the queue, which we should have peeked.  Peeking the
 180:..\Common\Minimal/QPeek.c **** 		data (rather than receiving it) will leave the data on the queue, so
 181:..\Common\Minimal/QPeek.c **** 		the high priority task should then have also been unblocked, but not
 182:..\Common\Minimal/QPeek.c **** 		yet executed. */
 183:..\Common\Minimal/QPeek.c **** 		if( ulValue != 0x11223344 )
 184              		.loc 1 183 0
 185 002a BB68     		ldr	r3, [r7, #8]
 186 002c 314A     		ldr	r2, .L17+4
 187 002e 9342     		cmp	r3, r2
 188 0030 02D0     		beq	.L7
 184:..\Common\Minimal/QPeek.c **** 		{
 185:..\Common\Minimal/QPeek.c **** 			/* We did not receive the expected value. */
 186:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 189              		.loc 1 186 0
 190 0032 2F4B     		ldr	r3, .L17
 191 0034 0122     		movs	r2, #1
 192 0036 1A60     		str	r2, [r3]
 193              	.L7:
 187:..\Common\Minimal/QPeek.c **** 		}
 188:..\Common\Minimal/QPeek.c **** 
 189:..\Common\Minimal/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 194              		.loc 1 189 0
 195 0038 F868     		ldr	r0, [r7, #12]
 196 003a FFF7FEFF 		bl	uxQueueMessagesWaiting
 197 003e 0346     		mov	r3, r0
 198 0040 012B     		cmp	r3, #1
 199 0042 02D0     		beq	.L8
 190:..\Common\Minimal/QPeek.c **** 		{
 191:..\Common\Minimal/QPeek.c **** 			/* The message should have been left on the queue. */
 192:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 8


 200              		.loc 1 192 0
 201 0044 2A4B     		ldr	r3, .L17
 202 0046 0122     		movs	r2, #1
 203 0048 1A60     		str	r2, [r3]
 204              	.L8:
 193:..\Common\Minimal/QPeek.c **** 		}
 194:..\Common\Minimal/QPeek.c **** 
 195:..\Common\Minimal/QPeek.c **** 		/* Now we are going to actually receive the data, so when the high
 196:..\Common\Minimal/QPeek.c **** 		priority task runs it will find the queue empty and return to the
 197:..\Common\Minimal/QPeek.c **** 		blocked state. */
 198:..\Common\Minimal/QPeek.c **** 		ulValue = 0;
 205              		.loc 1 198 0
 206 004a 0023     		movs	r3, #0
 207 004c BB60     		str	r3, [r7, #8]
 199:..\Common\Minimal/QPeek.c **** 		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 208              		.loc 1 199 0
 209 004e 07F10803 		add	r3, r7, #8
 210 0052 F868     		ldr	r0, [r7, #12]
 211 0054 1946     		mov	r1, r3
 212 0056 0022     		movs	r2, #0
 213 0058 0023     		movs	r3, #0
 214 005a FFF7FEFF 		bl	xQueueGenericReceive
 215 005e 0346     		mov	r3, r0
 216 0060 012B     		cmp	r3, #1
 217 0062 02D0     		beq	.L9
 200:..\Common\Minimal/QPeek.c **** 		{
 201:..\Common\Minimal/QPeek.c **** 			/* We expected to receive the value. */
 202:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 218              		.loc 1 202 0
 219 0064 224B     		ldr	r3, .L17
 220 0066 0122     		movs	r2, #1
 221 0068 1A60     		str	r2, [r3]
 222              	.L9:
 203:..\Common\Minimal/QPeek.c **** 		}
 204:..\Common\Minimal/QPeek.c **** 
 205:..\Common\Minimal/QPeek.c **** 		if( ulValue != 0x11223344 )
 223              		.loc 1 205 0
 224 006a BB68     		ldr	r3, [r7, #8]
 225 006c 214A     		ldr	r2, .L17+4
 226 006e 9342     		cmp	r3, r2
 227 0070 02D0     		beq	.L10
 206:..\Common\Minimal/QPeek.c **** 		{
 207:..\Common\Minimal/QPeek.c **** 			/* We did not receive the expected value - which should have been
 208:..\Common\Minimal/QPeek.c **** 			the same value as was peeked. */
 209:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 228              		.loc 1 209 0
 229 0072 1F4B     		ldr	r3, .L17
 230 0074 0122     		movs	r2, #1
 231 0076 1A60     		str	r2, [r3]
 232              	.L10:
 210:..\Common\Minimal/QPeek.c **** 		}
 211:..\Common\Minimal/QPeek.c **** 
 212:..\Common\Minimal/QPeek.c **** 		/* Now we will block again as the queue is once more empty.  The low
 213:..\Common\Minimal/QPeek.c **** 		priority task can then execute again. */
 214:..\Common\Minimal/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 233              		.loc 1 214 0
 234 0078 07F10803 		add	r3, r7, #8
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 9


 235 007c F868     		ldr	r0, [r7, #12]
 236 007e 1946     		mov	r1, r3
 237 0080 4FF0FF32 		mov	r2, #-1
 238 0084 0123     		movs	r3, #1
 239 0086 FFF7FEFF 		bl	xQueueGenericReceive
 240 008a 0346     		mov	r3, r0
 241 008c 012B     		cmp	r3, #1
 242 008e 02D0     		beq	.L11
 215:..\Common\Minimal/QPeek.c **** 		{
 216:..\Common\Minimal/QPeek.c **** 			/* We expected to have received something by the time we unblock. */
 217:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 243              		.loc 1 217 0
 244 0090 174B     		ldr	r3, .L17
 245 0092 0122     		movs	r2, #1
 246 0094 1A60     		str	r2, [r3]
 247              	.L11:
 218:..\Common\Minimal/QPeek.c **** 		}
 219:..\Common\Minimal/QPeek.c **** 
 220:..\Common\Minimal/QPeek.c **** 		/* When we get here the low priority task should have again written to the
 221:..\Common\Minimal/QPeek.c **** 		queue. */
 222:..\Common\Minimal/QPeek.c **** 		if( ulValue != 0x01234567 )
 248              		.loc 1 222 0
 249 0096 BB68     		ldr	r3, [r7, #8]
 250 0098 174A     		ldr	r2, .L17+8
 251 009a 9342     		cmp	r3, r2
 252 009c 02D0     		beq	.L12
 223:..\Common\Minimal/QPeek.c **** 		{
 224:..\Common\Minimal/QPeek.c **** 			/* We did not receive the expected value. */
 225:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 253              		.loc 1 225 0
 254 009e 144B     		ldr	r3, .L17
 255 00a0 0122     		movs	r2, #1
 256 00a2 1A60     		str	r2, [r3]
 257              	.L12:
 226:..\Common\Minimal/QPeek.c **** 		}
 227:..\Common\Minimal/QPeek.c **** 
 228:..\Common\Minimal/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 258              		.loc 1 228 0
 259 00a4 F868     		ldr	r0, [r7, #12]
 260 00a6 FFF7FEFF 		bl	uxQueueMessagesWaiting
 261 00aa 0346     		mov	r3, r0
 262 00ac 012B     		cmp	r3, #1
 263 00ae 02D0     		beq	.L13
 229:..\Common\Minimal/QPeek.c **** 		{
 230:..\Common\Minimal/QPeek.c **** 			/* The message should have been left on the queue. */
 231:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 264              		.loc 1 231 0
 265 00b0 0F4B     		ldr	r3, .L17
 266 00b2 0122     		movs	r2, #1
 267 00b4 1A60     		str	r2, [r3]
 268              	.L13:
 232:..\Common\Minimal/QPeek.c **** 		}
 233:..\Common\Minimal/QPeek.c **** 
 234:..\Common\Minimal/QPeek.c **** 		/* We only peeked the data, so suspending ourselves now should enable
 235:..\Common\Minimal/QPeek.c **** 		the high priority task to also peek the data.  The high priority task
 236:..\Common\Minimal/QPeek.c **** 		will have been unblocked when we peeked the data as we left the data
 237:..\Common\Minimal/QPeek.c **** 		in the queue. */
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 10


 238:..\Common\Minimal/QPeek.c **** 		vTaskSuspend( NULL );
 269              		.loc 1 238 0
 270 00b6 0020     		movs	r0, #0
 271 00b8 FFF7FEFF 		bl	vTaskSuspend
 239:..\Common\Minimal/QPeek.c **** 
 240:..\Common\Minimal/QPeek.c **** 
 241:..\Common\Minimal/QPeek.c **** 
 242:..\Common\Minimal/QPeek.c **** 		/* This time we are going to do the same as the above test, but the
 243:..\Common\Minimal/QPeek.c **** 		high priority task is going to receive the data, rather than peek it.
 244:..\Common\Minimal/QPeek.c **** 		This means that the medium priority task should never peek the value. */
 245:..\Common\Minimal/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 272              		.loc 1 245 0
 273 00bc 07F10803 		add	r3, r7, #8
 274 00c0 F868     		ldr	r0, [r7, #12]
 275 00c2 1946     		mov	r1, r3
 276 00c4 4FF0FF32 		mov	r2, #-1
 277 00c8 0123     		movs	r3, #1
 278 00ca FFF7FEFF 		bl	xQueueGenericReceive
 279 00ce 0346     		mov	r3, r0
 280 00d0 012B     		cmp	r3, #1
 281 00d2 02D0     		beq	.L14
 246:..\Common\Minimal/QPeek.c **** 		{
 247:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 282              		.loc 1 247 0
 283 00d4 064B     		ldr	r3, .L17
 284 00d6 0122     		movs	r2, #1
 285 00d8 1A60     		str	r2, [r3]
 286              	.L14:
 248:..\Common\Minimal/QPeek.c **** 		}
 249:..\Common\Minimal/QPeek.c **** 
 250:..\Common\Minimal/QPeek.c **** 		if( ulValue != 0xaabbaabb )
 287              		.loc 1 250 0
 288 00da BB68     		ldr	r3, [r7, #8]
 289 00dc 074A     		ldr	r2, .L17+12
 290 00de 9342     		cmp	r3, r2
 291 00e0 02D0     		beq	.L15
 251:..\Common\Minimal/QPeek.c **** 		{
 252:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 292              		.loc 1 252 0
 293 00e2 034B     		ldr	r3, .L17
 294 00e4 0122     		movs	r2, #1
 295 00e6 1A60     		str	r2, [r3]
 296              	.L15:
 253:..\Common\Minimal/QPeek.c **** 		}
 254:..\Common\Minimal/QPeek.c **** 
 255:..\Common\Minimal/QPeek.c **** 		vTaskSuspend( NULL );
 297              		.loc 1 255 0
 298 00e8 0020     		movs	r0, #0
 299 00ea FFF7FEFF 		bl	vTaskSuspend
 256:..\Common\Minimal/QPeek.c **** 	}
 300              		.loc 1 256 0
 301 00ee 8DE7     		b	.L16
 302              	.L18:
 303              		.align	2
 304              	.L17:
 305 00f0 00000000 		.word	xErrorDetected
 306 00f4 44332211 		.word	287454020
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 11


 307 00f8 67452301 		.word	19088743
 308 00fc BBAABBAA 		.word	-1430541637
 309              		.cfi_endproc
 310              	.LFE69:
 311              		.size	prvHighestPriorityPeekTask, .-prvHighestPriorityPeekTask
 312              		.section	.text.prvHighPriorityPeekTask,"ax",%progbits
 313              		.align	2
 314              		.thumb
 315              		.thumb_func
 316              		.type	prvHighPriorityPeekTask, %function
 317              	prvHighPriorityPeekTask:
 318              	.LFB70:
 257:..\Common\Minimal/QPeek.c **** }
 258:..\Common\Minimal/QPeek.c **** /*-----------------------------------------------------------*/
 259:..\Common\Minimal/QPeek.c **** 
 260:..\Common\Minimal/QPeek.c **** static void prvHighPriorityPeekTask( void *pvParameters )
 261:..\Common\Minimal/QPeek.c **** {
 319              		.loc 1 261 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 16
 322              		@ frame_needed = 1, uses_anonymous_args = 0
 323 0000 80B5     		push	{r7, lr}
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 7, -8
 326              		.cfi_offset 14, -4
 327 0002 84B0     		sub	sp, sp, #16
 328              		.cfi_def_cfa_offset 24
 329 0004 00AF     		add	r7, sp, #0
 330              		.cfi_def_cfa_register 7
 331 0006 7860     		str	r0, [r7, #4]
 262:..\Common\Minimal/QPeek.c **** QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 332              		.loc 1 262 0
 333 0008 7B68     		ldr	r3, [r7, #4]
 334 000a FB60     		str	r3, [r7, #12]
 335              	.L25:
 263:..\Common\Minimal/QPeek.c **** uint32_t ulValue;
 264:..\Common\Minimal/QPeek.c **** 
 265:..\Common\Minimal/QPeek.c **** 	for( ;; )
 266:..\Common\Minimal/QPeek.c **** 	{
 267:..\Common\Minimal/QPeek.c **** 		/* Try peeking from the queue.  The queue should be empty so we will
 268:..\Common\Minimal/QPeek.c **** 		block, allowing the medium priority task to execute.  Both the high
 269:..\Common\Minimal/QPeek.c **** 		and highest priority tasks will then be blocked on the queue. */
 270:..\Common\Minimal/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 336              		.loc 1 270 0
 337 000c 07F10803 		add	r3, r7, #8
 338 0010 F868     		ldr	r0, [r7, #12]
 339 0012 1946     		mov	r1, r3
 340 0014 4FF0FF32 		mov	r2, #-1
 341 0018 0123     		movs	r3, #1
 342 001a FFF7FEFF 		bl	xQueueGenericReceive
 343 001e 0346     		mov	r3, r0
 344 0020 012B     		cmp	r3, #1
 345 0022 02D0     		beq	.L20
 271:..\Common\Minimal/QPeek.c **** 		{
 272:..\Common\Minimal/QPeek.c **** 			/* We expected to have received something by the time we unblock. */
 273:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 346              		.loc 1 273 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 12


 347 0024 174B     		ldr	r3, .L26
 348 0026 0122     		movs	r2, #1
 349 0028 1A60     		str	r2, [r3]
 350              	.L20:
 274:..\Common\Minimal/QPeek.c **** 		}
 275:..\Common\Minimal/QPeek.c **** 
 276:..\Common\Minimal/QPeek.c **** 		/* When we get here the highest priority task should have peeked the data
 277:..\Common\Minimal/QPeek.c **** 		(unblocking this task) then suspended (allowing this task to also peek
 278:..\Common\Minimal/QPeek.c **** 		the data). */
 279:..\Common\Minimal/QPeek.c **** 		if( ulValue != 0x01234567 )
 351              		.loc 1 279 0
 352 002a BB68     		ldr	r3, [r7, #8]
 353 002c 164A     		ldr	r2, .L26+4
 354 002e 9342     		cmp	r3, r2
 355 0030 02D0     		beq	.L21
 280:..\Common\Minimal/QPeek.c **** 		{
 281:..\Common\Minimal/QPeek.c **** 			/* We did not receive the expected value. */
 282:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 356              		.loc 1 282 0
 357 0032 144B     		ldr	r3, .L26
 358 0034 0122     		movs	r2, #1
 359 0036 1A60     		str	r2, [r3]
 360              	.L21:
 283:..\Common\Minimal/QPeek.c **** 		}
 284:..\Common\Minimal/QPeek.c **** 
 285:..\Common\Minimal/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 361              		.loc 1 285 0
 362 0038 F868     		ldr	r0, [r7, #12]
 363 003a FFF7FEFF 		bl	uxQueueMessagesWaiting
 364 003e 0346     		mov	r3, r0
 365 0040 012B     		cmp	r3, #1
 366 0042 02D0     		beq	.L22
 286:..\Common\Minimal/QPeek.c **** 		{
 287:..\Common\Minimal/QPeek.c **** 			/* The message should have been left on the queue. */
 288:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 367              		.loc 1 288 0
 368 0044 0F4B     		ldr	r3, .L26
 369 0046 0122     		movs	r2, #1
 370 0048 1A60     		str	r2, [r3]
 371              	.L22:
 289:..\Common\Minimal/QPeek.c **** 		}
 290:..\Common\Minimal/QPeek.c **** 
 291:..\Common\Minimal/QPeek.c **** 		/* We only peeked the data, so suspending ourselves now should enable
 292:..\Common\Minimal/QPeek.c **** 		the medium priority task to also peek the data.  The medium priority task
 293:..\Common\Minimal/QPeek.c **** 		will have been unblocked when we peeked the data as we left the data
 294:..\Common\Minimal/QPeek.c **** 		in the queue. */
 295:..\Common\Minimal/QPeek.c **** 		vTaskSuspend( NULL );
 372              		.loc 1 295 0
 373 004a 0020     		movs	r0, #0
 374 004c FFF7FEFF 		bl	vTaskSuspend
 296:..\Common\Minimal/QPeek.c **** 
 297:..\Common\Minimal/QPeek.c **** 
 298:..\Common\Minimal/QPeek.c **** 		/* This time we are going actually receive the value, so the medium
 299:..\Common\Minimal/QPeek.c **** 		priority task will never peek the data - we removed it from the queue. */
 300:..\Common\Minimal/QPeek.c **** 		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 375              		.loc 1 300 0
 376 0050 07F10803 		add	r3, r7, #8
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 13


 377 0054 F868     		ldr	r0, [r7, #12]
 378 0056 1946     		mov	r1, r3
 379 0058 4FF0FF32 		mov	r2, #-1
 380 005c 0023     		movs	r3, #0
 381 005e FFF7FEFF 		bl	xQueueGenericReceive
 382 0062 0346     		mov	r3, r0
 383 0064 012B     		cmp	r3, #1
 384 0066 02D0     		beq	.L23
 301:..\Common\Minimal/QPeek.c **** 		{
 302:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 385              		.loc 1 302 0
 386 0068 064B     		ldr	r3, .L26
 387 006a 0122     		movs	r2, #1
 388 006c 1A60     		str	r2, [r3]
 389              	.L23:
 303:..\Common\Minimal/QPeek.c **** 		}
 304:..\Common\Minimal/QPeek.c **** 
 305:..\Common\Minimal/QPeek.c **** 		if( ulValue != 0xaabbaabb )
 390              		.loc 1 305 0
 391 006e BB68     		ldr	r3, [r7, #8]
 392 0070 064A     		ldr	r2, .L26+8
 393 0072 9342     		cmp	r3, r2
 394 0074 02D0     		beq	.L24
 306:..\Common\Minimal/QPeek.c **** 		{
 307:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 395              		.loc 1 307 0
 396 0076 034B     		ldr	r3, .L26
 397 0078 0122     		movs	r2, #1
 398 007a 1A60     		str	r2, [r3]
 399              	.L24:
 308:..\Common\Minimal/QPeek.c **** 		}
 309:..\Common\Minimal/QPeek.c **** 
 310:..\Common\Minimal/QPeek.c **** 		vTaskSuspend( NULL );
 400              		.loc 1 310 0
 401 007c 0020     		movs	r0, #0
 402 007e FFF7FEFF 		bl	vTaskSuspend
 311:..\Common\Minimal/QPeek.c **** 	}
 403              		.loc 1 311 0
 404 0082 C3E7     		b	.L25
 405              	.L27:
 406              		.align	2
 407              	.L26:
 408 0084 00000000 		.word	xErrorDetected
 409 0088 67452301 		.word	19088743
 410 008c BBAABBAA 		.word	-1430541637
 411              		.cfi_endproc
 412              	.LFE70:
 413              		.size	prvHighPriorityPeekTask, .-prvHighPriorityPeekTask
 414              		.section	.text.prvMediumPriorityPeekTask,"ax",%progbits
 415              		.align	2
 416              		.thumb
 417              		.thumb_func
 418              		.type	prvMediumPriorityPeekTask, %function
 419              	prvMediumPriorityPeekTask:
 420              	.LFB71:
 312:..\Common\Minimal/QPeek.c **** }
 313:..\Common\Minimal/QPeek.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 14


 314:..\Common\Minimal/QPeek.c **** 
 315:..\Common\Minimal/QPeek.c **** static void prvMediumPriorityPeekTask( void *pvParameters )
 316:..\Common\Minimal/QPeek.c **** {
 421              		.loc 1 316 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 16
 424              		@ frame_needed = 1, uses_anonymous_args = 0
 425 0000 80B5     		push	{r7, lr}
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 7, -8
 428              		.cfi_offset 14, -4
 429 0002 84B0     		sub	sp, sp, #16
 430              		.cfi_def_cfa_offset 24
 431 0004 00AF     		add	r7, sp, #0
 432              		.cfi_def_cfa_register 7
 433 0006 7860     		str	r0, [r7, #4]
 317:..\Common\Minimal/QPeek.c **** QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 434              		.loc 1 317 0
 435 0008 7B68     		ldr	r3, [r7, #4]
 436 000a FB60     		str	r3, [r7, #12]
 437              	.L32:
 318:..\Common\Minimal/QPeek.c **** uint32_t ulValue;
 319:..\Common\Minimal/QPeek.c **** 
 320:..\Common\Minimal/QPeek.c **** 	for( ;; )
 321:..\Common\Minimal/QPeek.c **** 	{
 322:..\Common\Minimal/QPeek.c **** 		/* Try peeking from the queue.  The queue should be empty so we will
 323:..\Common\Minimal/QPeek.c **** 		block, allowing the low priority task to execute.  The highest, high
 324:..\Common\Minimal/QPeek.c **** 		and medium priority tasks will then all be blocked on the queue. */
 325:..\Common\Minimal/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
 438              		.loc 1 325 0
 439 000c 07F10803 		add	r3, r7, #8
 440 0010 F868     		ldr	r0, [r7, #12]
 441 0012 1946     		mov	r1, r3
 442 0014 4FF0FF32 		mov	r2, #-1
 443 0018 0123     		movs	r3, #1
 444 001a FFF7FEFF 		bl	xQueueGenericReceive
 445 001e 0346     		mov	r3, r0
 446 0020 012B     		cmp	r3, #1
 447 0022 02D0     		beq	.L29
 326:..\Common\Minimal/QPeek.c **** 		{
 327:..\Common\Minimal/QPeek.c **** 			/* We expected to have received something by the time we unblock. */
 328:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 448              		.loc 1 328 0
 449 0024 0D4B     		ldr	r3, .L33
 450 0026 0122     		movs	r2, #1
 451 0028 1A60     		str	r2, [r3]
 452              	.L29:
 329:..\Common\Minimal/QPeek.c **** 		}
 330:..\Common\Minimal/QPeek.c **** 
 331:..\Common\Minimal/QPeek.c **** 		/* When we get here the high priority task should have peeked the data
 332:..\Common\Minimal/QPeek.c **** 		(unblocking this task) then suspended (allowing this task to also peek
 333:..\Common\Minimal/QPeek.c **** 		the data). */
 334:..\Common\Minimal/QPeek.c **** 		if( ulValue != 0x01234567 )
 453              		.loc 1 334 0
 454 002a BB68     		ldr	r3, [r7, #8]
 455 002c 0C4A     		ldr	r2, .L33+4
 456 002e 9342     		cmp	r3, r2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 15


 457 0030 02D0     		beq	.L30
 335:..\Common\Minimal/QPeek.c **** 		{
 336:..\Common\Minimal/QPeek.c **** 			/* We did not receive the expected value. */
 337:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 458              		.loc 1 337 0
 459 0032 0A4B     		ldr	r3, .L33
 460 0034 0122     		movs	r2, #1
 461 0036 1A60     		str	r2, [r3]
 462              	.L30:
 338:..\Common\Minimal/QPeek.c **** 		}
 339:..\Common\Minimal/QPeek.c **** 
 340:..\Common\Minimal/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 463              		.loc 1 340 0
 464 0038 F868     		ldr	r0, [r7, #12]
 465 003a FFF7FEFF 		bl	uxQueueMessagesWaiting
 466 003e 0346     		mov	r3, r0
 467 0040 012B     		cmp	r3, #1
 468 0042 02D0     		beq	.L31
 341:..\Common\Minimal/QPeek.c **** 		{
 342:..\Common\Minimal/QPeek.c **** 			/* The message should have been left on the queue. */
 343:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 469              		.loc 1 343 0
 470 0044 054B     		ldr	r3, .L33
 471 0046 0122     		movs	r2, #1
 472 0048 1A60     		str	r2, [r3]
 473              	.L31:
 344:..\Common\Minimal/QPeek.c **** 		}
 345:..\Common\Minimal/QPeek.c **** 
 346:..\Common\Minimal/QPeek.c **** 		/* Just so we know the test is still running. */
 347:..\Common\Minimal/QPeek.c **** 		ulLoopCounter++;
 474              		.loc 1 347 0
 475 004a 064B     		ldr	r3, .L33+8
 476 004c 1B68     		ldr	r3, [r3]
 477 004e 0133     		adds	r3, r3, #1
 478 0050 044A     		ldr	r2, .L33+8
 479 0052 1360     		str	r3, [r2]
 348:..\Common\Minimal/QPeek.c **** 
 349:..\Common\Minimal/QPeek.c **** 		/* Now we can suspend ourselves so the low priority task can execute
 350:..\Common\Minimal/QPeek.c **** 		again. */
 351:..\Common\Minimal/QPeek.c **** 		vTaskSuspend( NULL );
 480              		.loc 1 351 0
 481 0054 0020     		movs	r0, #0
 482 0056 FFF7FEFF 		bl	vTaskSuspend
 352:..\Common\Minimal/QPeek.c **** 	}
 483              		.loc 1 352 0
 484 005a D7E7     		b	.L32
 485              	.L34:
 486              		.align	2
 487              	.L33:
 488 005c 00000000 		.word	xErrorDetected
 489 0060 67452301 		.word	19088743
 490 0064 04000000 		.word	ulLoopCounter
 491              		.cfi_endproc
 492              	.LFE71:
 493              		.size	prvMediumPriorityPeekTask, .-prvMediumPriorityPeekTask
 494              		.section	.text.prvLowPriorityPeekTask,"ax",%progbits
 495              		.align	2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 16


 496              		.thumb
 497              		.thumb_func
 498              		.type	prvLowPriorityPeekTask, %function
 499              	prvLowPriorityPeekTask:
 500              	.LFB72:
 353:..\Common\Minimal/QPeek.c **** }
 354:..\Common\Minimal/QPeek.c **** /*-----------------------------------------------------------*/
 355:..\Common\Minimal/QPeek.c **** 
 356:..\Common\Minimal/QPeek.c **** static void prvLowPriorityPeekTask( void *pvParameters )
 357:..\Common\Minimal/QPeek.c **** {
 501              		.loc 1 357 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 16
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505 0000 80B5     		push	{r7, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0002 84B0     		sub	sp, sp, #16
 510              		.cfi_def_cfa_offset 24
 511 0004 00AF     		add	r7, sp, #0
 512              		.cfi_def_cfa_register 7
 513 0006 7860     		str	r0, [r7, #4]
 358:..\Common\Minimal/QPeek.c **** QueueHandle_t xQueue = ( QueueHandle_t ) pvParameters;
 514              		.loc 1 358 0
 515 0008 7B68     		ldr	r3, [r7, #4]
 516 000a FB60     		str	r3, [r7, #12]
 517              	.L42:
 359:..\Common\Minimal/QPeek.c **** uint32_t ulValue;
 360:..\Common\Minimal/QPeek.c **** 
 361:..\Common\Minimal/QPeek.c **** 	for( ;; )
 362:..\Common\Minimal/QPeek.c **** 	{
 363:..\Common\Minimal/QPeek.c **** 		/* Write some data to the queue.  This should unblock the highest
 364:..\Common\Minimal/QPeek.c **** 		priority task that is waiting to peek data from the queue. */
 365:..\Common\Minimal/QPeek.c **** 		ulValue = 0x11223344;
 518              		.loc 1 365 0
 519 000c 3B4B     		ldr	r3, .L43
 520 000e BB60     		str	r3, [r7, #8]
 366:..\Common\Minimal/QPeek.c **** 		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 521              		.loc 1 366 0
 522 0010 07F10803 		add	r3, r7, #8
 523 0014 F868     		ldr	r0, [r7, #12]
 524 0016 1946     		mov	r1, r3
 525 0018 0022     		movs	r2, #0
 526 001a 0023     		movs	r3, #0
 527 001c FFF7FEFF 		bl	xQueueGenericSend
 528 0020 0346     		mov	r3, r0
 529 0022 012B     		cmp	r3, #1
 530 0024 02D0     		beq	.L36
 367:..\Common\Minimal/QPeek.c **** 		{
 368:..\Common\Minimal/QPeek.c **** 			/* We were expecting the queue to be empty so we should not of
 369:..\Common\Minimal/QPeek.c **** 			had a problem writing to the queue. */
 370:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 531              		.loc 1 370 0
 532 0026 364B     		ldr	r3, .L43+4
 533 0028 0122     		movs	r2, #1
 534 002a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 17


 535              	.L36:
 371:..\Common\Minimal/QPeek.c **** 		}
 372:..\Common\Minimal/QPeek.c **** 
 373:..\Common\Minimal/QPeek.c **** 		#if configUSE_PREEMPTION == 0
 374:..\Common\Minimal/QPeek.c **** 			taskYIELD();
 375:..\Common\Minimal/QPeek.c **** 		#endif
 376:..\Common\Minimal/QPeek.c **** 
 377:..\Common\Minimal/QPeek.c **** 		/* By the time we get here the data should have been removed from
 378:..\Common\Minimal/QPeek.c **** 		the queue. */
 379:..\Common\Minimal/QPeek.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 536              		.loc 1 379 0
 537 002c F868     		ldr	r0, [r7, #12]
 538 002e FFF7FEFF 		bl	uxQueueMessagesWaiting
 539 0032 0346     		mov	r3, r0
 540 0034 002B     		cmp	r3, #0
 541 0036 02D0     		beq	.L37
 380:..\Common\Minimal/QPeek.c **** 		{
 381:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 542              		.loc 1 381 0
 543 0038 314B     		ldr	r3, .L43+4
 544 003a 0122     		movs	r2, #1
 545 003c 1A60     		str	r2, [r3]
 546              	.L37:
 382:..\Common\Minimal/QPeek.c **** 		}
 383:..\Common\Minimal/QPeek.c **** 
 384:..\Common\Minimal/QPeek.c **** 		/* Write another value to the queue, again waking the highest priority
 385:..\Common\Minimal/QPeek.c **** 		task that is blocked on the queue. */
 386:..\Common\Minimal/QPeek.c **** 		ulValue = 0x01234567;
 547              		.loc 1 386 0
 548 003e 314B     		ldr	r3, .L43+8
 549 0040 BB60     		str	r3, [r7, #8]
 387:..\Common\Minimal/QPeek.c **** 		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 550              		.loc 1 387 0
 551 0042 07F10803 		add	r3, r7, #8
 552 0046 F868     		ldr	r0, [r7, #12]
 553 0048 1946     		mov	r1, r3
 554 004a 0022     		movs	r2, #0
 555 004c 0023     		movs	r3, #0
 556 004e FFF7FEFF 		bl	xQueueGenericSend
 557 0052 0346     		mov	r3, r0
 558 0054 012B     		cmp	r3, #1
 559 0056 02D0     		beq	.L38
 388:..\Common\Minimal/QPeek.c **** 		{
 389:..\Common\Minimal/QPeek.c **** 			/* We were expecting the queue to be empty so we should not of
 390:..\Common\Minimal/QPeek.c **** 			had a problem writing to the queue. */
 391:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 560              		.loc 1 391 0
 561 0058 294B     		ldr	r3, .L43+4
 562 005a 0122     		movs	r2, #1
 563 005c 1A60     		str	r2, [r3]
 564              	.L38:
 392:..\Common\Minimal/QPeek.c **** 		}
 393:..\Common\Minimal/QPeek.c **** 
 394:..\Common\Minimal/QPeek.c **** 		#if configUSE_PREEMPTION == 0
 395:..\Common\Minimal/QPeek.c **** 			taskYIELD();
 396:..\Common\Minimal/QPeek.c **** 		#endif
 397:..\Common\Minimal/QPeek.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 18


 398:..\Common\Minimal/QPeek.c **** 		/* All the other tasks should now have successfully peeked the data.
 399:..\Common\Minimal/QPeek.c **** 		The data is still in the queue so we should be able to receive it. */
 400:..\Common\Minimal/QPeek.c **** 		ulValue = 0;
 565              		.loc 1 400 0
 566 005e 0023     		movs	r3, #0
 567 0060 BB60     		str	r3, [r7, #8]
 401:..\Common\Minimal/QPeek.c **** 		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 568              		.loc 1 401 0
 569 0062 07F10803 		add	r3, r7, #8
 570 0066 F868     		ldr	r0, [r7, #12]
 571 0068 1946     		mov	r1, r3
 572 006a 0022     		movs	r2, #0
 573 006c 0023     		movs	r3, #0
 574 006e FFF7FEFF 		bl	xQueueGenericReceive
 575 0072 0346     		mov	r3, r0
 576 0074 012B     		cmp	r3, #1
 577 0076 02D0     		beq	.L39
 402:..\Common\Minimal/QPeek.c **** 		{
 403:..\Common\Minimal/QPeek.c **** 			/* We expected to receive the data. */
 404:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 578              		.loc 1 404 0
 579 0078 214B     		ldr	r3, .L43+4
 580 007a 0122     		movs	r2, #1
 581 007c 1A60     		str	r2, [r3]
 582              	.L39:
 405:..\Common\Minimal/QPeek.c **** 		}
 406:..\Common\Minimal/QPeek.c **** 
 407:..\Common\Minimal/QPeek.c **** 		if( ulValue != 0x01234567 )
 408:..\Common\Minimal/QPeek.c **** 		{
 409:..\Common\Minimal/QPeek.c **** 			/* We did not receive the expected value. */
 410:..\Common\Minimal/QPeek.c **** 		}
 411:..\Common\Minimal/QPeek.c **** 
 412:..\Common\Minimal/QPeek.c **** 		/* Lets just delay a while as this is an intensive test as we don't
 413:..\Common\Minimal/QPeek.c **** 		want to starve other tests of processing time. */
 414:..\Common\Minimal/QPeek.c **** 		vTaskDelay( qpeekSHORT_DELAY );
 583              		.loc 1 414 0
 584 007e 0A20     		movs	r0, #10
 585 0080 FFF7FEFF 		bl	vTaskDelay
 415:..\Common\Minimal/QPeek.c **** 
 416:..\Common\Minimal/QPeek.c **** 		/* Unsuspend the other tasks so we can repeat the test - this time
 417:..\Common\Minimal/QPeek.c **** 		however not all the other tasks will peek the data as the high
 418:..\Common\Minimal/QPeek.c **** 		priority task is actually going to remove it from the queue.  Send
 419:..\Common\Minimal/QPeek.c **** 		to front is used just to be different.  As the queue is empty it
 420:..\Common\Minimal/QPeek.c **** 		makes no difference to the result. */
 421:..\Common\Minimal/QPeek.c **** 		vTaskResume( xMediumPriorityTask );
 586              		.loc 1 421 0
 587 0084 204B     		ldr	r3, .L43+12
 588 0086 1B68     		ldr	r3, [r3]
 589 0088 1846     		mov	r0, r3
 590 008a FFF7FEFF 		bl	vTaskResume
 422:..\Common\Minimal/QPeek.c **** 		vTaskResume( xHighPriorityTask );
 591              		.loc 1 422 0
 592 008e 1F4B     		ldr	r3, .L43+16
 593 0090 1B68     		ldr	r3, [r3]
 594 0092 1846     		mov	r0, r3
 595 0094 FFF7FEFF 		bl	vTaskResume
 423:..\Common\Minimal/QPeek.c **** 		vTaskResume( xHighestPriorityTask );
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 19


 596              		.loc 1 423 0
 597 0098 1D4B     		ldr	r3, .L43+20
 598 009a 1B68     		ldr	r3, [r3]
 599 009c 1846     		mov	r0, r3
 600 009e FFF7FEFF 		bl	vTaskResume
 424:..\Common\Minimal/QPeek.c **** 
 425:..\Common\Minimal/QPeek.c **** 		#if( configUSE_PREEMPTION == 0 )
 426:..\Common\Minimal/QPeek.c **** 			taskYIELD();
 427:..\Common\Minimal/QPeek.c **** 		#endif
 428:..\Common\Minimal/QPeek.c **** 
 429:..\Common\Minimal/QPeek.c **** 		ulValue = 0xaabbaabb;
 601              		.loc 1 429 0
 602 00a2 1C4B     		ldr	r3, .L43+24
 603 00a4 BB60     		str	r3, [r7, #8]
 430:..\Common\Minimal/QPeek.c **** 		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
 604              		.loc 1 430 0
 605 00a6 07F10803 		add	r3, r7, #8
 606 00aa F868     		ldr	r0, [r7, #12]
 607 00ac 1946     		mov	r1, r3
 608 00ae 0022     		movs	r2, #0
 609 00b0 0123     		movs	r3, #1
 610 00b2 FFF7FEFF 		bl	xQueueGenericSend
 611 00b6 0346     		mov	r3, r0
 612 00b8 012B     		cmp	r3, #1
 613 00ba 02D0     		beq	.L40
 431:..\Common\Minimal/QPeek.c **** 		{
 432:..\Common\Minimal/QPeek.c **** 			/* We were expecting the queue to be empty so we should not of
 433:..\Common\Minimal/QPeek.c **** 			had a problem writing to the queue. */
 434:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 614              		.loc 1 434 0
 615 00bc 104B     		ldr	r3, .L43+4
 616 00be 0122     		movs	r2, #1
 617 00c0 1A60     		str	r2, [r3]
 618              	.L40:
 435:..\Common\Minimal/QPeek.c **** 		}
 436:..\Common\Minimal/QPeek.c **** 
 437:..\Common\Minimal/QPeek.c **** 		#if configUSE_PREEMPTION == 0
 438:..\Common\Minimal/QPeek.c **** 			taskYIELD();
 439:..\Common\Minimal/QPeek.c **** 		#endif
 440:..\Common\Minimal/QPeek.c **** 
 441:..\Common\Minimal/QPeek.c **** 		/* This time we should find that the queue is empty.  The high priority
 442:..\Common\Minimal/QPeek.c **** 		task actually removed the data rather than just peeking it. */
 443:..\Common\Minimal/QPeek.c **** 		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
 619              		.loc 1 443 0
 620 00c2 07F10803 		add	r3, r7, #8
 621 00c6 F868     		ldr	r0, [r7, #12]
 622 00c8 1946     		mov	r1, r3
 623 00ca 0022     		movs	r2, #0
 624 00cc 0123     		movs	r3, #1
 625 00ce FFF7FEFF 		bl	xQueueGenericReceive
 626 00d2 0346     		mov	r3, r0
 627 00d4 002B     		cmp	r3, #0
 628 00d6 02D0     		beq	.L41
 444:..\Common\Minimal/QPeek.c **** 		{
 445:..\Common\Minimal/QPeek.c **** 			/* We expected to receive the data. */
 446:..\Common\Minimal/QPeek.c **** 			xErrorDetected = pdTRUE;
 629              		.loc 1 446 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 20


 630 00d8 094B     		ldr	r3, .L43+4
 631 00da 0122     		movs	r2, #1
 632 00dc 1A60     		str	r2, [r3]
 633              	.L41:
 447:..\Common\Minimal/QPeek.c **** 		}
 448:..\Common\Minimal/QPeek.c **** 
 449:..\Common\Minimal/QPeek.c **** 		/* Unsuspend the highest and high priority tasks so we can go back
 450:..\Common\Minimal/QPeek.c **** 		and repeat the whole thing.  The medium priority task should not be
 451:..\Common\Minimal/QPeek.c **** 		suspended as it was not able to peek the data in this last case. */
 452:..\Common\Minimal/QPeek.c **** 		vTaskResume( xHighPriorityTask );
 634              		.loc 1 452 0
 635 00de 0B4B     		ldr	r3, .L43+16
 636 00e0 1B68     		ldr	r3, [r3]
 637 00e2 1846     		mov	r0, r3
 638 00e4 FFF7FEFF 		bl	vTaskResume
 453:..\Common\Minimal/QPeek.c **** 		vTaskResume( xHighestPriorityTask );
 639              		.loc 1 453 0
 640 00e8 094B     		ldr	r3, .L43+20
 641 00ea 1B68     		ldr	r3, [r3]
 642 00ec 1846     		mov	r0, r3
 643 00ee FFF7FEFF 		bl	vTaskResume
 454:..\Common\Minimal/QPeek.c **** 
 455:..\Common\Minimal/QPeek.c **** 		/* Lets just delay a while as this is an intensive test as we don't
 456:..\Common\Minimal/QPeek.c **** 		want to starve other tests of processing time. */
 457:..\Common\Minimal/QPeek.c **** 		vTaskDelay( qpeekSHORT_DELAY );
 644              		.loc 1 457 0
 645 00f2 0A20     		movs	r0, #10
 646 00f4 FFF7FEFF 		bl	vTaskDelay
 458:..\Common\Minimal/QPeek.c **** 	}
 647              		.loc 1 458 0
 648 00f8 88E7     		b	.L42
 649              	.L44:
 650 00fa 00BF     		.align	2
 651              	.L43:
 652 00fc 44332211 		.word	287454020
 653 0100 00000000 		.word	xErrorDetected
 654 0104 67452301 		.word	19088743
 655 0108 00000000 		.word	xMediumPriorityTask
 656 010c 00000000 		.word	xHighPriorityTask
 657 0110 00000000 		.word	xHighestPriorityTask
 658 0114 BBAABBAA 		.word	-1430541637
 659              		.cfi_endproc
 660              	.LFE72:
 661              		.size	prvLowPriorityPeekTask, .-prvLowPriorityPeekTask
 662              		.section	.text.xAreQueuePeekTasksStillRunning,"ax",%progbits
 663              		.align	2
 664              		.global	xAreQueuePeekTasksStillRunning
 665              		.thumb
 666              		.thumb_func
 667              		.type	xAreQueuePeekTasksStillRunning, %function
 668              	xAreQueuePeekTasksStillRunning:
 669              	.LFB73:
 459:..\Common\Minimal/QPeek.c **** }
 460:..\Common\Minimal/QPeek.c **** /*-----------------------------------------------------------*/
 461:..\Common\Minimal/QPeek.c **** 
 462:..\Common\Minimal/QPeek.c **** /* This is called to check that all the created tasks are still running. */
 463:..\Common\Minimal/QPeek.c **** BaseType_t xAreQueuePeekTasksStillRunning( void )
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 21


 464:..\Common\Minimal/QPeek.c **** {
 670              		.loc 1 464 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 1, uses_anonymous_args = 0
 674              		@ link register save eliminated.
 675 0000 80B4     		push	{r7}
 676              		.cfi_def_cfa_offset 4
 677              		.cfi_offset 7, -4
 678 0002 00AF     		add	r7, sp, #0
 679              		.cfi_def_cfa_register 7
 465:..\Common\Minimal/QPeek.c **** static uint32_t ulLastLoopCounter = 0;
 466:..\Common\Minimal/QPeek.c **** 
 467:..\Common\Minimal/QPeek.c **** 	/* If the demo task is still running then we expect the loopcounter to
 468:..\Common\Minimal/QPeek.c **** 	have incremented since this function was last called. */
 469:..\Common\Minimal/QPeek.c **** 	if( ulLastLoopCounter == ulLoopCounter )
 680              		.loc 1 469 0
 681 0004 0C4B     		ldr	r3, .L48
 682 0006 1A68     		ldr	r2, [r3]
 683 0008 0C4B     		ldr	r3, .L48+4
 684 000a 1B68     		ldr	r3, [r3]
 685 000c 9A42     		cmp	r2, r3
 686 000e 02D1     		bne	.L46
 470:..\Common\Minimal/QPeek.c **** 	{
 471:..\Common\Minimal/QPeek.c **** 		xErrorDetected = pdTRUE;
 687              		.loc 1 471 0
 688 0010 0B4B     		ldr	r3, .L48+8
 689 0012 0122     		movs	r2, #1
 690 0014 1A60     		str	r2, [r3]
 691              	.L46:
 472:..\Common\Minimal/QPeek.c **** 	}
 473:..\Common\Minimal/QPeek.c **** 
 474:..\Common\Minimal/QPeek.c **** 	ulLastLoopCounter = ulLoopCounter;
 692              		.loc 1 474 0
 693 0016 094B     		ldr	r3, .L48+4
 694 0018 1B68     		ldr	r3, [r3]
 695 001a 074A     		ldr	r2, .L48
 696 001c 1360     		str	r3, [r2]
 475:..\Common\Minimal/QPeek.c **** 
 476:..\Common\Minimal/QPeek.c **** 	/* Errors detected in the task itself will have latched xErrorDetected
 477:..\Common\Minimal/QPeek.c **** 	to true. */
 478:..\Common\Minimal/QPeek.c **** 
 479:..\Common\Minimal/QPeek.c **** 	return ( BaseType_t ) !xErrorDetected;
 697              		.loc 1 479 0
 698 001e 084B     		ldr	r3, .L48+8
 699 0020 1B68     		ldr	r3, [r3]
 700 0022 002B     		cmp	r3, #0
 701 0024 0CBF     		ite	eq
 702 0026 0123     		moveq	r3, #1
 703 0028 0023     		movne	r3, #0
 704 002a DBB2     		uxtb	r3, r3
 480:..\Common\Minimal/QPeek.c **** }
 705              		.loc 1 480 0
 706 002c 1846     		mov	r0, r3
 707 002e BD46     		mov	sp, r7
 708              		.cfi_def_cfa_register 13
 709              		@ sp needed
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 22


 710 0030 5DF8047B 		ldr	r7, [sp], #4
 711              		.cfi_restore 7
 712              		.cfi_def_cfa_offset 0
 713 0034 7047     		bx	lr
 714              	.L49:
 715 0036 00BF     		.align	2
 716              	.L48:
 717 0038 08000000 		.word	ulLastLoopCounter.7097
 718 003c 04000000 		.word	ulLoopCounter
 719 0040 00000000 		.word	xErrorDetected
 720              		.cfi_endproc
 721              	.LFE73:
 722              		.size	xAreQueuePeekTasksStillRunning, .-xAreQueuePeekTasksStillRunning
 723              		.bss
 724              		.align	2
 725              	ulLastLoopCounter.7097:
 726 0008 00000000 		.space	4
 727              		.text
 728              	.Letext0:
 729              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 730              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 731              		.file 4 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 732              		.file 5 "..\\Source\\include/task.h"
 733              		.file 6 "..\\Source\\include/queue.h"
 734              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 735              		.section	.debug_info,"",%progbits
 736              	.Ldebug_info0:
 737 0000 CC020000 		.4byte	0x2cc
 738 0004 0400     		.2byte	0x4
 739 0006 00000000 		.4byte	.Ldebug_abbrev0
 740 000a 04       		.byte	0x4
 741 000b 01       		.uleb128 0x1
 742 000c 49000000 		.4byte	.LASF38
 743 0010 01       		.byte	0x1
 744 0011 97020000 		.4byte	.LASF39
 745 0015 C8020000 		.4byte	.LASF40
 746 0019 00000000 		.4byte	.Ldebug_ranges0+0
 747 001d 00000000 		.4byte	0
 748 0021 00000000 		.4byte	.Ldebug_line0
 749 0025 02       		.uleb128 0x2
 750 0026 04       		.byte	0x4
 751 0027 07       		.byte	0x7
 752 0028 A0010000 		.4byte	.LASF0
 753 002c 03       		.uleb128 0x3
 754 002d 04       		.byte	0x4
 755 002e 05       		.byte	0x5
 756 002f 696E7400 		.ascii	"int\000"
 757 0033 02       		.uleb128 0x2
 758 0034 01       		.byte	0x1
 759 0035 06       		.byte	0x6
 760 0036 18010000 		.4byte	.LASF1
 761 003a 04       		.uleb128 0x4
 762 003b 15000000 		.4byte	.LASF5
 763 003f 02       		.byte	0x2
 764 0040 1D       		.byte	0x1d
 765 0041 45000000 		.4byte	0x45
 766 0045 02       		.uleb128 0x2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 23


 767 0046 01       		.byte	0x1
 768 0047 08       		.byte	0x8
 769 0048 24010000 		.4byte	.LASF2
 770 004c 02       		.uleb128 0x2
 771 004d 02       		.byte	0x2
 772 004e 05       		.byte	0x5
 773 004f 1C020000 		.4byte	.LASF3
 774 0053 02       		.uleb128 0x2
 775 0054 02       		.byte	0x2
 776 0055 07       		.byte	0x7
 777 0056 56010000 		.4byte	.LASF4
 778 005a 04       		.uleb128 0x4
 779 005b 38000000 		.4byte	.LASF6
 780 005f 02       		.byte	0x2
 781 0060 3F       		.byte	0x3f
 782 0061 65000000 		.4byte	0x65
 783 0065 02       		.uleb128 0x2
 784 0066 04       		.byte	0x4
 785 0067 05       		.byte	0x5
 786 0068 50020000 		.4byte	.LASF7
 787 006c 04       		.uleb128 0x4
 788 006d 95010000 		.4byte	.LASF8
 789 0071 02       		.byte	0x2
 790 0072 41       		.byte	0x41
 791 0073 77000000 		.4byte	0x77
 792 0077 02       		.uleb128 0x2
 793 0078 04       		.byte	0x4
 794 0079 07       		.byte	0x7
 795 007a 44010000 		.4byte	.LASF9
 796 007e 02       		.uleb128 0x2
 797 007f 08       		.byte	0x8
 798 0080 05       		.byte	0x5
 799 0081 F4010000 		.4byte	.LASF10
 800 0085 02       		.uleb128 0x2
 801 0086 08       		.byte	0x8
 802 0087 07       		.byte	0x7
 803 0088 AD010000 		.4byte	.LASF11
 804 008c 02       		.uleb128 0x2
 805 008d 04       		.byte	0x4
 806 008e 07       		.byte	0x7
 807 008f EB010000 		.4byte	.LASF12
 808 0093 05       		.uleb128 0x5
 809 0094 04       		.byte	0x4
 810 0095 02       		.uleb128 0x2
 811 0096 01       		.byte	0x1
 812 0097 08       		.byte	0x8
 813 0098 02020000 		.4byte	.LASF13
 814 009c 04       		.uleb128 0x4
 815 009d C4010000 		.4byte	.LASF14
 816 00a1 03       		.byte	0x3
 817 00a2 15       		.byte	0x15
 818 00a3 3A000000 		.4byte	0x3a
 819 00a7 04       		.uleb128 0x4
 820 00a8 E3010000 		.4byte	.LASF15
 821 00ac 03       		.byte	0x3
 822 00ad 2C       		.byte	0x2c
 823 00ae 5A000000 		.4byte	0x5a
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 24


 824 00b2 04       		.uleb128 0x4
 825 00b3 47020000 		.4byte	.LASF16
 826 00b7 03       		.byte	0x3
 827 00b8 2D       		.byte	0x2d
 828 00b9 6C000000 		.4byte	0x6c
 829 00bd 02       		.uleb128 0x2
 830 00be 04       		.byte	0x4
 831 00bf 04       		.byte	0x4
 832 00c0 12010000 		.4byte	.LASF17
 833 00c4 02       		.uleb128 0x2
 834 00c5 08       		.byte	0x8
 835 00c6 04       		.byte	0x4
 836 00c7 8E010000 		.4byte	.LASF18
 837 00cb 06       		.uleb128 0x6
 838 00cc B2000000 		.4byte	0xb2
 839 00d0 04       		.uleb128 0x4
 840 00d1 BD020000 		.4byte	.LASF19
 841 00d5 04       		.byte	0x4
 842 00d6 62       		.byte	0x62
 843 00d7 65000000 		.4byte	0x65
 844 00db 04       		.uleb128 0x4
 845 00dc B1020000 		.4byte	.LASF20
 846 00e0 04       		.byte	0x4
 847 00e1 63       		.byte	0x63
 848 00e2 77000000 		.4byte	0x77
 849 00e6 04       		.uleb128 0x4
 850 00e7 2D000000 		.4byte	.LASF21
 851 00eb 04       		.byte	0x4
 852 00ec 69       		.byte	0x69
 853 00ed B2000000 		.4byte	0xb2
 854 00f1 04       		.uleb128 0x4
 855 00f2 3A020000 		.4byte	.LASF22
 856 00f6 05       		.byte	0x5
 857 00f7 67       		.byte	0x67
 858 00f8 93000000 		.4byte	0x93
 859 00fc 04       		.uleb128 0x4
 860 00fd D7000000 		.4byte	.LASF23
 861 0101 06       		.byte	0x6
 862 0102 58       		.byte	0x58
 863 0103 93000000 		.4byte	0x93
 864 0107 07       		.uleb128 0x7
 865 0108 82020000 		.4byte	.LASF41
 866 010c 01       		.byte	0x1
 867 010d 7B       		.byte	0x7b
 868 010e 00000000 		.4byte	.LFB68
 869 0112 A8000000 		.4byte	.LFE68-.LFB68
 870 0116 01       		.uleb128 0x1
 871 0117 9C       		.byte	0x9c
 872 0118 2B010000 		.4byte	0x12b
 873 011c 08       		.uleb128 0x8
 874 011d 42000000 		.4byte	.LASF24
 875 0121 01       		.byte	0x1
 876 0122 7D       		.byte	0x7d
 877 0123 FC000000 		.4byte	0xfc
 878 0127 02       		.uleb128 0x2
 879 0128 91       		.byte	0x91
 880 0129 74       		.sleb128 -12
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 25


 881 012a 00       		.byte	0
 882 012b 09       		.uleb128 0x9
 883 012c E5000000 		.4byte	.LASF26
 884 0130 01       		.byte	0x1
 885 0131 97       		.byte	0x97
 886 0132 00000000 		.4byte	.LFB69
 887 0136 00010000 		.4byte	.LFE69-.LFB69
 888 013a 01       		.uleb128 0x1
 889 013b 9C       		.byte	0x9c
 890 013c 6B010000 		.4byte	0x16b
 891 0140 0A       		.uleb128 0xa
 892 0141 07020000 		.4byte	.LASF28
 893 0145 01       		.byte	0x1
 894 0146 97       		.byte	0x97
 895 0147 93000000 		.4byte	0x93
 896 014b 02       		.uleb128 0x2
 897 014c 91       		.byte	0x91
 898 014d 6C       		.sleb128 -20
 899 014e 08       		.uleb128 0x8
 900 014f 42000000 		.4byte	.LASF24
 901 0153 01       		.byte	0x1
 902 0154 99       		.byte	0x99
 903 0155 FC000000 		.4byte	0xfc
 904 0159 02       		.uleb128 0x2
 905 015a 91       		.byte	0x91
 906 015b 74       		.sleb128 -12
 907 015c 08       		.uleb128 0x8
 908 015d 14020000 		.4byte	.LASF25
 909 0161 01       		.byte	0x1
 910 0162 9A       		.byte	0x9a
 911 0163 B2000000 		.4byte	0xb2
 912 0167 02       		.uleb128 0x2
 913 0168 91       		.byte	0x91
 914 0169 70       		.sleb128 -16
 915 016a 00       		.byte	0
 916 016b 0B       		.uleb128 0xb
 917 016c 76010000 		.4byte	.LASF27
 918 0170 01       		.byte	0x1
 919 0171 0401     		.2byte	0x104
 920 0173 00000000 		.4byte	.LFB70
 921 0177 90000000 		.4byte	.LFE70-.LFB70
 922 017b 01       		.uleb128 0x1
 923 017c 9C       		.byte	0x9c
 924 017d AF010000 		.4byte	0x1af
 925 0181 0C       		.uleb128 0xc
 926 0182 07020000 		.4byte	.LASF28
 927 0186 01       		.byte	0x1
 928 0187 0401     		.2byte	0x104
 929 0189 93000000 		.4byte	0x93
 930 018d 02       		.uleb128 0x2
 931 018e 91       		.byte	0x91
 932 018f 6C       		.sleb128 -20
 933 0190 0D       		.uleb128 0xd
 934 0191 42000000 		.4byte	.LASF24
 935 0195 01       		.byte	0x1
 936 0196 0601     		.2byte	0x106
 937 0198 FC000000 		.4byte	0xfc
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 26


 938 019c 02       		.uleb128 0x2
 939 019d 91       		.byte	0x91
 940 019e 74       		.sleb128 -12
 941 019f 0D       		.uleb128 0xd
 942 01a0 14020000 		.4byte	.LASF25
 943 01a4 01       		.byte	0x1
 944 01a5 0701     		.2byte	0x107
 945 01a7 B2000000 		.4byte	0xb2
 946 01ab 02       		.uleb128 0x2
 947 01ac 91       		.byte	0x91
 948 01ad 70       		.sleb128 -16
 949 01ae 00       		.byte	0
 950 01af 0B       		.uleb128 0xb
 951 01b0 68020000 		.4byte	.LASF29
 952 01b4 01       		.byte	0x1
 953 01b5 3B01     		.2byte	0x13b
 954 01b7 00000000 		.4byte	.LFB71
 955 01bb 68000000 		.4byte	.LFE71-.LFB71
 956 01bf 01       		.uleb128 0x1
 957 01c0 9C       		.byte	0x9c
 958 01c1 F3010000 		.4byte	0x1f3
 959 01c5 0C       		.uleb128 0xc
 960 01c6 07020000 		.4byte	.LASF28
 961 01ca 01       		.byte	0x1
 962 01cb 3B01     		.2byte	0x13b
 963 01cd 93000000 		.4byte	0x93
 964 01d1 02       		.uleb128 0x2
 965 01d2 91       		.byte	0x91
 966 01d3 6C       		.sleb128 -20
 967 01d4 0D       		.uleb128 0xd
 968 01d5 42000000 		.4byte	.LASF24
 969 01d9 01       		.byte	0x1
 970 01da 3D01     		.2byte	0x13d
 971 01dc FC000000 		.4byte	0xfc
 972 01e0 02       		.uleb128 0x2
 973 01e1 91       		.byte	0x91
 974 01e2 74       		.sleb128 -12
 975 01e3 0D       		.uleb128 0xd
 976 01e4 14020000 		.4byte	.LASF25
 977 01e8 01       		.byte	0x1
 978 01e9 3E01     		.2byte	0x13e
 979 01eb B2000000 		.4byte	0xb2
 980 01ef 02       		.uleb128 0x2
 981 01f0 91       		.byte	0x91
 982 01f1 70       		.sleb128 -16
 983 01f2 00       		.byte	0
 984 01f3 0B       		.uleb128 0xb
 985 01f4 CC010000 		.4byte	.LASF30
 986 01f8 01       		.byte	0x1
 987 01f9 6401     		.2byte	0x164
 988 01fb 00000000 		.4byte	.LFB72
 989 01ff 18010000 		.4byte	.LFE72-.LFB72
 990 0203 01       		.uleb128 0x1
 991 0204 9C       		.byte	0x9c
 992 0205 37020000 		.4byte	0x237
 993 0209 0C       		.uleb128 0xc
 994 020a 07020000 		.4byte	.LASF28
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 27


 995 020e 01       		.byte	0x1
 996 020f 6401     		.2byte	0x164
 997 0211 93000000 		.4byte	0x93
 998 0215 02       		.uleb128 0x2
 999 0216 91       		.byte	0x91
 1000 0217 6C       		.sleb128 -20
 1001 0218 0D       		.uleb128 0xd
 1002 0219 42000000 		.4byte	.LASF24
 1003 021d 01       		.byte	0x1
 1004 021e 6601     		.2byte	0x166
 1005 0220 FC000000 		.4byte	0xfc
 1006 0224 02       		.uleb128 0x2
 1007 0225 91       		.byte	0x91
 1008 0226 74       		.sleb128 -12
 1009 0227 0D       		.uleb128 0xd
 1010 0228 14020000 		.4byte	.LASF25
 1011 022c 01       		.byte	0x1
 1012 022d 6701     		.2byte	0x167
 1013 022f B2000000 		.4byte	0xb2
 1014 0233 02       		.uleb128 0x2
 1015 0234 91       		.byte	0x91
 1016 0235 70       		.sleb128 -16
 1017 0236 00       		.byte	0
 1018 0237 0E       		.uleb128 0xe
 1019 0238 0F030000 		.4byte	.LASF42
 1020 023c 01       		.byte	0x1
 1021 023d CF01     		.2byte	0x1cf
 1022 023f D0000000 		.4byte	0xd0
 1023 0243 00000000 		.4byte	.LFB73
 1024 0247 44000000 		.4byte	.LFE73-.LFB73
 1025 024b 01       		.uleb128 0x1
 1026 024c 9C       		.byte	0x9c
 1027 024d 64020000 		.4byte	0x264
 1028 0251 0D       		.uleb128 0xd
 1029 0252 00010000 		.4byte	.LASF31
 1030 0256 01       		.byte	0x1
 1031 0257 D101     		.2byte	0x1d1
 1032 0259 B2000000 		.4byte	0xb2
 1033 025d 05       		.uleb128 0x5
 1034 025e 03       		.byte	0x3
 1035 025f 08000000 		.4byte	ulLastLoopCounter.7097
 1036 0263 00       		.byte	0
 1037 0264 08       		.uleb128 0x8
 1038 0265 59020000 		.4byte	.LASF32
 1039 0269 01       		.byte	0x1
 1040 026a 71       		.byte	0x71
 1041 026b 75020000 		.4byte	0x275
 1042 026f 05       		.uleb128 0x5
 1043 0270 03       		.byte	0x3
 1044 0271 00000000 		.4byte	xErrorDetected
 1045 0275 06       		.uleb128 0x6
 1046 0276 D0000000 		.4byte	0xd0
 1047 027a 08       		.uleb128 0x8
 1048 027b 1F000000 		.4byte	.LASF33
 1049 027f 01       		.byte	0x1
 1050 0280 75       		.byte	0x75
 1051 0281 CB000000 		.4byte	0xcb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 28


 1052 0285 05       		.uleb128 0x5
 1053 0286 03       		.byte	0x3
 1054 0287 04000000 		.4byte	ulLoopCounter
 1055 028b 0F       		.uleb128 0xf
 1056 028c 69010000 		.4byte	.LASF34
 1057 0290 07       		.byte	0x7
 1058 0291 9606     		.2byte	0x696
 1059 0293 97020000 		.4byte	0x297
 1060 0297 06       		.uleb128 0x6
 1061 0298 A7000000 		.4byte	0xa7
 1062 029c 10       		.uleb128 0x10
 1063 029d 26020000 		.4byte	.LASF35
 1064 02a1 01       		.byte	0x1
 1065 02a2 78       		.byte	0x78
 1066 02a3 F1000000 		.4byte	0xf1
 1067 02a7 05       		.uleb128 0x5
 1068 02a8 03       		.byte	0x3
 1069 02a9 00000000 		.4byte	xMediumPriorityTask
 1070 02ad 10       		.uleb128 0x10
 1071 02ae 32010000 		.4byte	.LASF36
 1072 02b2 01       		.byte	0x1
 1073 02b3 78       		.byte	0x78
 1074 02b4 F1000000 		.4byte	0xf1
 1075 02b8 05       		.uleb128 0x5
 1076 02b9 03       		.byte	0x3
 1077 02ba 00000000 		.4byte	xHighPriorityTask
 1078 02be 10       		.uleb128 0x10
 1079 02bf 00000000 		.4byte	.LASF37
 1080 02c3 01       		.byte	0x1
 1081 02c4 78       		.byte	0x78
 1082 02c5 F1000000 		.4byte	0xf1
 1083 02c9 05       		.uleb128 0x5
 1084 02ca 03       		.byte	0x3
 1085 02cb 00000000 		.4byte	xHighestPriorityTask
 1086 02cf 00       		.byte	0
 1087              		.section	.debug_abbrev,"",%progbits
 1088              	.Ldebug_abbrev0:
 1089 0000 01       		.uleb128 0x1
 1090 0001 11       		.uleb128 0x11
 1091 0002 01       		.byte	0x1
 1092 0003 25       		.uleb128 0x25
 1093 0004 0E       		.uleb128 0xe
 1094 0005 13       		.uleb128 0x13
 1095 0006 0B       		.uleb128 0xb
 1096 0007 03       		.uleb128 0x3
 1097 0008 0E       		.uleb128 0xe
 1098 0009 1B       		.uleb128 0x1b
 1099 000a 0E       		.uleb128 0xe
 1100 000b 55       		.uleb128 0x55
 1101 000c 17       		.uleb128 0x17
 1102 000d 11       		.uleb128 0x11
 1103 000e 01       		.uleb128 0x1
 1104 000f 10       		.uleb128 0x10
 1105 0010 17       		.uleb128 0x17
 1106 0011 00       		.byte	0
 1107 0012 00       		.byte	0
 1108 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 29


 1109 0014 24       		.uleb128 0x24
 1110 0015 00       		.byte	0
 1111 0016 0B       		.uleb128 0xb
 1112 0017 0B       		.uleb128 0xb
 1113 0018 3E       		.uleb128 0x3e
 1114 0019 0B       		.uleb128 0xb
 1115 001a 03       		.uleb128 0x3
 1116 001b 0E       		.uleb128 0xe
 1117 001c 00       		.byte	0
 1118 001d 00       		.byte	0
 1119 001e 03       		.uleb128 0x3
 1120 001f 24       		.uleb128 0x24
 1121 0020 00       		.byte	0
 1122 0021 0B       		.uleb128 0xb
 1123 0022 0B       		.uleb128 0xb
 1124 0023 3E       		.uleb128 0x3e
 1125 0024 0B       		.uleb128 0xb
 1126 0025 03       		.uleb128 0x3
 1127 0026 08       		.uleb128 0x8
 1128 0027 00       		.byte	0
 1129 0028 00       		.byte	0
 1130 0029 04       		.uleb128 0x4
 1131 002a 16       		.uleb128 0x16
 1132 002b 00       		.byte	0
 1133 002c 03       		.uleb128 0x3
 1134 002d 0E       		.uleb128 0xe
 1135 002e 3A       		.uleb128 0x3a
 1136 002f 0B       		.uleb128 0xb
 1137 0030 3B       		.uleb128 0x3b
 1138 0031 0B       		.uleb128 0xb
 1139 0032 49       		.uleb128 0x49
 1140 0033 13       		.uleb128 0x13
 1141 0034 00       		.byte	0
 1142 0035 00       		.byte	0
 1143 0036 05       		.uleb128 0x5
 1144 0037 0F       		.uleb128 0xf
 1145 0038 00       		.byte	0
 1146 0039 0B       		.uleb128 0xb
 1147 003a 0B       		.uleb128 0xb
 1148 003b 00       		.byte	0
 1149 003c 00       		.byte	0
 1150 003d 06       		.uleb128 0x6
 1151 003e 35       		.uleb128 0x35
 1152 003f 00       		.byte	0
 1153 0040 49       		.uleb128 0x49
 1154 0041 13       		.uleb128 0x13
 1155 0042 00       		.byte	0
 1156 0043 00       		.byte	0
 1157 0044 07       		.uleb128 0x7
 1158 0045 2E       		.uleb128 0x2e
 1159 0046 01       		.byte	0x1
 1160 0047 3F       		.uleb128 0x3f
 1161 0048 19       		.uleb128 0x19
 1162 0049 03       		.uleb128 0x3
 1163 004a 0E       		.uleb128 0xe
 1164 004b 3A       		.uleb128 0x3a
 1165 004c 0B       		.uleb128 0xb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 30


 1166 004d 3B       		.uleb128 0x3b
 1167 004e 0B       		.uleb128 0xb
 1168 004f 27       		.uleb128 0x27
 1169 0050 19       		.uleb128 0x19
 1170 0051 11       		.uleb128 0x11
 1171 0052 01       		.uleb128 0x1
 1172 0053 12       		.uleb128 0x12
 1173 0054 06       		.uleb128 0x6
 1174 0055 40       		.uleb128 0x40
 1175 0056 18       		.uleb128 0x18
 1176 0057 9642     		.uleb128 0x2116
 1177 0059 19       		.uleb128 0x19
 1178 005a 01       		.uleb128 0x1
 1179 005b 13       		.uleb128 0x13
 1180 005c 00       		.byte	0
 1181 005d 00       		.byte	0
 1182 005e 08       		.uleb128 0x8
 1183 005f 34       		.uleb128 0x34
 1184 0060 00       		.byte	0
 1185 0061 03       		.uleb128 0x3
 1186 0062 0E       		.uleb128 0xe
 1187 0063 3A       		.uleb128 0x3a
 1188 0064 0B       		.uleb128 0xb
 1189 0065 3B       		.uleb128 0x3b
 1190 0066 0B       		.uleb128 0xb
 1191 0067 49       		.uleb128 0x49
 1192 0068 13       		.uleb128 0x13
 1193 0069 02       		.uleb128 0x2
 1194 006a 18       		.uleb128 0x18
 1195 006b 00       		.byte	0
 1196 006c 00       		.byte	0
 1197 006d 09       		.uleb128 0x9
 1198 006e 2E       		.uleb128 0x2e
 1199 006f 01       		.byte	0x1
 1200 0070 03       		.uleb128 0x3
 1201 0071 0E       		.uleb128 0xe
 1202 0072 3A       		.uleb128 0x3a
 1203 0073 0B       		.uleb128 0xb
 1204 0074 3B       		.uleb128 0x3b
 1205 0075 0B       		.uleb128 0xb
 1206 0076 27       		.uleb128 0x27
 1207 0077 19       		.uleb128 0x19
 1208 0078 11       		.uleb128 0x11
 1209 0079 01       		.uleb128 0x1
 1210 007a 12       		.uleb128 0x12
 1211 007b 06       		.uleb128 0x6
 1212 007c 40       		.uleb128 0x40
 1213 007d 18       		.uleb128 0x18
 1214 007e 9642     		.uleb128 0x2116
 1215 0080 19       		.uleb128 0x19
 1216 0081 01       		.uleb128 0x1
 1217 0082 13       		.uleb128 0x13
 1218 0083 00       		.byte	0
 1219 0084 00       		.byte	0
 1220 0085 0A       		.uleb128 0xa
 1221 0086 05       		.uleb128 0x5
 1222 0087 00       		.byte	0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 31


 1223 0088 03       		.uleb128 0x3
 1224 0089 0E       		.uleb128 0xe
 1225 008a 3A       		.uleb128 0x3a
 1226 008b 0B       		.uleb128 0xb
 1227 008c 3B       		.uleb128 0x3b
 1228 008d 0B       		.uleb128 0xb
 1229 008e 49       		.uleb128 0x49
 1230 008f 13       		.uleb128 0x13
 1231 0090 02       		.uleb128 0x2
 1232 0091 18       		.uleb128 0x18
 1233 0092 00       		.byte	0
 1234 0093 00       		.byte	0
 1235 0094 0B       		.uleb128 0xb
 1236 0095 2E       		.uleb128 0x2e
 1237 0096 01       		.byte	0x1
 1238 0097 03       		.uleb128 0x3
 1239 0098 0E       		.uleb128 0xe
 1240 0099 3A       		.uleb128 0x3a
 1241 009a 0B       		.uleb128 0xb
 1242 009b 3B       		.uleb128 0x3b
 1243 009c 05       		.uleb128 0x5
 1244 009d 27       		.uleb128 0x27
 1245 009e 19       		.uleb128 0x19
 1246 009f 11       		.uleb128 0x11
 1247 00a0 01       		.uleb128 0x1
 1248 00a1 12       		.uleb128 0x12
 1249 00a2 06       		.uleb128 0x6
 1250 00a3 40       		.uleb128 0x40
 1251 00a4 18       		.uleb128 0x18
 1252 00a5 9642     		.uleb128 0x2116
 1253 00a7 19       		.uleb128 0x19
 1254 00a8 01       		.uleb128 0x1
 1255 00a9 13       		.uleb128 0x13
 1256 00aa 00       		.byte	0
 1257 00ab 00       		.byte	0
 1258 00ac 0C       		.uleb128 0xc
 1259 00ad 05       		.uleb128 0x5
 1260 00ae 00       		.byte	0
 1261 00af 03       		.uleb128 0x3
 1262 00b0 0E       		.uleb128 0xe
 1263 00b1 3A       		.uleb128 0x3a
 1264 00b2 0B       		.uleb128 0xb
 1265 00b3 3B       		.uleb128 0x3b
 1266 00b4 05       		.uleb128 0x5
 1267 00b5 49       		.uleb128 0x49
 1268 00b6 13       		.uleb128 0x13
 1269 00b7 02       		.uleb128 0x2
 1270 00b8 18       		.uleb128 0x18
 1271 00b9 00       		.byte	0
 1272 00ba 00       		.byte	0
 1273 00bb 0D       		.uleb128 0xd
 1274 00bc 34       		.uleb128 0x34
 1275 00bd 00       		.byte	0
 1276 00be 03       		.uleb128 0x3
 1277 00bf 0E       		.uleb128 0xe
 1278 00c0 3A       		.uleb128 0x3a
 1279 00c1 0B       		.uleb128 0xb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 32


 1280 00c2 3B       		.uleb128 0x3b
 1281 00c3 05       		.uleb128 0x5
 1282 00c4 49       		.uleb128 0x49
 1283 00c5 13       		.uleb128 0x13
 1284 00c6 02       		.uleb128 0x2
 1285 00c7 18       		.uleb128 0x18
 1286 00c8 00       		.byte	0
 1287 00c9 00       		.byte	0
 1288 00ca 0E       		.uleb128 0xe
 1289 00cb 2E       		.uleb128 0x2e
 1290 00cc 01       		.byte	0x1
 1291 00cd 3F       		.uleb128 0x3f
 1292 00ce 19       		.uleb128 0x19
 1293 00cf 03       		.uleb128 0x3
 1294 00d0 0E       		.uleb128 0xe
 1295 00d1 3A       		.uleb128 0x3a
 1296 00d2 0B       		.uleb128 0xb
 1297 00d3 3B       		.uleb128 0x3b
 1298 00d4 05       		.uleb128 0x5
 1299 00d5 27       		.uleb128 0x27
 1300 00d6 19       		.uleb128 0x19
 1301 00d7 49       		.uleb128 0x49
 1302 00d8 13       		.uleb128 0x13
 1303 00d9 11       		.uleb128 0x11
 1304 00da 01       		.uleb128 0x1
 1305 00db 12       		.uleb128 0x12
 1306 00dc 06       		.uleb128 0x6
 1307 00dd 40       		.uleb128 0x40
 1308 00de 18       		.uleb128 0x18
 1309 00df 9742     		.uleb128 0x2117
 1310 00e1 19       		.uleb128 0x19
 1311 00e2 01       		.uleb128 0x1
 1312 00e3 13       		.uleb128 0x13
 1313 00e4 00       		.byte	0
 1314 00e5 00       		.byte	0
 1315 00e6 0F       		.uleb128 0xf
 1316 00e7 34       		.uleb128 0x34
 1317 00e8 00       		.byte	0
 1318 00e9 03       		.uleb128 0x3
 1319 00ea 0E       		.uleb128 0xe
 1320 00eb 3A       		.uleb128 0x3a
 1321 00ec 0B       		.uleb128 0xb
 1322 00ed 3B       		.uleb128 0x3b
 1323 00ee 05       		.uleb128 0x5
 1324 00ef 49       		.uleb128 0x49
 1325 00f0 13       		.uleb128 0x13
 1326 00f1 3F       		.uleb128 0x3f
 1327 00f2 19       		.uleb128 0x19
 1328 00f3 3C       		.uleb128 0x3c
 1329 00f4 19       		.uleb128 0x19
 1330 00f5 00       		.byte	0
 1331 00f6 00       		.byte	0
 1332 00f7 10       		.uleb128 0x10
 1333 00f8 34       		.uleb128 0x34
 1334 00f9 00       		.byte	0
 1335 00fa 03       		.uleb128 0x3
 1336 00fb 0E       		.uleb128 0xe
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 33


 1337 00fc 3A       		.uleb128 0x3a
 1338 00fd 0B       		.uleb128 0xb
 1339 00fe 3B       		.uleb128 0x3b
 1340 00ff 0B       		.uleb128 0xb
 1341 0100 49       		.uleb128 0x49
 1342 0101 13       		.uleb128 0x13
 1343 0102 3F       		.uleb128 0x3f
 1344 0103 19       		.uleb128 0x19
 1345 0104 02       		.uleb128 0x2
 1346 0105 18       		.uleb128 0x18
 1347 0106 00       		.byte	0
 1348 0107 00       		.byte	0
 1349 0108 00       		.byte	0
 1350              		.section	.debug_aranges,"",%progbits
 1351 0000 44000000 		.4byte	0x44
 1352 0004 0200     		.2byte	0x2
 1353 0006 00000000 		.4byte	.Ldebug_info0
 1354 000a 04       		.byte	0x4
 1355 000b 00       		.byte	0
 1356 000c 0000     		.2byte	0
 1357 000e 0000     		.2byte	0
 1358 0010 00000000 		.4byte	.LFB68
 1359 0014 A8000000 		.4byte	.LFE68-.LFB68
 1360 0018 00000000 		.4byte	.LFB69
 1361 001c 00010000 		.4byte	.LFE69-.LFB69
 1362 0020 00000000 		.4byte	.LFB70
 1363 0024 90000000 		.4byte	.LFE70-.LFB70
 1364 0028 00000000 		.4byte	.LFB71
 1365 002c 68000000 		.4byte	.LFE71-.LFB71
 1366 0030 00000000 		.4byte	.LFB72
 1367 0034 18010000 		.4byte	.LFE72-.LFB72
 1368 0038 00000000 		.4byte	.LFB73
 1369 003c 44000000 		.4byte	.LFE73-.LFB73
 1370 0040 00000000 		.4byte	0
 1371 0044 00000000 		.4byte	0
 1372              		.section	.debug_ranges,"",%progbits
 1373              	.Ldebug_ranges0:
 1374 0000 00000000 		.4byte	.LFB68
 1375 0004 A8000000 		.4byte	.LFE68
 1376 0008 00000000 		.4byte	.LFB69
 1377 000c 00010000 		.4byte	.LFE69
 1378 0010 00000000 		.4byte	.LFB70
 1379 0014 90000000 		.4byte	.LFE70
 1380 0018 00000000 		.4byte	.LFB71
 1381 001c 68000000 		.4byte	.LFE71
 1382 0020 00000000 		.4byte	.LFB72
 1383 0024 18010000 		.4byte	.LFE72
 1384 0028 00000000 		.4byte	.LFB73
 1385 002c 44000000 		.4byte	.LFE73
 1386 0030 00000000 		.4byte	0
 1387 0034 00000000 		.4byte	0
 1388              		.section	.debug_line,"",%progbits
 1389              	.Ldebug_line0:
 1390 0000 6B020000 		.section	.debug_str,"MS",%progbits,1
 1390      0200A201 
 1390      00000201 
 1390      FB0E0D00 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 34


 1390      01010101 
 1391              	.LASF37:
 1392 0000 78486967 		.ascii	"xHighestPriorityTask\000"
 1392      68657374 
 1392      5072696F 
 1392      72697479 
 1392      5461736B 
 1393              	.LASF5:
 1394 0015 5F5F7569 		.ascii	"__uint8_t\000"
 1394      6E74385F 
 1394      7400
 1395              	.LASF33:
 1396 001f 756C4C6F 		.ascii	"ulLoopCounter\000"
 1396      6F70436F 
 1396      756E7465 
 1396      7200
 1397              	.LASF21:
 1398 002d 5469636B 		.ascii	"TickType_t\000"
 1398      54797065 
 1398      5F7400
 1399              	.LASF6:
 1400 0038 5F5F696E 		.ascii	"__int32_t\000"
 1400      7433325F 
 1400      7400
 1401              	.LASF24:
 1402 0042 78517565 		.ascii	"xQueue\000"
 1402      756500
 1403              	.LASF38:
 1404 0049 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1404      4320342E 
 1404      392E3320 
 1404      32303135 
 1404      30333033 
 1405 007c 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1405      20726576 
 1405      6973696F 
 1405      6E203232 
 1405      31323230 
 1406 00af 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1406      66756E63 
 1406      74696F6E 
 1406      2D736563 
 1406      74696F6E 
 1407              	.LASF23:
 1408 00d7 51756575 		.ascii	"QueueHandle_t\000"
 1408      6548616E 
 1408      646C655F 
 1408      7400
 1409              	.LASF26:
 1410 00e5 70727648 		.ascii	"prvHighestPriorityPeekTask\000"
 1410      69676865 
 1410      73745072 
 1410      696F7269 
 1410      74795065 
 1411              	.LASF31:
 1412 0100 756C4C61 		.ascii	"ulLastLoopCounter\000"
 1412      73744C6F 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 35


 1412      6F70436F 
 1412      756E7465 
 1412      7200
 1413              	.LASF17:
 1414 0112 666C6F61 		.ascii	"float\000"
 1414      7400
 1415              	.LASF1:
 1416 0118 7369676E 		.ascii	"signed char\000"
 1416      65642063 
 1416      68617200 
 1417              	.LASF2:
 1418 0124 756E7369 		.ascii	"unsigned char\000"
 1418      676E6564 
 1418      20636861 
 1418      7200
 1419              	.LASF36:
 1420 0132 78486967 		.ascii	"xHighPriorityTask\000"
 1420      68507269 
 1420      6F726974 
 1420      79546173 
 1420      6B00
 1421              	.LASF9:
 1422 0144 6C6F6E67 		.ascii	"long unsigned int\000"
 1422      20756E73 
 1422      69676E65 
 1422      6420696E 
 1422      7400
 1423              	.LASF4:
 1424 0156 73686F72 		.ascii	"short unsigned int\000"
 1424      7420756E 
 1424      7369676E 
 1424      65642069 
 1424      6E7400
 1425              	.LASF34:
 1426 0169 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1426      52784275 
 1426      66666572 
 1426      00
 1427              	.LASF27:
 1428 0176 70727648 		.ascii	"prvHighPriorityPeekTask\000"
 1428      69676850 
 1428      72696F72 
 1428      69747950 
 1428      65656B54 
 1429              	.LASF18:
 1430 018e 646F7562 		.ascii	"double\000"
 1430      6C6500
 1431              	.LASF8:
 1432 0195 5F5F7569 		.ascii	"__uint32_t\000"
 1432      6E743332 
 1432      5F7400
 1433              	.LASF0:
 1434 01a0 756E7369 		.ascii	"unsigned int\000"
 1434      676E6564 
 1434      20696E74 
 1434      00
 1435              	.LASF11:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 36


 1436 01ad 6C6F6E67 		.ascii	"long long unsigned int\000"
 1436      206C6F6E 
 1436      6720756E 
 1436      7369676E 
 1436      65642069 
 1437              	.LASF14:
 1438 01c4 75696E74 		.ascii	"uint8_t\000"
 1438      385F7400 
 1439              	.LASF30:
 1440 01cc 7072764C 		.ascii	"prvLowPriorityPeekTask\000"
 1440      6F775072 
 1440      696F7269 
 1440      74795065 
 1440      656B5461 
 1441              	.LASF15:
 1442 01e3 696E7433 		.ascii	"int32_t\000"
 1442      325F7400 
 1443              	.LASF12:
 1444 01eb 73697A65 		.ascii	"sizetype\000"
 1444      74797065 
 1444      00
 1445              	.LASF10:
 1446 01f4 6C6F6E67 		.ascii	"long long int\000"
 1446      206C6F6E 
 1446      6720696E 
 1446      7400
 1447              	.LASF13:
 1448 0202 63686172 		.ascii	"char\000"
 1448      00
 1449              	.LASF28:
 1450 0207 70765061 		.ascii	"pvParameters\000"
 1450      72616D65 
 1450      74657273 
 1450      00
 1451              	.LASF25:
 1452 0214 756C5661 		.ascii	"ulValue\000"
 1452      6C756500 
 1453              	.LASF3:
 1454 021c 73686F72 		.ascii	"short int\000"
 1454      7420696E 
 1454      7400
 1455              	.LASF35:
 1456 0226 784D6564 		.ascii	"xMediumPriorityTask\000"
 1456      69756D50 
 1456      72696F72 
 1456      69747954 
 1456      61736B00 
 1457              	.LASF22:
 1458 023a 5461736B 		.ascii	"TaskHandle_t\000"
 1458      48616E64 
 1458      6C655F74 
 1458      00
 1459              	.LASF16:
 1460 0247 75696E74 		.ascii	"uint32_t\000"
 1460      33325F74 
 1460      00
 1461              	.LASF7:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cc7svYDh.s 			page 37


 1462 0250 6C6F6E67 		.ascii	"long int\000"
 1462      20696E74 
 1462      00
 1463              	.LASF32:
 1464 0259 78457272 		.ascii	"xErrorDetected\000"
 1464      6F724465 
 1464      74656374 
 1464      656400
 1465              	.LASF29:
 1466 0268 7072764D 		.ascii	"prvMediumPriorityPeekTask\000"
 1466      65646975 
 1466      6D507269 
 1466      6F726974 
 1466      79506565 
 1467              	.LASF41:
 1468 0282 76537461 		.ascii	"vStartQueuePeekTasks\000"
 1468      72745175 
 1468      65756550 
 1468      65656B54 
 1468      61736B73 
 1469              	.LASF39:
 1470 0297 2E2E5C43 		.ascii	"..\\Common\\Minimal\\QPeek.c\000"
 1470      6F6D6D6F 
 1470      6E5C4D69 
 1470      6E696D61 
 1470      6C5C5150 
 1471              	.LASF20:
 1472 02b1 55426173 		.ascii	"UBaseType_t\000"
 1472      65547970 
 1472      655F7400 
 1473              	.LASF19:
 1474 02bd 42617365 		.ascii	"BaseType_t\000"
 1474      54797065 
 1474      5F7400
 1475              	.LASF40:
 1476 02c8 433A5C55 		.ascii	"C:\\Users\\bmt\\Documents\\GitHub\\FreeRTOS_CY8CKIT"
 1476      73657273 
 1476      5C626D74 
 1476      5C446F63 
 1476      756D656E 
 1477 02f6 5F303539 		.ascii	"_059\\FreeRTOS_Demo.cydsn\000"
 1477      5C467265 
 1477      6552544F 
 1477      535F4465 
 1477      6D6F2E63 
 1478              	.LASF42:
 1479 030f 78417265 		.ascii	"xAreQueuePeekTasksStillRunning\000"
 1479      51756575 
 1479      65506565 
 1479      6B546173 
 1479      6B735374 
 1480              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

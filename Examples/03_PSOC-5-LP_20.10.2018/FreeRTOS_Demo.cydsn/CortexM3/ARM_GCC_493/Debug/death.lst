ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"death.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	1
  20              	usCreationCount:
  21 0000 0000     		.space	2
  22 0002 0000     		.align	2
  23              	uxTasksRunningAtStart:
  24 0004 00000000 		.space	4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	uxMaxNumberOfExtraTasksRunning, %object
  28              		.size	uxMaxNumberOfExtraTasksRunning, 4
  29              	uxMaxNumberOfExtraTasksRunning:
  30 0000 03000000 		.word	3
  31              		.comm	xCreatedTask,4,4
  32              		.align	2
  33              	.LC0:
  34 0004 43524541 		.ascii	"CREATOR\000"
  34      544F5200 
  35              		.section	.text.vCreateSuicidalTasks,"ax",%progbits
  36              		.align	2
  37              		.global	vCreateSuicidalTasks
  38              		.thumb
  39              		.thumb_func
  40              		.type	vCreateSuicidalTasks, %function
  41              	vCreateSuicidalTasks:
  42              	.LFB68:
  43              		.file 1 "..\\Common\\Minimal\\death.c"
   1:..\Common\Minimal/death.c **** /*
   2:..\Common\Minimal/death.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/death.c ****     All rights reserved
   4:..\Common\Minimal/death.c **** 
   5:..\Common\Minimal/death.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/death.c **** 
   7:..\Common\Minimal/death.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/death.c **** 
   9:..\Common\Minimal/death.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/death.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/death.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/death.c **** 
  13:..\Common\Minimal/death.c ****     ***************************************************************************
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 2


  14:..\Common\Minimal/death.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/death.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/death.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/death.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/death.c ****     ***************************************************************************
  19:..\Common\Minimal/death.c **** 
  20:..\Common\Minimal/death.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/death.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/death.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/death.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/death.c **** 
  25:..\Common\Minimal/death.c ****     ***************************************************************************
  26:..\Common\Minimal/death.c ****      *                                                                       *
  27:..\Common\Minimal/death.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/death.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/death.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/death.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/death.c ****      *                                                                       *
  32:..\Common\Minimal/death.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/death.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/death.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/death.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/death.c ****      *                                                                       *
  37:..\Common\Minimal/death.c ****     ***************************************************************************
  38:..\Common\Minimal/death.c **** 
  39:..\Common\Minimal/death.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/death.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/death.c ****     defined configASSERT()?
  42:..\Common\Minimal/death.c **** 
  43:..\Common\Minimal/death.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/death.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/death.c ****     participating in the support forum.
  46:..\Common\Minimal/death.c **** 
  47:..\Common\Minimal/death.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/death.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/death.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/death.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/death.c **** 
  52:..\Common\Minimal/death.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/death.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/death.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Common\Minimal/death.c **** 
  56:..\Common\Minimal/death.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/death.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/death.c **** 
  59:..\Common\Minimal/death.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/death.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/death.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/death.c **** 
  63:..\Common\Minimal/death.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/death.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/death.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/death.c **** 
  67:..\Common\Minimal/death.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/death.c **** */
  69:..\Common\Minimal/death.c **** 
  70:..\Common\Minimal/death.c **** /**
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 3


  71:..\Common\Minimal/death.c ****  * Create a single persistent task which periodically dynamically creates another
  72:..\Common\Minimal/death.c ****  * two tasks.  The original task is called the creator task, the two tasks it
  73:..\Common\Minimal/death.c ****  * creates are called suicidal tasks.
  74:..\Common\Minimal/death.c ****  *
  75:..\Common\Minimal/death.c ****  * One of the created suicidal tasks kill one other suicidal task before killing
  76:..\Common\Minimal/death.c ****  * itself - leaving just the original task remaining.
  77:..\Common\Minimal/death.c ****  *
  78:..\Common\Minimal/death.c ****  * The creator task must be spawned after all of the other demo application tasks
  79:..\Common\Minimal/death.c ****  * as it keeps a check on the number of tasks under the scheduler control.  The
  80:..\Common\Minimal/death.c ****  * number of tasks it expects to see running should never be greater than the
  81:..\Common\Minimal/death.c ****  * number of tasks that were in existence when the creator task was spawned, plus
  82:..\Common\Minimal/death.c ****  * one set of four suicidal tasks.  If this number is exceeded an error is flagged.
  83:..\Common\Minimal/death.c ****  *
  84:..\Common\Minimal/death.c ****  * \page DeathC death.c
  85:..\Common\Minimal/death.c ****  * \ingroup DemoFiles
  86:..\Common\Minimal/death.c ****  * <HR>
  87:..\Common\Minimal/death.c ****  */
  88:..\Common\Minimal/death.c **** 
  89:..\Common\Minimal/death.c **** 
  90:..\Common\Minimal/death.c **** #include <stdlib.h>
  91:..\Common\Minimal/death.c **** 
  92:..\Common\Minimal/death.c **** /* Scheduler include files. */
  93:..\Common\Minimal/death.c **** #include "FreeRTOS.h"
  94:..\Common\Minimal/death.c **** #include "task.h"
  95:..\Common\Minimal/death.c **** 
  96:..\Common\Minimal/death.c **** /* Demo program include files. */
  97:..\Common\Minimal/death.c **** #include "death.h"
  98:..\Common\Minimal/death.c **** 
  99:..\Common\Minimal/death.c **** #define deathSTACK_SIZE		( configMINIMAL_STACK_SIZE + 60 )
 100:..\Common\Minimal/death.c **** 
 101:..\Common\Minimal/death.c **** /* The task originally created which is responsible for periodically dynamically
 102:..\Common\Minimal/death.c **** creating another four tasks. */
 103:..\Common\Minimal/death.c **** static portTASK_FUNCTION_PROTO( vCreateTasks, pvParameters );
 104:..\Common\Minimal/death.c **** 
 105:..\Common\Minimal/death.c **** /* The task function of the dynamically created tasks. */
 106:..\Common\Minimal/death.c **** static portTASK_FUNCTION_PROTO( vSuicidalTask, pvParameters );
 107:..\Common\Minimal/death.c **** 
 108:..\Common\Minimal/death.c **** /* A variable which is incremented every time the dynamic tasks are created.  This
 109:..\Common\Minimal/death.c **** is used to check that the task is still running. */
 110:..\Common\Minimal/death.c **** static volatile uint16_t usCreationCount = 0;
 111:..\Common\Minimal/death.c **** 
 112:..\Common\Minimal/death.c **** /* Used to store the number of tasks that were originally running so the creator
 113:..\Common\Minimal/death.c **** task can tell if any of the suicidal tasks have failed to die.
 114:..\Common\Minimal/death.c **** */
 115:..\Common\Minimal/death.c **** static volatile UBaseType_t uxTasksRunningAtStart = 0;
 116:..\Common\Minimal/death.c **** 
 117:..\Common\Minimal/death.c **** /* When a task deletes itself, it stack and TCB are cleaned up by the Idle task.
 118:..\Common\Minimal/death.c **** Under heavy load the idle task might not get much processing time, so it would
 119:..\Common\Minimal/death.c **** be legitimate for several tasks to remain undeleted for a short period.  There
 120:..\Common\Minimal/death.c **** may also be a few other unexpected tasks if, for example, the tasks that test
 121:..\Common\Minimal/death.c **** static allocation are also being used. */
 122:..\Common\Minimal/death.c **** static const UBaseType_t uxMaxNumberOfExtraTasksRunning = 3;
 123:..\Common\Minimal/death.c **** 
 124:..\Common\Minimal/death.c **** /* Used to store a handle to the task that should be killed by a suicidal task,
 125:..\Common\Minimal/death.c **** before it kills itself. */
 126:..\Common\Minimal/death.c **** TaskHandle_t xCreatedTask;
 127:..\Common\Minimal/death.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 4


 128:..\Common\Minimal/death.c **** /*-----------------------------------------------------------*/
 129:..\Common\Minimal/death.c **** 
 130:..\Common\Minimal/death.c **** void vCreateSuicidalTasks( UBaseType_t uxPriority )
 131:..\Common\Minimal/death.c **** {
  44              		.loc 1 131 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 8
  47              		@ frame_needed = 1, uses_anonymous_args = 0
  48 0000 80B5     		push	{r7, lr}
  49              		.cfi_def_cfa_offset 8
  50              		.cfi_offset 7, -8
  51              		.cfi_offset 14, -4
  52 0002 84B0     		sub	sp, sp, #16
  53              		.cfi_def_cfa_offset 24
  54 0004 02AF     		add	r7, sp, #8
  55              		.cfi_def_cfa 7, 16
  56 0006 7860     		str	r0, [r7, #4]
 132:..\Common\Minimal/death.c **** 	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) NULL, uxPriority, NULL );
  57              		.loc 1 132 0
  58 0008 7B68     		ldr	r3, [r7, #4]
  59 000a 0093     		str	r3, [sp]
  60 000c 0023     		movs	r3, #0
  61 000e 0193     		str	r3, [sp, #4]
  62 0010 0948     		ldr	r0, .L2
  63 0012 0A49     		ldr	r1, .L2+4
  64 0014 A022     		movs	r2, #160
  65 0016 0023     		movs	r3, #0
  66 0018 FFF7FEFF 		bl	xTaskCreate
 133:..\Common\Minimal/death.c **** 
 134:..\Common\Minimal/death.c **** 	/* Record the number of tasks that are running now so we know if any of the
 135:..\Common\Minimal/death.c **** 	suicidal tasks have failed to be killed. */
 136:..\Common\Minimal/death.c **** 	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
  67              		.loc 1 136 0
  68 001c FFF7FEFF 		bl	uxTaskGetNumberOfTasks
  69 0020 0246     		mov	r2, r0
  70 0022 074B     		ldr	r3, .L2+8
  71 0024 1A60     		str	r2, [r3]
 137:..\Common\Minimal/death.c **** 
 138:..\Common\Minimal/death.c **** 	/* FreeRTOS.org versions before V3.0 started the idle-task as the very
 139:..\Common\Minimal/death.c **** 	first task. The idle task was then already included in uxTasksRunningAtStart.
 140:..\Common\Minimal/death.c **** 	From FreeRTOS V3.0 on, the idle task is started when the scheduler is
 141:..\Common\Minimal/death.c **** 	started. Therefore the idle task is not yet accounted for. We correct
 142:..\Common\Minimal/death.c **** 	this by increasing uxTasksRunningAtStart by 1. */
 143:..\Common\Minimal/death.c **** 	uxTasksRunningAtStart++;
  72              		.loc 1 143 0
  73 0026 064B     		ldr	r3, .L2+8
  74 0028 1B68     		ldr	r3, [r3]
  75 002a 0133     		adds	r3, r3, #1
  76 002c 044A     		ldr	r2, .L2+8
  77 002e 1360     		str	r3, [r2]
 144:..\Common\Minimal/death.c **** 
 145:..\Common\Minimal/death.c **** 	/* From FreeRTOS version 7.0.0 can optionally create a timer service task.
 146:..\Common\Minimal/death.c **** 	If this is done, then uxTasksRunningAtStart needs incrementing again as that
 147:..\Common\Minimal/death.c **** 	too is created when the scheduler is started. */
 148:..\Common\Minimal/death.c **** 	#if configUSE_TIMERS == 1
 149:..\Common\Minimal/death.c **** 	{
 150:..\Common\Minimal/death.c **** 		uxTasksRunningAtStart++;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 5


 151:..\Common\Minimal/death.c **** 	}
 152:..\Common\Minimal/death.c **** 	#endif
 153:..\Common\Minimal/death.c **** }
  78              		.loc 1 153 0
  79 0030 0837     		adds	r7, r7, #8
  80              		.cfi_def_cfa_offset 8
  81 0032 BD46     		mov	sp, r7
  82              		.cfi_def_cfa_register 13
  83              		@ sp needed
  84 0034 80BD     		pop	{r7, pc}
  85              	.L3:
  86 0036 00BF     		.align	2
  87              	.L2:
  88 0038 00000000 		.word	vCreateTasks
  89 003c 04000000 		.word	.LC0
  90 0040 04000000 		.word	uxTasksRunningAtStart
  91              		.cfi_endproc
  92              	.LFE68:
  93              		.size	vCreateSuicidalTasks, .-vCreateSuicidalTasks
  94              		.section	.text.vSuicidalTask,"ax",%progbits
  95              		.align	2
  96              		.thumb
  97              		.thumb_func
  98              		.type	vSuicidalTask, %function
  99              	vSuicidalTask:
 100              	.LFB69:
 154:..\Common\Minimal/death.c **** /*-----------------------------------------------------------*/
 155:..\Common\Minimal/death.c **** 
 156:..\Common\Minimal/death.c **** static portTASK_FUNCTION( vSuicidalTask, pvParameters )
 157:..\Common\Minimal/death.c **** {
 101              		.loc 1 157 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 24
 104              		@ frame_needed = 1, uses_anonymous_args = 0
 105 0000 80B5     		push	{r7, lr}
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 7, -8
 108              		.cfi_offset 14, -4
 109 0002 86B0     		sub	sp, sp, #24
 110              		.cfi_def_cfa_offset 32
 111 0004 00AF     		add	r7, sp, #0
 112              		.cfi_def_cfa_register 7
 113 0006 7860     		str	r0, [r7, #4]
 158:..\Common\Minimal/death.c **** volatile long l1, l2;
 159:..\Common\Minimal/death.c **** TaskHandle_t xTaskToKill;
 160:..\Common\Minimal/death.c **** const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 200 );
 114              		.loc 1 160 0
 115 0008 C823     		movs	r3, #200
 116 000a 3B61     		str	r3, [r7, #16]
 161:..\Common\Minimal/death.c **** 
 162:..\Common\Minimal/death.c **** 	if( pvParameters != NULL )
 117              		.loc 1 162 0
 118 000c 7B68     		ldr	r3, [r7, #4]
 119 000e 002B     		cmp	r3, #0
 120 0010 03D0     		beq	.L5
 163:..\Common\Minimal/death.c **** 	{
 164:..\Common\Minimal/death.c **** 		/* This task is periodically created four times.  Two created tasks are
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 6


 165:..\Common\Minimal/death.c **** 		passed a handle to the other task so it can kill it before killing itself.
 166:..\Common\Minimal/death.c **** 		The other task is passed in null. */
 167:..\Common\Minimal/death.c **** 		xTaskToKill = *( TaskHandle_t* )pvParameters;
 121              		.loc 1 167 0
 122 0012 7B68     		ldr	r3, [r7, #4]
 123 0014 1B68     		ldr	r3, [r3]
 124 0016 7B61     		str	r3, [r7, #20]
 125 0018 01E0     		b	.L6
 126              	.L5:
 168:..\Common\Minimal/death.c **** 	}
 169:..\Common\Minimal/death.c **** 	else
 170:..\Common\Minimal/death.c **** 	{
 171:..\Common\Minimal/death.c **** 		xTaskToKill = NULL;
 127              		.loc 1 171 0
 128 001a 0023     		movs	r3, #0
 129 001c 7B61     		str	r3, [r7, #20]
 130              	.L6:
 172:..\Common\Minimal/death.c **** 	}
 173:..\Common\Minimal/death.c **** 
 174:..\Common\Minimal/death.c **** 	for( ;; )
 175:..\Common\Minimal/death.c **** 	{
 176:..\Common\Minimal/death.c **** 		/* Do something random just to use some stack and registers. */
 177:..\Common\Minimal/death.c **** 		l1 = 2;
 131              		.loc 1 177 0
 132 001e 0223     		movs	r3, #2
 133 0020 FB60     		str	r3, [r7, #12]
 178:..\Common\Minimal/death.c **** 		l2 = 89;
 134              		.loc 1 178 0
 135 0022 5923     		movs	r3, #89
 136 0024 BB60     		str	r3, [r7, #8]
 179:..\Common\Minimal/death.c **** 		l2 *= l1;
 137              		.loc 1 179 0
 138 0026 FB68     		ldr	r3, [r7, #12]
 139 0028 BA68     		ldr	r2, [r7, #8]
 140 002a 02FB03F3 		mul	r3, r2, r3
 141 002e BB60     		str	r3, [r7, #8]
 180:..\Common\Minimal/death.c **** 		vTaskDelay( xDelay );
 142              		.loc 1 180 0
 143 0030 3869     		ldr	r0, [r7, #16]
 144 0032 FFF7FEFF 		bl	vTaskDelay
 181:..\Common\Minimal/death.c **** 
 182:..\Common\Minimal/death.c **** 		if( xTaskToKill != NULL )
 145              		.loc 1 182 0
 146 0036 7B69     		ldr	r3, [r7, #20]
 147 0038 002B     		cmp	r3, #0
 148 003a 08D0     		beq	.L7
 183:..\Common\Minimal/death.c **** 		{
 184:..\Common\Minimal/death.c **** 			/* Make sure the other task has a go before we delete it. */
 185:..\Common\Minimal/death.c **** 			vTaskDelay( ( TickType_t ) 0 );
 149              		.loc 1 185 0
 150 003c 0020     		movs	r0, #0
 151 003e FFF7FEFF 		bl	vTaskDelay
 186:..\Common\Minimal/death.c **** 
 187:..\Common\Minimal/death.c **** 			/* Kill the other task that was created by vCreateTasks(). */
 188:..\Common\Minimal/death.c **** 			vTaskDelete( xTaskToKill );
 152              		.loc 1 188 0
 153 0042 7869     		ldr	r0, [r7, #20]
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 7


 154 0044 FFF7FEFF 		bl	vTaskDelete
 189:..\Common\Minimal/death.c **** 
 190:..\Common\Minimal/death.c **** 			/* Kill ourselves. */
 191:..\Common\Minimal/death.c **** 			vTaskDelete( NULL );
 155              		.loc 1 191 0
 156 0048 0020     		movs	r0, #0
 157 004a FFF7FEFF 		bl	vTaskDelete
 158              	.L7:
 192:..\Common\Minimal/death.c **** 		}
 193:..\Common\Minimal/death.c **** 	}
 159              		.loc 1 193 0
 160 004e E6E7     		b	.L6
 161              		.cfi_endproc
 162              	.LFE69:
 163              		.size	vSuicidalTask, .-vSuicidalTask
 164              		.section	.rodata
 165              		.align	2
 166              	.LC1:
 167 000c 53554943 		.ascii	"SUICID1\000"
 167      49443100 
 168              		.align	2
 169              	.LC2:
 170 0014 53554943 		.ascii	"SUICID2\000"
 170      49443200 
 171              		.section	.text.vCreateTasks,"ax",%progbits
 172              		.align	2
 173              		.thumb
 174              		.thumb_func
 175              		.type	vCreateTasks, %function
 176              	vCreateTasks:
 177              	.LFB70:
 194:..\Common\Minimal/death.c **** }/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
 195:..\Common\Minimal/death.c **** /*-----------------------------------------------------------*/
 196:..\Common\Minimal/death.c **** 
 197:..\Common\Minimal/death.c **** static portTASK_FUNCTION( vCreateTasks, pvParameters )
 198:..\Common\Minimal/death.c **** {
 178              		.loc 1 198 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 16
 181              		@ frame_needed = 1, uses_anonymous_args = 0
 182 0000 80B5     		push	{r7, lr}
 183              		.cfi_def_cfa_offset 8
 184              		.cfi_offset 7, -8
 185              		.cfi_offset 14, -4
 186 0002 86B0     		sub	sp, sp, #24
 187              		.cfi_def_cfa_offset 32
 188 0004 02AF     		add	r7, sp, #8
 189              		.cfi_def_cfa 7, 24
 190 0006 7860     		str	r0, [r7, #4]
 199:..\Common\Minimal/death.c **** const TickType_t xDelay = pdMS_TO_TICKS( ( TickType_t ) 1000 );
 191              		.loc 1 199 0
 192 0008 4FF47A73 		mov	r3, #1000
 193 000c FB60     		str	r3, [r7, #12]
 200:..\Common\Minimal/death.c **** UBaseType_t uxPriority;
 201:..\Common\Minimal/death.c **** 
 202:..\Common\Minimal/death.c **** 	/* Remove compiler warning about unused parameter. */
 203:..\Common\Minimal/death.c **** 	( void ) pvParameters;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 8


 204:..\Common\Minimal/death.c **** 
 205:..\Common\Minimal/death.c **** 	uxPriority = uxTaskPriorityGet( NULL );
 194              		.loc 1 205 0
 195 000e 0020     		movs	r0, #0
 196 0010 FFF7FEFF 		bl	uxTaskPriorityGet
 197 0014 B860     		str	r0, [r7, #8]
 198              	.L9:
 206:..\Common\Minimal/death.c **** 
 207:..\Common\Minimal/death.c **** 	for( ;; )
 208:..\Common\Minimal/death.c **** 	{
 209:..\Common\Minimal/death.c **** 		/* Just loop round, delaying then creating the four suicidal tasks. */
 210:..\Common\Minimal/death.c **** 		vTaskDelay( xDelay );
 199              		.loc 1 210 0 discriminator 1
 200 0016 F868     		ldr	r0, [r7, #12]
 201 0018 FFF7FEFF 		bl	vTaskDelay
 211:..\Common\Minimal/death.c **** 
 212:..\Common\Minimal/death.c **** 		xCreatedTask = NULL;
 202              		.loc 1 212 0 discriminator 1
 203 001c 0F4B     		ldr	r3, .L10
 204 001e 0022     		movs	r2, #0
 205 0020 1A60     		str	r2, [r3]
 213:..\Common\Minimal/death.c **** 
 214:..\Common\Minimal/death.c **** 		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask 
 206              		.loc 1 214 0 discriminator 1
 207 0022 BB68     		ldr	r3, [r7, #8]
 208 0024 0093     		str	r3, [sp]
 209 0026 0D4B     		ldr	r3, .L10
 210 0028 0193     		str	r3, [sp, #4]
 211 002a 0D48     		ldr	r0, .L10+4
 212 002c 0D49     		ldr	r1, .L10+8
 213 002e 6422     		movs	r2, #100
 214 0030 0023     		movs	r3, #0
 215 0032 FFF7FEFF 		bl	xTaskCreate
 215:..\Common\Minimal/death.c **** 		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL 
 216              		.loc 1 215 0 discriminator 1
 217 0036 BB68     		ldr	r3, [r7, #8]
 218 0038 0093     		str	r3, [sp]
 219 003a 0023     		movs	r3, #0
 220 003c 0193     		str	r3, [sp, #4]
 221 003e 0848     		ldr	r0, .L10+4
 222 0040 0949     		ldr	r1, .L10+12
 223 0042 6422     		movs	r2, #100
 224 0044 054B     		ldr	r3, .L10
 225 0046 FFF7FEFF 		bl	xTaskCreate
 216:..\Common\Minimal/death.c **** 
 217:..\Common\Minimal/death.c **** 		++usCreationCount;
 226              		.loc 1 217 0 discriminator 1
 227 004a 084B     		ldr	r3, .L10+16
 228 004c 1B88     		ldrh	r3, [r3]	@ movhi
 229 004e 9BB2     		uxth	r3, r3
 230 0050 0133     		adds	r3, r3, #1
 231 0052 9AB2     		uxth	r2, r3
 232 0054 054B     		ldr	r3, .L10+16
 233 0056 1A80     		strh	r2, [r3]	@ movhi
 218:..\Common\Minimal/death.c **** 	}
 234              		.loc 1 218 0 discriminator 1
 235 0058 DDE7     		b	.L9
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 9


 236              	.L11:
 237 005a 00BF     		.align	2
 238              	.L10:
 239 005c 00000000 		.word	xCreatedTask
 240 0060 00000000 		.word	vSuicidalTask
 241 0064 0C000000 		.word	.LC1
 242 0068 14000000 		.word	.LC2
 243 006c 00000000 		.word	usCreationCount
 244              		.cfi_endproc
 245              	.LFE70:
 246              		.size	vCreateTasks, .-vCreateTasks
 247              		.section	.text.xIsCreateTaskStillRunning,"ax",%progbits
 248              		.align	2
 249              		.global	xIsCreateTaskStillRunning
 250              		.thumb
 251              		.thumb_func
 252              		.type	xIsCreateTaskStillRunning, %function
 253              	xIsCreateTaskStillRunning:
 254              	.LFB71:
 219:..\Common\Minimal/death.c **** }
 220:..\Common\Minimal/death.c **** /*-----------------------------------------------------------*/
 221:..\Common\Minimal/death.c **** 
 222:..\Common\Minimal/death.c **** /* This is called to check that the creator task is still running and that there
 223:..\Common\Minimal/death.c **** are not any more than four extra tasks. */
 224:..\Common\Minimal/death.c **** BaseType_t xIsCreateTaskStillRunning( void )
 225:..\Common\Minimal/death.c **** {
 255              		.loc 1 225 0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 8
 258              		@ frame_needed = 1, uses_anonymous_args = 0
 259 0000 80B5     		push	{r7, lr}
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 82B0     		sub	sp, sp, #8
 264              		.cfi_def_cfa_offset 16
 265 0004 00AF     		add	r7, sp, #0
 266              		.cfi_def_cfa_register 7
 226:..\Common\Minimal/death.c **** static uint16_t usLastCreationCount = 0xfff;
 227:..\Common\Minimal/death.c **** BaseType_t xReturn = pdTRUE;
 267              		.loc 1 227 0
 268 0006 0123     		movs	r3, #1
 269 0008 7B60     		str	r3, [r7, #4]
 228:..\Common\Minimal/death.c **** static UBaseType_t uxTasksRunningNow;
 229:..\Common\Minimal/death.c **** 
 230:..\Common\Minimal/death.c **** 	if( usLastCreationCount == usCreationCount )
 270              		.loc 1 230 0
 271 000a 164B     		ldr	r3, .L18
 272 000c 1A88     		ldrh	r2, [r3]
 273 000e 164B     		ldr	r3, .L18+4
 274 0010 1B88     		ldrh	r3, [r3]	@ movhi
 275 0012 9BB2     		uxth	r3, r3
 276 0014 9A42     		cmp	r2, r3
 277 0016 02D1     		bne	.L13
 231:..\Common\Minimal/death.c **** 	{
 232:..\Common\Minimal/death.c **** 		xReturn = pdFALSE;
 278              		.loc 1 232 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 10


 279 0018 0023     		movs	r3, #0
 280 001a 7B60     		str	r3, [r7, #4]
 281 001c 04E0     		b	.L14
 282              	.L13:
 233:..\Common\Minimal/death.c **** 	}
 234:..\Common\Minimal/death.c **** 	else
 235:..\Common\Minimal/death.c **** 	{
 236:..\Common\Minimal/death.c **** 		usLastCreationCount = usCreationCount;
 283              		.loc 1 236 0
 284 001e 124B     		ldr	r3, .L18+4
 285 0020 1B88     		ldrh	r3, [r3]	@ movhi
 286 0022 9AB2     		uxth	r2, r3
 287 0024 0F4B     		ldr	r3, .L18
 288 0026 1A80     		strh	r2, [r3]	@ movhi
 289              	.L14:
 237:..\Common\Minimal/death.c **** 	}
 238:..\Common\Minimal/death.c **** 
 239:..\Common\Minimal/death.c **** 	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
 290              		.loc 1 239 0
 291 0028 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 292 002c 0246     		mov	r2, r0
 293 002e 0F4B     		ldr	r3, .L18+8
 294 0030 1A60     		str	r2, [r3]
 240:..\Common\Minimal/death.c **** 
 241:..\Common\Minimal/death.c **** 	if( uxTasksRunningNow < uxTasksRunningAtStart )
 295              		.loc 1 241 0
 296 0032 0E4B     		ldr	r3, .L18+8
 297 0034 1A68     		ldr	r2, [r3]
 298 0036 0E4B     		ldr	r3, .L18+12
 299 0038 1B68     		ldr	r3, [r3]
 300 003a 9A42     		cmp	r2, r3
 301 003c 02D2     		bcs	.L15
 242:..\Common\Minimal/death.c **** 	{
 243:..\Common\Minimal/death.c **** 		xReturn = pdFALSE;
 302              		.loc 1 243 0
 303 003e 0023     		movs	r3, #0
 304 0040 7B60     		str	r3, [r7, #4]
 305 0042 09E0     		b	.L16
 306              	.L15:
 244:..\Common\Minimal/death.c **** 	}
 245:..\Common\Minimal/death.c **** 	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 307              		.loc 1 245 0
 308 0044 094B     		ldr	r3, .L18+8
 309 0046 1A68     		ldr	r2, [r3]
 310 0048 094B     		ldr	r3, .L18+12
 311 004a 1B68     		ldr	r3, [r3]
 312 004c D31A     		subs	r3, r2, r3
 313 004e 0322     		movs	r2, #3
 314 0050 9342     		cmp	r3, r2
 315 0052 01D9     		bls	.L16
 246:..\Common\Minimal/death.c **** 	{
 247:..\Common\Minimal/death.c **** 		xReturn = pdFALSE;
 316              		.loc 1 247 0
 317 0054 0023     		movs	r3, #0
 318 0056 7B60     		str	r3, [r7, #4]
 319              	.L16:
 248:..\Common\Minimal/death.c **** 	}
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 11


 249:..\Common\Minimal/death.c **** 	else
 250:..\Common\Minimal/death.c **** 	{
 251:..\Common\Minimal/death.c **** 		/* Everything is okay. */
 252:..\Common\Minimal/death.c **** 	}
 253:..\Common\Minimal/death.c **** 
 254:..\Common\Minimal/death.c **** 	return xReturn;
 320              		.loc 1 254 0
 321 0058 7B68     		ldr	r3, [r7, #4]
 255:..\Common\Minimal/death.c **** }
 322              		.loc 1 255 0
 323 005a 1846     		mov	r0, r3
 324 005c 0837     		adds	r7, r7, #8
 325              		.cfi_def_cfa_offset 8
 326 005e BD46     		mov	sp, r7
 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 0060 80BD     		pop	{r7, pc}
 330              	.L19:
 331 0062 00BF     		.align	2
 332              	.L18:
 333 0064 00000000 		.word	usLastCreationCount.6967
 334 0068 00000000 		.word	usCreationCount
 335 006c 08000000 		.word	uxTasksRunningNow.6969
 336 0070 04000000 		.word	uxTasksRunningAtStart
 337              		.cfi_endproc
 338              	.LFE71:
 339              		.size	xIsCreateTaskStillRunning, .-xIsCreateTaskStillRunning
 340              		.data
 341              		.align	1
 342              		.type	usLastCreationCount.6967, %object
 343              		.size	usLastCreationCount.6967, 2
 344              	usLastCreationCount.6967:
 345 0000 FF0F     		.short	4095
 346              		.bss
 347              		.align	2
 348              	uxTasksRunningNow.6969:
 349 0008 00000000 		.space	4
 350              		.text
 351              	.Letext0:
 352              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 353              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 354              		.file 4 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 355              		.file 5 "..\\Source\\include/task.h"
 356              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 357              		.section	.debug_info,"",%progbits
 358              	.Ldebug_info0:
 359 0000 6A020000 		.4byte	0x26a
 360 0004 0400     		.2byte	0x4
 361 0006 00000000 		.4byte	.Ldebug_abbrev0
 362 000a 04       		.byte	0x4
 363 000b 01       		.uleb128 0x1
 364 000c 31000000 		.4byte	.LASF37
 365 0010 01       		.byte	0x1
 366 0011 04010000 		.4byte	.LASF38
 367 0015 B2020000 		.4byte	.LASF39
 368 0019 00000000 		.4byte	.Ldebug_ranges0+0
 369 001d 00000000 		.4byte	0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 12


 370 0021 00000000 		.4byte	.Ldebug_line0
 371 0025 02       		.uleb128 0x2
 372 0026 04       		.byte	0x4
 373 0027 07       		.byte	0x7
 374 0028 B5010000 		.4byte	.LASF0
 375 002c 03       		.uleb128 0x3
 376 002d 04       		.byte	0x4
 377 002e 05       		.byte	0x5
 378 002f 696E7400 		.ascii	"int\000"
 379 0033 02       		.uleb128 0x2
 380 0034 01       		.byte	0x1
 381 0035 06       		.byte	0x6
 382 0036 76020000 		.4byte	.LASF1
 383 003a 02       		.uleb128 0x2
 384 003b 01       		.byte	0x1
 385 003c 08       		.byte	0x8
 386 003d 52010000 		.4byte	.LASF2
 387 0041 02       		.uleb128 0x2
 388 0042 02       		.byte	0x2
 389 0043 05       		.byte	0x5
 390 0044 2E020000 		.4byte	.LASF3
 391 0048 04       		.uleb128 0x4
 392 0049 60010000 		.4byte	.LASF5
 393 004d 02       		.byte	0x2
 394 004e 2B       		.byte	0x2b
 395 004f 53000000 		.4byte	0x53
 396 0053 02       		.uleb128 0x2
 397 0054 02       		.byte	0x2
 398 0055 07       		.byte	0x7
 399 0056 32010000 		.4byte	.LASF4
 400 005a 04       		.uleb128 0x4
 401 005b 27000000 		.4byte	.LASF6
 402 005f 02       		.byte	0x2
 403 0060 3F       		.byte	0x3f
 404 0061 65000000 		.4byte	0x65
 405 0065 02       		.uleb128 0x2
 406 0066 04       		.byte	0x4
 407 0067 05       		.byte	0x5
 408 0068 6D020000 		.4byte	.LASF7
 409 006c 04       		.uleb128 0x4
 410 006d 7D010000 		.4byte	.LASF8
 411 0071 02       		.byte	0x2
 412 0072 41       		.byte	0x41
 413 0073 77000000 		.4byte	0x77
 414 0077 02       		.uleb128 0x2
 415 0078 04       		.byte	0x4
 416 0079 07       		.byte	0x7
 417 007a 6B010000 		.4byte	.LASF9
 418 007e 02       		.uleb128 0x2
 419 007f 08       		.byte	0x8
 420 0080 05       		.byte	0x5
 421 0081 00000000 		.4byte	.LASF10
 422 0085 02       		.uleb128 0x2
 423 0086 08       		.byte	0x8
 424 0087 07       		.byte	0x7
 425 0088 C2010000 		.4byte	.LASF11
 426 008c 02       		.uleb128 0x2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 13


 427 008d 04       		.byte	0x4
 428 008e 07       		.byte	0x7
 429 008f E1010000 		.4byte	.LASF12
 430 0093 05       		.uleb128 0x5
 431 0094 04       		.byte	0x4
 432 0095 02       		.uleb128 0x2
 433 0096 01       		.byte	0x1
 434 0097 08       		.byte	0x8
 435 0098 FD010000 		.4byte	.LASF13
 436 009c 04       		.uleb128 0x4
 437 009d 38020000 		.4byte	.LASF14
 438 00a1 03       		.byte	0x3
 439 00a2 21       		.byte	0x21
 440 00a3 48000000 		.4byte	0x48
 441 00a7 04       		.uleb128 0x4
 442 00a8 D9010000 		.4byte	.LASF15
 443 00ac 03       		.byte	0x3
 444 00ad 2C       		.byte	0x2c
 445 00ae 5A000000 		.4byte	0x5a
 446 00b2 04       		.uleb128 0x4
 447 00b3 64020000 		.4byte	.LASF16
 448 00b7 03       		.byte	0x3
 449 00b8 2D       		.byte	0x2d
 450 00b9 6C000000 		.4byte	0x6c
 451 00bd 02       		.uleb128 0x2
 452 00be 04       		.byte	0x4
 453 00bf 04       		.byte	0x4
 454 00c0 E0000000 		.4byte	.LASF17
 455 00c4 02       		.uleb128 0x2
 456 00c5 08       		.byte	0x8
 457 00c6 04       		.byte	0x4
 458 00c7 CC000000 		.4byte	.LASF18
 459 00cb 06       		.uleb128 0x6
 460 00cc 9C000000 		.4byte	0x9c
 461 00d0 04       		.uleb128 0x4
 462 00d1 A7020000 		.4byte	.LASF19
 463 00d5 04       		.byte	0x4
 464 00d6 62       		.byte	0x62
 465 00d7 65000000 		.4byte	0x65
 466 00db 04       		.uleb128 0x4
 467 00dc E6000000 		.4byte	.LASF20
 468 00e0 04       		.byte	0x4
 469 00e1 63       		.byte	0x63
 470 00e2 77000000 		.4byte	0x77
 471 00e6 04       		.uleb128 0x4
 472 00e7 1C000000 		.4byte	.LASF21
 473 00eb 04       		.byte	0x4
 474 00ec 69       		.byte	0x69
 475 00ed B2000000 		.4byte	0xb2
 476 00f1 04       		.uleb128 0x4
 477 00f2 57020000 		.4byte	.LASF22
 478 00f6 05       		.byte	0x5
 479 00f7 67       		.byte	0x67
 480 00f8 93000000 		.4byte	0x93
 481 00fc 07       		.uleb128 0x7
 482 00fd 92020000 		.4byte	.LASF40
 483 0101 01       		.byte	0x1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 14


 484 0102 82       		.byte	0x82
 485 0103 00000000 		.4byte	.LFB68
 486 0107 44000000 		.4byte	.LFE68-.LFB68
 487 010b 01       		.uleb128 0x1
 488 010c 9C       		.byte	0x9c
 489 010d 20010000 		.4byte	0x120
 490 0111 08       		.uleb128 0x8
 491 0112 AA010000 		.4byte	.LASF23
 492 0116 01       		.byte	0x1
 493 0117 82       		.byte	0x82
 494 0118 DB000000 		.4byte	0xdb
 495 011c 02       		.uleb128 0x2
 496 011d 91       		.byte	0x91
 497 011e 74       		.sleb128 -12
 498 011f 00       		.byte	0
 499 0120 09       		.uleb128 0x9
 500 0121 0E000000 		.4byte	.LASF27
 501 0125 01       		.byte	0x1
 502 0126 9C       		.byte	0x9c
 503 0127 00000000 		.4byte	.LFB69
 504 012b 50000000 		.4byte	.LFE69-.LFB69
 505 012f 01       		.uleb128 0x1
 506 0130 9C       		.byte	0x9c
 507 0131 7A010000 		.4byte	0x17a
 508 0135 08       		.uleb128 0x8
 509 0136 02020000 		.4byte	.LASF24
 510 013a 01       		.byte	0x1
 511 013b 9C       		.byte	0x9c
 512 013c 93000000 		.4byte	0x93
 513 0140 02       		.uleb128 0x2
 514 0141 91       		.byte	0x91
 515 0142 64       		.sleb128 -28
 516 0143 0A       		.uleb128 0xa
 517 0144 6C3100   		.ascii	"l1\000"
 518 0147 01       		.byte	0x1
 519 0148 9E       		.byte	0x9e
 520 0149 7A010000 		.4byte	0x17a
 521 014d 02       		.uleb128 0x2
 522 014e 91       		.byte	0x91
 523 014f 6C       		.sleb128 -20
 524 0150 0A       		.uleb128 0xa
 525 0151 6C3200   		.ascii	"l2\000"
 526 0154 01       		.byte	0x1
 527 0155 9E       		.byte	0x9e
 528 0156 7A010000 		.4byte	0x17a
 529 015a 02       		.uleb128 0x2
 530 015b 91       		.byte	0x91
 531 015c 68       		.sleb128 -24
 532 015d 0B       		.uleb128 0xb
 533 015e F1010000 		.4byte	.LASF25
 534 0162 01       		.byte	0x1
 535 0163 9F       		.byte	0x9f
 536 0164 F1000000 		.4byte	0xf1
 537 0168 02       		.uleb128 0x2
 538 0169 91       		.byte	0x91
 539 016a 74       		.sleb128 -12
 540 016b 0B       		.uleb128 0xb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 15


 541 016c EA010000 		.4byte	.LASF26
 542 0170 01       		.byte	0x1
 543 0171 A0       		.byte	0xa0
 544 0172 7F010000 		.4byte	0x17f
 545 0176 02       		.uleb128 0x2
 546 0177 91       		.byte	0x91
 547 0178 70       		.sleb128 -16
 548 0179 00       		.byte	0
 549 017a 06       		.uleb128 0x6
 550 017b 65000000 		.4byte	0x65
 551 017f 0C       		.uleb128 0xc
 552 0180 E6000000 		.4byte	0xe6
 553 0184 09       		.uleb128 0x9
 554 0185 D3000000 		.4byte	.LASF28
 555 0189 01       		.byte	0x1
 556 018a C5       		.byte	0xc5
 557 018b 00000000 		.4byte	.LFB70
 558 018f 70000000 		.4byte	.LFE70-.LFB70
 559 0193 01       		.uleb128 0x1
 560 0194 9C       		.byte	0x9c
 561 0195 C4010000 		.4byte	0x1c4
 562 0199 08       		.uleb128 0x8
 563 019a 02020000 		.4byte	.LASF24
 564 019e 01       		.byte	0x1
 565 019f C5       		.byte	0xc5
 566 01a0 93000000 		.4byte	0x93
 567 01a4 02       		.uleb128 0x2
 568 01a5 91       		.byte	0x91
 569 01a6 6C       		.sleb128 -20
 570 01a7 0B       		.uleb128 0xb
 571 01a8 EA010000 		.4byte	.LASF26
 572 01ac 01       		.byte	0x1
 573 01ad C7       		.byte	0xc7
 574 01ae 7F010000 		.4byte	0x17f
 575 01b2 02       		.uleb128 0x2
 576 01b3 91       		.byte	0x91
 577 01b4 74       		.sleb128 -12
 578 01b5 0B       		.uleb128 0xb
 579 01b6 AA010000 		.4byte	.LASF23
 580 01ba 01       		.byte	0x1
 581 01bb C8       		.byte	0xc8
 582 01bc DB000000 		.4byte	0xdb
 583 01c0 02       		.uleb128 0x2
 584 01c1 91       		.byte	0x91
 585 01c2 70       		.sleb128 -16
 586 01c3 00       		.byte	0
 587 01c4 0D       		.uleb128 0xd
 588 01c5 90010000 		.4byte	.LASF41
 589 01c9 01       		.byte	0x1
 590 01ca E0       		.byte	0xe0
 591 01cb D0000000 		.4byte	0xd0
 592 01cf 00000000 		.4byte	.LFB71
 593 01d3 74000000 		.4byte	.LFE71-.LFB71
 594 01d7 01       		.uleb128 0x1
 595 01d8 9C       		.byte	0x9c
 596 01d9 0E020000 		.4byte	0x20e
 597 01dd 0B       		.uleb128 0xb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 16


 598 01de 1E010000 		.4byte	.LASF29
 599 01e2 01       		.byte	0x1
 600 01e3 E2       		.byte	0xe2
 601 01e4 9C000000 		.4byte	0x9c
 602 01e8 05       		.uleb128 0x5
 603 01e9 03       		.byte	0x3
 604 01ea 00000000 		.4byte	usLastCreationCount.6967
 605 01ee 0B       		.uleb128 0xb
 606 01ef 88010000 		.4byte	.LASF30
 607 01f3 01       		.byte	0x1
 608 01f4 E3       		.byte	0xe3
 609 01f5 D0000000 		.4byte	0xd0
 610 01f9 02       		.uleb128 0x2
 611 01fa 91       		.byte	0x91
 612 01fb 74       		.sleb128 -12
 613 01fc 0B       		.uleb128 0xb
 614 01fd F2000000 		.4byte	.LASF31
 615 0201 01       		.byte	0x1
 616 0202 E4       		.byte	0xe4
 617 0203 DB000000 		.4byte	0xdb
 618 0207 05       		.uleb128 0x5
 619 0208 03       		.byte	0x3
 620 0209 08000000 		.4byte	uxTasksRunningNow.6969
 621 020d 00       		.byte	0
 622 020e 0B       		.uleb128 0xb
 623 020f 82020000 		.4byte	.LASF32
 624 0213 01       		.byte	0x1
 625 0214 6E       		.byte	0x6e
 626 0215 CB000000 		.4byte	0xcb
 627 0219 05       		.uleb128 0x5
 628 021a 03       		.byte	0x3
 629 021b 00000000 		.4byte	usCreationCount
 630 021f 0B       		.uleb128 0xb
 631 0220 41020000 		.4byte	.LASF33
 632 0224 01       		.byte	0x1
 633 0225 73       		.byte	0x73
 634 0226 30020000 		.4byte	0x230
 635 022a 05       		.uleb128 0x5
 636 022b 03       		.byte	0x3
 637 022c 04000000 		.4byte	uxTasksRunningAtStart
 638 0230 06       		.uleb128 0x6
 639 0231 DB000000 		.4byte	0xdb
 640 0235 0B       		.uleb128 0xb
 641 0236 0F020000 		.4byte	.LASF34
 642 023a 01       		.byte	0x1
 643 023b 7A       		.byte	0x7a
 644 023c 46020000 		.4byte	0x246
 645 0240 05       		.uleb128 0x5
 646 0241 03       		.byte	0x3
 647 0242 00000000 		.4byte	uxMaxNumberOfExtraTasksRunning
 648 0246 0C       		.uleb128 0xc
 649 0247 DB000000 		.4byte	0xdb
 650 024b 0E       		.uleb128 0xe
 651 024c 45010000 		.4byte	.LASF35
 652 0250 06       		.byte	0x6
 653 0251 9606     		.2byte	0x696
 654 0253 57020000 		.4byte	0x257
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 17


 655 0257 06       		.uleb128 0x6
 656 0258 A7000000 		.4byte	0xa7
 657 025c 0F       		.uleb128 0xf
 658 025d BF000000 		.4byte	.LASF36
 659 0261 01       		.byte	0x1
 660 0262 7E       		.byte	0x7e
 661 0263 F1000000 		.4byte	0xf1
 662 0267 05       		.uleb128 0x5
 663 0268 03       		.byte	0x3
 664 0269 00000000 		.4byte	xCreatedTask
 665 026d 00       		.byte	0
 666              		.section	.debug_abbrev,"",%progbits
 667              	.Ldebug_abbrev0:
 668 0000 01       		.uleb128 0x1
 669 0001 11       		.uleb128 0x11
 670 0002 01       		.byte	0x1
 671 0003 25       		.uleb128 0x25
 672 0004 0E       		.uleb128 0xe
 673 0005 13       		.uleb128 0x13
 674 0006 0B       		.uleb128 0xb
 675 0007 03       		.uleb128 0x3
 676 0008 0E       		.uleb128 0xe
 677 0009 1B       		.uleb128 0x1b
 678 000a 0E       		.uleb128 0xe
 679 000b 55       		.uleb128 0x55
 680 000c 17       		.uleb128 0x17
 681 000d 11       		.uleb128 0x11
 682 000e 01       		.uleb128 0x1
 683 000f 10       		.uleb128 0x10
 684 0010 17       		.uleb128 0x17
 685 0011 00       		.byte	0
 686 0012 00       		.byte	0
 687 0013 02       		.uleb128 0x2
 688 0014 24       		.uleb128 0x24
 689 0015 00       		.byte	0
 690 0016 0B       		.uleb128 0xb
 691 0017 0B       		.uleb128 0xb
 692 0018 3E       		.uleb128 0x3e
 693 0019 0B       		.uleb128 0xb
 694 001a 03       		.uleb128 0x3
 695 001b 0E       		.uleb128 0xe
 696 001c 00       		.byte	0
 697 001d 00       		.byte	0
 698 001e 03       		.uleb128 0x3
 699 001f 24       		.uleb128 0x24
 700 0020 00       		.byte	0
 701 0021 0B       		.uleb128 0xb
 702 0022 0B       		.uleb128 0xb
 703 0023 3E       		.uleb128 0x3e
 704 0024 0B       		.uleb128 0xb
 705 0025 03       		.uleb128 0x3
 706 0026 08       		.uleb128 0x8
 707 0027 00       		.byte	0
 708 0028 00       		.byte	0
 709 0029 04       		.uleb128 0x4
 710 002a 16       		.uleb128 0x16
 711 002b 00       		.byte	0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 18


 712 002c 03       		.uleb128 0x3
 713 002d 0E       		.uleb128 0xe
 714 002e 3A       		.uleb128 0x3a
 715 002f 0B       		.uleb128 0xb
 716 0030 3B       		.uleb128 0x3b
 717 0031 0B       		.uleb128 0xb
 718 0032 49       		.uleb128 0x49
 719 0033 13       		.uleb128 0x13
 720 0034 00       		.byte	0
 721 0035 00       		.byte	0
 722 0036 05       		.uleb128 0x5
 723 0037 0F       		.uleb128 0xf
 724 0038 00       		.byte	0
 725 0039 0B       		.uleb128 0xb
 726 003a 0B       		.uleb128 0xb
 727 003b 00       		.byte	0
 728 003c 00       		.byte	0
 729 003d 06       		.uleb128 0x6
 730 003e 35       		.uleb128 0x35
 731 003f 00       		.byte	0
 732 0040 49       		.uleb128 0x49
 733 0041 13       		.uleb128 0x13
 734 0042 00       		.byte	0
 735 0043 00       		.byte	0
 736 0044 07       		.uleb128 0x7
 737 0045 2E       		.uleb128 0x2e
 738 0046 01       		.byte	0x1
 739 0047 3F       		.uleb128 0x3f
 740 0048 19       		.uleb128 0x19
 741 0049 03       		.uleb128 0x3
 742 004a 0E       		.uleb128 0xe
 743 004b 3A       		.uleb128 0x3a
 744 004c 0B       		.uleb128 0xb
 745 004d 3B       		.uleb128 0x3b
 746 004e 0B       		.uleb128 0xb
 747 004f 27       		.uleb128 0x27
 748 0050 19       		.uleb128 0x19
 749 0051 11       		.uleb128 0x11
 750 0052 01       		.uleb128 0x1
 751 0053 12       		.uleb128 0x12
 752 0054 06       		.uleb128 0x6
 753 0055 40       		.uleb128 0x40
 754 0056 18       		.uleb128 0x18
 755 0057 9642     		.uleb128 0x2116
 756 0059 19       		.uleb128 0x19
 757 005a 01       		.uleb128 0x1
 758 005b 13       		.uleb128 0x13
 759 005c 00       		.byte	0
 760 005d 00       		.byte	0
 761 005e 08       		.uleb128 0x8
 762 005f 05       		.uleb128 0x5
 763 0060 00       		.byte	0
 764 0061 03       		.uleb128 0x3
 765 0062 0E       		.uleb128 0xe
 766 0063 3A       		.uleb128 0x3a
 767 0064 0B       		.uleb128 0xb
 768 0065 3B       		.uleb128 0x3b
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 19


 769 0066 0B       		.uleb128 0xb
 770 0067 49       		.uleb128 0x49
 771 0068 13       		.uleb128 0x13
 772 0069 02       		.uleb128 0x2
 773 006a 18       		.uleb128 0x18
 774 006b 00       		.byte	0
 775 006c 00       		.byte	0
 776 006d 09       		.uleb128 0x9
 777 006e 2E       		.uleb128 0x2e
 778 006f 01       		.byte	0x1
 779 0070 03       		.uleb128 0x3
 780 0071 0E       		.uleb128 0xe
 781 0072 3A       		.uleb128 0x3a
 782 0073 0B       		.uleb128 0xb
 783 0074 3B       		.uleb128 0x3b
 784 0075 0B       		.uleb128 0xb
 785 0076 27       		.uleb128 0x27
 786 0077 19       		.uleb128 0x19
 787 0078 11       		.uleb128 0x11
 788 0079 01       		.uleb128 0x1
 789 007a 12       		.uleb128 0x12
 790 007b 06       		.uleb128 0x6
 791 007c 40       		.uleb128 0x40
 792 007d 18       		.uleb128 0x18
 793 007e 9642     		.uleb128 0x2116
 794 0080 19       		.uleb128 0x19
 795 0081 01       		.uleb128 0x1
 796 0082 13       		.uleb128 0x13
 797 0083 00       		.byte	0
 798 0084 00       		.byte	0
 799 0085 0A       		.uleb128 0xa
 800 0086 34       		.uleb128 0x34
 801 0087 00       		.byte	0
 802 0088 03       		.uleb128 0x3
 803 0089 08       		.uleb128 0x8
 804 008a 3A       		.uleb128 0x3a
 805 008b 0B       		.uleb128 0xb
 806 008c 3B       		.uleb128 0x3b
 807 008d 0B       		.uleb128 0xb
 808 008e 49       		.uleb128 0x49
 809 008f 13       		.uleb128 0x13
 810 0090 02       		.uleb128 0x2
 811 0091 18       		.uleb128 0x18
 812 0092 00       		.byte	0
 813 0093 00       		.byte	0
 814 0094 0B       		.uleb128 0xb
 815 0095 34       		.uleb128 0x34
 816 0096 00       		.byte	0
 817 0097 03       		.uleb128 0x3
 818 0098 0E       		.uleb128 0xe
 819 0099 3A       		.uleb128 0x3a
 820 009a 0B       		.uleb128 0xb
 821 009b 3B       		.uleb128 0x3b
 822 009c 0B       		.uleb128 0xb
 823 009d 49       		.uleb128 0x49
 824 009e 13       		.uleb128 0x13
 825 009f 02       		.uleb128 0x2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 20


 826 00a0 18       		.uleb128 0x18
 827 00a1 00       		.byte	0
 828 00a2 00       		.byte	0
 829 00a3 0C       		.uleb128 0xc
 830 00a4 26       		.uleb128 0x26
 831 00a5 00       		.byte	0
 832 00a6 49       		.uleb128 0x49
 833 00a7 13       		.uleb128 0x13
 834 00a8 00       		.byte	0
 835 00a9 00       		.byte	0
 836 00aa 0D       		.uleb128 0xd
 837 00ab 2E       		.uleb128 0x2e
 838 00ac 01       		.byte	0x1
 839 00ad 3F       		.uleb128 0x3f
 840 00ae 19       		.uleb128 0x19
 841 00af 03       		.uleb128 0x3
 842 00b0 0E       		.uleb128 0xe
 843 00b1 3A       		.uleb128 0x3a
 844 00b2 0B       		.uleb128 0xb
 845 00b3 3B       		.uleb128 0x3b
 846 00b4 0B       		.uleb128 0xb
 847 00b5 27       		.uleb128 0x27
 848 00b6 19       		.uleb128 0x19
 849 00b7 49       		.uleb128 0x49
 850 00b8 13       		.uleb128 0x13
 851 00b9 11       		.uleb128 0x11
 852 00ba 01       		.uleb128 0x1
 853 00bb 12       		.uleb128 0x12
 854 00bc 06       		.uleb128 0x6
 855 00bd 40       		.uleb128 0x40
 856 00be 18       		.uleb128 0x18
 857 00bf 9642     		.uleb128 0x2116
 858 00c1 19       		.uleb128 0x19
 859 00c2 01       		.uleb128 0x1
 860 00c3 13       		.uleb128 0x13
 861 00c4 00       		.byte	0
 862 00c5 00       		.byte	0
 863 00c6 0E       		.uleb128 0xe
 864 00c7 34       		.uleb128 0x34
 865 00c8 00       		.byte	0
 866 00c9 03       		.uleb128 0x3
 867 00ca 0E       		.uleb128 0xe
 868 00cb 3A       		.uleb128 0x3a
 869 00cc 0B       		.uleb128 0xb
 870 00cd 3B       		.uleb128 0x3b
 871 00ce 05       		.uleb128 0x5
 872 00cf 49       		.uleb128 0x49
 873 00d0 13       		.uleb128 0x13
 874 00d1 3F       		.uleb128 0x3f
 875 00d2 19       		.uleb128 0x19
 876 00d3 3C       		.uleb128 0x3c
 877 00d4 19       		.uleb128 0x19
 878 00d5 00       		.byte	0
 879 00d6 00       		.byte	0
 880 00d7 0F       		.uleb128 0xf
 881 00d8 34       		.uleb128 0x34
 882 00d9 00       		.byte	0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 21


 883 00da 03       		.uleb128 0x3
 884 00db 0E       		.uleb128 0xe
 885 00dc 3A       		.uleb128 0x3a
 886 00dd 0B       		.uleb128 0xb
 887 00de 3B       		.uleb128 0x3b
 888 00df 0B       		.uleb128 0xb
 889 00e0 49       		.uleb128 0x49
 890 00e1 13       		.uleb128 0x13
 891 00e2 3F       		.uleb128 0x3f
 892 00e3 19       		.uleb128 0x19
 893 00e4 02       		.uleb128 0x2
 894 00e5 18       		.uleb128 0x18
 895 00e6 00       		.byte	0
 896 00e7 00       		.byte	0
 897 00e8 00       		.byte	0
 898              		.section	.debug_aranges,"",%progbits
 899 0000 34000000 		.4byte	0x34
 900 0004 0200     		.2byte	0x2
 901 0006 00000000 		.4byte	.Ldebug_info0
 902 000a 04       		.byte	0x4
 903 000b 00       		.byte	0
 904 000c 0000     		.2byte	0
 905 000e 0000     		.2byte	0
 906 0010 00000000 		.4byte	.LFB68
 907 0014 44000000 		.4byte	.LFE68-.LFB68
 908 0018 00000000 		.4byte	.LFB69
 909 001c 50000000 		.4byte	.LFE69-.LFB69
 910 0020 00000000 		.4byte	.LFB70
 911 0024 70000000 		.4byte	.LFE70-.LFB70
 912 0028 00000000 		.4byte	.LFB71
 913 002c 74000000 		.4byte	.LFE71-.LFB71
 914 0030 00000000 		.4byte	0
 915 0034 00000000 		.4byte	0
 916              		.section	.debug_ranges,"",%progbits
 917              	.Ldebug_ranges0:
 918 0000 00000000 		.4byte	.LFB68
 919 0004 44000000 		.4byte	.LFE68
 920 0008 00000000 		.4byte	.LFB69
 921 000c 50000000 		.4byte	.LFE69
 922 0010 00000000 		.4byte	.LFB70
 923 0014 70000000 		.4byte	.LFE70
 924 0018 00000000 		.4byte	.LFB71
 925 001c 74000000 		.4byte	.LFE71
 926 0020 00000000 		.4byte	0
 927 0024 00000000 		.4byte	0
 928              		.section	.debug_line,"",%progbits
 929              	.Ldebug_line0:
 930 0000 1B020000 		.section	.debug_str,"MS",%progbits,1
 930      02009701 
 930      00000201 
 930      FB0E0D00 
 930      01010101 
 931              	.LASF10:
 932 0000 6C6F6E67 		.ascii	"long long int\000"
 932      206C6F6E 
 932      6720696E 
 932      7400
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 22


 933              	.LASF27:
 934 000e 76537569 		.ascii	"vSuicidalTask\000"
 934      63696461 
 934      6C546173 
 934      6B00
 935              	.LASF21:
 936 001c 5469636B 		.ascii	"TickType_t\000"
 936      54797065 
 936      5F7400
 937              	.LASF6:
 938 0027 5F5F696E 		.ascii	"__int32_t\000"
 938      7433325F 
 938      7400
 939              	.LASF37:
 940 0031 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 940      4320342E 
 940      392E3320 
 940      32303135 
 940      30333033 
 941 0064 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 941      20726576 
 941      6973696F 
 941      6E203232 
 941      31323230 
 942 0097 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 942      66756E63 
 942      74696F6E 
 942      2D736563 
 942      74696F6E 
 943              	.LASF36:
 944 00bf 78437265 		.ascii	"xCreatedTask\000"
 944      61746564 
 944      5461736B 
 944      00
 945              	.LASF18:
 946 00cc 646F7562 		.ascii	"double\000"
 946      6C6500
 947              	.LASF28:
 948 00d3 76437265 		.ascii	"vCreateTasks\000"
 948      61746554 
 948      61736B73 
 948      00
 949              	.LASF17:
 950 00e0 666C6F61 		.ascii	"float\000"
 950      7400
 951              	.LASF20:
 952 00e6 55426173 		.ascii	"UBaseType_t\000"
 952      65547970 
 952      655F7400 
 953              	.LASF31:
 954 00f2 75785461 		.ascii	"uxTasksRunningNow\000"
 954      736B7352 
 954      756E6E69 
 954      6E674E6F 
 954      7700
 955              	.LASF38:
 956 0104 2E2E5C43 		.ascii	"..\\Common\\Minimal\\death.c\000"
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 23


 956      6F6D6D6F 
 956      6E5C4D69 
 956      6E696D61 
 956      6C5C6465 
 957              	.LASF29:
 958 011e 75734C61 		.ascii	"usLastCreationCount\000"
 958      73744372 
 958      65617469 
 958      6F6E436F 
 958      756E7400 
 959              	.LASF4:
 960 0132 73686F72 		.ascii	"short unsigned int\000"
 960      7420756E 
 960      7369676E 
 960      65642069 
 960      6E7400
 961              	.LASF35:
 962 0145 49544D5F 		.ascii	"ITM_RxBuffer\000"
 962      52784275 
 962      66666572 
 962      00
 963              	.LASF2:
 964 0152 756E7369 		.ascii	"unsigned char\000"
 964      676E6564 
 964      20636861 
 964      7200
 965              	.LASF5:
 966 0160 5F5F7569 		.ascii	"__uint16_t\000"
 966      6E743136 
 966      5F7400
 967              	.LASF9:
 968 016b 6C6F6E67 		.ascii	"long unsigned int\000"
 968      20756E73 
 968      69676E65 
 968      6420696E 
 968      7400
 969              	.LASF8:
 970 017d 5F5F7569 		.ascii	"__uint32_t\000"
 970      6E743332 
 970      5F7400
 971              	.LASF30:
 972 0188 78526574 		.ascii	"xReturn\000"
 972      75726E00 
 973              	.LASF41:
 974 0190 78497343 		.ascii	"xIsCreateTaskStillRunning\000"
 974      72656174 
 974      65546173 
 974      6B537469 
 974      6C6C5275 
 975              	.LASF23:
 976 01aa 75785072 		.ascii	"uxPriority\000"
 976      696F7269 
 976      747900
 977              	.LASF0:
 978 01b5 756E7369 		.ascii	"unsigned int\000"
 978      676E6564 
 978      20696E74 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 24


 978      00
 979              	.LASF11:
 980 01c2 6C6F6E67 		.ascii	"long long unsigned int\000"
 980      206C6F6E 
 980      6720756E 
 980      7369676E 
 980      65642069 
 981              	.LASF15:
 982 01d9 696E7433 		.ascii	"int32_t\000"
 982      325F7400 
 983              	.LASF12:
 984 01e1 73697A65 		.ascii	"sizetype\000"
 984      74797065 
 984      00
 985              	.LASF26:
 986 01ea 7844656C 		.ascii	"xDelay\000"
 986      617900
 987              	.LASF25:
 988 01f1 78546173 		.ascii	"xTaskToKill\000"
 988      6B546F4B 
 988      696C6C00 
 989              	.LASF13:
 990 01fd 63686172 		.ascii	"char\000"
 990      00
 991              	.LASF24:
 992 0202 70765061 		.ascii	"pvParameters\000"
 992      72616D65 
 992      74657273 
 992      00
 993              	.LASF34:
 994 020f 75784D61 		.ascii	"uxMaxNumberOfExtraTasksRunning\000"
 994      784E756D 
 994      6265724F 
 994      66457874 
 994      72615461 
 995              	.LASF3:
 996 022e 73686F72 		.ascii	"short int\000"
 996      7420696E 
 996      7400
 997              	.LASF14:
 998 0238 75696E74 		.ascii	"uint16_t\000"
 998      31365F74 
 998      00
 999              	.LASF33:
 1000 0241 75785461 		.ascii	"uxTasksRunningAtStart\000"
 1000      736B7352 
 1000      756E6E69 
 1000      6E674174 
 1000      53746172 
 1001              	.LASF22:
 1002 0257 5461736B 		.ascii	"TaskHandle_t\000"
 1002      48616E64 
 1002      6C655F74 
 1002      00
 1003              	.LASF16:
 1004 0264 75696E74 		.ascii	"uint32_t\000"
 1004      33325F74 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccGaoXrB.s 			page 25


 1004      00
 1005              	.LASF7:
 1006 026d 6C6F6E67 		.ascii	"long int\000"
 1006      20696E74 
 1006      00
 1007              	.LASF1:
 1008 0276 7369676E 		.ascii	"signed char\000"
 1008      65642063 
 1008      68617200 
 1009              	.LASF32:
 1010 0282 75734372 		.ascii	"usCreationCount\000"
 1010      65617469 
 1010      6F6E436F 
 1010      756E7400 
 1011              	.LASF40:
 1012 0292 76437265 		.ascii	"vCreateSuicidalTasks\000"
 1012      61746553 
 1012      75696369 
 1012      64616C54 
 1012      61736B73 
 1013              	.LASF19:
 1014 02a7 42617365 		.ascii	"BaseType_t\000"
 1014      54797065 
 1014      5F7400
 1015              	.LASF39:
 1016 02b2 433A5C55 		.ascii	"C:\\Users\\bmt\\Documents\\GitHub\\FreeRTOS_CY8CKIT"
 1016      73657273 
 1016      5C626D74 
 1016      5C446F63 
 1016      756D656E 
 1017 02e0 5F303539 		.ascii	"_059\\FreeRTOS_Demo.cydsn\000"
 1017      5C467265 
 1017      6552544F 
 1017      535F4465 
 1017      6D6F2E63 
 1018              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

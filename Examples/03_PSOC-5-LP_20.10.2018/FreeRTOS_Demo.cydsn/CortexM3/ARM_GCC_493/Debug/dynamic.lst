ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"dynamic.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	xContinuousIncrementHandle:
  21 0000 00000000 		.space	4
  22              		.align	2
  23              	xLimitedIncrementHandle:
  24 0004 00000000 		.space	4
  25              		.align	2
  26              	ulCounter:
  27 0008 00000000 		.space	4
  28              		.align	1
  29              	usCheckVariable:
  30 000c 0000     		.space	2
  31 000e 0000     		.align	2
  32              	xSuspendedQueueSendError:
  33 0010 00000000 		.space	4
  34              		.align	2
  35              	xSuspendedQueueReceiveError:
  36 0014 00000000 		.space	4
  37              		.comm	xSuspendedTestQueue,4,4
  38              		.align	2
  39              	ulExpectedValue:
  40 0018 00000000 		.space	4
  41              		.section	.rodata
  42              		.align	2
  43              	.LC0:
  44 0000 53757370 		.ascii	"Suspended_Test_Queue\000"
  44      656E6465 
  44      645F5465 
  44      73745F51 
  44      75657565 
  45 0015 000000   		.align	2
  46              	.LC1:
  47 0018 434E545F 		.ascii	"CNT_INC\000"
  47      494E4300 
  48              		.align	2
  49              	.LC2:
  50 0020 4C494D5F 		.ascii	"LIM_INC\000"
  50      494E4300 
  51              		.align	2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 2


  52              	.LC3:
  53 0028 435F4354 		.ascii	"C_CTRL\000"
  53      524C00
  54 002f 00       		.align	2
  55              	.LC4:
  56 0030 53555350 		.ascii	"SUSP_TX\000"
  56      5F545800 
  57              		.align	2
  58              	.LC5:
  59 0038 53555350 		.ascii	"SUSP_RX\000"
  59      5F525800 
  60              		.section	.text.vStartDynamicPriorityTasks,"ax",%progbits
  61              		.align	2
  62              		.global	vStartDynamicPriorityTasks
  63              		.thumb
  64              		.thumb_func
  65              		.type	vStartDynamicPriorityTasks, %function
  66              	vStartDynamicPriorityTasks:
  67              	.LFB68:
  68              		.file 1 "..\\Common\\Minimal\\dynamic.c"
   1:..\Common\Minimal/dynamic.c **** /*
   2:..\Common\Minimal/dynamic.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Common\Minimal/dynamic.c ****     All rights reserved
   4:..\Common\Minimal/dynamic.c **** 
   5:..\Common\Minimal/dynamic.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Common\Minimal/dynamic.c **** 
   7:..\Common\Minimal/dynamic.c ****     This file is part of the FreeRTOS distribution.
   8:..\Common\Minimal/dynamic.c **** 
   9:..\Common\Minimal/dynamic.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Common\Minimal/dynamic.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Common\Minimal/dynamic.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Common\Minimal/dynamic.c **** 
  13:..\Common\Minimal/dynamic.c ****     ***************************************************************************
  14:..\Common\Minimal/dynamic.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Common\Minimal/dynamic.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Common\Minimal/dynamic.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Common\Minimal/dynamic.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Common\Minimal/dynamic.c ****     ***************************************************************************
  19:..\Common\Minimal/dynamic.c **** 
  20:..\Common\Minimal/dynamic.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Common\Minimal/dynamic.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Common\Minimal/dynamic.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Common\Minimal/dynamic.c ****     link: http://www.freertos.org/a00114.html
  24:..\Common\Minimal/dynamic.c **** 
  25:..\Common\Minimal/dynamic.c ****     ***************************************************************************
  26:..\Common\Minimal/dynamic.c ****      *                                                                       *
  27:..\Common\Minimal/dynamic.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Common\Minimal/dynamic.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Common\Minimal/dynamic.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Common\Minimal/dynamic.c ****      *    is the industry's de facto standard.                               *
  31:..\Common\Minimal/dynamic.c ****      *                                                                       *
  32:..\Common\Minimal/dynamic.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Common\Minimal/dynamic.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Common\Minimal/dynamic.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Common\Minimal/dynamic.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Common\Minimal/dynamic.c ****      *                                                                       *
  37:..\Common\Minimal/dynamic.c ****     ***************************************************************************
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 3


  38:..\Common\Minimal/dynamic.c **** 
  39:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Common\Minimal/dynamic.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Common\Minimal/dynamic.c ****     defined configASSERT()?
  42:..\Common\Minimal/dynamic.c **** 
  43:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Common\Minimal/dynamic.c ****     embedded software for free we request you assist our global community by
  45:..\Common\Minimal/dynamic.c ****     participating in the support forum.
  46:..\Common\Minimal/dynamic.c **** 
  47:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Common\Minimal/dynamic.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Common\Minimal/dynamic.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Common\Minimal/dynamic.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Common\Minimal/dynamic.c **** 
  52:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Common\Minimal/dynamic.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Common\Minimal/dynamic.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Common\Minimal/dynamic.c **** 
  56:..\Common\Minimal/dynamic.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Common\Minimal/dynamic.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Common\Minimal/dynamic.c **** 
  59:..\Common\Minimal/dynamic.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Common\Minimal/dynamic.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Common\Minimal/dynamic.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Common\Minimal/dynamic.c **** 
  63:..\Common\Minimal/dynamic.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Common\Minimal/dynamic.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Common\Minimal/dynamic.c ****     mission critical applications that require provable dependability.
  66:..\Common\Minimal/dynamic.c **** 
  67:..\Common\Minimal/dynamic.c ****     1 tab == 4 spaces!
  68:..\Common\Minimal/dynamic.c **** */
  69:..\Common\Minimal/dynamic.c **** 
  70:..\Common\Minimal/dynamic.c **** /*
  71:..\Common\Minimal/dynamic.c ****  * The first test creates three tasks - two counter tasks (one continuous count
  72:..\Common\Minimal/dynamic.c ****  * and one limited count) and one controller.  A "count" variable is shared
  73:..\Common\Minimal/dynamic.c ****  * between all three tasks.  The two counter tasks should never be in a "ready"
  74:..\Common\Minimal/dynamic.c ****  * state at the same time.  The controller task runs at the same priority as
  75:..\Common\Minimal/dynamic.c ****  * the continuous count task, and at a lower priority than the limited count
  76:..\Common\Minimal/dynamic.c ****  * task.
  77:..\Common\Minimal/dynamic.c ****  *
  78:..\Common\Minimal/dynamic.c ****  * One counter task loops indefinitely, incrementing the shared count variable
  79:..\Common\Minimal/dynamic.c ****  * on each iteration.  To ensure it has exclusive access to the variable it
  80:..\Common\Minimal/dynamic.c ****  * raises its priority above that of the controller task before each
  81:..\Common\Minimal/dynamic.c ****  * increment, lowering it again to its original priority before starting the
  82:..\Common\Minimal/dynamic.c ****  * next iteration.
  83:..\Common\Minimal/dynamic.c ****  *
  84:..\Common\Minimal/dynamic.c ****  * The other counter task increments the shared count variable on each
  85:..\Common\Minimal/dynamic.c ****  * iteration of its loop until the count has reached a limit of 0xff - at
  86:..\Common\Minimal/dynamic.c ****  * which point it suspends itself.  It will not start a new loop until the
  87:..\Common\Minimal/dynamic.c ****  * controller task has made it "ready" again by calling vTaskResume().
  88:..\Common\Minimal/dynamic.c ****  * This second counter task operates at a higher priority than controller
  89:..\Common\Minimal/dynamic.c ****  * task so does not need to worry about mutual exclusion of the counter
  90:..\Common\Minimal/dynamic.c ****  * variable.
  91:..\Common\Minimal/dynamic.c ****  *
  92:..\Common\Minimal/dynamic.c ****  * The controller task is in two sections.  The first section controls and
  93:..\Common\Minimal/dynamic.c ****  * monitors the continuous count task.  When this section is operational the
  94:..\Common\Minimal/dynamic.c ****  * limited count task is suspended.  Likewise, the second section controls
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 4


  95:..\Common\Minimal/dynamic.c ****  * and monitors the limited count task.  When this section is operational the
  96:..\Common\Minimal/dynamic.c ****  * continuous count task is suspended.
  97:..\Common\Minimal/dynamic.c ****  *
  98:..\Common\Minimal/dynamic.c ****  * In the first section the controller task first takes a copy of the shared
  99:..\Common\Minimal/dynamic.c ****  * count variable.  To ensure mutual exclusion on the count variable it
 100:..\Common\Minimal/dynamic.c ****  * suspends the continuous count task, resuming it again when the copy has been
 101:..\Common\Minimal/dynamic.c ****  * taken.  The controller task then sleeps for a fixed period - during which
 102:..\Common\Minimal/dynamic.c ****  * the continuous count task will execute and increment the shared variable.
 103:..\Common\Minimal/dynamic.c ****  * When the controller task wakes it checks that the continuous count task
 104:..\Common\Minimal/dynamic.c ****  * has executed by comparing the copy of the shared variable with its current
 105:..\Common\Minimal/dynamic.c ****  * value.  This time, to ensure mutual exclusion, the scheduler itself is
 106:..\Common\Minimal/dynamic.c ****  * suspended with a call to vTaskSuspendAll ().  This is for demonstration
 107:..\Common\Minimal/dynamic.c ****  * purposes only and is not a recommended technique due to its inefficiency.
 108:..\Common\Minimal/dynamic.c ****  *
 109:..\Common\Minimal/dynamic.c ****  * After a fixed number of iterations the controller task suspends the
 110:..\Common\Minimal/dynamic.c ****  * continuous count task, and moves on to its second section.
 111:..\Common\Minimal/dynamic.c ****  *
 112:..\Common\Minimal/dynamic.c ****  * At the start of the second section the shared variable is cleared to zero.
 113:..\Common\Minimal/dynamic.c ****  * The limited count task is then woken from its suspension by a call to
 114:..\Common\Minimal/dynamic.c ****  * vTaskResume ().  As this counter task operates at a higher priority than
 115:..\Common\Minimal/dynamic.c ****  * the controller task the controller task should not run again until the
 116:..\Common\Minimal/dynamic.c ****  * shared variable has been counted up to the limited value causing the counter
 117:..\Common\Minimal/dynamic.c ****  * task to suspend itself.  The next line after vTaskResume () is therefore
 118:..\Common\Minimal/dynamic.c ****  * a check on the shared variable to ensure everything is as expected.
 119:..\Common\Minimal/dynamic.c ****  *
 120:..\Common\Minimal/dynamic.c ****  *
 121:..\Common\Minimal/dynamic.c ****  * The second test consists of a couple of very simple tasks that post onto a
 122:..\Common\Minimal/dynamic.c ****  * queue while the scheduler is suspended.  This test was added to test parts
 123:..\Common\Minimal/dynamic.c ****  * of the scheduler not exercised by the first test.
 124:..\Common\Minimal/dynamic.c ****  *
 125:..\Common\Minimal/dynamic.c ****  */
 126:..\Common\Minimal/dynamic.c **** 
 127:..\Common\Minimal/dynamic.c **** #include <stdlib.h>
 128:..\Common\Minimal/dynamic.c **** 
 129:..\Common\Minimal/dynamic.c **** /* Scheduler include files. */
 130:..\Common\Minimal/dynamic.c **** #include "FreeRTOS.h"
 131:..\Common\Minimal/dynamic.c **** #include "task.h"
 132:..\Common\Minimal/dynamic.c **** #include "semphr.h"
 133:..\Common\Minimal/dynamic.c **** 
 134:..\Common\Minimal/dynamic.c **** /* Demo app include files. */
 135:..\Common\Minimal/dynamic.c **** #include "dynamic.h"
 136:..\Common\Minimal/dynamic.c **** 
 137:..\Common\Minimal/dynamic.c **** /* Function that implements the "limited count" task as described above. */
 138:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vLimitedIncrementTask, pvParameters );
 139:..\Common\Minimal/dynamic.c **** 
 140:..\Common\Minimal/dynamic.c **** /* Function that implements the "continuous count" task as described above. */
 141:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vContinuousIncrementTask, pvParameters );
 142:..\Common\Minimal/dynamic.c **** 
 143:..\Common\Minimal/dynamic.c **** /* Function that implements the controller task as described above. */
 144:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vCounterControlTask, pvParameters );
 145:..\Common\Minimal/dynamic.c **** 
 146:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueReceiveWhenSuspendedTask, pvParameters );
 147:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION_PROTO( vQueueSendWhenSuspendedTask, pvParameters );
 148:..\Common\Minimal/dynamic.c **** 
 149:..\Common\Minimal/dynamic.c **** /* Demo task specific constants. */
 150:..\Common\Minimal/dynamic.c **** #define priSTACK_SIZE				( configMINIMAL_STACK_SIZE )
 151:..\Common\Minimal/dynamic.c **** #define priSLEEP_TIME				pdMS_TO_TICKS( 128 )
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 5


 152:..\Common\Minimal/dynamic.c **** #define priLOOPS					( 5 )
 153:..\Common\Minimal/dynamic.c **** #define priMAX_COUNT				( ( uint32_t ) 0xff )
 154:..\Common\Minimal/dynamic.c **** #define priNO_BLOCK					( ( TickType_t ) 0 )
 155:..\Common\Minimal/dynamic.c **** #define priSUSPENDED_QUEUE_LENGTH	( 1 )
 156:..\Common\Minimal/dynamic.c **** 
 157:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 158:..\Common\Minimal/dynamic.c **** 
 159:..\Common\Minimal/dynamic.c **** /* Handles to the two counter tasks.  These could be passed in as parameters
 160:..\Common\Minimal/dynamic.c **** to the controller task to prevent them having to be file scope. */
 161:..\Common\Minimal/dynamic.c **** static TaskHandle_t xContinuousIncrementHandle, xLimitedIncrementHandle;
 162:..\Common\Minimal/dynamic.c **** 
 163:..\Common\Minimal/dynamic.c **** /* The shared counter variable.  This is passed in as a parameter to the two
 164:..\Common\Minimal/dynamic.c **** counter variables for demonstration purposes. */
 165:..\Common\Minimal/dynamic.c **** static volatile uint32_t ulCounter;
 166:..\Common\Minimal/dynamic.c **** 
 167:..\Common\Minimal/dynamic.c **** /* Variables used to check that the tasks are still operating without error.
 168:..\Common\Minimal/dynamic.c **** Each complete iteration of the controller task increments this variable
 169:..\Common\Minimal/dynamic.c **** provided no errors have been found.  The variable maintaining the same value
 170:..\Common\Minimal/dynamic.c **** is therefore indication of an error. */
 171:..\Common\Minimal/dynamic.c **** static volatile uint16_t usCheckVariable = ( uint16_t ) 0;
 172:..\Common\Minimal/dynamic.c **** static volatile BaseType_t xSuspendedQueueSendError = pdFALSE;
 173:..\Common\Minimal/dynamic.c **** static volatile BaseType_t xSuspendedQueueReceiveError = pdFALSE;
 174:..\Common\Minimal/dynamic.c **** 
 175:..\Common\Minimal/dynamic.c **** /* Queue used by the second test. */
 176:..\Common\Minimal/dynamic.c **** QueueHandle_t xSuspendedTestQueue;
 177:..\Common\Minimal/dynamic.c **** 
 178:..\Common\Minimal/dynamic.c **** /* The value the queue receive task expects to receive next.  This is file
 179:..\Common\Minimal/dynamic.c **** scope so xAreDynamicPriorityTasksStillRunning() can ensure it is still
 180:..\Common\Minimal/dynamic.c **** incrementing. */
 181:..\Common\Minimal/dynamic.c **** static uint32_t ulExpectedValue = ( uint32_t ) 0;
 182:..\Common\Minimal/dynamic.c **** 
 183:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 184:..\Common\Minimal/dynamic.c **** /*
 185:..\Common\Minimal/dynamic.c ****  * Start the three tasks as described at the top of the file.
 186:..\Common\Minimal/dynamic.c ****  * Note that the limited count task is given a higher priority.
 187:..\Common\Minimal/dynamic.c ****  */
 188:..\Common\Minimal/dynamic.c **** void vStartDynamicPriorityTasks( void )
 189:..\Common\Minimal/dynamic.c **** {
  69              		.loc 1 189 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 82B0     		sub	sp, sp, #8
  78              		.cfi_def_cfa_offset 16
  79 0004 02AF     		add	r7, sp, #8
  80              		.cfi_def_cfa 7, 8
 190:..\Common\Minimal/dynamic.c **** 	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
  81              		.loc 1 190 0
  82 0006 0120     		movs	r0, #1
  83 0008 0421     		movs	r1, #4
  84 000a 0022     		movs	r2, #0
  85 000c FFF7FEFF 		bl	xQueueGenericCreate
  86 0010 0246     		mov	r2, r0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 6


  87 0012 204B     		ldr	r3, .L3
  88 0014 1A60     		str	r2, [r3]
 191:..\Common\Minimal/dynamic.c **** 
 192:..\Common\Minimal/dynamic.c **** 	if( xSuspendedTestQueue != NULL )
  89              		.loc 1 192 0
  90 0016 1F4B     		ldr	r3, .L3
  91 0018 1B68     		ldr	r3, [r3]
  92 001a 002B     		cmp	r3, #0
  93 001c 37D0     		beq	.L1
 193:..\Common\Minimal/dynamic.c **** 	{
 194:..\Common\Minimal/dynamic.c **** 		/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 195:..\Common\Minimal/dynamic.c **** 		in use.  The queue registry is provided as a means for kernel aware
 196:..\Common\Minimal/dynamic.c **** 		debuggers to locate queues and has no purpose if a kernel aware debugger
 197:..\Common\Minimal/dynamic.c **** 		is not being used.  The call to vQueueAddToRegistry() will be removed
 198:..\Common\Minimal/dynamic.c **** 		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
 199:..\Common\Minimal/dynamic.c **** 		defined to be less than 1. */
 200:..\Common\Minimal/dynamic.c **** 		vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );
  94              		.loc 1 200 0
  95 001e 1D4B     		ldr	r3, .L3
  96 0020 1B68     		ldr	r3, [r3]
  97 0022 1846     		mov	r0, r3
  98 0024 1C49     		ldr	r1, .L3+4
  99 0026 FFF7FEFF 		bl	vQueueAddToRegistry
 201:..\Common\Minimal/dynamic.c **** 
 202:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_P
 100              		.loc 1 202 0
 101 002a 0023     		movs	r3, #0
 102 002c 0093     		str	r3, [sp]
 103 002e 1B4B     		ldr	r3, .L3+8
 104 0030 0193     		str	r3, [sp, #4]
 105 0032 1B48     		ldr	r0, .L3+12
 106 0034 1B49     		ldr	r1, .L3+16
 107 0036 6422     		movs	r2, #100
 108 0038 1B4B     		ldr	r3, .L3+20
 109 003a FFF7FEFF 		bl	xTaskCreate
 203:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIO
 110              		.loc 1 203 0
 111 003e 0123     		movs	r3, #1
 112 0040 0093     		str	r3, [sp]
 113 0042 1A4B     		ldr	r3, .L3+24
 114 0044 0193     		str	r3, [sp, #4]
 115 0046 1A48     		ldr	r0, .L3+28
 116 0048 1A49     		ldr	r1, .L3+32
 117 004a 6422     		movs	r2, #100
 118 004c 164B     		ldr	r3, .L3+20
 119 004e FFF7FEFF 		bl	xTaskCreate
 204:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vCounterControlTask, "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 120              		.loc 1 204 0
 121 0052 0023     		movs	r3, #0
 122 0054 0093     		str	r3, [sp]
 123 0056 0023     		movs	r3, #0
 124 0058 0193     		str	r3, [sp, #4]
 125 005a 1748     		ldr	r0, .L3+36
 126 005c 1749     		ldr	r1, .L3+40
 127 005e 6422     		movs	r2, #100
 128 0060 0023     		movs	r3, #0
 129 0062 FFF7FEFF 		bl	xTaskCreate
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 7


 205:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL 
 130              		.loc 1 205 0
 131 0066 0023     		movs	r3, #0
 132 0068 0093     		str	r3, [sp]
 133 006a 0023     		movs	r3, #0
 134 006c 0193     		str	r3, [sp, #4]
 135 006e 1448     		ldr	r0, .L3+44
 136 0070 1449     		ldr	r1, .L3+48
 137 0072 6422     		movs	r2, #100
 138 0074 0023     		movs	r3, #0
 139 0076 FFF7FEFF 		bl	xTaskCreate
 206:..\Common\Minimal/dynamic.c **** 		xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NU
 140              		.loc 1 206 0
 141 007a 0023     		movs	r3, #0
 142 007c 0093     		str	r3, [sp]
 143 007e 0023     		movs	r3, #0
 144 0080 0193     		str	r3, [sp, #4]
 145 0082 1148     		ldr	r0, .L3+52
 146 0084 1149     		ldr	r1, .L3+56
 147 0086 6422     		movs	r2, #100
 148 0088 0023     		movs	r3, #0
 149 008a FFF7FEFF 		bl	xTaskCreate
 150              	.L1:
 207:..\Common\Minimal/dynamic.c **** 	}
 208:..\Common\Minimal/dynamic.c **** }
 151              		.loc 1 208 0
 152 008e BD46     		mov	sp, r7
 153              		.cfi_def_cfa_register 13
 154              		@ sp needed
 155 0090 80BD     		pop	{r7, pc}
 156              	.L4:
 157 0092 00BF     		.align	2
 158              	.L3:
 159 0094 00000000 		.word	xSuspendedTestQueue
 160 0098 00000000 		.word	.LC0
 161 009c 00000000 		.word	xContinuousIncrementHandle
 162 00a0 00000000 		.word	vContinuousIncrementTask
 163 00a4 18000000 		.word	.LC1
 164 00a8 08000000 		.word	ulCounter
 165 00ac 04000000 		.word	xLimitedIncrementHandle
 166 00b0 00000000 		.word	vLimitedIncrementTask
 167 00b4 20000000 		.word	.LC2
 168 00b8 00000000 		.word	vCounterControlTask
 169 00bc 28000000 		.word	.LC3
 170 00c0 00000000 		.word	vQueueSendWhenSuspendedTask
 171 00c4 30000000 		.word	.LC4
 172 00c8 00000000 		.word	vQueueReceiveWhenSuspendedTask
 173 00cc 38000000 		.word	.LC5
 174              		.cfi_endproc
 175              	.LFE68:
 176              		.size	vStartDynamicPriorityTasks, .-vStartDynamicPriorityTasks
 177              		.section	.text.vLimitedIncrementTask,"ax",%progbits
 178              		.align	2
 179              		.thumb
 180              		.thumb_func
 181              		.type	vLimitedIncrementTask, %function
 182              	vLimitedIncrementTask:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 8


 183              	.LFB69:
 209:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 210:..\Common\Minimal/dynamic.c **** 
 211:..\Common\Minimal/dynamic.c **** /*
 212:..\Common\Minimal/dynamic.c ****  * Just loops around incrementing the shared variable until the limit has been
 213:..\Common\Minimal/dynamic.c ****  * reached.  Once the limit has been reached it suspends itself.
 214:..\Common\Minimal/dynamic.c ****  */
 215:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
 216:..\Common\Minimal/dynamic.c **** {
 184              		.loc 1 216 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 16
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188 0000 80B5     		push	{r7, lr}
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 7, -8
 191              		.cfi_offset 14, -4
 192 0002 84B0     		sub	sp, sp, #16
 193              		.cfi_def_cfa_offset 24
 194 0004 00AF     		add	r7, sp, #0
 195              		.cfi_def_cfa_register 7
 196 0006 7860     		str	r0, [r7, #4]
 217:..\Common\Minimal/dynamic.c **** uint32_t *pulCounter;
 218:..\Common\Minimal/dynamic.c **** 
 219:..\Common\Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 220:..\Common\Minimal/dynamic.c **** 	the task. */
 221:..\Common\Minimal/dynamic.c **** 	pulCounter = ( uint32_t * ) pvParameters;
 197              		.loc 1 221 0
 198 0008 7B68     		ldr	r3, [r7, #4]
 199 000a FB60     		str	r3, [r7, #12]
 222:..\Common\Minimal/dynamic.c **** 
 223:..\Common\Minimal/dynamic.c **** 	/* This will run before the control task, so the first thing it does is
 224:..\Common\Minimal/dynamic.c **** 	suspend - the control task will resume it when ready. */
 225:..\Common\Minimal/dynamic.c **** 	vTaskSuspend( NULL );
 200              		.loc 1 225 0
 201 000c 0020     		movs	r0, #0
 202 000e FFF7FEFF 		bl	vTaskSuspend
 203              	.L7:
 226:..\Common\Minimal/dynamic.c **** 
 227:..\Common\Minimal/dynamic.c **** 	for( ;; )
 228:..\Common\Minimal/dynamic.c **** 	{
 229:..\Common\Minimal/dynamic.c **** 		/* Just count up to a value then suspend. */
 230:..\Common\Minimal/dynamic.c **** 		( *pulCounter )++;
 204              		.loc 1 230 0
 205 0012 FB68     		ldr	r3, [r7, #12]
 206 0014 1B68     		ldr	r3, [r3]
 207 0016 5A1C     		adds	r2, r3, #1
 208 0018 FB68     		ldr	r3, [r7, #12]
 209 001a 1A60     		str	r2, [r3]
 231:..\Common\Minimal/dynamic.c **** 
 232:..\Common\Minimal/dynamic.c **** 		if( *pulCounter >= priMAX_COUNT )
 210              		.loc 1 232 0
 211 001c FB68     		ldr	r3, [r7, #12]
 212 001e 1B68     		ldr	r3, [r3]
 213 0020 FE2B     		cmp	r3, #254
 214 0022 02D9     		bls	.L6
 233:..\Common\Minimal/dynamic.c **** 		{
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 9


 234:..\Common\Minimal/dynamic.c **** 			vTaskSuspend( NULL );
 215              		.loc 1 234 0
 216 0024 0020     		movs	r0, #0
 217 0026 FFF7FEFF 		bl	vTaskSuspend
 218              	.L6:
 235:..\Common\Minimal/dynamic.c **** 		}
 236:..\Common\Minimal/dynamic.c **** 	}
 219              		.loc 1 236 0
 220 002a F2E7     		b	.L7
 221              		.cfi_endproc
 222              	.LFE69:
 223              		.size	vLimitedIncrementTask, .-vLimitedIncrementTask
 224              		.section	.text.vContinuousIncrementTask,"ax",%progbits
 225              		.align	2
 226              		.thumb
 227              		.thumb_func
 228              		.type	vContinuousIncrementTask, %function
 229              	vContinuousIncrementTask:
 230              	.LFB70:
 237:..\Common\Minimal/dynamic.c **** }
 238:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 239:..\Common\Minimal/dynamic.c **** 
 240:..\Common\Minimal/dynamic.c **** /*
 241:..\Common\Minimal/dynamic.c ****  * Just keep counting the shared variable up.  The control task will suspend
 242:..\Common\Minimal/dynamic.c ****  * this task when it wants.
 243:..\Common\Minimal/dynamic.c ****  */
 244:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
 245:..\Common\Minimal/dynamic.c **** {
 231              		.loc 1 245 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 16
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235 0000 80B5     		push	{r7, lr}
 236              		.cfi_def_cfa_offset 8
 237              		.cfi_offset 7, -8
 238              		.cfi_offset 14, -4
 239 0002 84B0     		sub	sp, sp, #16
 240              		.cfi_def_cfa_offset 24
 241 0004 00AF     		add	r7, sp, #0
 242              		.cfi_def_cfa_register 7
 243 0006 7860     		str	r0, [r7, #4]
 246:..\Common\Minimal/dynamic.c **** volatile uint32_t *pulCounter;
 247:..\Common\Minimal/dynamic.c **** UBaseType_t uxOurPriority;
 248:..\Common\Minimal/dynamic.c **** 
 249:..\Common\Minimal/dynamic.c **** 	/* Take a pointer to the shared variable from the parameters passed into
 250:..\Common\Minimal/dynamic.c **** 	the task. */
 251:..\Common\Minimal/dynamic.c **** 	pulCounter = ( uint32_t * ) pvParameters;
 244              		.loc 1 251 0
 245 0008 7B68     		ldr	r3, [r7, #4]
 246 000a FB60     		str	r3, [r7, #12]
 252:..\Common\Minimal/dynamic.c **** 
 253:..\Common\Minimal/dynamic.c **** 	/* Query our priority so we can raise it when exclusive access to the
 254:..\Common\Minimal/dynamic.c **** 	shared variable is required. */
 255:..\Common\Minimal/dynamic.c **** 	uxOurPriority = uxTaskPriorityGet( NULL );
 247              		.loc 1 255 0
 248 000c 0020     		movs	r0, #0
 249 000e FFF7FEFF 		bl	uxTaskPriorityGet
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 10


 250 0012 B860     		str	r0, [r7, #8]
 251              	.L9:
 256:..\Common\Minimal/dynamic.c **** 
 257:..\Common\Minimal/dynamic.c **** 	for( ;; )
 258:..\Common\Minimal/dynamic.c **** 	{
 259:..\Common\Minimal/dynamic.c **** 		/* Raise the priority above the controller task to ensure a context
 260:..\Common\Minimal/dynamic.c **** 		switch does not occur while the variable is being accessed. */
 261:..\Common\Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 252              		.loc 1 261 0 discriminator 1
 253 0014 BB68     		ldr	r3, [r7, #8]
 254 0016 0133     		adds	r3, r3, #1
 255 0018 0020     		movs	r0, #0
 256 001a 1946     		mov	r1, r3
 257 001c FFF7FEFF 		bl	vTaskPrioritySet
 262:..\Common\Minimal/dynamic.c **** 		{
 263:..\Common\Minimal/dynamic.c **** 			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
 264:..\Common\Minimal/dynamic.c **** 			( *pulCounter )++;
 258              		.loc 1 264 0 discriminator 1
 259 0020 FB68     		ldr	r3, [r7, #12]
 260 0022 1B68     		ldr	r3, [r3]
 261 0024 5A1C     		adds	r2, r3, #1
 262 0026 FB68     		ldr	r3, [r7, #12]
 263 0028 1A60     		str	r2, [r3]
 265:..\Common\Minimal/dynamic.c **** 		}
 266:..\Common\Minimal/dynamic.c **** 		vTaskPrioritySet( NULL, uxOurPriority );
 264              		.loc 1 266 0 discriminator 1
 265 002a 0020     		movs	r0, #0
 266 002c B968     		ldr	r1, [r7, #8]
 267 002e FFF7FEFF 		bl	vTaskPrioritySet
 267:..\Common\Minimal/dynamic.c **** 
 268:..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 269:..\Common\Minimal/dynamic.c **** 			taskYIELD();
 270:..\Common\Minimal/dynamic.c **** 		#endif
 271:..\Common\Minimal/dynamic.c **** 
 272:..\Common\Minimal/dynamic.c **** 		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
 273:..\Common\Minimal/dynamic.c **** 	}
 268              		.loc 1 273 0 discriminator 1
 269 0032 EFE7     		b	.L9
 270              		.cfi_endproc
 271              	.LFE70:
 272              		.size	vContinuousIncrementTask, .-vContinuousIncrementTask
 273              		.section	.text.vCounterControlTask,"ax",%progbits
 274              		.align	2
 275              		.thumb
 276              		.thumb_func
 277              		.type	vCounterControlTask, %function
 278              	vCounterControlTask:
 279              	.LFB71:
 274:..\Common\Minimal/dynamic.c **** }
 275:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 276:..\Common\Minimal/dynamic.c **** 
 277:..\Common\Minimal/dynamic.c **** /*
 278:..\Common\Minimal/dynamic.c ****  * Controller task as described above.
 279:..\Common\Minimal/dynamic.c ****  */
 280:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vCounterControlTask, pvParameters )
 281:..\Common\Minimal/dynamic.c **** {
 280              		.loc 1 281 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 11


 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 16
 283              		@ frame_needed = 1, uses_anonymous_args = 0
 284 0000 80B5     		push	{r7, lr}
 285              		.cfi_def_cfa_offset 8
 286              		.cfi_offset 7, -8
 287              		.cfi_offset 14, -4
 288 0002 84B0     		sub	sp, sp, #16
 289              		.cfi_def_cfa_offset 24
 290 0004 00AF     		add	r7, sp, #0
 291              		.cfi_def_cfa_register 7
 292 0006 7860     		str	r0, [r7, #4]
 282:..\Common\Minimal/dynamic.c **** uint32_t ulLastCounter;
 283:..\Common\Minimal/dynamic.c **** short sLoops;
 284:..\Common\Minimal/dynamic.c **** short sError = pdFALSE;
 293              		.loc 1 284 0
 294 0008 0023     		movs	r3, #0
 295 000a BB81     		strh	r3, [r7, #12]	@ movhi
 296              	.L16:
 285:..\Common\Minimal/dynamic.c **** 
 286:..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 287:..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
 288:..\Common\Minimal/dynamic.c **** 
 289:..\Common\Minimal/dynamic.c **** 	for( ;; )
 290:..\Common\Minimal/dynamic.c **** 	{
 291:..\Common\Minimal/dynamic.c **** 		/* Start with the counter at zero. */
 292:..\Common\Minimal/dynamic.c **** 		ulCounter = ( uint32_t ) 0;
 297              		.loc 1 292 0
 298 000c 284B     		ldr	r3, .L17
 299 000e 0022     		movs	r2, #0
 300 0010 1A60     		str	r2, [r3]
 293:..\Common\Minimal/dynamic.c **** 
 294:..\Common\Minimal/dynamic.c **** 		/* First section : */
 295:..\Common\Minimal/dynamic.c **** 
 296:..\Common\Minimal/dynamic.c **** 		/* Check the continuous count task is running. */
 297:..\Common\Minimal/dynamic.c **** 		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 301              		.loc 1 297 0
 302 0012 0023     		movs	r3, #0
 303 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 304 0016 1FE0     		b	.L11
 305              	.L13:
 298:..\Common\Minimal/dynamic.c **** 		{
 299:..\Common\Minimal/dynamic.c **** 			/* Suspend the continuous count task so we can take a mirror of the
 300:..\Common\Minimal/dynamic.c **** 			shared variable without risk of corruption.  This is not really
 301:..\Common\Minimal/dynamic.c **** 			needed as the other task raises its priority above this task's
 302:..\Common\Minimal/dynamic.c **** 			priority. */
 303:..\Common\Minimal/dynamic.c **** 			vTaskSuspend( xContinuousIncrementHandle );
 306              		.loc 1 303 0
 307 0018 264B     		ldr	r3, .L17+4
 308 001a 1B68     		ldr	r3, [r3]
 309 001c 1846     		mov	r0, r3
 310 001e FFF7FEFF 		bl	vTaskSuspend
 304:..\Common\Minimal/dynamic.c **** 			{
 305:..\Common\Minimal/dynamic.c **** 				#if( INCLUDE_eTaskGetState == 1 )
 306:..\Common\Minimal/dynamic.c **** 				{
 307:..\Common\Minimal/dynamic.c **** 					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
 308:..\Common\Minimal/dynamic.c **** 				}
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 12


 309:..\Common\Minimal/dynamic.c **** 				#endif /* INCLUDE_eTaskGetState */
 310:..\Common\Minimal/dynamic.c **** 
 311:..\Common\Minimal/dynamic.c **** 				ulLastCounter = ulCounter;
 311              		.loc 1 311 0
 312 0022 234B     		ldr	r3, .L17
 313 0024 1B68     		ldr	r3, [r3]
 314 0026 BB60     		str	r3, [r7, #8]
 312:..\Common\Minimal/dynamic.c **** 			}
 313:..\Common\Minimal/dynamic.c **** 			vTaskResume( xContinuousIncrementHandle );
 315              		.loc 1 313 0
 316 0028 224B     		ldr	r3, .L17+4
 317 002a 1B68     		ldr	r3, [r3]
 318 002c 1846     		mov	r0, r3
 319 002e FFF7FEFF 		bl	vTaskResume
 314:..\Common\Minimal/dynamic.c **** 
 315:..\Common\Minimal/dynamic.c **** 			#if( configUSE_PREEMPTION == 0 )
 316:..\Common\Minimal/dynamic.c **** 				taskYIELD();
 317:..\Common\Minimal/dynamic.c **** 			#endif
 318:..\Common\Minimal/dynamic.c **** 
 319:..\Common\Minimal/dynamic.c **** 			#if( INCLUDE_eTaskGetState == 1 )
 320:..\Common\Minimal/dynamic.c **** 			{
 321:..\Common\Minimal/dynamic.c **** 				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
 322:..\Common\Minimal/dynamic.c **** 			}
 323:..\Common\Minimal/dynamic.c **** 			#endif /* INCLUDE_eTaskGetState */
 324:..\Common\Minimal/dynamic.c **** 
 325:..\Common\Minimal/dynamic.c **** 			/* Now delay to ensure the other task has processor time. */
 326:..\Common\Minimal/dynamic.c **** 			vTaskDelay( priSLEEP_TIME );
 320              		.loc 1 326 0
 321 0032 8020     		movs	r0, #128
 322 0034 FFF7FEFF 		bl	vTaskDelay
 327:..\Common\Minimal/dynamic.c **** 
 328:..\Common\Minimal/dynamic.c **** 			/* Check the shared variable again.  This time to ensure mutual
 329:..\Common\Minimal/dynamic.c **** 			exclusion the whole scheduler will be locked.  This is just for
 330:..\Common\Minimal/dynamic.c **** 			demo purposes! */
 331:..\Common\Minimal/dynamic.c **** 			vTaskSuspendAll();
 323              		.loc 1 331 0
 324 0038 FFF7FEFF 		bl	vTaskSuspendAll
 332:..\Common\Minimal/dynamic.c **** 			{
 333:..\Common\Minimal/dynamic.c **** 				if( ulLastCounter == ulCounter )
 325              		.loc 1 333 0
 326 003c 1C4B     		ldr	r3, .L17
 327 003e 1B68     		ldr	r3, [r3]
 328 0040 BA68     		ldr	r2, [r7, #8]
 329 0042 9A42     		cmp	r2, r3
 330 0044 01D1     		bne	.L12
 334:..\Common\Minimal/dynamic.c **** 				{
 335:..\Common\Minimal/dynamic.c **** 					/* The shared variable has not changed.  There is a problem
 336:..\Common\Minimal/dynamic.c **** 					with the continuous count task so flag an error. */
 337:..\Common\Minimal/dynamic.c **** 					sError = pdTRUE;
 331              		.loc 1 337 0
 332 0046 0123     		movs	r3, #1
 333 0048 BB81     		strh	r3, [r7, #12]	@ movhi
 334              	.L12:
 338:..\Common\Minimal/dynamic.c **** 				}
 339:..\Common\Minimal/dynamic.c **** 			}
 340:..\Common\Minimal/dynamic.c **** 			xTaskResumeAll();
 335              		.loc 1 340 0 discriminator 2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 13


 336 004a FFF7FEFF 		bl	xTaskResumeAll
 297:..\Common\Minimal/dynamic.c **** 		{
 337              		.loc 1 297 0 discriminator 2
 338 004e FB89     		ldrh	r3, [r7, #14]
 339 0050 9BB2     		uxth	r3, r3
 340 0052 0133     		adds	r3, r3, #1
 341 0054 9BB2     		uxth	r3, r3
 342 0056 FB81     		strh	r3, [r7, #14]	@ movhi
 343              	.L11:
 297:..\Common\Minimal/dynamic.c **** 		{
 344              		.loc 1 297 0 is_stmt 0 discriminator 1
 345 0058 B7F90E30 		ldrsh	r3, [r7, #14]
 346 005c 042B     		cmp	r3, #4
 347 005e DBDD     		ble	.L13
 341:..\Common\Minimal/dynamic.c **** 		}
 342:..\Common\Minimal/dynamic.c **** 
 343:..\Common\Minimal/dynamic.c **** 		/* Second section: */
 344:..\Common\Minimal/dynamic.c **** 
 345:..\Common\Minimal/dynamic.c **** 		/* Suspend the continuous counter task so it stops accessing the shared
 346:..\Common\Minimal/dynamic.c **** 		variable. */
 347:..\Common\Minimal/dynamic.c **** 		vTaskSuspend( xContinuousIncrementHandle );
 348              		.loc 1 347 0 is_stmt 1
 349 0060 144B     		ldr	r3, .L17+4
 350 0062 1B68     		ldr	r3, [r3]
 351 0064 1846     		mov	r0, r3
 352 0066 FFF7FEFF 		bl	vTaskSuspend
 348:..\Common\Minimal/dynamic.c **** 
 349:..\Common\Minimal/dynamic.c **** 		/* Reset the variable. */
 350:..\Common\Minimal/dynamic.c **** 		ulCounter = ( uint32_t ) 0;
 353              		.loc 1 350 0
 354 006a 114B     		ldr	r3, .L17
 355 006c 0022     		movs	r2, #0
 356 006e 1A60     		str	r2, [r3]
 351:..\Common\Minimal/dynamic.c **** 
 352:..\Common\Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
 353:..\Common\Minimal/dynamic.c **** 		{
 354:..\Common\Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 355:..\Common\Minimal/dynamic.c **** 		}
 356:..\Common\Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 357:..\Common\Minimal/dynamic.c **** 
 358:..\Common\Minimal/dynamic.c **** 		/* Resume the limited count task which has a higher priority than us.
 359:..\Common\Minimal/dynamic.c **** 		We should therefore not return from this call until the limited count
 360:..\Common\Minimal/dynamic.c **** 		task has suspended itself with a known value in the counter variable. */
 361:..\Common\Minimal/dynamic.c **** 		vTaskResume( xLimitedIncrementHandle );
 357              		.loc 1 361 0
 358 0070 114B     		ldr	r3, .L17+8
 359 0072 1B68     		ldr	r3, [r3]
 360 0074 1846     		mov	r0, r3
 361 0076 FFF7FEFF 		bl	vTaskResume
 362:..\Common\Minimal/dynamic.c **** 
 363:..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 364:..\Common\Minimal/dynamic.c **** 			taskYIELD();
 365:..\Common\Minimal/dynamic.c **** 		#endif
 366:..\Common\Minimal/dynamic.c **** 
 367:..\Common\Minimal/dynamic.c **** 		/* This task should not run again until xLimitedIncrementHandle has
 368:..\Common\Minimal/dynamic.c **** 		suspended itself. */
 369:..\Common\Minimal/dynamic.c **** 		#if( INCLUDE_eTaskGetState == 1 )
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 14


 370:..\Common\Minimal/dynamic.c **** 		{
 371:..\Common\Minimal/dynamic.c **** 			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
 372:..\Common\Minimal/dynamic.c **** 		}
 373:..\Common\Minimal/dynamic.c **** 		#endif /* INCLUDE_eTaskGetState */
 374:..\Common\Minimal/dynamic.c **** 
 375:..\Common\Minimal/dynamic.c **** 		/* Does the counter variable have the expected value? */
 376:..\Common\Minimal/dynamic.c **** 		if( ulCounter != priMAX_COUNT )
 362              		.loc 1 376 0
 363 007a 0D4B     		ldr	r3, .L17
 364 007c 1B68     		ldr	r3, [r3]
 365 007e FF2B     		cmp	r3, #255
 366 0080 01D0     		beq	.L14
 377:..\Common\Minimal/dynamic.c **** 		{
 378:..\Common\Minimal/dynamic.c **** 			sError = pdTRUE;
 367              		.loc 1 378 0
 368 0082 0123     		movs	r3, #1
 369 0084 BB81     		strh	r3, [r7, #12]	@ movhi
 370              	.L14:
 379:..\Common\Minimal/dynamic.c **** 		}
 380:..\Common\Minimal/dynamic.c **** 
 381:..\Common\Minimal/dynamic.c **** 		if( sError == pdFALSE )
 371              		.loc 1 381 0
 372 0086 B7F90C30 		ldrsh	r3, [r7, #12]
 373 008a 002B     		cmp	r3, #0
 374 008c 0AD1     		bne	.L15
 382:..\Common\Minimal/dynamic.c **** 		{
 383:..\Common\Minimal/dynamic.c **** 			/* If no errors have occurred then increment the check variable. */
 384:..\Common\Minimal/dynamic.c **** 			portENTER_CRITICAL();
 375              		.loc 1 384 0
 376 008e FFF7FEFF 		bl	vPortEnterCritical
 385:..\Common\Minimal/dynamic.c **** 				usCheckVariable++;
 377              		.loc 1 385 0
 378 0092 0A4B     		ldr	r3, .L17+12
 379 0094 1B88     		ldrh	r3, [r3]	@ movhi
 380 0096 9BB2     		uxth	r3, r3
 381 0098 0133     		adds	r3, r3, #1
 382 009a 9AB2     		uxth	r2, r3
 383 009c 074B     		ldr	r3, .L17+12
 384 009e 1A80     		strh	r2, [r3]	@ movhi
 386:..\Common\Minimal/dynamic.c **** 			portEXIT_CRITICAL();
 385              		.loc 1 386 0
 386 00a0 FFF7FEFF 		bl	vPortExitCritical
 387              	.L15:
 387:..\Common\Minimal/dynamic.c **** 		}
 388:..\Common\Minimal/dynamic.c **** 
 389:..\Common\Minimal/dynamic.c **** 		/* Resume the continuous count task and do it all again. */
 390:..\Common\Minimal/dynamic.c **** 		vTaskResume( xContinuousIncrementHandle );
 388              		.loc 1 390 0
 389 00a4 034B     		ldr	r3, .L17+4
 390 00a6 1B68     		ldr	r3, [r3]
 391 00a8 1846     		mov	r0, r3
 392 00aa FFF7FEFF 		bl	vTaskResume
 391:..\Common\Minimal/dynamic.c **** 
 392:..\Common\Minimal/dynamic.c **** 		#if( configUSE_PREEMPTION == 0 )
 393:..\Common\Minimal/dynamic.c **** 			taskYIELD();
 394:..\Common\Minimal/dynamic.c **** 		#endif
 395:..\Common\Minimal/dynamic.c **** 	}
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 15


 393              		.loc 1 395 0
 394 00ae ADE7     		b	.L16
 395              	.L18:
 396              		.align	2
 397              	.L17:
 398 00b0 08000000 		.word	ulCounter
 399 00b4 00000000 		.word	xContinuousIncrementHandle
 400 00b8 04000000 		.word	xLimitedIncrementHandle
 401 00bc 0C000000 		.word	usCheckVariable
 402              		.cfi_endproc
 403              	.LFE71:
 404              		.size	vCounterControlTask, .-vCounterControlTask
 405              		.section	.text.vQueueSendWhenSuspendedTask,"ax",%progbits
 406              		.align	2
 407              		.thumb
 408              		.thumb_func
 409              		.type	vQueueSendWhenSuspendedTask, %function
 410              	vQueueSendWhenSuspendedTask:
 411              	.LFB72:
 396:..\Common\Minimal/dynamic.c **** }
 397:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 398:..\Common\Minimal/dynamic.c **** 
 399:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
 400:..\Common\Minimal/dynamic.c **** {
 412              		.loc 1 400 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416 0000 80B5     		push	{r7, lr}
 417              		.cfi_def_cfa_offset 8
 418              		.cfi_offset 7, -8
 419              		.cfi_offset 14, -4
 420 0002 82B0     		sub	sp, sp, #8
 421              		.cfi_def_cfa_offset 16
 422 0004 00AF     		add	r7, sp, #0
 423              		.cfi_def_cfa_register 7
 424 0006 7860     		str	r0, [r7, #4]
 425              	.L21:
 401:..\Common\Minimal/dynamic.c **** static uint32_t ulValueToSend = ( uint32_t ) 0;
 402:..\Common\Minimal/dynamic.c **** 
 403:..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 404:..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
 405:..\Common\Minimal/dynamic.c **** 
 406:..\Common\Minimal/dynamic.c **** 	for( ;; )
 407:..\Common\Minimal/dynamic.c **** 	{
 408:..\Common\Minimal/dynamic.c **** 		vTaskSuspendAll();
 426              		.loc 1 408 0
 427 0008 FFF7FEFF 		bl	vTaskSuspendAll
 409:..\Common\Minimal/dynamic.c **** 		{
 410:..\Common\Minimal/dynamic.c **** 			/* We must not block while the scheduler is suspended! */
 411:..\Common\Minimal/dynamic.c **** 			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 428              		.loc 1 411 0
 429 000c 0C4B     		ldr	r3, .L22
 430 000e 1B68     		ldr	r3, [r3]
 431 0010 1846     		mov	r0, r3
 432 0012 0C49     		ldr	r1, .L22+4
 433 0014 0022     		movs	r2, #0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 16


 434 0016 0023     		movs	r3, #0
 435 0018 FFF7FEFF 		bl	xQueueGenericSend
 436 001c 0346     		mov	r3, r0
 437 001e 012B     		cmp	r3, #1
 438 0020 02D0     		beq	.L20
 412:..\Common\Minimal/dynamic.c **** 			{
 413:..\Common\Minimal/dynamic.c **** 				xSuspendedQueueSendError = pdTRUE;
 439              		.loc 1 413 0
 440 0022 094B     		ldr	r3, .L22+8
 441 0024 0122     		movs	r2, #1
 442 0026 1A60     		str	r2, [r3]
 443              	.L20:
 414:..\Common\Minimal/dynamic.c **** 			}
 415:..\Common\Minimal/dynamic.c **** 		}
 416:..\Common\Minimal/dynamic.c **** 		xTaskResumeAll();
 444              		.loc 1 416 0
 445 0028 FFF7FEFF 		bl	xTaskResumeAll
 417:..\Common\Minimal/dynamic.c **** 
 418:..\Common\Minimal/dynamic.c **** 		vTaskDelay( priSLEEP_TIME );
 446              		.loc 1 418 0
 447 002c 8020     		movs	r0, #128
 448 002e FFF7FEFF 		bl	vTaskDelay
 419:..\Common\Minimal/dynamic.c **** 
 420:..\Common\Minimal/dynamic.c **** 		++ulValueToSend;
 449              		.loc 1 420 0
 450 0032 044B     		ldr	r3, .L22+4
 451 0034 1B68     		ldr	r3, [r3]
 452 0036 0133     		adds	r3, r3, #1
 453 0038 024A     		ldr	r2, .L22+4
 454 003a 1360     		str	r3, [r2]
 421:..\Common\Minimal/dynamic.c **** 	}
 455              		.loc 1 421 0
 456 003c E4E7     		b	.L21
 457              	.L23:
 458 003e 00BF     		.align	2
 459              	.L22:
 460 0040 00000000 		.word	xSuspendedTestQueue
 461 0044 1C000000 		.word	ulValueToSend.7098
 462 0048 10000000 		.word	xSuspendedQueueSendError
 463              		.cfi_endproc
 464              	.LFE72:
 465              		.size	vQueueSendWhenSuspendedTask, .-vQueueSendWhenSuspendedTask
 466              		.section	.text.vQueueReceiveWhenSuspendedTask,"ax",%progbits
 467              		.align	2
 468              		.thumb
 469              		.thumb_func
 470              		.type	vQueueReceiveWhenSuspendedTask, %function
 471              	vQueueReceiveWhenSuspendedTask:
 472              	.LFB73:
 422:..\Common\Minimal/dynamic.c **** }
 423:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 424:..\Common\Minimal/dynamic.c **** 
 425:..\Common\Minimal/dynamic.c **** static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
 426:..\Common\Minimal/dynamic.c **** {
 473              		.loc 1 426 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 17


 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477 0000 80B5     		push	{r7, lr}
 478              		.cfi_def_cfa_offset 8
 479              		.cfi_offset 7, -8
 480              		.cfi_offset 14, -4
 481 0002 84B0     		sub	sp, sp, #16
 482              		.cfi_def_cfa_offset 24
 483 0004 00AF     		add	r7, sp, #0
 484              		.cfi_def_cfa_register 7
 485 0006 7860     		str	r0, [r7, #4]
 486              	.L26:
 427:..\Common\Minimal/dynamic.c **** uint32_t ulReceivedValue;
 428:..\Common\Minimal/dynamic.c **** BaseType_t xGotValue;
 429:..\Common\Minimal/dynamic.c **** 
 430:..\Common\Minimal/dynamic.c **** 	/* Just to stop warning messages. */
 431:..\Common\Minimal/dynamic.c **** 	( void ) pvParameters;
 432:..\Common\Minimal/dynamic.c **** 
 433:..\Common\Minimal/dynamic.c **** 	for( ;; )
 434:..\Common\Minimal/dynamic.c **** 	{
 435:..\Common\Minimal/dynamic.c **** 		do
 436:..\Common\Minimal/dynamic.c **** 		{
 437:..\Common\Minimal/dynamic.c **** 			/* Suspending the scheduler here is fairly pointless and
 438:..\Common\Minimal/dynamic.c **** 			undesirable for a normal application.  It is done here purely
 439:..\Common\Minimal/dynamic.c **** 			to test the scheduler.  The inner xTaskResumeAll() should
 440:..\Common\Minimal/dynamic.c **** 			never return pdTRUE as the scheduler is still locked by the
 441:..\Common\Minimal/dynamic.c **** 			outer call. */
 442:..\Common\Minimal/dynamic.c **** 			vTaskSuspendAll();
 487              		.loc 1 442 0
 488 0008 FFF7FEFF 		bl	vTaskSuspendAll
 443:..\Common\Minimal/dynamic.c **** 			{
 444:..\Common\Minimal/dynamic.c **** 				vTaskSuspendAll();
 489              		.loc 1 444 0
 490 000c FFF7FEFF 		bl	vTaskSuspendAll
 445:..\Common\Minimal/dynamic.c **** 				{
 446:..\Common\Minimal/dynamic.c **** 					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 491              		.loc 1 446 0
 492 0010 144B     		ldr	r3, .L29
 493 0012 1A68     		ldr	r2, [r3]
 494 0014 07F10803 		add	r3, r7, #8
 495 0018 1046     		mov	r0, r2
 496 001a 1946     		mov	r1, r3
 497 001c 0022     		movs	r2, #0
 498 001e 0023     		movs	r3, #0
 499 0020 FFF7FEFF 		bl	xQueueGenericReceive
 500 0024 F860     		str	r0, [r7, #12]
 447:..\Common\Minimal/dynamic.c **** 				}
 448:..\Common\Minimal/dynamic.c **** 				if( xTaskResumeAll() != pdFALSE )
 501              		.loc 1 448 0
 502 0026 FFF7FEFF 		bl	xTaskResumeAll
 503 002a 0346     		mov	r3, r0
 504 002c 002B     		cmp	r3, #0
 505 002e 02D0     		beq	.L25
 449:..\Common\Minimal/dynamic.c **** 				{
 450:..\Common\Minimal/dynamic.c **** 					xSuspendedQueueReceiveError = pdTRUE;
 506              		.loc 1 450 0
 507 0030 0D4B     		ldr	r3, .L29+4
 508 0032 0122     		movs	r2, #1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 18


 509 0034 1A60     		str	r2, [r3]
 510              	.L25:
 451:..\Common\Minimal/dynamic.c **** 				}
 452:..\Common\Minimal/dynamic.c **** 			}
 453:..\Common\Minimal/dynamic.c **** 			xTaskResumeAll();
 511              		.loc 1 453 0
 512 0036 FFF7FEFF 		bl	xTaskResumeAll
 454:..\Common\Minimal/dynamic.c **** 
 455:..\Common\Minimal/dynamic.c **** 			#if configUSE_PREEMPTION == 0
 456:..\Common\Minimal/dynamic.c **** 			{
 457:..\Common\Minimal/dynamic.c **** 				taskYIELD();
 458:..\Common\Minimal/dynamic.c **** 			}
 459:..\Common\Minimal/dynamic.c **** 			#endif
 460:..\Common\Minimal/dynamic.c **** 
 461:..\Common\Minimal/dynamic.c **** 		} while( xGotValue == pdFALSE );
 513              		.loc 1 461 0
 514 003a FB68     		ldr	r3, [r7, #12]
 515 003c 002B     		cmp	r3, #0
 516 003e E3D0     		beq	.L26
 462:..\Common\Minimal/dynamic.c **** 
 463:..\Common\Minimal/dynamic.c **** 		if( ulReceivedValue != ulExpectedValue )
 517              		.loc 1 463 0
 518 0040 BA68     		ldr	r2, [r7, #8]
 519 0042 0A4B     		ldr	r3, .L29+8
 520 0044 1B68     		ldr	r3, [r3]
 521 0046 9A42     		cmp	r2, r3
 522 0048 02D0     		beq	.L27
 464:..\Common\Minimal/dynamic.c **** 		{
 465:..\Common\Minimal/dynamic.c **** 			xSuspendedQueueReceiveError = pdTRUE;
 523              		.loc 1 465 0
 524 004a 074B     		ldr	r3, .L29+4
 525 004c 0122     		movs	r2, #1
 526 004e 1A60     		str	r2, [r3]
 527              	.L27:
 466:..\Common\Minimal/dynamic.c **** 		}
 467:..\Common\Minimal/dynamic.c **** 
 468:..\Common\Minimal/dynamic.c **** 		if( xSuspendedQueueReceiveError != pdTRUE )
 528              		.loc 1 468 0
 529 0050 054B     		ldr	r3, .L29+4
 530 0052 1B68     		ldr	r3, [r3]
 531 0054 012B     		cmp	r3, #1
 532 0056 04D0     		beq	.L28
 469:..\Common\Minimal/dynamic.c **** 		{
 470:..\Common\Minimal/dynamic.c **** 			/* Only increment the variable if an error has not occurred.  This
 471:..\Common\Minimal/dynamic.c **** 			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
 472:..\Common\Minimal/dynamic.c **** 			tasks as well as explicit errors. */
 473:..\Common\Minimal/dynamic.c **** 			++ulExpectedValue;
 533              		.loc 1 473 0
 534 0058 044B     		ldr	r3, .L29+8
 535 005a 1B68     		ldr	r3, [r3]
 536 005c 0133     		adds	r3, r3, #1
 537 005e 034A     		ldr	r2, .L29+8
 538 0060 1360     		str	r3, [r2]
 539              	.L28:
 474:..\Common\Minimal/dynamic.c **** 		}
 475:..\Common\Minimal/dynamic.c **** 	}
 540              		.loc 1 475 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 19


 541 0062 D1E7     		b	.L26
 542              	.L30:
 543              		.align	2
 544              	.L29:
 545 0064 00000000 		.word	xSuspendedTestQueue
 546 0068 14000000 		.word	xSuspendedQueueReceiveError
 547 006c 18000000 		.word	ulExpectedValue
 548              		.cfi_endproc
 549              	.LFE73:
 550              		.size	vQueueReceiveWhenSuspendedTask, .-vQueueReceiveWhenSuspendedTask
 551              		.section	.text.xAreDynamicPriorityTasksStillRunning,"ax",%progbits
 552              		.align	2
 553              		.global	xAreDynamicPriorityTasksStillRunning
 554              		.thumb
 555              		.thumb_func
 556              		.type	xAreDynamicPriorityTasksStillRunning, %function
 557              	xAreDynamicPriorityTasksStillRunning:
 558              	.LFB74:
 476:..\Common\Minimal/dynamic.c **** }
 477:..\Common\Minimal/dynamic.c **** /*-----------------------------------------------------------*/
 478:..\Common\Minimal/dynamic.c **** 
 479:..\Common\Minimal/dynamic.c **** /* Called to check that all the created tasks are still running without error. */
 480:..\Common\Minimal/dynamic.c **** BaseType_t xAreDynamicPriorityTasksStillRunning( void )
 481:..\Common\Minimal/dynamic.c **** {
 559              		.loc 1 481 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 8
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 564 0000 80B4     		push	{r7}
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 7, -4
 567 0002 83B0     		sub	sp, sp, #12
 568              		.cfi_def_cfa_offset 16
 569 0004 00AF     		add	r7, sp, #0
 570              		.cfi_def_cfa_register 7
 482:..\Common\Minimal/dynamic.c **** /* Keep a history of the check variables so we know if it has been incremented
 483:..\Common\Minimal/dynamic.c **** since the last call. */
 484:..\Common\Minimal/dynamic.c **** static uint16_t usLastTaskCheck = ( uint16_t ) 0;
 485:..\Common\Minimal/dynamic.c **** static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
 486:..\Common\Minimal/dynamic.c **** BaseType_t xReturn = pdTRUE;
 571              		.loc 1 486 0
 572 0006 0123     		movs	r3, #1
 573 0008 7B60     		str	r3, [r7, #4]
 487:..\Common\Minimal/dynamic.c **** 
 488:..\Common\Minimal/dynamic.c **** 	/* Check the tasks are still running by ensuring the check variable
 489:..\Common\Minimal/dynamic.c **** 	is still incrementing. */
 490:..\Common\Minimal/dynamic.c **** 
 491:..\Common\Minimal/dynamic.c **** 	if( usCheckVariable == usLastTaskCheck )
 574              		.loc 1 491 0
 575 000a 164B     		ldr	r3, .L37
 576 000c 1B88     		ldrh	r3, [r3]	@ movhi
 577 000e 9AB2     		uxth	r2, r3
 578 0010 154B     		ldr	r3, .L37+4
 579 0012 1B88     		ldrh	r3, [r3]
 580 0014 9A42     		cmp	r2, r3
 581 0016 01D1     		bne	.L32
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 20


 492:..\Common\Minimal/dynamic.c **** 	{
 493:..\Common\Minimal/dynamic.c **** 		/* The check has not incremented so an error exists. */
 494:..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 582              		.loc 1 494 0
 583 0018 0023     		movs	r3, #0
 584 001a 7B60     		str	r3, [r7, #4]
 585              	.L32:
 495:..\Common\Minimal/dynamic.c **** 	}
 496:..\Common\Minimal/dynamic.c **** 
 497:..\Common\Minimal/dynamic.c **** 	if( ulExpectedValue == ulLastExpectedValue )
 586              		.loc 1 497 0
 587 001c 134B     		ldr	r3, .L37+8
 588 001e 1A68     		ldr	r2, [r3]
 589 0020 134B     		ldr	r3, .L37+12
 590 0022 1B68     		ldr	r3, [r3]
 591 0024 9A42     		cmp	r2, r3
 592 0026 01D1     		bne	.L33
 498:..\Common\Minimal/dynamic.c **** 	{
 499:..\Common\Minimal/dynamic.c **** 		/* The value being received by the queue receive task has not
 500:..\Common\Minimal/dynamic.c **** 		incremented so an error exists. */
 501:..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 593              		.loc 1 501 0
 594 0028 0023     		movs	r3, #0
 595 002a 7B60     		str	r3, [r7, #4]
 596              	.L33:
 502:..\Common\Minimal/dynamic.c **** 	}
 503:..\Common\Minimal/dynamic.c **** 
 504:..\Common\Minimal/dynamic.c **** 	if( xSuspendedQueueSendError == pdTRUE )
 597              		.loc 1 504 0
 598 002c 114B     		ldr	r3, .L37+16
 599 002e 1B68     		ldr	r3, [r3]
 600 0030 012B     		cmp	r3, #1
 601 0032 01D1     		bne	.L34
 505:..\Common\Minimal/dynamic.c **** 	{
 506:..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 602              		.loc 1 506 0
 603 0034 0023     		movs	r3, #0
 604 0036 7B60     		str	r3, [r7, #4]
 605              	.L34:
 507:..\Common\Minimal/dynamic.c **** 	}
 508:..\Common\Minimal/dynamic.c **** 
 509:..\Common\Minimal/dynamic.c **** 	if( xSuspendedQueueReceiveError == pdTRUE )
 606              		.loc 1 509 0
 607 0038 0F4B     		ldr	r3, .L37+20
 608 003a 1B68     		ldr	r3, [r3]
 609 003c 012B     		cmp	r3, #1
 610 003e 01D1     		bne	.L35
 510:..\Common\Minimal/dynamic.c **** 	{
 511:..\Common\Minimal/dynamic.c **** 		xReturn = pdFALSE;
 611              		.loc 1 511 0
 612 0040 0023     		movs	r3, #0
 613 0042 7B60     		str	r3, [r7, #4]
 614              	.L35:
 512:..\Common\Minimal/dynamic.c **** 	}
 513:..\Common\Minimal/dynamic.c **** 
 514:..\Common\Minimal/dynamic.c **** 	usLastTaskCheck = usCheckVariable;
 615              		.loc 1 514 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 21


 616 0044 074B     		ldr	r3, .L37
 617 0046 1B88     		ldrh	r3, [r3]	@ movhi
 618 0048 9AB2     		uxth	r2, r3
 619 004a 074B     		ldr	r3, .L37+4
 620 004c 1A80     		strh	r2, [r3]	@ movhi
 515:..\Common\Minimal/dynamic.c **** 	ulLastExpectedValue = ulExpectedValue;
 621              		.loc 1 515 0
 622 004e 074B     		ldr	r3, .L37+8
 623 0050 1B68     		ldr	r3, [r3]
 624 0052 074A     		ldr	r2, .L37+12
 625 0054 1360     		str	r3, [r2]
 516:..\Common\Minimal/dynamic.c **** 
 517:..\Common\Minimal/dynamic.c **** 	return xReturn;
 626              		.loc 1 517 0
 627 0056 7B68     		ldr	r3, [r7, #4]
 518:..\Common\Minimal/dynamic.c **** }
 628              		.loc 1 518 0
 629 0058 1846     		mov	r0, r3
 630 005a 0C37     		adds	r7, r7, #12
 631              		.cfi_def_cfa_offset 4
 632 005c BD46     		mov	sp, r7
 633              		.cfi_def_cfa_register 13
 634              		@ sp needed
 635 005e 5DF8047B 		ldr	r7, [sp], #4
 636              		.cfi_restore 7
 637              		.cfi_def_cfa_offset 0
 638 0062 7047     		bx	lr
 639              	.L38:
 640              		.align	2
 641              	.L37:
 642 0064 0C000000 		.word	usCheckVariable
 643 0068 20000000 		.word	usLastTaskCheck.7111
 644 006c 18000000 		.word	ulExpectedValue
 645 0070 24000000 		.word	ulLastExpectedValue.7112
 646 0074 10000000 		.word	xSuspendedQueueSendError
 647 0078 14000000 		.word	xSuspendedQueueReceiveError
 648              		.cfi_endproc
 649              	.LFE74:
 650              		.size	xAreDynamicPriorityTasksStillRunning, .-xAreDynamicPriorityTasksStillRunning
 651              		.bss
 652              		.align	2
 653              	ulValueToSend.7098:
 654 001c 00000000 		.space	4
 655              		.align	1
 656              	usLastTaskCheck.7111:
 657 0020 0000     		.space	2
 658 0022 0000     		.align	2
 659              	ulLastExpectedValue.7112:
 660 0024 00000000 		.space	4
 661              		.text
 662              	.Letext0:
 663              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 664              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 665              		.file 4 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
 666              		.file 5 "..\\Source\\include/task.h"
 667              		.file 6 "..\\Source\\include/queue.h"
 668              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 22


 669              		.section	.debug_info,"",%progbits
 670              	.Ldebug_info0:
 671 0000 69030000 		.4byte	0x369
 672 0004 0400     		.2byte	0x4
 673 0006 00000000 		.4byte	.Ldebug_abbrev0
 674 000a 04       		.byte	0x4
 675 000b 01       		.uleb128 0x1
 676 000c 66000000 		.4byte	.LASF52
 677 0010 01       		.byte	0x1
 678 0011 DE020000 		.4byte	.LASF53
 679 0015 D9030000 		.4byte	.LASF54
 680 0019 00000000 		.4byte	.Ldebug_ranges0+0
 681 001d 00000000 		.4byte	0
 682 0021 00000000 		.4byte	.Ldebug_line0
 683 0025 02       		.uleb128 0x2
 684 0026 04       		.byte	0x4
 685 0027 07       		.byte	0x7
 686 0028 92020000 		.4byte	.LASF0
 687 002c 03       		.uleb128 0x3
 688 002d 04       		.byte	0x4
 689 002e 05       		.byte	0x5
 690 002f 696E7400 		.ascii	"int\000"
 691 0033 02       		.uleb128 0x2
 692 0034 01       		.byte	0x1
 693 0035 06       		.byte	0x6
 694 0036 BE020000 		.4byte	.LASF1
 695 003a 04       		.uleb128 0x4
 696 003b 2C000000 		.4byte	.LASF4
 697 003f 02       		.byte	0x2
 698 0040 1D       		.byte	0x1d
 699 0041 45000000 		.4byte	0x45
 700 0045 02       		.uleb128 0x2
 701 0046 01       		.byte	0x1
 702 0047 08       		.byte	0x8
 703 0048 84020000 		.4byte	.LASF2
 704 004c 02       		.uleb128 0x2
 705 004d 02       		.byte	0x2
 706 004e 05       		.byte	0x5
 707 004f 64020000 		.4byte	.LASF3
 708 0053 04       		.uleb128 0x4
 709 0054 55030000 		.4byte	.LASF5
 710 0058 02       		.byte	0x2
 711 0059 2B       		.byte	0x2b
 712 005a 5E000000 		.4byte	0x5e
 713 005e 02       		.uleb128 0x2
 714 005f 02       		.byte	0x2
 715 0060 07       		.byte	0x7
 716 0061 CA010000 		.4byte	.LASF6
 717 0065 04       		.uleb128 0x4
 718 0066 5C000000 		.4byte	.LASF7
 719 006a 02       		.byte	0x2
 720 006b 3F       		.byte	0x3f
 721 006c 70000000 		.4byte	0x70
 722 0070 02       		.uleb128 0x2
 723 0071 04       		.byte	0x4
 724 0072 05       		.byte	0x5
 725 0073 7F030000 		.4byte	.LASF8
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 23


 726 0077 04       		.uleb128 0x4
 727 0078 02010000 		.4byte	.LASF9
 728 007c 02       		.byte	0x2
 729 007d 41       		.byte	0x41
 730 007e 82000000 		.4byte	0x82
 731 0082 02       		.uleb128 0x2
 732 0083 04       		.byte	0x4
 733 0084 07       		.byte	0x7
 734 0085 B8010000 		.4byte	.LASF10
 735 0089 02       		.uleb128 0x2
 736 008a 08       		.byte	0x8
 737 008b 05       		.byte	0x5
 738 008c 03030000 		.4byte	.LASF11
 739 0090 02       		.uleb128 0x2
 740 0091 08       		.byte	0x8
 741 0092 07       		.byte	0x7
 742 0093 9F020000 		.4byte	.LASF12
 743 0097 02       		.uleb128 0x2
 744 0098 04       		.byte	0x4
 745 0099 07       		.byte	0x7
 746 009a FA020000 		.4byte	.LASF13
 747 009e 05       		.uleb128 0x5
 748 009f 04       		.byte	0x4
 749 00a0 02       		.uleb128 0x2
 750 00a1 01       		.byte	0x1
 751 00a2 08       		.byte	0x8
 752 00a3 11030000 		.4byte	.LASF14
 753 00a7 04       		.uleb128 0x4
 754 00a8 B6020000 		.4byte	.LASF15
 755 00ac 03       		.byte	0x3
 756 00ad 15       		.byte	0x15
 757 00ae 3A000000 		.4byte	0x3a
 758 00b2 04       		.uleb128 0x4
 759 00b3 60030000 		.4byte	.LASF16
 760 00b7 03       		.byte	0x3
 761 00b8 21       		.byte	0x21
 762 00b9 53000000 		.4byte	0x53
 763 00bd 04       		.uleb128 0x4
 764 00be 55010000 		.4byte	.LASF17
 765 00c2 03       		.byte	0x3
 766 00c3 2C       		.byte	0x2c
 767 00c4 65000000 		.4byte	0x65
 768 00c8 04       		.uleb128 0x4
 769 00c9 76030000 		.4byte	.LASF18
 770 00cd 03       		.byte	0x3
 771 00ce 2D       		.byte	0x2d
 772 00cf 77000000 		.4byte	0x77
 773 00d3 02       		.uleb128 0x2
 774 00d4 04       		.byte	0x4
 775 00d5 04       		.byte	0x4
 776 00d6 88010000 		.4byte	.LASF19
 777 00da 02       		.uleb128 0x2
 778 00db 08       		.byte	0x8
 779 00dc 04       		.byte	0x4
 780 00dd 0D010000 		.4byte	.LASF20
 781 00e1 06       		.uleb128 0x6
 782 00e2 C8000000 		.4byte	0xc8
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 24


 783 00e6 06       		.uleb128 0x6
 784 00e7 B2000000 		.4byte	0xb2
 785 00eb 04       		.uleb128 0x4
 786 00ec CE030000 		.4byte	.LASF21
 787 00f0 04       		.byte	0x4
 788 00f1 62       		.byte	0x62
 789 00f2 70000000 		.4byte	0x70
 790 00f6 04       		.uleb128 0x4
 791 00f7 C2030000 		.4byte	.LASF22
 792 00fb 04       		.byte	0x4
 793 00fc 63       		.byte	0x63
 794 00fd 82000000 		.4byte	0x82
 795 0101 04       		.uleb128 0x4
 796 0102 41000000 		.4byte	.LASF23
 797 0106 04       		.byte	0x4
 798 0107 69       		.byte	0x69
 799 0108 C8000000 		.4byte	0xc8
 800 010c 04       		.uleb128 0x4
 801 010d 69030000 		.4byte	.LASF24
 802 0111 05       		.byte	0x5
 803 0112 67       		.byte	0x67
 804 0113 9E000000 		.4byte	0x9e
 805 0117 04       		.uleb128 0x4
 806 0118 F4000000 		.4byte	.LASF25
 807 011c 06       		.byte	0x6
 808 011d 58       		.byte	0x58
 809 011e 9E000000 		.4byte	0x9e
 810 0122 07       		.uleb128 0x7
 811 0123 00000000 		.4byte	.LASF55
 812 0127 01       		.byte	0x1
 813 0128 BC       		.byte	0xbc
 814 0129 00000000 		.4byte	.LFB68
 815 012d D0000000 		.4byte	.LFE68-.LFB68
 816 0131 01       		.uleb128 0x1
 817 0132 9C       		.byte	0x9c
 818 0133 08       		.uleb128 0x8
 819 0134 8E010000 		.4byte	.LASF26
 820 0138 01       		.byte	0x1
 821 0139 D7       		.byte	0xd7
 822 013a 00000000 		.4byte	.LFB69
 823 013e 2C000000 		.4byte	.LFE69-.LFB69
 824 0142 01       		.uleb128 0x1
 825 0143 9C       		.byte	0x9c
 826 0144 65010000 		.4byte	0x165
 827 0148 09       		.uleb128 0x9
 828 0149 16030000 		.4byte	.LASF28
 829 014d 01       		.byte	0x1
 830 014e D7       		.byte	0xd7
 831 014f 9E000000 		.4byte	0x9e
 832 0153 02       		.uleb128 0x2
 833 0154 91       		.byte	0x91
 834 0155 6C       		.sleb128 -20
 835 0156 0A       		.uleb128 0xa
 836 0157 36000000 		.4byte	.LASF29
 837 015b 01       		.byte	0x1
 838 015c D9       		.byte	0xd9
 839 015d 65010000 		.4byte	0x165
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 25


 840 0161 02       		.uleb128 0x2
 841 0162 91       		.byte	0x91
 842 0163 74       		.sleb128 -12
 843 0164 00       		.byte	0
 844 0165 0B       		.uleb128 0xb
 845 0166 04       		.byte	0x4
 846 0167 C8000000 		.4byte	0xc8
 847 016b 08       		.uleb128 0x8
 848 016c 1D020000 		.4byte	.LASF27
 849 0170 01       		.byte	0x1
 850 0171 F4       		.byte	0xf4
 851 0172 00000000 		.4byte	.LFB70
 852 0176 34000000 		.4byte	.LFE70-.LFB70
 853 017a 01       		.uleb128 0x1
 854 017b 9C       		.byte	0x9c
 855 017c AB010000 		.4byte	0x1ab
 856 0180 09       		.uleb128 0x9
 857 0181 16030000 		.4byte	.LASF28
 858 0185 01       		.byte	0x1
 859 0186 F4       		.byte	0xf4
 860 0187 9E000000 		.4byte	0x9e
 861 018b 02       		.uleb128 0x2
 862 018c 91       		.byte	0x91
 863 018d 6C       		.sleb128 -20
 864 018e 0A       		.uleb128 0xa
 865 018f 36000000 		.4byte	.LASF29
 866 0193 01       		.byte	0x1
 867 0194 F6       		.byte	0xf6
 868 0195 AB010000 		.4byte	0x1ab
 869 0199 02       		.uleb128 0x2
 870 019a 91       		.byte	0x91
 871 019b 74       		.sleb128 -12
 872 019c 0A       		.uleb128 0xa
 873 019d 76020000 		.4byte	.LASF30
 874 01a1 01       		.byte	0x1
 875 01a2 F7       		.byte	0xf7
 876 01a3 F6000000 		.4byte	0xf6
 877 01a7 02       		.uleb128 0x2
 878 01a8 91       		.byte	0x91
 879 01a9 70       		.sleb128 -16
 880 01aa 00       		.byte	0
 881 01ab 0B       		.uleb128 0xb
 882 01ac 04       		.byte	0x4
 883 01ad E1000000 		.4byte	0xe1
 884 01b1 0C       		.uleb128 0xc
 885 01b2 CA020000 		.4byte	.LASF31
 886 01b6 01       		.byte	0x1
 887 01b7 1801     		.2byte	0x118
 888 01b9 00000000 		.4byte	.LFB71
 889 01bd C0000000 		.4byte	.LFE71-.LFB71
 890 01c1 01       		.uleb128 0x1
 891 01c2 9C       		.byte	0x9c
 892 01c3 04020000 		.4byte	0x204
 893 01c7 0D       		.uleb128 0xd
 894 01c8 16030000 		.4byte	.LASF28
 895 01cc 01       		.byte	0x1
 896 01cd 1801     		.2byte	0x118
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 26


 897 01cf 9E000000 		.4byte	0x9e
 898 01d3 02       		.uleb128 0x2
 899 01d4 91       		.byte	0x91
 900 01d5 6C       		.sleb128 -20
 901 01d6 0E       		.uleb128 0xe
 902 01d7 88030000 		.4byte	.LASF32
 903 01db 01       		.byte	0x1
 904 01dc 1A01     		.2byte	0x11a
 905 01de C8000000 		.4byte	0xc8
 906 01e2 02       		.uleb128 0x2
 907 01e3 91       		.byte	0x91
 908 01e4 70       		.sleb128 -16
 909 01e5 0E       		.uleb128 0xe
 910 01e6 25000000 		.4byte	.LASF33
 911 01ea 01       		.byte	0x1
 912 01eb 1B01     		.2byte	0x11b
 913 01ed 4C000000 		.4byte	0x4c
 914 01f1 02       		.uleb128 0x2
 915 01f2 91       		.byte	0x91
 916 01f3 76       		.sleb128 -10
 917 01f4 0E       		.uleb128 0xe
 918 01f5 5D020000 		.4byte	.LASF34
 919 01f9 01       		.byte	0x1
 920 01fa 1C01     		.2byte	0x11c
 921 01fc 4C000000 		.4byte	0x4c
 922 0200 02       		.uleb128 0x2
 923 0201 91       		.byte	0x91
 924 0202 74       		.sleb128 -12
 925 0203 00       		.byte	0
 926 0204 0C       		.uleb128 0xc
 927 0205 39010000 		.4byte	.LASF35
 928 0209 01       		.byte	0x1
 929 020a 8F01     		.2byte	0x18f
 930 020c 00000000 		.4byte	.LFB72
 931 0210 4C000000 		.4byte	.LFE72-.LFB72
 932 0214 01       		.uleb128 0x1
 933 0215 9C       		.byte	0x9c
 934 0216 3C020000 		.4byte	0x23c
 935 021a 0D       		.uleb128 0xd
 936 021b 16030000 		.4byte	.LASF28
 937 021f 01       		.byte	0x1
 938 0220 8F01     		.2byte	0x18f
 939 0222 9E000000 		.4byte	0x9e
 940 0226 02       		.uleb128 0x2
 941 0227 91       		.byte	0x91
 942 0228 74       		.sleb128 -12
 943 0229 0E       		.uleb128 0xe
 944 022a 36020000 		.4byte	.LASF36
 945 022e 01       		.byte	0x1
 946 022f 9101     		.2byte	0x191
 947 0231 C8000000 		.4byte	0xc8
 948 0235 05       		.uleb128 0x5
 949 0236 03       		.byte	0x3
 950 0237 1C000000 		.4byte	ulValueToSend.7098
 951 023b 00       		.byte	0
 952 023c 0C       		.uleb128 0xc
 953 023d FE010000 		.4byte	.LASF37
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 27


 954 0241 01       		.byte	0x1
 955 0242 A901     		.2byte	0x1a9
 956 0244 00000000 		.4byte	.LFB73
 957 0248 70000000 		.4byte	.LFE73-.LFB73
 958 024c 01       		.uleb128 0x1
 959 024d 9C       		.byte	0x9c
 960 024e 80020000 		.4byte	0x280
 961 0252 0D       		.uleb128 0xd
 962 0253 16030000 		.4byte	.LASF28
 963 0257 01       		.byte	0x1
 964 0258 A901     		.2byte	0x1a9
 965 025a 9E000000 		.4byte	0x9e
 966 025e 02       		.uleb128 0x2
 967 025f 91       		.byte	0x91
 968 0260 6C       		.sleb128 -20
 969 0261 0E       		.uleb128 0xe
 970 0262 4C000000 		.4byte	.LASF38
 971 0266 01       		.byte	0x1
 972 0267 AB01     		.2byte	0x1ab
 973 0269 C8000000 		.4byte	0xc8
 974 026d 02       		.uleb128 0x2
 975 026e 91       		.byte	0x91
 976 026f 70       		.sleb128 -16
 977 0270 0E       		.uleb128 0xe
 978 0271 23030000 		.4byte	.LASF39
 979 0275 01       		.byte	0x1
 980 0276 AC01     		.2byte	0x1ac
 981 0278 EB000000 		.4byte	0xeb
 982 027c 02       		.uleb128 0x2
 983 027d 91       		.byte	0x91
 984 027e 74       		.sleb128 -12
 985 027f 00       		.byte	0
 986 0280 0F       		.uleb128 0xf
 987 0281 14010000 		.4byte	.LASF56
 988 0285 01       		.byte	0x1
 989 0286 E001     		.2byte	0x1e0
 990 0288 EB000000 		.4byte	0xeb
 991 028c 00000000 		.4byte	.LFB74
 992 0290 7C000000 		.4byte	.LFE74-.LFB74
 993 0294 01       		.uleb128 0x1
 994 0295 9C       		.byte	0x9c
 995 0296 CE020000 		.4byte	0x2ce
 996 029a 0E       		.uleb128 0xe
 997 029b 5D010000 		.4byte	.LASF40
 998 029f 01       		.byte	0x1
 999 02a0 E401     		.2byte	0x1e4
 1000 02a2 B2000000 		.4byte	0xb2
 1001 02a6 05       		.uleb128 0x5
 1002 02a7 03       		.byte	0x3
 1003 02a8 20000000 		.4byte	usLastTaskCheck.7111
 1004 02ac 0E       		.uleb128 0xe
 1005 02ad A4010000 		.4byte	.LASF41
 1006 02b1 01       		.byte	0x1
 1007 02b2 E501     		.2byte	0x1e5
 1008 02b4 C8000000 		.4byte	0xc8
 1009 02b8 05       		.uleb128 0x5
 1010 02b9 03       		.byte	0x3
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 28


 1011 02ba 24000000 		.4byte	ulLastExpectedValue.7112
 1012 02be 0E       		.uleb128 0xe
 1013 02bf 6E020000 		.4byte	.LASF42
 1014 02c3 01       		.byte	0x1
 1015 02c4 E601     		.2byte	0x1e6
 1016 02c6 EB000000 		.4byte	0xeb
 1017 02ca 02       		.uleb128 0x2
 1018 02cb 91       		.byte	0x91
 1019 02cc 74       		.sleb128 -12
 1020 02cd 00       		.byte	0
 1021 02ce 0A       		.uleb128 0xa
 1022 02cf 6D010000 		.4byte	.LASF43
 1023 02d3 01       		.byte	0x1
 1024 02d4 A1       		.byte	0xa1
 1025 02d5 0C010000 		.4byte	0x10c
 1026 02d9 05       		.uleb128 0x5
 1027 02da 03       		.byte	0x3
 1028 02db 00000000 		.4byte	xContinuousIncrementHandle
 1029 02df 0A       		.uleb128 0xa
 1030 02e0 3D030000 		.4byte	.LASF44
 1031 02e4 01       		.byte	0x1
 1032 02e5 A1       		.byte	0xa1
 1033 02e6 0C010000 		.4byte	0x10c
 1034 02ea 05       		.uleb128 0x5
 1035 02eb 03       		.byte	0x3
 1036 02ec 04000000 		.4byte	xLimitedIncrementHandle
 1037 02f0 0A       		.uleb128 0xa
 1038 02f1 1B000000 		.4byte	.LASF45
 1039 02f5 01       		.byte	0x1
 1040 02f6 A5       		.byte	0xa5
 1041 02f7 E1000000 		.4byte	0xe1
 1042 02fb 05       		.uleb128 0x5
 1043 02fc 03       		.byte	0x3
 1044 02fd 08000000 		.4byte	ulCounter
 1045 0301 0A       		.uleb128 0xa
 1046 0302 B2030000 		.4byte	.LASF46
 1047 0306 01       		.byte	0x1
 1048 0307 AB       		.byte	0xab
 1049 0308 E6000000 		.4byte	0xe6
 1050 030c 05       		.uleb128 0x5
 1051 030d 03       		.byte	0x3
 1052 030e 0C000000 		.4byte	usCheckVariable
 1053 0312 0A       		.uleb128 0xa
 1054 0313 44020000 		.4byte	.LASF47
 1055 0317 01       		.byte	0x1
 1056 0318 AC       		.byte	0xac
 1057 0319 23030000 		.4byte	0x323
 1058 031d 05       		.uleb128 0x5
 1059 031e 03       		.byte	0x3
 1060 031f 10000000 		.4byte	xSuspendedQueueSendError
 1061 0323 06       		.uleb128 0x6
 1062 0324 EB000000 		.4byte	0xeb
 1063 0328 0A       		.uleb128 0xa
 1064 0329 96030000 		.4byte	.LASF48
 1065 032d 01       		.byte	0x1
 1066 032e AD       		.byte	0xad
 1067 032f 23030000 		.4byte	0x323
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 29


 1068 0333 05       		.uleb128 0x5
 1069 0334 03       		.byte	0x3
 1070 0335 14000000 		.4byte	xSuspendedQueueReceiveError
 1071 0339 0A       		.uleb128 0xa
 1072 033a 2D030000 		.4byte	.LASF49
 1073 033e 01       		.byte	0x1
 1074 033f B5       		.byte	0xb5
 1075 0340 C8000000 		.4byte	0xc8
 1076 0344 05       		.uleb128 0x5
 1077 0345 03       		.byte	0x3
 1078 0346 18000000 		.4byte	ulExpectedValue
 1079 034a 10       		.uleb128 0x10
 1080 034b F1010000 		.4byte	.LASF50
 1081 034f 07       		.byte	0x7
 1082 0350 9606     		.2byte	0x696
 1083 0352 56030000 		.4byte	0x356
 1084 0356 06       		.uleb128 0x6
 1085 0357 BD000000 		.4byte	0xbd
 1086 035b 11       		.uleb128 0x11
 1087 035c DD010000 		.4byte	.LASF51
 1088 0360 01       		.byte	0x1
 1089 0361 B0       		.byte	0xb0
 1090 0362 17010000 		.4byte	0x117
 1091 0366 05       		.uleb128 0x5
 1092 0367 03       		.byte	0x3
 1093 0368 00000000 		.4byte	xSuspendedTestQueue
 1094 036c 00       		.byte	0
 1095              		.section	.debug_abbrev,"",%progbits
 1096              	.Ldebug_abbrev0:
 1097 0000 01       		.uleb128 0x1
 1098 0001 11       		.uleb128 0x11
 1099 0002 01       		.byte	0x1
 1100 0003 25       		.uleb128 0x25
 1101 0004 0E       		.uleb128 0xe
 1102 0005 13       		.uleb128 0x13
 1103 0006 0B       		.uleb128 0xb
 1104 0007 03       		.uleb128 0x3
 1105 0008 0E       		.uleb128 0xe
 1106 0009 1B       		.uleb128 0x1b
 1107 000a 0E       		.uleb128 0xe
 1108 000b 55       		.uleb128 0x55
 1109 000c 17       		.uleb128 0x17
 1110 000d 11       		.uleb128 0x11
 1111 000e 01       		.uleb128 0x1
 1112 000f 10       		.uleb128 0x10
 1113 0010 17       		.uleb128 0x17
 1114 0011 00       		.byte	0
 1115 0012 00       		.byte	0
 1116 0013 02       		.uleb128 0x2
 1117 0014 24       		.uleb128 0x24
 1118 0015 00       		.byte	0
 1119 0016 0B       		.uleb128 0xb
 1120 0017 0B       		.uleb128 0xb
 1121 0018 3E       		.uleb128 0x3e
 1122 0019 0B       		.uleb128 0xb
 1123 001a 03       		.uleb128 0x3
 1124 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 30


 1125 001c 00       		.byte	0
 1126 001d 00       		.byte	0
 1127 001e 03       		.uleb128 0x3
 1128 001f 24       		.uleb128 0x24
 1129 0020 00       		.byte	0
 1130 0021 0B       		.uleb128 0xb
 1131 0022 0B       		.uleb128 0xb
 1132 0023 3E       		.uleb128 0x3e
 1133 0024 0B       		.uleb128 0xb
 1134 0025 03       		.uleb128 0x3
 1135 0026 08       		.uleb128 0x8
 1136 0027 00       		.byte	0
 1137 0028 00       		.byte	0
 1138 0029 04       		.uleb128 0x4
 1139 002a 16       		.uleb128 0x16
 1140 002b 00       		.byte	0
 1141 002c 03       		.uleb128 0x3
 1142 002d 0E       		.uleb128 0xe
 1143 002e 3A       		.uleb128 0x3a
 1144 002f 0B       		.uleb128 0xb
 1145 0030 3B       		.uleb128 0x3b
 1146 0031 0B       		.uleb128 0xb
 1147 0032 49       		.uleb128 0x49
 1148 0033 13       		.uleb128 0x13
 1149 0034 00       		.byte	0
 1150 0035 00       		.byte	0
 1151 0036 05       		.uleb128 0x5
 1152 0037 0F       		.uleb128 0xf
 1153 0038 00       		.byte	0
 1154 0039 0B       		.uleb128 0xb
 1155 003a 0B       		.uleb128 0xb
 1156 003b 00       		.byte	0
 1157 003c 00       		.byte	0
 1158 003d 06       		.uleb128 0x6
 1159 003e 35       		.uleb128 0x35
 1160 003f 00       		.byte	0
 1161 0040 49       		.uleb128 0x49
 1162 0041 13       		.uleb128 0x13
 1163 0042 00       		.byte	0
 1164 0043 00       		.byte	0
 1165 0044 07       		.uleb128 0x7
 1166 0045 2E       		.uleb128 0x2e
 1167 0046 00       		.byte	0
 1168 0047 3F       		.uleb128 0x3f
 1169 0048 19       		.uleb128 0x19
 1170 0049 03       		.uleb128 0x3
 1171 004a 0E       		.uleb128 0xe
 1172 004b 3A       		.uleb128 0x3a
 1173 004c 0B       		.uleb128 0xb
 1174 004d 3B       		.uleb128 0x3b
 1175 004e 0B       		.uleb128 0xb
 1176 004f 27       		.uleb128 0x27
 1177 0050 19       		.uleb128 0x19
 1178 0051 11       		.uleb128 0x11
 1179 0052 01       		.uleb128 0x1
 1180 0053 12       		.uleb128 0x12
 1181 0054 06       		.uleb128 0x6
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 31


 1182 0055 40       		.uleb128 0x40
 1183 0056 18       		.uleb128 0x18
 1184 0057 9642     		.uleb128 0x2116
 1185 0059 19       		.uleb128 0x19
 1186 005a 00       		.byte	0
 1187 005b 00       		.byte	0
 1188 005c 08       		.uleb128 0x8
 1189 005d 2E       		.uleb128 0x2e
 1190 005e 01       		.byte	0x1
 1191 005f 03       		.uleb128 0x3
 1192 0060 0E       		.uleb128 0xe
 1193 0061 3A       		.uleb128 0x3a
 1194 0062 0B       		.uleb128 0xb
 1195 0063 3B       		.uleb128 0x3b
 1196 0064 0B       		.uleb128 0xb
 1197 0065 27       		.uleb128 0x27
 1198 0066 19       		.uleb128 0x19
 1199 0067 11       		.uleb128 0x11
 1200 0068 01       		.uleb128 0x1
 1201 0069 12       		.uleb128 0x12
 1202 006a 06       		.uleb128 0x6
 1203 006b 40       		.uleb128 0x40
 1204 006c 18       		.uleb128 0x18
 1205 006d 9642     		.uleb128 0x2116
 1206 006f 19       		.uleb128 0x19
 1207 0070 01       		.uleb128 0x1
 1208 0071 13       		.uleb128 0x13
 1209 0072 00       		.byte	0
 1210 0073 00       		.byte	0
 1211 0074 09       		.uleb128 0x9
 1212 0075 05       		.uleb128 0x5
 1213 0076 00       		.byte	0
 1214 0077 03       		.uleb128 0x3
 1215 0078 0E       		.uleb128 0xe
 1216 0079 3A       		.uleb128 0x3a
 1217 007a 0B       		.uleb128 0xb
 1218 007b 3B       		.uleb128 0x3b
 1219 007c 0B       		.uleb128 0xb
 1220 007d 49       		.uleb128 0x49
 1221 007e 13       		.uleb128 0x13
 1222 007f 02       		.uleb128 0x2
 1223 0080 18       		.uleb128 0x18
 1224 0081 00       		.byte	0
 1225 0082 00       		.byte	0
 1226 0083 0A       		.uleb128 0xa
 1227 0084 34       		.uleb128 0x34
 1228 0085 00       		.byte	0
 1229 0086 03       		.uleb128 0x3
 1230 0087 0E       		.uleb128 0xe
 1231 0088 3A       		.uleb128 0x3a
 1232 0089 0B       		.uleb128 0xb
 1233 008a 3B       		.uleb128 0x3b
 1234 008b 0B       		.uleb128 0xb
 1235 008c 49       		.uleb128 0x49
 1236 008d 13       		.uleb128 0x13
 1237 008e 02       		.uleb128 0x2
 1238 008f 18       		.uleb128 0x18
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 32


 1239 0090 00       		.byte	0
 1240 0091 00       		.byte	0
 1241 0092 0B       		.uleb128 0xb
 1242 0093 0F       		.uleb128 0xf
 1243 0094 00       		.byte	0
 1244 0095 0B       		.uleb128 0xb
 1245 0096 0B       		.uleb128 0xb
 1246 0097 49       		.uleb128 0x49
 1247 0098 13       		.uleb128 0x13
 1248 0099 00       		.byte	0
 1249 009a 00       		.byte	0
 1250 009b 0C       		.uleb128 0xc
 1251 009c 2E       		.uleb128 0x2e
 1252 009d 01       		.byte	0x1
 1253 009e 03       		.uleb128 0x3
 1254 009f 0E       		.uleb128 0xe
 1255 00a0 3A       		.uleb128 0x3a
 1256 00a1 0B       		.uleb128 0xb
 1257 00a2 3B       		.uleb128 0x3b
 1258 00a3 05       		.uleb128 0x5
 1259 00a4 27       		.uleb128 0x27
 1260 00a5 19       		.uleb128 0x19
 1261 00a6 11       		.uleb128 0x11
 1262 00a7 01       		.uleb128 0x1
 1263 00a8 12       		.uleb128 0x12
 1264 00a9 06       		.uleb128 0x6
 1265 00aa 40       		.uleb128 0x40
 1266 00ab 18       		.uleb128 0x18
 1267 00ac 9642     		.uleb128 0x2116
 1268 00ae 19       		.uleb128 0x19
 1269 00af 01       		.uleb128 0x1
 1270 00b0 13       		.uleb128 0x13
 1271 00b1 00       		.byte	0
 1272 00b2 00       		.byte	0
 1273 00b3 0D       		.uleb128 0xd
 1274 00b4 05       		.uleb128 0x5
 1275 00b5 00       		.byte	0
 1276 00b6 03       		.uleb128 0x3
 1277 00b7 0E       		.uleb128 0xe
 1278 00b8 3A       		.uleb128 0x3a
 1279 00b9 0B       		.uleb128 0xb
 1280 00ba 3B       		.uleb128 0x3b
 1281 00bb 05       		.uleb128 0x5
 1282 00bc 49       		.uleb128 0x49
 1283 00bd 13       		.uleb128 0x13
 1284 00be 02       		.uleb128 0x2
 1285 00bf 18       		.uleb128 0x18
 1286 00c0 00       		.byte	0
 1287 00c1 00       		.byte	0
 1288 00c2 0E       		.uleb128 0xe
 1289 00c3 34       		.uleb128 0x34
 1290 00c4 00       		.byte	0
 1291 00c5 03       		.uleb128 0x3
 1292 00c6 0E       		.uleb128 0xe
 1293 00c7 3A       		.uleb128 0x3a
 1294 00c8 0B       		.uleb128 0xb
 1295 00c9 3B       		.uleb128 0x3b
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 33


 1296 00ca 05       		.uleb128 0x5
 1297 00cb 49       		.uleb128 0x49
 1298 00cc 13       		.uleb128 0x13
 1299 00cd 02       		.uleb128 0x2
 1300 00ce 18       		.uleb128 0x18
 1301 00cf 00       		.byte	0
 1302 00d0 00       		.byte	0
 1303 00d1 0F       		.uleb128 0xf
 1304 00d2 2E       		.uleb128 0x2e
 1305 00d3 01       		.byte	0x1
 1306 00d4 3F       		.uleb128 0x3f
 1307 00d5 19       		.uleb128 0x19
 1308 00d6 03       		.uleb128 0x3
 1309 00d7 0E       		.uleb128 0xe
 1310 00d8 3A       		.uleb128 0x3a
 1311 00d9 0B       		.uleb128 0xb
 1312 00da 3B       		.uleb128 0x3b
 1313 00db 05       		.uleb128 0x5
 1314 00dc 27       		.uleb128 0x27
 1315 00dd 19       		.uleb128 0x19
 1316 00de 49       		.uleb128 0x49
 1317 00df 13       		.uleb128 0x13
 1318 00e0 11       		.uleb128 0x11
 1319 00e1 01       		.uleb128 0x1
 1320 00e2 12       		.uleb128 0x12
 1321 00e3 06       		.uleb128 0x6
 1322 00e4 40       		.uleb128 0x40
 1323 00e5 18       		.uleb128 0x18
 1324 00e6 9742     		.uleb128 0x2117
 1325 00e8 19       		.uleb128 0x19
 1326 00e9 01       		.uleb128 0x1
 1327 00ea 13       		.uleb128 0x13
 1328 00eb 00       		.byte	0
 1329 00ec 00       		.byte	0
 1330 00ed 10       		.uleb128 0x10
 1331 00ee 34       		.uleb128 0x34
 1332 00ef 00       		.byte	0
 1333 00f0 03       		.uleb128 0x3
 1334 00f1 0E       		.uleb128 0xe
 1335 00f2 3A       		.uleb128 0x3a
 1336 00f3 0B       		.uleb128 0xb
 1337 00f4 3B       		.uleb128 0x3b
 1338 00f5 05       		.uleb128 0x5
 1339 00f6 49       		.uleb128 0x49
 1340 00f7 13       		.uleb128 0x13
 1341 00f8 3F       		.uleb128 0x3f
 1342 00f9 19       		.uleb128 0x19
 1343 00fa 3C       		.uleb128 0x3c
 1344 00fb 19       		.uleb128 0x19
 1345 00fc 00       		.byte	0
 1346 00fd 00       		.byte	0
 1347 00fe 11       		.uleb128 0x11
 1348 00ff 34       		.uleb128 0x34
 1349 0100 00       		.byte	0
 1350 0101 03       		.uleb128 0x3
 1351 0102 0E       		.uleb128 0xe
 1352 0103 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 34


 1353 0104 0B       		.uleb128 0xb
 1354 0105 3B       		.uleb128 0x3b
 1355 0106 0B       		.uleb128 0xb
 1356 0107 49       		.uleb128 0x49
 1357 0108 13       		.uleb128 0x13
 1358 0109 3F       		.uleb128 0x3f
 1359 010a 19       		.uleb128 0x19
 1360 010b 02       		.uleb128 0x2
 1361 010c 18       		.uleb128 0x18
 1362 010d 00       		.byte	0
 1363 010e 00       		.byte	0
 1364 010f 00       		.byte	0
 1365              		.section	.debug_aranges,"",%progbits
 1366 0000 4C000000 		.4byte	0x4c
 1367 0004 0200     		.2byte	0x2
 1368 0006 00000000 		.4byte	.Ldebug_info0
 1369 000a 04       		.byte	0x4
 1370 000b 00       		.byte	0
 1371 000c 0000     		.2byte	0
 1372 000e 0000     		.2byte	0
 1373 0010 00000000 		.4byte	.LFB68
 1374 0014 D0000000 		.4byte	.LFE68-.LFB68
 1375 0018 00000000 		.4byte	.LFB69
 1376 001c 2C000000 		.4byte	.LFE69-.LFB69
 1377 0020 00000000 		.4byte	.LFB70
 1378 0024 34000000 		.4byte	.LFE70-.LFB70
 1379 0028 00000000 		.4byte	.LFB71
 1380 002c C0000000 		.4byte	.LFE71-.LFB71
 1381 0030 00000000 		.4byte	.LFB72
 1382 0034 4C000000 		.4byte	.LFE72-.LFB72
 1383 0038 00000000 		.4byte	.LFB73
 1384 003c 70000000 		.4byte	.LFE73-.LFB73
 1385 0040 00000000 		.4byte	.LFB74
 1386 0044 7C000000 		.4byte	.LFE74-.LFB74
 1387 0048 00000000 		.4byte	0
 1388 004c 00000000 		.4byte	0
 1389              		.section	.debug_ranges,"",%progbits
 1390              	.Ldebug_ranges0:
 1391 0000 00000000 		.4byte	.LFB68
 1392 0004 D0000000 		.4byte	.LFE68
 1393 0008 00000000 		.4byte	.LFB69
 1394 000c 2C000000 		.4byte	.LFE69
 1395 0010 00000000 		.4byte	.LFB70
 1396 0014 34000000 		.4byte	.LFE70
 1397 0018 00000000 		.4byte	.LFB71
 1398 001c C0000000 		.4byte	.LFE71
 1399 0020 00000000 		.4byte	.LFB72
 1400 0024 4C000000 		.4byte	.LFE72
 1401 0028 00000000 		.4byte	.LFB73
 1402 002c 70000000 		.4byte	.LFE73
 1403 0030 00000000 		.4byte	.LFB74
 1404 0034 7C000000 		.4byte	.LFE74
 1405 0038 00000000 		.4byte	0
 1406 003c 00000000 		.4byte	0
 1407              		.section	.debug_line,"",%progbits
 1408              	.Ldebug_line0:
 1409 0000 91020000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 35


 1409      0200A401 
 1409      00000201 
 1409      FB0E0D00 
 1409      01010101 
 1410              	.LASF55:
 1411 0000 76537461 		.ascii	"vStartDynamicPriorityTasks\000"
 1411      72744479 
 1411      6E616D69 
 1411      63507269 
 1411      6F726974 
 1412              	.LASF45:
 1413 001b 756C436F 		.ascii	"ulCounter\000"
 1413      756E7465 
 1413      7200
 1414              	.LASF33:
 1415 0025 734C6F6F 		.ascii	"sLoops\000"
 1415      707300
 1416              	.LASF4:
 1417 002c 5F5F7569 		.ascii	"__uint8_t\000"
 1417      6E74385F 
 1417      7400
 1418              	.LASF29:
 1419 0036 70756C43 		.ascii	"pulCounter\000"
 1419      6F756E74 
 1419      657200
 1420              	.LASF23:
 1421 0041 5469636B 		.ascii	"TickType_t\000"
 1421      54797065 
 1421      5F7400
 1422              	.LASF38:
 1423 004c 756C5265 		.ascii	"ulReceivedValue\000"
 1423      63656976 
 1423      65645661 
 1423      6C756500 
 1424              	.LASF7:
 1425 005c 5F5F696E 		.ascii	"__int32_t\000"
 1425      7433325F 
 1425      7400
 1426              	.LASF52:
 1427 0066 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1427      4320342E 
 1427      392E3320 
 1427      32303135 
 1427      30333033 
 1428 0099 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1428      20726576 
 1428      6973696F 
 1428      6E203232 
 1428      31323230 
 1429 00cc 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1429      66756E63 
 1429      74696F6E 
 1429      2D736563 
 1429      74696F6E 
 1430              	.LASF25:
 1431 00f4 51756575 		.ascii	"QueueHandle_t\000"
 1431      6548616E 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 36


 1431      646C655F 
 1431      7400
 1432              	.LASF9:
 1433 0102 5F5F7569 		.ascii	"__uint32_t\000"
 1433      6E743332 
 1433      5F7400
 1434              	.LASF20:
 1435 010d 646F7562 		.ascii	"double\000"
 1435      6C6500
 1436              	.LASF56:
 1437 0114 78417265 		.ascii	"xAreDynamicPriorityTasksStillRunning\000"
 1437      44796E61 
 1437      6D696350 
 1437      72696F72 
 1437      69747954 
 1438              	.LASF35:
 1439 0139 76517565 		.ascii	"vQueueSendWhenSuspendedTask\000"
 1439      75655365 
 1439      6E645768 
 1439      656E5375 
 1439      7370656E 
 1440              	.LASF17:
 1441 0155 696E7433 		.ascii	"int32_t\000"
 1441      325F7400 
 1442              	.LASF40:
 1443 015d 75734C61 		.ascii	"usLastTaskCheck\000"
 1443      73745461 
 1443      736B4368 
 1443      65636B00 
 1444              	.LASF43:
 1445 016d 78436F6E 		.ascii	"xContinuousIncrementHandle\000"
 1445      74696E75 
 1445      6F757349 
 1445      6E637265 
 1445      6D656E74 
 1446              	.LASF19:
 1447 0188 666C6F61 		.ascii	"float\000"
 1447      7400
 1448              	.LASF26:
 1449 018e 764C696D 		.ascii	"vLimitedIncrementTask\000"
 1449      69746564 
 1449      496E6372 
 1449      656D656E 
 1449      74546173 
 1450              	.LASF41:
 1451 01a4 756C4C61 		.ascii	"ulLastExpectedValue\000"
 1451      73744578 
 1451      70656374 
 1451      65645661 
 1451      6C756500 
 1452              	.LASF10:
 1453 01b8 6C6F6E67 		.ascii	"long unsigned int\000"
 1453      20756E73 
 1453      69676E65 
 1453      6420696E 
 1453      7400
 1454              	.LASF6:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 37


 1455 01ca 73686F72 		.ascii	"short unsigned int\000"
 1455      7420756E 
 1455      7369676E 
 1455      65642069 
 1455      6E7400
 1456              	.LASF51:
 1457 01dd 78537573 		.ascii	"xSuspendedTestQueue\000"
 1457      70656E64 
 1457      65645465 
 1457      73745175 
 1457      65756500 
 1458              	.LASF50:
 1459 01f1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1459      52784275 
 1459      66666572 
 1459      00
 1460              	.LASF37:
 1461 01fe 76517565 		.ascii	"vQueueReceiveWhenSuspendedTask\000"
 1461      75655265 
 1461      63656976 
 1461      65576865 
 1461      6E537573 
 1462              	.LASF27:
 1463 021d 76436F6E 		.ascii	"vContinuousIncrementTask\000"
 1463      74696E75 
 1463      6F757349 
 1463      6E637265 
 1463      6D656E74 
 1464              	.LASF36:
 1465 0236 756C5661 		.ascii	"ulValueToSend\000"
 1465      6C756554 
 1465      6F53656E 
 1465      6400
 1466              	.LASF47:
 1467 0244 78537573 		.ascii	"xSuspendedQueueSendError\000"
 1467      70656E64 
 1467      65645175 
 1467      65756553 
 1467      656E6445 
 1468              	.LASF34:
 1469 025d 73457272 		.ascii	"sError\000"
 1469      6F7200
 1470              	.LASF3:
 1471 0264 73686F72 		.ascii	"short int\000"
 1471      7420696E 
 1471      7400
 1472              	.LASF42:
 1473 026e 78526574 		.ascii	"xReturn\000"
 1473      75726E00 
 1474              	.LASF30:
 1475 0276 75784F75 		.ascii	"uxOurPriority\000"
 1475      72507269 
 1475      6F726974 
 1475      7900
 1476              	.LASF2:
 1477 0284 756E7369 		.ascii	"unsigned char\000"
 1477      676E6564 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 38


 1477      20636861 
 1477      7200
 1478              	.LASF0:
 1479 0292 756E7369 		.ascii	"unsigned int\000"
 1479      676E6564 
 1479      20696E74 
 1479      00
 1480              	.LASF12:
 1481 029f 6C6F6E67 		.ascii	"long long unsigned int\000"
 1481      206C6F6E 
 1481      6720756E 
 1481      7369676E 
 1481      65642069 
 1482              	.LASF15:
 1483 02b6 75696E74 		.ascii	"uint8_t\000"
 1483      385F7400 
 1484              	.LASF1:
 1485 02be 7369676E 		.ascii	"signed char\000"
 1485      65642063 
 1485      68617200 
 1486              	.LASF31:
 1487 02ca 76436F75 		.ascii	"vCounterControlTask\000"
 1487      6E746572 
 1487      436F6E74 
 1487      726F6C54 
 1487      61736B00 
 1488              	.LASF53:
 1489 02de 2E2E5C43 		.ascii	"..\\Common\\Minimal\\dynamic.c\000"
 1489      6F6D6D6F 
 1489      6E5C4D69 
 1489      6E696D61 
 1489      6C5C6479 
 1490              	.LASF13:
 1491 02fa 73697A65 		.ascii	"sizetype\000"
 1491      74797065 
 1491      00
 1492              	.LASF11:
 1493 0303 6C6F6E67 		.ascii	"long long int\000"
 1493      206C6F6E 
 1493      6720696E 
 1493      7400
 1494              	.LASF14:
 1495 0311 63686172 		.ascii	"char\000"
 1495      00
 1496              	.LASF28:
 1497 0316 70765061 		.ascii	"pvParameters\000"
 1497      72616D65 
 1497      74657273 
 1497      00
 1498              	.LASF39:
 1499 0323 78476F74 		.ascii	"xGotValue\000"
 1499      56616C75 
 1499      6500
 1500              	.LASF49:
 1501 032d 756C4578 		.ascii	"ulExpectedValue\000"
 1501      70656374 
 1501      65645661 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 39


 1501      6C756500 
 1502              	.LASF44:
 1503 033d 784C696D 		.ascii	"xLimitedIncrementHandle\000"
 1503      69746564 
 1503      496E6372 
 1503      656D656E 
 1503      7448616E 
 1504              	.LASF5:
 1505 0355 5F5F7569 		.ascii	"__uint16_t\000"
 1505      6E743136 
 1505      5F7400
 1506              	.LASF16:
 1507 0360 75696E74 		.ascii	"uint16_t\000"
 1507      31365F74 
 1507      00
 1508              	.LASF24:
 1509 0369 5461736B 		.ascii	"TaskHandle_t\000"
 1509      48616E64 
 1509      6C655F74 
 1509      00
 1510              	.LASF18:
 1511 0376 75696E74 		.ascii	"uint32_t\000"
 1511      33325F74 
 1511      00
 1512              	.LASF8:
 1513 037f 6C6F6E67 		.ascii	"long int\000"
 1513      20696E74 
 1513      00
 1514              	.LASF32:
 1515 0388 756C4C61 		.ascii	"ulLastCounter\000"
 1515      7374436F 
 1515      756E7465 
 1515      7200
 1516              	.LASF48:
 1517 0396 78537573 		.ascii	"xSuspendedQueueReceiveError\000"
 1517      70656E64 
 1517      65645175 
 1517      65756552 
 1517      65636569 
 1518              	.LASF46:
 1519 03b2 75734368 		.ascii	"usCheckVariable\000"
 1519      65636B56 
 1519      61726961 
 1519      626C6500 
 1520              	.LASF22:
 1521 03c2 55426173 		.ascii	"UBaseType_t\000"
 1521      65547970 
 1521      655F7400 
 1522              	.LASF21:
 1523 03ce 42617365 		.ascii	"BaseType_t\000"
 1523      54797065 
 1523      5F7400
 1524              	.LASF54:
 1525 03d9 433A5C55 		.ascii	"C:\\Users\\bmt\\Documents\\GitHub\\FreeRTOS_CY8CKIT"
 1525      73657273 
 1525      5C626D74 
 1525      5C446F63 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\ccAB5zDP.s 			page 40


 1525      756D656E 
 1526 0407 5F303539 		.ascii	"_059\\FreeRTOS_Demo.cydsn\000"
 1526      5C467265 
 1526      6552544F 
 1526      535F4465 
 1526      6D6F2E63 
 1527              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"port.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.data
  19              		.align	2
  20              		.type	uxCriticalNesting, %object
  21              		.size	uxCriticalNesting, 4
  22              	uxCriticalNesting:
  23 0000 AAAAAAAA 		.word	-1431655766
  24              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  25              		.align	2
  26              		.global	pxPortInitialiseStack
  27              		.thumb
  28              		.thumb_func
  29              		.type	pxPortInitialiseStack, %function
  30              	pxPortInitialiseStack:
  31              	.LFB68:
  32              		.file 1 "..\\Source\\portable\\GCC\\ARM_CM3\\port.c"
   1:..\Source\portable\GCC\ARM_CM3/port.c **** /*
   2:..\Source\portable\GCC\ARM_CM3/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Source\portable\GCC\ARM_CM3/port.c ****     All rights reserved
   4:..\Source\portable\GCC\ARM_CM3/port.c **** 
   5:..\Source\portable\GCC\ARM_CM3/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Source\portable\GCC\ARM_CM3/port.c **** 
   7:..\Source\portable\GCC\ARM_CM3/port.c ****     This file is part of the FreeRTOS distribution.
   8:..\Source\portable\GCC\ARM_CM3/port.c **** 
   9:..\Source\portable\GCC\ARM_CM3/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Source\portable\GCC\ARM_CM3/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Source\portable\GCC\ARM_CM3/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Source\portable\GCC\ARM_CM3/port.c **** 
  13:..\Source\portable\GCC\ARM_CM3/port.c ****     ***************************************************************************
  14:..\Source\portable\GCC\ARM_CM3/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Source\portable\GCC\ARM_CM3/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Source\portable\GCC\ARM_CM3/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Source\portable\GCC\ARM_CM3/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Source\portable\GCC\ARM_CM3/port.c ****     ***************************************************************************
  19:..\Source\portable\GCC\ARM_CM3/port.c **** 
  20:..\Source\portable\GCC\ARM_CM3/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Source\portable\GCC\ARM_CM3/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Source\portable\GCC\ARM_CM3/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Source\portable\GCC\ARM_CM3/port.c ****     link: http://www.freertos.org/a00114.html
  24:..\Source\portable\GCC\ARM_CM3/port.c **** 
  25:..\Source\portable\GCC\ARM_CM3/port.c ****     ***************************************************************************
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 2


  26:..\Source\portable\GCC\ARM_CM3/port.c ****      *                                                                       *
  27:..\Source\portable\GCC\ARM_CM3/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Source\portable\GCC\ARM_CM3/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Source\portable\GCC\ARM_CM3/port.c ****      *    platform software that is more than just the market leader, it     *
  30:..\Source\portable\GCC\ARM_CM3/port.c ****      *    is the industry's de facto standard.                               *
  31:..\Source\portable\GCC\ARM_CM3/port.c ****      *                                                                       *
  32:..\Source\portable\GCC\ARM_CM3/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Source\portable\GCC\ARM_CM3/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Source\portable\GCC\ARM_CM3/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\Source\portable\GCC\ARM_CM3/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Source\portable\GCC\ARM_CM3/port.c ****      *                                                                       *
  37:..\Source\portable\GCC\ARM_CM3/port.c ****     ***************************************************************************
  38:..\Source\portable\GCC\ARM_CM3/port.c **** 
  39:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Source\portable\GCC\ARM_CM3/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Source\portable\GCC\ARM_CM3/port.c ****     defined configASSERT()?
  42:..\Source\portable\GCC\ARM_CM3/port.c **** 
  43:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Source\portable\GCC\ARM_CM3/port.c ****     embedded software for free we request you assist our global community by
  45:..\Source\portable\GCC\ARM_CM3/port.c ****     participating in the support forum.
  46:..\Source\portable\GCC\ARM_CM3/port.c **** 
  47:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Source\portable\GCC\ARM_CM3/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Source\portable\GCC\ARM_CM3/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Source\portable\GCC\ARM_CM3/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Source\portable\GCC\ARM_CM3/port.c **** 
  52:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Source\portable\GCC\ARM_CM3/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Source\portable\GCC\ARM_CM3/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Source\portable\GCC\ARM_CM3/port.c **** 
  56:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Source\portable\GCC\ARM_CM3/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Source\portable\GCC\ARM_CM3/port.c **** 
  59:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Source\portable\GCC\ARM_CM3/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Source\portable\GCC\ARM_CM3/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Source\portable\GCC\ARM_CM3/port.c **** 
  63:..\Source\portable\GCC\ARM_CM3/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Source\portable\GCC\ARM_CM3/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Source\portable\GCC\ARM_CM3/port.c ****     mission critical applications that require provable dependability.
  66:..\Source\portable\GCC\ARM_CM3/port.c **** 
  67:..\Source\portable\GCC\ARM_CM3/port.c ****     1 tab == 4 spaces!
  68:..\Source\portable\GCC\ARM_CM3/port.c **** */
  69:..\Source\portable\GCC\ARM_CM3/port.c **** 
  70:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------
  71:..\Source\portable\GCC\ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  72:..\Source\portable\GCC\ARM_CM3/port.c ****  *----------------------------------------------------------*/
  73:..\Source\portable\GCC\ARM_CM3/port.c **** 
  74:..\Source\portable\GCC\ARM_CM3/port.c **** /* Scheduler includes. */
  75:..\Source\portable\GCC\ARM_CM3/port.c **** #include "FreeRTOS.h"
  76:..\Source\portable\GCC\ARM_CM3/port.c **** #include "task.h"
  77:..\Source\portable\GCC\ARM_CM3/port.c **** 
  78:..\Source\portable\GCC\ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  79:..\Source\portable\GCC\ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  80:..\Source\portable\GCC\ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  81:..\Source\portable\GCC\ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  82:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 3


  83:..\Source\portable\GCC\ARM_CM3/port.c **** #endif
  84:..\Source\portable\GCC\ARM_CM3/port.c **** 
  85:..\Source\portable\GCC\ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  86:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  87:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  88:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  89:..\Source\portable\GCC\ARM_CM3/port.c **** #else
  90:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  91:..\Source\portable\GCC\ARM_CM3/port.c **** 	as the core. */
  92:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  93:..\Source\portable\GCC\ARM_CM3/port.c **** #endif
  94:..\Source\portable\GCC\ARM_CM3/port.c **** 
  95:..\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  96:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  97:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  98:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  99:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
 100:..\Source\portable\GCC\ARM_CM3/port.c **** /* ...then bits in the registers. */
 101:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
 102:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 103:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 104:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 105:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 106:..\Source\portable\GCC\ARM_CM3/port.c **** 
 107:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 108:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 109:..\Source\portable\GCC\ARM_CM3/port.c **** 
 110:..\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
 111:..\Source\portable\GCC\ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 112:..\Source\portable\GCC\ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 113:..\Source\portable\GCC\ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 114:..\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 115:..\Source\portable\GCC\ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 116:..\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 117:..\Source\portable\GCC\ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 118:..\Source\portable\GCC\ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 119:..\Source\portable\GCC\ARM_CM3/port.c **** 
 120:..\Source\portable\GCC\ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 121:..\Source\portable\GCC\ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 122:..\Source\portable\GCC\ARM_CM3/port.c **** 
 123:..\Source\portable\GCC\ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
 124:..\Source\portable\GCC\ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
 125:..\Source\portable\GCC\ARM_CM3/port.c **** 
 126:..\Source\portable\GCC\ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
 127:..\Source\portable\GCC\ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 128:..\Source\portable\GCC\ARM_CM3/port.c **** 
 129:..\Source\portable\GCC\ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 130:..\Source\portable\GCC\ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
 131:..\Source\portable\GCC\ARM_CM3/port.c **** calculations. */
 132:..\Source\portable\GCC\ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 133:..\Source\portable\GCC\ARM_CM3/port.c **** 
 134:..\Source\portable\GCC\ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 135:..\Source\portable\GCC\ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 136:..\Source\portable\GCC\ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
 137:..\Source\portable\GCC\ARM_CM3/port.c **** 
 138:..\Source\portable\GCC\ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 139:..\Source\portable\GCC\ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 4


 140:..\Source\portable\GCC\ARM_CM3/port.c **** debugger. */
 141:..\Source\portable\GCC\ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 142:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 143:..\Source\portable\GCC\ARM_CM3/port.c **** #else
 144:..\Source\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 145:..\Source\portable\GCC\ARM_CM3/port.c **** #endif
 146:..\Source\portable\GCC\ARM_CM3/port.c **** 
 147:..\Source\portable\GCC\ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 148:..\Source\portable\GCC\ARM_CM3/port.c **** variable. */
 149:..\Source\portable\GCC\ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 150:..\Source\portable\GCC\ARM_CM3/port.c **** 
 151:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 152:..\Source\portable\GCC\ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 153:..\Source\portable\GCC\ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 154:..\Source\portable\GCC\ARM_CM3/port.c ****  * generate the tick interrupt.
 155:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 156:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 157:..\Source\portable\GCC\ARM_CM3/port.c **** 
 158:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 159:..\Source\portable\GCC\ARM_CM3/port.c ****  * Exception handlers.
 160:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 161:..\Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 162:..\Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void );
 163:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 164:..\Source\portable\GCC\ARM_CM3/port.c **** 
 165:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 166:..\Source\portable\GCC\ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 167:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 168:..\Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 169:..\Source\portable\GCC\ARM_CM3/port.c **** 
 170:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 171:..\Source\portable\GCC\ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 172:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 173:..\Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void );
 174:..\Source\portable\GCC\ARM_CM3/port.c **** 
 175:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 176:..\Source\portable\GCC\ARM_CM3/port.c **** 
 177:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 178:..\Source\portable\GCC\ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 179:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 180:..\Source\portable\GCC\ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 181:..\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 182:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 183:..\Source\portable\GCC\ARM_CM3/port.c **** 
 184:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 185:..\Source\portable\GCC\ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 186:..\Source\portable\GCC\ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 187:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 188:..\Source\portable\GCC\ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 189:..\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 190:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 191:..\Source\portable\GCC\ARM_CM3/port.c **** 
 192:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 193:..\Source\portable\GCC\ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 194:..\Source\portable\GCC\ARM_CM3/port.c ****  * power functionality only.
 195:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 196:..\Source\portable\GCC\ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 5


 197:..\Source\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 198:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 199:..\Source\portable\GCC\ARM_CM3/port.c **** 
 200:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 201:..\Source\portable\GCC\ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 202:..\Source\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 203:..\Source\portable\GCC\ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 204:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 205:..\Source\portable\GCC\ARM_CM3/port.c **** #if ( configASSERT_DEFINED == 1 )
 206:..\Source\portable\GCC\ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 207:..\Source\portable\GCC\ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 208:..\Source\portable\GCC\ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 209:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 210:..\Source\portable\GCC\ARM_CM3/port.c **** 
 211:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 212:..\Source\portable\GCC\ARM_CM3/port.c **** 
 213:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 214:..\Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 215:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 216:..\Source\portable\GCC\ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 217:..\Source\portable\GCC\ARM_CM3/port.c **** {
  33              		.loc 1 217 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 16
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38 0000 80B4     		push	{r7}
  39              		.cfi_def_cfa_offset 4
  40              		.cfi_offset 7, -4
  41 0002 85B0     		sub	sp, sp, #20
  42              		.cfi_def_cfa_offset 24
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_def_cfa_register 7
  45 0006 F860     		str	r0, [r7, #12]
  46 0008 B960     		str	r1, [r7, #8]
  47 000a 7A60     		str	r2, [r7, #4]
 218:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 219:..\Source\portable\GCC\ARM_CM3/port.c **** 	interrupt. */
 220:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  48              		.loc 1 220 0
  49 000c FB68     		ldr	r3, [r7, #12]
  50 000e 043B     		subs	r3, r3, #4
  51 0010 FB60     		str	r3, [r7, #12]
 221:..\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  52              		.loc 1 221 0
  53 0012 FB68     		ldr	r3, [r7, #12]
  54 0014 4FF08072 		mov	r2, #16777216
  55 0018 1A60     		str	r2, [r3]
 222:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
  56              		.loc 1 222 0
  57 001a FB68     		ldr	r3, [r7, #12]
  58 001c 043B     		subs	r3, r3, #4
  59 001e FB60     		str	r3, [r7, #12]
 223:..\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  60              		.loc 1 223 0
  61 0020 BB68     		ldr	r3, [r7, #8]
  62 0022 23F00102 		bic	r2, r3, #1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 6


  63 0026 FB68     		ldr	r3, [r7, #12]
  64 0028 1A60     		str	r2, [r3]
 224:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
  65              		.loc 1 224 0
  66 002a FB68     		ldr	r3, [r7, #12]
  67 002c 043B     		subs	r3, r3, #4
  68 002e FB60     		str	r3, [r7, #12]
 225:..\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  69              		.loc 1 225 0
  70 0030 094A     		ldr	r2, .L3
  71 0032 FB68     		ldr	r3, [r7, #12]
  72 0034 1A60     		str	r2, [r3]
 226:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  73              		.loc 1 226 0
  74 0036 FB68     		ldr	r3, [r7, #12]
  75 0038 143B     		subs	r3, r3, #20
  76 003a FB60     		str	r3, [r7, #12]
 227:..\Source\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  77              		.loc 1 227 0
  78 003c 7A68     		ldr	r2, [r7, #4]
  79 003e FB68     		ldr	r3, [r7, #12]
  80 0040 1A60     		str	r2, [r3]
 228:..\Source\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  81              		.loc 1 228 0
  82 0042 FB68     		ldr	r3, [r7, #12]
  83 0044 203B     		subs	r3, r3, #32
  84 0046 FB60     		str	r3, [r7, #12]
 229:..\Source\portable\GCC\ARM_CM3/port.c **** 
 230:..\Source\portable\GCC\ARM_CM3/port.c **** 	return pxTopOfStack;
  85              		.loc 1 230 0
  86 0048 FB68     		ldr	r3, [r7, #12]
 231:..\Source\portable\GCC\ARM_CM3/port.c **** }
  87              		.loc 1 231 0
  88 004a 1846     		mov	r0, r3
  89 004c 1437     		adds	r7, r7, #20
  90              		.cfi_def_cfa_offset 4
  91 004e BD46     		mov	sp, r7
  92              		.cfi_def_cfa_register 13
  93              		@ sp needed
  94 0050 5DF8047B 		ldr	r7, [sp], #4
  95              		.cfi_restore 7
  96              		.cfi_def_cfa_offset 0
  97 0054 7047     		bx	lr
  98              	.L4:
  99 0056 00BF     		.align	2
 100              	.L3:
 101 0058 00000000 		.word	prvTaskExitError
 102              		.cfi_endproc
 103              	.LFE68:
 104              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 105              		.section	.text.prvTaskExitError,"ax",%progbits
 106              		.align	2
 107              		.thumb
 108              		.thumb_func
 109              		.type	prvTaskExitError, %function
 110              	prvTaskExitError:
 111              	.LFB69:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 7


 232:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 233:..\Source\portable\GCC\ARM_CM3/port.c **** 
 234:..\Source\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void )
 235:..\Source\portable\GCC\ARM_CM3/port.c **** {
 112              		.loc 1 235 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 8
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0000 80B4     		push	{r7}
 118              		.cfi_def_cfa_offset 4
 119              		.cfi_offset 7, -4
 120 0002 83B0     		sub	sp, sp, #12
 121              		.cfi_def_cfa_offset 16
 122 0004 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
 124              	.LBB12:
 125              	.LBB13:
 126              		.file 2 "..\\Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     All rights reserved
   4:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   5:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   7:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
   9:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  13:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  14:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  19:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  20:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  25:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  26:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
  27:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
  32:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\Source\portable\GCC\ARM_CM3/portmacro.h ****      *                                                                       *
  37:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     ***************************************************************************
  38:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 8


  39:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  43:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     participating in the support forum.
  46:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  47:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  52:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  56:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  63:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  67:..\Source\portable\GCC\ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:..\Source\portable\GCC\ARM_CM3/portmacro.h **** */
  69:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  70:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  71:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  74:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  76:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  77:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  81:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  84:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:..\Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  87:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  88:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  89:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  90:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  93:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  94:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 9


  96:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
  97:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:..\Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 101:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #else
 105:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 112:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 114:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 120:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
 123:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
 126:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 131:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 132:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
 139:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:..\Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 148:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 150:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:..\Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:..\Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 10


 153:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 157:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 162:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 164:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 171:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 174:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 178:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 179:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 180:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 184:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 185:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 193:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 197:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 201:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 202:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 204:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:..\Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 11


 210:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 213:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:..\Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 216:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 219:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 221:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 223:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 224:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 225:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 227:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 228:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 229:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 230:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 231:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 233:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 235:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 237:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 127              		.loc 2 237 0
 128              	@ 237 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 129 0006 4FF0A003 			mov r3, #160												
 130 000a 83F31188 		msr basepri, r3											
 131 000e BFF36F8F 		isb														
 132 0012 BFF34F8F 		dsb														
 133              	
 134              	@ 0 "" 2
 135              		.thumb
 136 0016 7B60     		str	r3, [r7, #4]
 137              	.L6:
 138              	.LBE13:
 139              	.LBE12:
 236:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 237:..\Source\portable\GCC\ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 238:..\Source\portable\GCC\ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 239:..\Source\portable\GCC\ARM_CM3/port.c **** 
 240:..\Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 241:..\Source\portable\GCC\ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 242:..\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 243:..\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 244:..\Source\portable\GCC\ARM_CM3/port.c **** 	for( ;; );
 140              		.loc 1 244 0 discriminator 1
 141 0018 FEE7     		b	.L6
 142              		.cfi_endproc
 143              	.LFE69:
 144              		.size	prvTaskExitError, .-prvTaskExitError
 145 001a 00BF     		.section	.text.vPortSVCHandler,"ax",%progbits
 146              		.align	2
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 12


 147              		.global	vPortSVCHandler
 148              		.thumb
 149              		.thumb_func
 150              		.type	vPortSVCHandler, %function
 151              	vPortSVCHandler:
 152              	.LFB70:
 245:..\Source\portable\GCC\ARM_CM3/port.c **** }
 246:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 247:..\Source\portable\GCC\ARM_CM3/port.c **** 
 248:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void )
 249:..\Source\portable\GCC\ARM_CM3/port.c **** {
 153              		.loc 1 249 0
 154              		.cfi_startproc
 155              		@ Naked Function: prologue and epilogue provided by programmer.
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 1, uses_anonymous_args = 0
 250:..\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile (
 158              		.loc 1 250 0
 159              	@ 250 "..\Source\portable\GCC\ARM_CM3\port.c" 1
 160 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 161 0002 1968     		ldr r1, [r3]					
 162 0004 0868     		ldr r0, [r1]					
 163 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 164 000a 80F30988 		msr psp, r0						
 165 000e BFF36F8F 		isb								
 166 0012 4FF00000 		mov r0, #0 						
 167 0016 80F31188 		msr	basepri, r0					
 168 001a 4EF00D0E 		orr r14, #0xd					
 169 001e 7047     		bx r14							
 170              										
 171              		.align 4						
 172 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 173              	
 174              	@ 0 "" 2
 251:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 252:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 253:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 254:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 255:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 256:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	isb								\n"
 257:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 258:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 259:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 260:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	bx r14							\n"
 261:..\Source\portable\GCC\ARM_CM3/port.c **** 					"									\n"
 262:..\Source\portable\GCC\ARM_CM3/port.c **** 					"	.align 4						\n"
 263:..\Source\portable\GCC\ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 264:..\Source\portable\GCC\ARM_CM3/port.c **** 				);
 265:..\Source\portable\GCC\ARM_CM3/port.c **** }
 175              		.loc 1 265 0
 176              		.thumb
 177              		.cfi_endproc
 178              	.LFE70:
 179              		.size	vPortSVCHandler, .-vPortSVCHandler
 180 0024 AFF30080 		.section	.text.prvPortStartFirstTask,"ax",%progbits
 180      AFF30080 
 180      AFF30080 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 13


 181              		.align	2
 182              		.thumb
 183              		.thumb_func
 184              		.type	prvPortStartFirstTask, %function
 185              	prvPortStartFirstTask:
 186              	.LFB71:
 266:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 267:..\Source\portable\GCC\ARM_CM3/port.c **** 
 268:..\Source\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 269:..\Source\portable\GCC\ARM_CM3/port.c **** {
 187              		.loc 1 269 0
 188              		.cfi_startproc
 189              		@ Naked Function: prologue and epilogue provided by programmer.
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 270:..\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile(
 192              		.loc 1 270 0
 193              	@ 270 "..\Source\portable\GCC\ARM_CM3\port.c" 1
 194 0000 0648     		 ldr r0, =0xE000ED08 	
 195 0002 0068     	 ldr r0, [r0] 			
 196 0004 0068     	 ldr r0, [r0] 			
 197 0006 80F30888 	 msr msp, r0			
 198 000a 62B6     	 cpsie i				
 199 000c 61B6     	 cpsie f				
 200 000e BFF34F8F 	 dsb					
 201 0012 BFF36F8F 	 isb					
 202 0016 00DF     	 svc 0					
 203 0018 00BF     	 nop					
 204              	
 205              	@ 0 "" 2
 271:..\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 272:..\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 273:..\Source\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 274:..\Source\portable\GCC\ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 275:..\Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 276:..\Source\portable\GCC\ARM_CM3/port.c **** 					" cpsie f				\n"
 277:..\Source\portable\GCC\ARM_CM3/port.c **** 					" dsb					\n"
 278:..\Source\portable\GCC\ARM_CM3/port.c **** 					" isb					\n"
 279:..\Source\portable\GCC\ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 280:..\Source\portable\GCC\ARM_CM3/port.c **** 					" nop					\n"
 281:..\Source\portable\GCC\ARM_CM3/port.c **** 				);
 282:..\Source\portable\GCC\ARM_CM3/port.c **** }
 206              		.loc 1 282 0
 207              		.thumb
 208              		.cfi_endproc
 209              	.LFE71:
 210              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 211 001a 0000     		.section	.text.xPortStartScheduler,"ax",%progbits
 212              		.align	2
 213              		.global	xPortStartScheduler
 214              		.thumb
 215              		.thumb_func
 216              		.type	xPortStartScheduler, %function
 217              	xPortStartScheduler:
 218              	.LFB72:
 283:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 284:..\Source\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 14


 285:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 286:..\Source\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 287:..\Source\portable\GCC\ARM_CM3/port.c ****  */
 288:..\Source\portable\GCC\ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 289:..\Source\portable\GCC\ARM_CM3/port.c **** {
 219              		.loc 1 289 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 1, uses_anonymous_args = 0
 223 0000 80B5     		push	{r7, lr}
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 7, -8
 226              		.cfi_offset 14, -4
 227 0002 00AF     		add	r7, sp, #0
 228              		.cfi_def_cfa_register 7
 290:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 291:..\Source\portable\GCC\ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 292:..\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 293:..\Source\portable\GCC\ARM_CM3/port.c **** 
 294:..\Source\portable\GCC\ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 295:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 296:..\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 297:..\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 298:..\Source\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 299:..\Source\portable\GCC\ARM_CM3/port.c **** 
 300:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 301:..\Source\portable\GCC\ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 302:..\Source\portable\GCC\ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 303:..\Source\portable\GCC\ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 304:..\Source\portable\GCC\ARM_CM3/port.c **** 
 305:..\Source\portable\GCC\ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 306:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 307:..\Source\portable\GCC\ARM_CM3/port.c **** 
 308:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 309:..\Source\portable\GCC\ARM_CM3/port.c **** 		possible bits. */
 310:..\Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 311:..\Source\portable\GCC\ARM_CM3/port.c **** 
 312:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 313:..\Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 314:..\Source\portable\GCC\ARM_CM3/port.c **** 
 315:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 316:..\Source\portable\GCC\ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 317:..\Source\portable\GCC\ARM_CM3/port.c **** 
 318:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 319:..\Source\portable\GCC\ARM_CM3/port.c **** 		of bits read back. */
 320:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 321:..\Source\portable\GCC\ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 322:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 323:..\Source\portable\GCC\ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 324:..\Source\portable\GCC\ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 325:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 326:..\Source\portable\GCC\ARM_CM3/port.c **** 
 327:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 328:..\Source\portable\GCC\ARM_CM3/port.c **** 		register. */
 329:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 330:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 331:..\Source\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 15


 332:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 333:..\Source\portable\GCC\ARM_CM3/port.c **** 		value. */
 334:..\Source\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 335:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 336:..\Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 337:..\Source\portable\GCC\ARM_CM3/port.c **** 
 338:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 339:..\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 229              		.loc 1 339 0
 230 0004 0B4A     		ldr	r2, .L11
 231 0006 0B4B     		ldr	r3, .L11
 232 0008 1B68     		ldr	r3, [r3]
 233 000a 43F46003 		orr	r3, r3, #14680064
 234 000e 1360     		str	r3, [r2]
 340:..\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 235              		.loc 1 340 0
 236 0010 084A     		ldr	r2, .L11
 237 0012 084B     		ldr	r3, .L11
 238 0014 1B68     		ldr	r3, [r3]
 239 0016 43F06043 		orr	r3, r3, #-536870912
 240 001a 1360     		str	r3, [r2]
 341:..\Source\portable\GCC\ARM_CM3/port.c **** 
 342:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 343:..\Source\portable\GCC\ARM_CM3/port.c **** 	here already. */
 344:..\Source\portable\GCC\ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 241              		.loc 1 344 0
 242 001c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 345:..\Source\portable\GCC\ARM_CM3/port.c **** 
 346:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 347:..\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 243              		.loc 1 347 0
 244 0020 054B     		ldr	r3, .L11+4
 245 0022 0022     		movs	r2, #0
 246 0024 1A60     		str	r2, [r3]
 348:..\Source\portable\GCC\ARM_CM3/port.c **** 
 349:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Start the first task. */
 350:..\Source\portable\GCC\ARM_CM3/port.c **** 	prvPortStartFirstTask();
 247              		.loc 1 350 0
 248 0026 FFF7FEFF 		bl	prvPortStartFirstTask
 351:..\Source\portable\GCC\ARM_CM3/port.c **** 
 352:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 353:..\Source\portable\GCC\ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 354:..\Source\portable\GCC\ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 355:..\Source\portable\GCC\ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 356:..\Source\portable\GCC\ARM_CM3/port.c **** 	prvTaskExitError();
 249              		.loc 1 356 0
 250 002a FFF7FEFF 		bl	prvTaskExitError
 357:..\Source\portable\GCC\ARM_CM3/port.c **** 
 358:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Should not get here! */
 359:..\Source\portable\GCC\ARM_CM3/port.c **** 	return 0;
 251              		.loc 1 359 0
 252 002e 0023     		movs	r3, #0
 360:..\Source\portable\GCC\ARM_CM3/port.c **** }
 253              		.loc 1 360 0
 254 0030 1846     		mov	r0, r3
 255 0032 80BD     		pop	{r7, pc}
 256              	.L12:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 16


 257              		.align	2
 258              	.L11:
 259 0034 20ED00E0 		.word	-536810208
 260 0038 00000000 		.word	uxCriticalNesting
 261              		.cfi_endproc
 262              	.LFE72:
 263              		.size	xPortStartScheduler, .-xPortStartScheduler
 264              		.section	.text.vPortEndScheduler,"ax",%progbits
 265              		.align	2
 266              		.global	vPortEndScheduler
 267              		.thumb
 268              		.thumb_func
 269              		.type	vPortEndScheduler, %function
 270              	vPortEndScheduler:
 271              	.LFB73:
 361:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 362:..\Source\portable\GCC\ARM_CM3/port.c **** 
 363:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortEndScheduler( void )
 364:..\Source\portable\GCC\ARM_CM3/port.c **** {
 272              		.loc 1 364 0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276              		@ link register save eliminated.
 277 0000 80B4     		push	{r7}
 278              		.cfi_def_cfa_offset 4
 279              		.cfi_offset 7, -4
 280 0002 00AF     		add	r7, sp, #0
 281              		.cfi_def_cfa_register 7
 365:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 366:..\Source\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert. */
 367:..\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 368:..\Source\portable\GCC\ARM_CM3/port.c **** }
 282              		.loc 1 368 0
 283 0004 BD46     		mov	sp, r7
 284              		.cfi_def_cfa_register 13
 285              		@ sp needed
 286 0006 5DF8047B 		ldr	r7, [sp], #4
 287              		.cfi_restore 7
 288              		.cfi_def_cfa_offset 0
 289 000a 7047     		bx	lr
 290              		.cfi_endproc
 291              	.LFE73:
 292              		.size	vPortEndScheduler, .-vPortEndScheduler
 293              		.section	.text.vPortEnterCritical,"ax",%progbits
 294              		.align	2
 295              		.global	vPortEnterCritical
 296              		.thumb
 297              		.thumb_func
 298              		.type	vPortEnterCritical, %function
 299              	vPortEnterCritical:
 300              	.LFB74:
 369:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 370:..\Source\portable\GCC\ARM_CM3/port.c **** 
 371:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortEnterCritical( void )
 372:..\Source\portable\GCC\ARM_CM3/port.c **** {
 301              		.loc 1 372 0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 17


 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 8
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306 0000 80B4     		push	{r7}
 307              		.cfi_def_cfa_offset 4
 308              		.cfi_offset 7, -4
 309 0002 83B0     		sub	sp, sp, #12
 310              		.cfi_def_cfa_offset 16
 311 0004 00AF     		add	r7, sp, #0
 312              		.cfi_def_cfa_register 7
 313              	.LBB14:
 314              	.LBB15:
 315              		.loc 2 237 0
 316              	@ 237 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 317 0006 4FF0A003 			mov r3, #160												
 318 000a 83F31188 		msr basepri, r3											
 319 000e BFF36F8F 		isb														
 320 0012 BFF34F8F 		dsb														
 321              	
 322              	@ 0 "" 2
 323              		.thumb
 324 0016 7B60     		str	r3, [r7, #4]
 325              	.LBE15:
 326              	.LBE14:
 373:..\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 374:..\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting++;
 327              		.loc 1 374 0
 328 0018 044B     		ldr	r3, .L15
 329 001a 1B68     		ldr	r3, [r3]
 330 001c 0133     		adds	r3, r3, #1
 331 001e 034A     		ldr	r2, .L15
 332 0020 1360     		str	r3, [r2]
 375:..\Source\portable\GCC\ARM_CM3/port.c **** 
 376:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 377:..\Source\portable\GCC\ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 378:..\Source\portable\GCC\ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 379:..\Source\portable\GCC\ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 380:..\Source\portable\GCC\ARM_CM3/port.c **** 	assert function also uses a critical section. */
 381:..\Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 382:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 383:..\Source\portable\GCC\ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 384:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 385:..\Source\portable\GCC\ARM_CM3/port.c **** }
 333              		.loc 1 385 0
 334 0022 0C37     		adds	r7, r7, #12
 335              		.cfi_def_cfa_offset 4
 336 0024 BD46     		mov	sp, r7
 337              		.cfi_def_cfa_register 13
 338              		@ sp needed
 339 0026 5DF8047B 		ldr	r7, [sp], #4
 340              		.cfi_restore 7
 341              		.cfi_def_cfa_offset 0
 342 002a 7047     		bx	lr
 343              	.L16:
 344              		.align	2
 345              	.L15:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 18


 346 002c 00000000 		.word	uxCriticalNesting
 347              		.cfi_endproc
 348              	.LFE74:
 349              		.size	vPortEnterCritical, .-vPortEnterCritical
 350              		.section	.text.vPortExitCritical,"ax",%progbits
 351              		.align	2
 352              		.global	vPortExitCritical
 353              		.thumb
 354              		.thumb_func
 355              		.type	vPortExitCritical, %function
 356              	vPortExitCritical:
 357              	.LFB75:
 386:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 387:..\Source\portable\GCC\ARM_CM3/port.c **** 
 388:..\Source\portable\GCC\ARM_CM3/port.c **** void vPortExitCritical( void )
 389:..\Source\portable\GCC\ARM_CM3/port.c **** {
 358              		.loc 1 389 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 8
 361              		@ frame_needed = 1, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 363 0000 80B4     		push	{r7}
 364              		.cfi_def_cfa_offset 4
 365              		.cfi_offset 7, -4
 366 0002 83B0     		sub	sp, sp, #12
 367              		.cfi_def_cfa_offset 16
 368 0004 00AF     		add	r7, sp, #0
 369              		.cfi_def_cfa_register 7
 390:..\Source\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 391:..\Source\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting--;
 370              		.loc 1 391 0
 371 0006 094B     		ldr	r3, .L19
 372 0008 1B68     		ldr	r3, [r3]
 373 000a 013B     		subs	r3, r3, #1
 374 000c 074A     		ldr	r2, .L19
 375 000e 1360     		str	r3, [r2]
 392:..\Source\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 376              		.loc 1 392 0
 377 0010 064B     		ldr	r3, .L19
 378 0012 1B68     		ldr	r3, [r3]
 379 0014 002B     		cmp	r3, #0
 380 0016 04D1     		bne	.L17
 381 0018 0023     		movs	r3, #0
 382 001a 7B60     		str	r3, [r7, #4]
 383              	.LBB16:
 384              	.LBB17:
 238:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 239:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 245:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 246:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 247:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 19


 249:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 251:..\Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 253:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 254:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 255:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 262:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 263:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 265:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 266:..\Source\portable\GCC\ARM_CM3/portmacro.h **** }
 267:..\Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 
 269:..\Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:..\Source\portable\GCC\ARM_CM3/portmacro.h **** {
 271:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 385              		.loc 2 271 0
 386 001c 7B68     		ldr	r3, [r7, #4]
 387              	@ 271 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 388 001e 83F31188 			msr basepri, r3	
 389              	@ 0 "" 2
 390              		.thumb
 391              	.L17:
 392              	.LBE17:
 393              	.LBE16:
 393:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 394:..\Source\portable\GCC\ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 395:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 396:..\Source\portable\GCC\ARM_CM3/port.c **** }
 394              		.loc 1 396 0
 395 0022 0C37     		adds	r7, r7, #12
 396              		.cfi_def_cfa_offset 4
 397 0024 BD46     		mov	sp, r7
 398              		.cfi_def_cfa_register 13
 399              		@ sp needed
 400 0026 5DF8047B 		ldr	r7, [sp], #4
 401              		.cfi_restore 7
 402              		.cfi_def_cfa_offset 0
 403 002a 7047     		bx	lr
 404              	.L20:
 405              		.align	2
 406              	.L19:
 407 002c 00000000 		.word	uxCriticalNesting
 408              		.cfi_endproc
 409              	.LFE75:
 410              		.size	vPortExitCritical, .-vPortExitCritical
 411              		.section	.text.xPortPendSVHandler,"ax",%progbits
 412              		.align	2
 413              		.global	xPortPendSVHandler
 414              		.thumb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 20


 415              		.thumb_func
 416              		.type	xPortPendSVHandler, %function
 417              	xPortPendSVHandler:
 418              	.LFB76:
 397:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 398:..\Source\portable\GCC\ARM_CM3/port.c **** 
 399:..\Source\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void )
 400:..\Source\portable\GCC\ARM_CM3/port.c **** {
 419              		.loc 1 400 0
 420              		.cfi_startproc
 421              		@ Naked Function: prologue and epilogue provided by programmer.
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 1, uses_anonymous_args = 0
 401:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* This is a naked function. */
 402:..\Source\portable\GCC\ARM_CM3/port.c **** 
 403:..\Source\portable\GCC\ARM_CM3/port.c **** 	__asm volatile
 424              		.loc 1 403 0
 425              	@ 403 "..\Source\portable\GCC\ARM_CM3\port.c" 1
 426 0000 EFF30980 			mrs r0, psp							
 427 0004 BFF36F8F 		isb									
 428              											
 429 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 430 000a 1A68     		ldr	r2, [r3]						
 431              											
 432 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 433 0010 1060     		str r0, [r2]						
 434              											
 435 0012 2DE90840 		stmdb sp!, {r3, r14}				
 436 0016 4FF0A000 		mov r0, #160							
 437 001a 80F31188 		msr basepri, r0						
 438 001e FFF7FEFF 		bl vTaskSwitchContext				
 439 0022 4FF00000 		mov r0, #0							
 440 0026 80F31188 		msr basepri, r0						
 441 002a BDE80840 		ldmia sp!, {r3, r14}				
 442              											
 443 002e 1968     		ldr r1, [r3]						
 444 0030 0868     		ldr r0, [r1]						
 445 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 446 0036 80F30988 		msr psp, r0							
 447 003a BFF36F8F 		isb									
 448 003e 7047     		bx r14								
 449              											
 450              		.align 4							
 451 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 452              	
 453              	@ 0 "" 2
 404:..\Source\portable\GCC\ARM_CM3/port.c **** 	(
 405:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 406:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 407:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 408:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 409:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 410:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 411:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 412:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 413:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 414:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 21


 415:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 416:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 417:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 418:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 419:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 420:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 421:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 422:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 423:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 424:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 425:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 426:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 427:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	bx r14								\n"
 428:..\Source\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 429:..\Source\portable\GCC\ARM_CM3/port.c **** 	"	.align 4							\n"
 430:..\Source\portable\GCC\ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 431:..\Source\portable\GCC\ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 432:..\Source\portable\GCC\ARM_CM3/port.c **** 	);
 433:..\Source\portable\GCC\ARM_CM3/port.c **** }
 454              		.loc 1 433 0
 455              		.thumb
 456              		.cfi_endproc
 457              	.LFE76:
 458              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 459 0044 AFF30080 		.section	.text.xPortSysTickHandler,"ax",%progbits
 459      AFF30080 
 459      AFF30080 
 460              		.align	2
 461              		.global	xPortSysTickHandler
 462              		.thumb
 463              		.thumb_func
 464              		.type	xPortSysTickHandler, %function
 465              	xPortSysTickHandler:
 466              	.LFB77:
 434:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 435:..\Source\portable\GCC\ARM_CM3/port.c **** 
 436:..\Source\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void )
 437:..\Source\portable\GCC\ARM_CM3/port.c **** {
 467              		.loc 1 437 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 8
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471 0000 80B5     		push	{r7, lr}
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 7, -8
 474              		.cfi_offset 14, -4
 475 0002 82B0     		sub	sp, sp, #8
 476              		.cfi_def_cfa_offset 16
 477 0004 00AF     		add	r7, sp, #0
 478              		.cfi_def_cfa_register 7
 479              	.LBB18:
 480              	.LBB19:
 237:..\Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 481              		.loc 2 237 0
 482              	@ 237 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 483 0006 4FF0A003 			mov r3, #160												
 484 000a 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 22


 485 000e BFF36F8F 		isb														
 486 0012 BFF34F8F 		dsb														
 487              	
 488              	@ 0 "" 2
 489              		.thumb
 490 0016 7B60     		str	r3, [r7, #4]
 491              	.LBE19:
 492              	.LBE18:
 438:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 439:..\Source\portable\GCC\ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 440:..\Source\portable\GCC\ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 441:..\Source\portable\GCC\ARM_CM3/port.c **** 	known. */
 442:..\Source\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 443:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 444:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 445:..\Source\portable\GCC\ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 493              		.loc 1 445 0
 494 0018 FFF7FEFF 		bl	xTaskIncrementTick
 495 001c 0346     		mov	r3, r0
 496 001e 002B     		cmp	r3, #0
 497 0020 03D0     		beq	.L23
 446:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 447:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 448:..\Source\portable\GCC\ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 449:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 498              		.loc 1 449 0
 499 0022 064B     		ldr	r3, .L24
 500 0024 4FF08052 		mov	r2, #268435456
 501 0028 1A60     		str	r2, [r3]
 502              	.L23:
 503 002a 0023     		movs	r3, #0
 504 002c 3B60     		str	r3, [r7]
 505              	.LBB20:
 506              	.LBB21:
 507              		.loc 2 271 0
 508 002e 3B68     		ldr	r3, [r7]
 509              	@ 271 "..\Source\portable\GCC\ARM_CM3/portmacro.h" 1
 510 0030 83F31188 			msr basepri, r3	
 511              	@ 0 "" 2
 512              		.thumb
 513              	.LBE21:
 514              	.LBE20:
 450:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 451:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 452:..\Source\portable\GCC\ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 453:..\Source\portable\GCC\ARM_CM3/port.c **** }
 515              		.loc 1 453 0
 516 0034 0837     		adds	r7, r7, #8
 517              		.cfi_def_cfa_offset 8
 518 0036 BD46     		mov	sp, r7
 519              		.cfi_def_cfa_register 13
 520              		@ sp needed
 521 0038 80BD     		pop	{r7, pc}
 522              	.L25:
 523 003a 00BF     		.align	2
 524              	.L24:
 525 003c 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 23


 526              		.cfi_endproc
 527              	.LFE77:
 528              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 529              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 530              		.align	2
 531              		.weak	vPortSetupTimerInterrupt
 532              		.thumb
 533              		.thumb_func
 534              		.type	vPortSetupTimerInterrupt, %function
 535              	vPortSetupTimerInterrupt:
 536              	.LFB78:
 454:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 455:..\Source\portable\GCC\ARM_CM3/port.c **** 
 456:..\Source\portable\GCC\ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 457:..\Source\portable\GCC\ARM_CM3/port.c **** 
 458:..\Source\portable\GCC\ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 459:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 460:..\Source\portable\GCC\ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 461:..\Source\portable\GCC\ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 462:..\Source\portable\GCC\ARM_CM3/port.c **** 
 463:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 464:..\Source\portable\GCC\ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 465:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 466:..\Source\portable\GCC\ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 467:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 468:..\Source\portable\GCC\ARM_CM3/port.c **** 
 469:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 470:..\Source\portable\GCC\ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 471:..\Source\portable\GCC\ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 472:..\Source\portable\GCC\ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 473:..\Source\portable\GCC\ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 474:..\Source\portable\GCC\ARM_CM3/port.c **** 
 475:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 476:..\Source\portable\GCC\ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 477:..\Source\portable\GCC\ARM_CM3/port.c **** 		through one of the tick periods. */
 478:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 479:..\Source\portable\GCC\ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 480:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 481:..\Source\portable\GCC\ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 482:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 483:..\Source\portable\GCC\ARM_CM3/port.c **** 
 484:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 485:..\Source\portable\GCC\ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 486:..\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "cpsid i" );
 487:..\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 488:..\Source\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "isb" );
 489:..\Source\portable\GCC\ARM_CM3/port.c **** 
 490:..\Source\portable\GCC\ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 491:..\Source\portable\GCC\ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 492:..\Source\portable\GCC\ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 493:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 494:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 495:..\Source\portable\GCC\ARM_CM3/port.c **** 			this tick period. */
 496:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 497:..\Source\portable\GCC\ARM_CM3/port.c **** 
 498:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 499:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 24


 500:..\Source\portable\GCC\ARM_CM3/port.c **** 
 501:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 502:..\Source\portable\GCC\ARM_CM3/port.c **** 			periods. */
 503:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 504:..\Source\portable\GCC\ARM_CM3/port.c **** 
 505:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 506:..\Source\portable\GCC\ARM_CM3/port.c **** 			above. */
 507:..\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" );
 508:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 509:..\Source\portable\GCC\ARM_CM3/port.c **** 		else
 510:..\Source\portable\GCC\ARM_CM3/port.c **** 		{
 511:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Set the new reload value. */
 512:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 513:..\Source\portable\GCC\ARM_CM3/port.c **** 
 514:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 515:..\Source\portable\GCC\ARM_CM3/port.c **** 			zero. */
 516:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 517:..\Source\portable\GCC\ARM_CM3/port.c **** 
 518:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 519:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 520:..\Source\portable\GCC\ARM_CM3/port.c **** 
 521:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 522:..\Source\portable\GCC\ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 523:..\Source\portable\GCC\ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 524:..\Source\portable\GCC\ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 525:..\Source\portable\GCC\ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 526:..\Source\portable\GCC\ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 527:..\Source\portable\GCC\ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 528:..\Source\portable\GCC\ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 529:..\Source\portable\GCC\ARM_CM3/port.c **** 			{
 530:..\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "dsb" );
 531:..\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 532:..\Source\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "isb" );
 533:..\Source\portable\GCC\ARM_CM3/port.c **** 			}
 534:..\Source\portable\GCC\ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 535:..\Source\portable\GCC\ARM_CM3/port.c **** 
 536:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 537:..\Source\portable\GCC\ARM_CM3/port.c **** 			accounted for as best it can be, but using the tickless mode will
 538:..\Source\portable\GCC\ARM_CM3/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 539:..\Source\portable\GCC\ARM_CM3/port.c **** 			kernel with respect to calendar time. */
 540:..\Source\portable\GCC\ARM_CM3/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 541:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 542:..\Source\portable\GCC\ARM_CM3/port.c **** 
 543:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 544:..\Source\portable\GCC\ARM_CM3/port.c **** 			above. */
 545:..\Source\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" );
 546:..\Source\portable\GCC\ARM_CM3/port.c **** 
 547:..\Source\portable\GCC\ARM_CM3/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 548:..\Source\portable\GCC\ARM_CM3/port.c **** 			{
 549:..\Source\portable\GCC\ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 550:..\Source\portable\GCC\ARM_CM3/port.c **** 
 551:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 552:..\Source\portable\GCC\ARM_CM3/port.c **** 				count reloaded with ulReloadValue.  Reset the
 553:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 554:..\Source\portable\GCC\ARM_CM3/port.c **** 				period. */
 555:..\Source\portable\GCC\ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 556:..\Source\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 25


 557:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 558:..\Source\portable\GCC\ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 559:..\Source\portable\GCC\ARM_CM3/port.c **** 				that took too long. */
 560:..\Source\portable\GCC\ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 561:..\Source\portable\GCC\ARM_CM3/port.c **** 				{
 562:..\Source\portable\GCC\ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 563:..\Source\portable\GCC\ARM_CM3/port.c **** 				}
 564:..\Source\portable\GCC\ARM_CM3/port.c **** 
 565:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 566:..\Source\portable\GCC\ARM_CM3/port.c **** 
 567:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* The tick interrupt handler will already have pended the tick
 568:..\Source\portable\GCC\ARM_CM3/port.c **** 				processing in the kernel.  As the pending tick will be
 569:..\Source\portable\GCC\ARM_CM3/port.c **** 				processed as soon as this function exits, the tick value
 570:..\Source\portable\GCC\ARM_CM3/port.c **** 				maintained by the tick is stepped forward by one less than the
 571:..\Source\portable\GCC\ARM_CM3/port.c **** 				time spent waiting. */
 572:..\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 573:..\Source\portable\GCC\ARM_CM3/port.c **** 			}
 574:..\Source\portable\GCC\ARM_CM3/port.c **** 			else
 575:..\Source\portable\GCC\ARM_CM3/port.c **** 			{
 576:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 577:..\Source\portable\GCC\ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 578:..\Source\portable\GCC\ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 579:..\Source\portable\GCC\ARM_CM3/port.c **** 				ticks). */
 580:..\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 581:..\Source\portable\GCC\ARM_CM3/port.c **** 
 582:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 583:..\Source\portable\GCC\ARM_CM3/port.c **** 				was waiting? */
 584:..\Source\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 585:..\Source\portable\GCC\ARM_CM3/port.c **** 
 586:..\Source\portable\GCC\ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 587:..\Source\portable\GCC\ARM_CM3/port.c **** 				period remains. */
 588:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 589:..\Source\portable\GCC\ARM_CM3/port.c **** 			}
 590:..\Source\portable\GCC\ARM_CM3/port.c **** 
 591:..\Source\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 592:..\Source\portable\GCC\ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 593:..\Source\portable\GCC\ARM_CM3/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 594:..\Source\portable\GCC\ARM_CM3/port.c **** 			can only execute once in the case that the reload register is near
 595:..\Source\portable\GCC\ARM_CM3/port.c **** 			zero. */
 596:..\Source\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 597:..\Source\portable\GCC\ARM_CM3/port.c **** 			portENTER_CRITICAL();
 598:..\Source\portable\GCC\ARM_CM3/port.c **** 			{
 599:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 600:..\Source\portable\GCC\ARM_CM3/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 601:..\Source\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 602:..\Source\portable\GCC\ARM_CM3/port.c **** 			}
 603:..\Source\portable\GCC\ARM_CM3/port.c **** 			portEXIT_CRITICAL();
 604:..\Source\portable\GCC\ARM_CM3/port.c **** 		}
 605:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 606:..\Source\portable\GCC\ARM_CM3/port.c **** 
 607:..\Source\portable\GCC\ARM_CM3/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 608:..\Source\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 609:..\Source\portable\GCC\ARM_CM3/port.c **** 
 610:..\Source\portable\GCC\ARM_CM3/port.c **** /*
 611:..\Source\portable\GCC\ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 612:..\Source\portable\GCC\ARM_CM3/port.c ****  * frequency.
 613:..\Source\portable\GCC\ARM_CM3/port.c ****  */
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 26


 614:..\Source\portable\GCC\ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 615:..\Source\portable\GCC\ARM_CM3/port.c **** {
 537              		.loc 1 615 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542 0000 80B4     		push	{r7}
 543              		.cfi_def_cfa_offset 4
 544              		.cfi_offset 7, -4
 545 0002 00AF     		add	r7, sp, #0
 546              		.cfi_def_cfa_register 7
 616:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 617:..\Source\portable\GCC\ARM_CM3/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 618:..\Source\portable\GCC\ARM_CM3/port.c **** 	{
 619:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 620:..\Source\portable\GCC\ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 621:..\Source\portable\GCC\ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 622:..\Source\portable\GCC\ARM_CM3/port.c **** 	}
 623:..\Source\portable\GCC\ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 624:..\Source\portable\GCC\ARM_CM3/port.c **** 
 625:..\Source\portable\GCC\ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 626:..\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 547              		.loc 1 626 0
 548 0004 054B     		ldr	r3, .L27
 549 0006 4BF67F32 		movw	r2, #47999
 550 000a 1A60     		str	r2, [r3]
 627:..\Source\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 551              		.loc 1 627 0
 552 000c 044B     		ldr	r3, .L27+4
 553 000e 0722     		movs	r2, #7
 554 0010 1A60     		str	r2, [r3]
 628:..\Source\portable\GCC\ARM_CM3/port.c **** }
 555              		.loc 1 628 0
 556 0012 BD46     		mov	sp, r7
 557              		.cfi_def_cfa_register 13
 558              		@ sp needed
 559 0014 5DF8047B 		ldr	r7, [sp], #4
 560              		.cfi_restore 7
 561              		.cfi_def_cfa_offset 0
 562 0018 7047     		bx	lr
 563              	.L28:
 564 001a 00BF     		.align	2
 565              	.L27:
 566 001c 14E000E0 		.word	-536813548
 567 0020 10E000E0 		.word	-536813552
 568              		.cfi_endproc
 569              	.LFE78:
 570              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 571              		.text
 572              	.Letext0:
 573              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 574              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 575              		.file 5 "..\\Source\\include/projdefs.h"
 576              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 577              		.section	.debug_info,"",%progbits
 578              	.Ldebug_info0:
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 27


 579 0000 00030000 		.4byte	0x300
 580 0004 0400     		.2byte	0x4
 581 0006 00000000 		.4byte	.Ldebug_abbrev0
 582 000a 04       		.byte	0x4
 583 000b 01       		.uleb128 0x1
 584 000c 62000000 		.4byte	.LASF34
 585 0010 01       		.byte	0x1
 586 0011 1A010000 		.4byte	.LASF35
 587 0015 0C030000 		.4byte	.LASF36
 588 0019 00000000 		.4byte	.Ldebug_ranges0+0
 589 001d 00000000 		.4byte	0
 590 0021 00000000 		.4byte	.Ldebug_line0
 591 0025 02       		.uleb128 0x2
 592 0026 04       		.byte	0x4
 593 0027 05       		.byte	0x5
 594 0028 696E7400 		.ascii	"int\000"
 595 002c 03       		.uleb128 0x3
 596 002d 04       		.byte	0x4
 597 002e 07       		.byte	0x7
 598 002f D0010000 		.4byte	.LASF0
 599 0033 03       		.uleb128 0x3
 600 0034 01       		.byte	0x1
 601 0035 06       		.byte	0x6
 602 0036 CA020000 		.4byte	.LASF1
 603 003a 03       		.uleb128 0x3
 604 003b 01       		.byte	0x1
 605 003c 08       		.byte	0x8
 606 003d 40010000 		.4byte	.LASF2
 607 0041 03       		.uleb128 0x3
 608 0042 02       		.byte	0x2
 609 0043 05       		.byte	0x5
 610 0044 75020000 		.4byte	.LASF3
 611 0048 03       		.uleb128 0x3
 612 0049 02       		.byte	0x2
 613 004a 07       		.byte	0x7
 614 004b 6B010000 		.4byte	.LASF4
 615 004f 04       		.uleb128 0x4
 616 0050 4F000000 		.4byte	.LASF6
 617 0054 03       		.byte	0x3
 618 0055 3F       		.byte	0x3f
 619 0056 5A000000 		.4byte	0x5a
 620 005a 03       		.uleb128 0x3
 621 005b 04       		.byte	0x4
 622 005c 05       		.byte	0x5
 623 005d 59000000 		.4byte	.LASF5
 624 0061 04       		.uleb128 0x4
 625 0062 4E010000 		.4byte	.LASF7
 626 0066 03       		.byte	0x3
 627 0067 41       		.byte	0x41
 628 0068 6C000000 		.4byte	0x6c
 629 006c 03       		.uleb128 0x3
 630 006d 04       		.byte	0x4
 631 006e 07       		.byte	0x7
 632 006f 59010000 		.4byte	.LASF8
 633 0073 03       		.uleb128 0x3
 634 0074 08       		.byte	0x8
 635 0075 05       		.byte	0x5
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 28


 636 0076 46020000 		.4byte	.LASF9
 637 007a 03       		.uleb128 0x3
 638 007b 08       		.byte	0x8
 639 007c 07       		.byte	0x7
 640 007d EA010000 		.4byte	.LASF10
 641 0081 04       		.uleb128 0x4
 642 0082 12010000 		.4byte	.LASF11
 643 0086 04       		.byte	0x4
 644 0087 2C       		.byte	0x2c
 645 0088 4F000000 		.4byte	0x4f
 646 008c 04       		.uleb128 0x4
 647 008d 91020000 		.4byte	.LASF12
 648 0091 04       		.byte	0x4
 649 0092 2D       		.byte	0x2d
 650 0093 61000000 		.4byte	0x61
 651 0097 03       		.uleb128 0x3
 652 0098 04       		.byte	0x4
 653 0099 04       		.byte	0x4
 654 009a 49000000 		.4byte	.LASF13
 655 009e 03       		.uleb128 0x3
 656 009f 08       		.byte	0x8
 657 00a0 04       		.byte	0x4
 658 00a1 8B010000 		.4byte	.LASF14
 659 00a5 03       		.uleb128 0x3
 660 00a6 01       		.byte	0x1
 661 00a7 08       		.byte	0x8
 662 00a8 54020000 		.4byte	.LASF15
 663 00ac 03       		.uleb128 0x3
 664 00ad 04       		.byte	0x4
 665 00ae 07       		.byte	0x7
 666 00af 3D020000 		.4byte	.LASF16
 667 00b3 05       		.uleb128 0x5
 668 00b4 04       		.byte	0x4
 669 00b5 04       		.uleb128 0x4
 670 00b6 03010000 		.4byte	.LASF17
 671 00ba 05       		.byte	0x5
 672 00bb 4D       		.byte	0x4d
 673 00bc C0000000 		.4byte	0xc0
 674 00c0 06       		.uleb128 0x6
 675 00c1 04       		.byte	0x4
 676 00c2 C6000000 		.4byte	0xc6
 677 00c6 07       		.uleb128 0x7
 678 00c7 D1000000 		.4byte	0xd1
 679 00cb 08       		.uleb128 0x8
 680 00cc B3000000 		.4byte	0xb3
 681 00d0 00       		.byte	0
 682 00d1 04       		.uleb128 0x4
 683 00d2 59020000 		.4byte	.LASF18
 684 00d6 02       		.byte	0x2
 685 00d7 61       		.byte	0x61
 686 00d8 8C000000 		.4byte	0x8c
 687 00dc 04       		.uleb128 0x4
 688 00dd A9020000 		.4byte	.LASF19
 689 00e1 02       		.byte	0x2
 690 00e2 62       		.byte	0x62
 691 00e3 5A000000 		.4byte	0x5a
 692 00e7 04       		.uleb128 0x4
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 29


 693 00e8 EA020000 		.4byte	.LASF20
 694 00ec 02       		.byte	0x2
 695 00ed 63       		.byte	0x63
 696 00ee 6C000000 		.4byte	0x6c
 697 00f2 04       		.uleb128 0x4
 698 00f3 3E000000 		.4byte	.LASF21
 699 00f7 02       		.byte	0x2
 700 00f8 69       		.byte	0x69
 701 00f9 8C000000 		.4byte	0x8c
 702 00fd 06       		.uleb128 0x6
 703 00fe 04       		.byte	0x4
 704 00ff D1000000 		.4byte	0xd1
 705 0103 09       		.uleb128 0x9
 706 0104 01020000 		.4byte	.LASF22
 707 0108 02       		.byte	0x2
 708 0109 E9       		.byte	0xe9
 709 010a 03       		.byte	0x3
 710 010b 1B010000 		.4byte	0x11b
 711 010f 0A       		.uleb128 0xa
 712 0110 92010000 		.4byte	.LASF37
 713 0114 02       		.byte	0x2
 714 0115 EB       		.byte	0xeb
 715 0116 8C000000 		.4byte	0x8c
 716 011a 00       		.byte	0
 717 011b 0B       		.uleb128 0xb
 718 011c AC010000 		.4byte	.LASF23
 719 0120 02       		.byte	0x2
 720 0121 0D01     		.2byte	0x10d
 721 0123 03       		.byte	0x3
 722 0124 35010000 		.4byte	0x135
 723 0128 0C       		.uleb128 0xc
 724 0129 9A020000 		.4byte	.LASF38
 725 012d 02       		.byte	0x2
 726 012e 0D01     		.2byte	0x10d
 727 0130 8C000000 		.4byte	0x8c
 728 0134 00       		.byte	0
 729 0135 0D       		.uleb128 0xd
 730 0136 F6020000 		.4byte	.LASF39
 731 013a 01       		.byte	0x1
 732 013b D8       		.byte	0xd8
 733 013c FD000000 		.4byte	0xfd
 734 0140 00000000 		.4byte	.LFB68
 735 0144 5C000000 		.4byte	.LFE68-.LFB68
 736 0148 01       		.uleb128 0x1
 737 0149 9C       		.byte	0x9c
 738 014a 79010000 		.4byte	0x179
 739 014e 0E       		.uleb128 0xe
 740 014f DD010000 		.4byte	.LASF24
 741 0153 01       		.byte	0x1
 742 0154 D8       		.byte	0xd8
 743 0155 FD000000 		.4byte	0xfd
 744 0159 02       		.uleb128 0x2
 745 015a 91       		.byte	0x91
 746 015b 74       		.sleb128 -12
 747 015c 0E       		.uleb128 0xe
 748 015d 25000000 		.4byte	.LASF25
 749 0161 01       		.byte	0x1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 30


 750 0162 D8       		.byte	0xd8
 751 0163 B5000000 		.4byte	0xb5
 752 0167 02       		.uleb128 0x2
 753 0168 91       		.byte	0x91
 754 0169 70       		.sleb128 -16
 755 016a 0E       		.uleb128 0xe
 756 016b 9F010000 		.4byte	.LASF26
 757 016f 01       		.byte	0x1
 758 0170 D8       		.byte	0xd8
 759 0171 B3000000 		.4byte	0xb3
 760 0175 02       		.uleb128 0x2
 761 0176 91       		.byte	0x91
 762 0177 6C       		.sleb128 -20
 763 0178 00       		.byte	0
 764 0179 0F       		.uleb128 0xf
 765 017a 13020000 		.4byte	.LASF40
 766 017e 01       		.byte	0x1
 767 017f EA       		.byte	0xea
 768 0180 00000000 		.4byte	.LFB69
 769 0184 1A000000 		.4byte	.LFE69-.LFB69
 770 0188 01       		.uleb128 0x1
 771 0189 9C       		.byte	0x9c
 772 018a B1010000 		.4byte	0x1b1
 773 018e 10       		.uleb128 0x10
 774 018f 03010000 		.4byte	0x103
 775 0193 06000000 		.4byte	.LBB12
 776 0197 12000000 		.4byte	.LBE12-.LBB12
 777 019b 01       		.byte	0x1
 778 019c F3       		.byte	0xf3
 779 019d 11       		.uleb128 0x11
 780 019e 06000000 		.4byte	.LBB13
 781 01a2 12000000 		.4byte	.LBE13-.LBB13
 782 01a6 12       		.uleb128 0x12
 783 01a7 0F010000 		.4byte	0x10f
 784 01ab 02       		.uleb128 0x2
 785 01ac 91       		.byte	0x91
 786 01ad 74       		.sleb128 -12
 787 01ae 00       		.byte	0
 788 01af 00       		.byte	0
 789 01b0 00       		.byte	0
 790 01b1 13       		.uleb128 0x13
 791 01b2 65020000 		.4byte	.LASF27
 792 01b6 01       		.byte	0x1
 793 01b7 F8       		.byte	0xf8
 794 01b8 00000000 		.4byte	.LFB70
 795 01bc 24000000 		.4byte	.LFE70-.LFB70
 796 01c0 01       		.uleb128 0x1
 797 01c1 9C       		.byte	0x9c
 798 01c2 14       		.uleb128 0x14
 799 01c3 B4020000 		.4byte	.LASF41
 800 01c7 01       		.byte	0x1
 801 01c8 0C01     		.2byte	0x10c
 802 01ca 00000000 		.4byte	.LFB71
 803 01ce 1A000000 		.4byte	.LFE71-.LFB71
 804 01d2 01       		.uleb128 0x1
 805 01d3 9C       		.byte	0x9c
 806 01d4 15       		.uleb128 0x15
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 31


 807 01d5 D6020000 		.4byte	.LASF42
 808 01d9 01       		.byte	0x1
 809 01da 2001     		.2byte	0x120
 810 01dc DC000000 		.4byte	0xdc
 811 01e0 00000000 		.4byte	.LFB72
 812 01e4 3C000000 		.4byte	.LFE72-.LFB72
 813 01e8 01       		.uleb128 0x1
 814 01e9 9C       		.byte	0x9c
 815 01ea 16       		.uleb128 0x16
 816 01eb 2C000000 		.4byte	.LASF28
 817 01ef 01       		.byte	0x1
 818 01f0 6B01     		.2byte	0x16b
 819 01f2 00000000 		.4byte	.LFB73
 820 01f6 0C000000 		.4byte	.LFE73-.LFB73
 821 01fa 01       		.uleb128 0x1
 822 01fb 9C       		.byte	0x9c
 823 01fc 17       		.uleb128 0x17
 824 01fd 12000000 		.4byte	.LASF29
 825 0201 01       		.byte	0x1
 826 0202 7301     		.2byte	0x173
 827 0204 00000000 		.4byte	.LFB74
 828 0208 30000000 		.4byte	.LFE74-.LFB74
 829 020c 01       		.uleb128 0x1
 830 020d 9C       		.byte	0x9c
 831 020e 36020000 		.4byte	0x236
 832 0212 18       		.uleb128 0x18
 833 0213 03010000 		.4byte	0x103
 834 0217 06000000 		.4byte	.LBB14
 835 021b 12000000 		.4byte	.LBE14-.LBB14
 836 021f 01       		.byte	0x1
 837 0220 7501     		.2byte	0x175
 838 0222 11       		.uleb128 0x11
 839 0223 06000000 		.4byte	.LBB15
 840 0227 12000000 		.4byte	.LBE15-.LBB15
 841 022b 12       		.uleb128 0x12
 842 022c 0F010000 		.4byte	0x10f
 843 0230 02       		.uleb128 0x2
 844 0231 91       		.byte	0x91
 845 0232 74       		.sleb128 -12
 846 0233 00       		.byte	0
 847 0234 00       		.byte	0
 848 0235 00       		.byte	0
 849 0236 17       		.uleb128 0x17
 850 0237 7F020000 		.4byte	.LASF30
 851 023b 01       		.byte	0x1
 852 023c 8401     		.2byte	0x184
 853 023e 00000000 		.4byte	.LFB75
 854 0242 30000000 		.4byte	.LFE75-.LFB75
 855 0246 01       		.uleb128 0x1
 856 0247 9C       		.byte	0x9c
 857 0248 66020000 		.4byte	0x266
 858 024c 18       		.uleb128 0x18
 859 024d 1B010000 		.4byte	0x11b
 860 0251 1C000000 		.4byte	.LBB16
 861 0255 06000000 		.4byte	.LBE16-.LBB16
 862 0259 01       		.byte	0x1
 863 025a 8A01     		.2byte	0x18a
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 32


 864 025c 19       		.uleb128 0x19
 865 025d 28010000 		.4byte	0x128
 866 0261 02       		.uleb128 0x2
 867 0262 91       		.byte	0x91
 868 0263 74       		.sleb128 -12
 869 0264 00       		.byte	0
 870 0265 00       		.byte	0
 871 0266 16       		.uleb128 0x16
 872 0267 F0000000 		.4byte	.LASF31
 873 026b 01       		.byte	0x1
 874 026c 8F01     		.2byte	0x18f
 875 026e 00000000 		.4byte	.LFB76
 876 0272 44000000 		.4byte	.LFE76-.LFB76
 877 0276 01       		.uleb128 0x1
 878 0277 9C       		.byte	0x9c
 879 0278 1A       		.uleb128 0x1a
 880 0279 BC010000 		.4byte	.LASF32
 881 027d 01       		.byte	0x1
 882 027e B401     		.2byte	0x1b4
 883 0280 00000000 		.4byte	.LFB77
 884 0284 40000000 		.4byte	.LFE77-.LFB77
 885 0288 01       		.uleb128 0x1
 886 0289 9C       		.byte	0x9c
 887 028a CF020000 		.4byte	0x2cf
 888 028e 1B       		.uleb128 0x1b
 889 028f 03010000 		.4byte	0x103
 890 0293 06000000 		.4byte	.LBB18
 891 0297 12000000 		.4byte	.LBE18-.LBB18
 892 029b 01       		.byte	0x1
 893 029c BA01     		.2byte	0x1ba
 894 029e B5020000 		.4byte	0x2b5
 895 02a2 11       		.uleb128 0x11
 896 02a3 06000000 		.4byte	.LBB19
 897 02a7 12000000 		.4byte	.LBE19-.LBB19
 898 02ab 12       		.uleb128 0x12
 899 02ac 0F010000 		.4byte	0x10f
 900 02b0 02       		.uleb128 0x2
 901 02b1 91       		.byte	0x91
 902 02b2 74       		.sleb128 -12
 903 02b3 00       		.byte	0
 904 02b4 00       		.byte	0
 905 02b5 18       		.uleb128 0x18
 906 02b6 1B010000 		.4byte	0x11b
 907 02ba 2E000000 		.4byte	.LBB20
 908 02be 06000000 		.4byte	.LBE20-.LBB20
 909 02c2 01       		.byte	0x1
 910 02c3 C401     		.2byte	0x1c4
 911 02c5 19       		.uleb128 0x19
 912 02c6 28010000 		.4byte	0x128
 913 02ca 02       		.uleb128 0x2
 914 02cb 91       		.byte	0x91
 915 02cc 70       		.sleb128 -16
 916 02cd 00       		.byte	0
 917 02ce 00       		.byte	0
 918 02cf 16       		.uleb128 0x16
 919 02d0 24020000 		.4byte	.LASF33
 920 02d4 01       		.byte	0x1
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 33


 921 02d5 6602     		.2byte	0x266
 922 02d7 00000000 		.4byte	.LFB78
 923 02db 24000000 		.4byte	.LFE78-.LFB78
 924 02df 01       		.uleb128 0x1
 925 02e0 9C       		.byte	0x9c
 926 02e1 1C       		.uleb128 0x1c
 927 02e2 00000000 		.4byte	.LASF43
 928 02e6 01       		.byte	0x1
 929 02e7 95       		.byte	0x95
 930 02e8 E7000000 		.4byte	0xe7
 931 02ec 05       		.uleb128 0x5
 932 02ed 03       		.byte	0x3
 933 02ee 00000000 		.4byte	uxCriticalNesting
 934 02f2 1D       		.uleb128 0x1d
 935 02f3 7E010000 		.4byte	.LASF44
 936 02f7 06       		.byte	0x6
 937 02f8 9606     		.2byte	0x696
 938 02fa FE020000 		.4byte	0x2fe
 939 02fe 1E       		.uleb128 0x1e
 940 02ff 81000000 		.4byte	0x81
 941 0303 00       		.byte	0
 942              		.section	.debug_abbrev,"",%progbits
 943              	.Ldebug_abbrev0:
 944 0000 01       		.uleb128 0x1
 945 0001 11       		.uleb128 0x11
 946 0002 01       		.byte	0x1
 947 0003 25       		.uleb128 0x25
 948 0004 0E       		.uleb128 0xe
 949 0005 13       		.uleb128 0x13
 950 0006 0B       		.uleb128 0xb
 951 0007 03       		.uleb128 0x3
 952 0008 0E       		.uleb128 0xe
 953 0009 1B       		.uleb128 0x1b
 954 000a 0E       		.uleb128 0xe
 955 000b 55       		.uleb128 0x55
 956 000c 17       		.uleb128 0x17
 957 000d 11       		.uleb128 0x11
 958 000e 01       		.uleb128 0x1
 959 000f 10       		.uleb128 0x10
 960 0010 17       		.uleb128 0x17
 961 0011 00       		.byte	0
 962 0012 00       		.byte	0
 963 0013 02       		.uleb128 0x2
 964 0014 24       		.uleb128 0x24
 965 0015 00       		.byte	0
 966 0016 0B       		.uleb128 0xb
 967 0017 0B       		.uleb128 0xb
 968 0018 3E       		.uleb128 0x3e
 969 0019 0B       		.uleb128 0xb
 970 001a 03       		.uleb128 0x3
 971 001b 08       		.uleb128 0x8
 972 001c 00       		.byte	0
 973 001d 00       		.byte	0
 974 001e 03       		.uleb128 0x3
 975 001f 24       		.uleb128 0x24
 976 0020 00       		.byte	0
 977 0021 0B       		.uleb128 0xb
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 34


 978 0022 0B       		.uleb128 0xb
 979 0023 3E       		.uleb128 0x3e
 980 0024 0B       		.uleb128 0xb
 981 0025 03       		.uleb128 0x3
 982 0026 0E       		.uleb128 0xe
 983 0027 00       		.byte	0
 984 0028 00       		.byte	0
 985 0029 04       		.uleb128 0x4
 986 002a 16       		.uleb128 0x16
 987 002b 00       		.byte	0
 988 002c 03       		.uleb128 0x3
 989 002d 0E       		.uleb128 0xe
 990 002e 3A       		.uleb128 0x3a
 991 002f 0B       		.uleb128 0xb
 992 0030 3B       		.uleb128 0x3b
 993 0031 0B       		.uleb128 0xb
 994 0032 49       		.uleb128 0x49
 995 0033 13       		.uleb128 0x13
 996 0034 00       		.byte	0
 997 0035 00       		.byte	0
 998 0036 05       		.uleb128 0x5
 999 0037 0F       		.uleb128 0xf
 1000 0038 00       		.byte	0
 1001 0039 0B       		.uleb128 0xb
 1002 003a 0B       		.uleb128 0xb
 1003 003b 00       		.byte	0
 1004 003c 00       		.byte	0
 1005 003d 06       		.uleb128 0x6
 1006 003e 0F       		.uleb128 0xf
 1007 003f 00       		.byte	0
 1008 0040 0B       		.uleb128 0xb
 1009 0041 0B       		.uleb128 0xb
 1010 0042 49       		.uleb128 0x49
 1011 0043 13       		.uleb128 0x13
 1012 0044 00       		.byte	0
 1013 0045 00       		.byte	0
 1014 0046 07       		.uleb128 0x7
 1015 0047 15       		.uleb128 0x15
 1016 0048 01       		.byte	0x1
 1017 0049 27       		.uleb128 0x27
 1018 004a 19       		.uleb128 0x19
 1019 004b 01       		.uleb128 0x1
 1020 004c 13       		.uleb128 0x13
 1021 004d 00       		.byte	0
 1022 004e 00       		.byte	0
 1023 004f 08       		.uleb128 0x8
 1024 0050 05       		.uleb128 0x5
 1025 0051 00       		.byte	0
 1026 0052 49       		.uleb128 0x49
 1027 0053 13       		.uleb128 0x13
 1028 0054 00       		.byte	0
 1029 0055 00       		.byte	0
 1030 0056 09       		.uleb128 0x9
 1031 0057 2E       		.uleb128 0x2e
 1032 0058 01       		.byte	0x1
 1033 0059 03       		.uleb128 0x3
 1034 005a 0E       		.uleb128 0xe
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 35


 1035 005b 3A       		.uleb128 0x3a
 1036 005c 0B       		.uleb128 0xb
 1037 005d 3B       		.uleb128 0x3b
 1038 005e 0B       		.uleb128 0xb
 1039 005f 27       		.uleb128 0x27
 1040 0060 19       		.uleb128 0x19
 1041 0061 20       		.uleb128 0x20
 1042 0062 0B       		.uleb128 0xb
 1043 0063 01       		.uleb128 0x1
 1044 0064 13       		.uleb128 0x13
 1045 0065 00       		.byte	0
 1046 0066 00       		.byte	0
 1047 0067 0A       		.uleb128 0xa
 1048 0068 34       		.uleb128 0x34
 1049 0069 00       		.byte	0
 1050 006a 03       		.uleb128 0x3
 1051 006b 0E       		.uleb128 0xe
 1052 006c 3A       		.uleb128 0x3a
 1053 006d 0B       		.uleb128 0xb
 1054 006e 3B       		.uleb128 0x3b
 1055 006f 0B       		.uleb128 0xb
 1056 0070 49       		.uleb128 0x49
 1057 0071 13       		.uleb128 0x13
 1058 0072 00       		.byte	0
 1059 0073 00       		.byte	0
 1060 0074 0B       		.uleb128 0xb
 1061 0075 2E       		.uleb128 0x2e
 1062 0076 01       		.byte	0x1
 1063 0077 03       		.uleb128 0x3
 1064 0078 0E       		.uleb128 0xe
 1065 0079 3A       		.uleb128 0x3a
 1066 007a 0B       		.uleb128 0xb
 1067 007b 3B       		.uleb128 0x3b
 1068 007c 05       		.uleb128 0x5
 1069 007d 27       		.uleb128 0x27
 1070 007e 19       		.uleb128 0x19
 1071 007f 20       		.uleb128 0x20
 1072 0080 0B       		.uleb128 0xb
 1073 0081 01       		.uleb128 0x1
 1074 0082 13       		.uleb128 0x13
 1075 0083 00       		.byte	0
 1076 0084 00       		.byte	0
 1077 0085 0C       		.uleb128 0xc
 1078 0086 05       		.uleb128 0x5
 1079 0087 00       		.byte	0
 1080 0088 03       		.uleb128 0x3
 1081 0089 0E       		.uleb128 0xe
 1082 008a 3A       		.uleb128 0x3a
 1083 008b 0B       		.uleb128 0xb
 1084 008c 3B       		.uleb128 0x3b
 1085 008d 05       		.uleb128 0x5
 1086 008e 49       		.uleb128 0x49
 1087 008f 13       		.uleb128 0x13
 1088 0090 00       		.byte	0
 1089 0091 00       		.byte	0
 1090 0092 0D       		.uleb128 0xd
 1091 0093 2E       		.uleb128 0x2e
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 36


 1092 0094 01       		.byte	0x1
 1093 0095 3F       		.uleb128 0x3f
 1094 0096 19       		.uleb128 0x19
 1095 0097 03       		.uleb128 0x3
 1096 0098 0E       		.uleb128 0xe
 1097 0099 3A       		.uleb128 0x3a
 1098 009a 0B       		.uleb128 0xb
 1099 009b 3B       		.uleb128 0x3b
 1100 009c 0B       		.uleb128 0xb
 1101 009d 27       		.uleb128 0x27
 1102 009e 19       		.uleb128 0x19
 1103 009f 49       		.uleb128 0x49
 1104 00a0 13       		.uleb128 0x13
 1105 00a1 11       		.uleb128 0x11
 1106 00a2 01       		.uleb128 0x1
 1107 00a3 12       		.uleb128 0x12
 1108 00a4 06       		.uleb128 0x6
 1109 00a5 40       		.uleb128 0x40
 1110 00a6 18       		.uleb128 0x18
 1111 00a7 9742     		.uleb128 0x2117
 1112 00a9 19       		.uleb128 0x19
 1113 00aa 01       		.uleb128 0x1
 1114 00ab 13       		.uleb128 0x13
 1115 00ac 00       		.byte	0
 1116 00ad 00       		.byte	0
 1117 00ae 0E       		.uleb128 0xe
 1118 00af 05       		.uleb128 0x5
 1119 00b0 00       		.byte	0
 1120 00b1 03       		.uleb128 0x3
 1121 00b2 0E       		.uleb128 0xe
 1122 00b3 3A       		.uleb128 0x3a
 1123 00b4 0B       		.uleb128 0xb
 1124 00b5 3B       		.uleb128 0x3b
 1125 00b6 0B       		.uleb128 0xb
 1126 00b7 49       		.uleb128 0x49
 1127 00b8 13       		.uleb128 0x13
 1128 00b9 02       		.uleb128 0x2
 1129 00ba 18       		.uleb128 0x18
 1130 00bb 00       		.byte	0
 1131 00bc 00       		.byte	0
 1132 00bd 0F       		.uleb128 0xf
 1133 00be 2E       		.uleb128 0x2e
 1134 00bf 01       		.byte	0x1
 1135 00c0 03       		.uleb128 0x3
 1136 00c1 0E       		.uleb128 0xe
 1137 00c2 3A       		.uleb128 0x3a
 1138 00c3 0B       		.uleb128 0xb
 1139 00c4 3B       		.uleb128 0x3b
 1140 00c5 0B       		.uleb128 0xb
 1141 00c6 27       		.uleb128 0x27
 1142 00c7 19       		.uleb128 0x19
 1143 00c8 11       		.uleb128 0x11
 1144 00c9 01       		.uleb128 0x1
 1145 00ca 12       		.uleb128 0x12
 1146 00cb 06       		.uleb128 0x6
 1147 00cc 40       		.uleb128 0x40
 1148 00cd 18       		.uleb128 0x18
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 37


 1149 00ce 9742     		.uleb128 0x2117
 1150 00d0 19       		.uleb128 0x19
 1151 00d1 01       		.uleb128 0x1
 1152 00d2 13       		.uleb128 0x13
 1153 00d3 00       		.byte	0
 1154 00d4 00       		.byte	0
 1155 00d5 10       		.uleb128 0x10
 1156 00d6 1D       		.uleb128 0x1d
 1157 00d7 01       		.byte	0x1
 1158 00d8 31       		.uleb128 0x31
 1159 00d9 13       		.uleb128 0x13
 1160 00da 11       		.uleb128 0x11
 1161 00db 01       		.uleb128 0x1
 1162 00dc 12       		.uleb128 0x12
 1163 00dd 06       		.uleb128 0x6
 1164 00de 58       		.uleb128 0x58
 1165 00df 0B       		.uleb128 0xb
 1166 00e0 59       		.uleb128 0x59
 1167 00e1 0B       		.uleb128 0xb
 1168 00e2 00       		.byte	0
 1169 00e3 00       		.byte	0
 1170 00e4 11       		.uleb128 0x11
 1171 00e5 0B       		.uleb128 0xb
 1172 00e6 01       		.byte	0x1
 1173 00e7 11       		.uleb128 0x11
 1174 00e8 01       		.uleb128 0x1
 1175 00e9 12       		.uleb128 0x12
 1176 00ea 06       		.uleb128 0x6
 1177 00eb 00       		.byte	0
 1178 00ec 00       		.byte	0
 1179 00ed 12       		.uleb128 0x12
 1180 00ee 34       		.uleb128 0x34
 1181 00ef 00       		.byte	0
 1182 00f0 31       		.uleb128 0x31
 1183 00f1 13       		.uleb128 0x13
 1184 00f2 02       		.uleb128 0x2
 1185 00f3 18       		.uleb128 0x18
 1186 00f4 00       		.byte	0
 1187 00f5 00       		.byte	0
 1188 00f6 13       		.uleb128 0x13
 1189 00f7 2E       		.uleb128 0x2e
 1190 00f8 00       		.byte	0
 1191 00f9 3F       		.uleb128 0x3f
 1192 00fa 19       		.uleb128 0x19
 1193 00fb 03       		.uleb128 0x3
 1194 00fc 0E       		.uleb128 0xe
 1195 00fd 3A       		.uleb128 0x3a
 1196 00fe 0B       		.uleb128 0xb
 1197 00ff 3B       		.uleb128 0x3b
 1198 0100 0B       		.uleb128 0xb
 1199 0101 27       		.uleb128 0x27
 1200 0102 19       		.uleb128 0x19
 1201 0103 11       		.uleb128 0x11
 1202 0104 01       		.uleb128 0x1
 1203 0105 12       		.uleb128 0x12
 1204 0106 06       		.uleb128 0x6
 1205 0107 40       		.uleb128 0x40
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 38


 1206 0108 18       		.uleb128 0x18
 1207 0109 9742     		.uleb128 0x2117
 1208 010b 19       		.uleb128 0x19
 1209 010c 00       		.byte	0
 1210 010d 00       		.byte	0
 1211 010e 14       		.uleb128 0x14
 1212 010f 2E       		.uleb128 0x2e
 1213 0110 00       		.byte	0
 1214 0111 03       		.uleb128 0x3
 1215 0112 0E       		.uleb128 0xe
 1216 0113 3A       		.uleb128 0x3a
 1217 0114 0B       		.uleb128 0xb
 1218 0115 3B       		.uleb128 0x3b
 1219 0116 05       		.uleb128 0x5
 1220 0117 27       		.uleb128 0x27
 1221 0118 19       		.uleb128 0x19
 1222 0119 11       		.uleb128 0x11
 1223 011a 01       		.uleb128 0x1
 1224 011b 12       		.uleb128 0x12
 1225 011c 06       		.uleb128 0x6
 1226 011d 40       		.uleb128 0x40
 1227 011e 18       		.uleb128 0x18
 1228 011f 9742     		.uleb128 0x2117
 1229 0121 19       		.uleb128 0x19
 1230 0122 00       		.byte	0
 1231 0123 00       		.byte	0
 1232 0124 15       		.uleb128 0x15
 1233 0125 2E       		.uleb128 0x2e
 1234 0126 00       		.byte	0
 1235 0127 3F       		.uleb128 0x3f
 1236 0128 19       		.uleb128 0x19
 1237 0129 03       		.uleb128 0x3
 1238 012a 0E       		.uleb128 0xe
 1239 012b 3A       		.uleb128 0x3a
 1240 012c 0B       		.uleb128 0xb
 1241 012d 3B       		.uleb128 0x3b
 1242 012e 05       		.uleb128 0x5
 1243 012f 27       		.uleb128 0x27
 1244 0130 19       		.uleb128 0x19
 1245 0131 49       		.uleb128 0x49
 1246 0132 13       		.uleb128 0x13
 1247 0133 11       		.uleb128 0x11
 1248 0134 01       		.uleb128 0x1
 1249 0135 12       		.uleb128 0x12
 1250 0136 06       		.uleb128 0x6
 1251 0137 40       		.uleb128 0x40
 1252 0138 18       		.uleb128 0x18
 1253 0139 9642     		.uleb128 0x2116
 1254 013b 19       		.uleb128 0x19
 1255 013c 00       		.byte	0
 1256 013d 00       		.byte	0
 1257 013e 16       		.uleb128 0x16
 1258 013f 2E       		.uleb128 0x2e
 1259 0140 00       		.byte	0
 1260 0141 3F       		.uleb128 0x3f
 1261 0142 19       		.uleb128 0x19
 1262 0143 03       		.uleb128 0x3
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 39


 1263 0144 0E       		.uleb128 0xe
 1264 0145 3A       		.uleb128 0x3a
 1265 0146 0B       		.uleb128 0xb
 1266 0147 3B       		.uleb128 0x3b
 1267 0148 05       		.uleb128 0x5
 1268 0149 27       		.uleb128 0x27
 1269 014a 19       		.uleb128 0x19
 1270 014b 11       		.uleb128 0x11
 1271 014c 01       		.uleb128 0x1
 1272 014d 12       		.uleb128 0x12
 1273 014e 06       		.uleb128 0x6
 1274 014f 40       		.uleb128 0x40
 1275 0150 18       		.uleb128 0x18
 1276 0151 9742     		.uleb128 0x2117
 1277 0153 19       		.uleb128 0x19
 1278 0154 00       		.byte	0
 1279 0155 00       		.byte	0
 1280 0156 17       		.uleb128 0x17
 1281 0157 2E       		.uleb128 0x2e
 1282 0158 01       		.byte	0x1
 1283 0159 3F       		.uleb128 0x3f
 1284 015a 19       		.uleb128 0x19
 1285 015b 03       		.uleb128 0x3
 1286 015c 0E       		.uleb128 0xe
 1287 015d 3A       		.uleb128 0x3a
 1288 015e 0B       		.uleb128 0xb
 1289 015f 3B       		.uleb128 0x3b
 1290 0160 05       		.uleb128 0x5
 1291 0161 27       		.uleb128 0x27
 1292 0162 19       		.uleb128 0x19
 1293 0163 11       		.uleb128 0x11
 1294 0164 01       		.uleb128 0x1
 1295 0165 12       		.uleb128 0x12
 1296 0166 06       		.uleb128 0x6
 1297 0167 40       		.uleb128 0x40
 1298 0168 18       		.uleb128 0x18
 1299 0169 9742     		.uleb128 0x2117
 1300 016b 19       		.uleb128 0x19
 1301 016c 01       		.uleb128 0x1
 1302 016d 13       		.uleb128 0x13
 1303 016e 00       		.byte	0
 1304 016f 00       		.byte	0
 1305 0170 18       		.uleb128 0x18
 1306 0171 1D       		.uleb128 0x1d
 1307 0172 01       		.byte	0x1
 1308 0173 31       		.uleb128 0x31
 1309 0174 13       		.uleb128 0x13
 1310 0175 11       		.uleb128 0x11
 1311 0176 01       		.uleb128 0x1
 1312 0177 12       		.uleb128 0x12
 1313 0178 06       		.uleb128 0x6
 1314 0179 58       		.uleb128 0x58
 1315 017a 0B       		.uleb128 0xb
 1316 017b 59       		.uleb128 0x59
 1317 017c 05       		.uleb128 0x5
 1318 017d 00       		.byte	0
 1319 017e 00       		.byte	0
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 40


 1320 017f 19       		.uleb128 0x19
 1321 0180 05       		.uleb128 0x5
 1322 0181 00       		.byte	0
 1323 0182 31       		.uleb128 0x31
 1324 0183 13       		.uleb128 0x13
 1325 0184 02       		.uleb128 0x2
 1326 0185 18       		.uleb128 0x18
 1327 0186 00       		.byte	0
 1328 0187 00       		.byte	0
 1329 0188 1A       		.uleb128 0x1a
 1330 0189 2E       		.uleb128 0x2e
 1331 018a 01       		.byte	0x1
 1332 018b 3F       		.uleb128 0x3f
 1333 018c 19       		.uleb128 0x19
 1334 018d 03       		.uleb128 0x3
 1335 018e 0E       		.uleb128 0xe
 1336 018f 3A       		.uleb128 0x3a
 1337 0190 0B       		.uleb128 0xb
 1338 0191 3B       		.uleb128 0x3b
 1339 0192 05       		.uleb128 0x5
 1340 0193 27       		.uleb128 0x27
 1341 0194 19       		.uleb128 0x19
 1342 0195 11       		.uleb128 0x11
 1343 0196 01       		.uleb128 0x1
 1344 0197 12       		.uleb128 0x12
 1345 0198 06       		.uleb128 0x6
 1346 0199 40       		.uleb128 0x40
 1347 019a 18       		.uleb128 0x18
 1348 019b 9642     		.uleb128 0x2116
 1349 019d 19       		.uleb128 0x19
 1350 019e 01       		.uleb128 0x1
 1351 019f 13       		.uleb128 0x13
 1352 01a0 00       		.byte	0
 1353 01a1 00       		.byte	0
 1354 01a2 1B       		.uleb128 0x1b
 1355 01a3 1D       		.uleb128 0x1d
 1356 01a4 01       		.byte	0x1
 1357 01a5 31       		.uleb128 0x31
 1358 01a6 13       		.uleb128 0x13
 1359 01a7 11       		.uleb128 0x11
 1360 01a8 01       		.uleb128 0x1
 1361 01a9 12       		.uleb128 0x12
 1362 01aa 06       		.uleb128 0x6
 1363 01ab 58       		.uleb128 0x58
 1364 01ac 0B       		.uleb128 0xb
 1365 01ad 59       		.uleb128 0x59
 1366 01ae 05       		.uleb128 0x5
 1367 01af 01       		.uleb128 0x1
 1368 01b0 13       		.uleb128 0x13
 1369 01b1 00       		.byte	0
 1370 01b2 00       		.byte	0
 1371 01b3 1C       		.uleb128 0x1c
 1372 01b4 34       		.uleb128 0x34
 1373 01b5 00       		.byte	0
 1374 01b6 03       		.uleb128 0x3
 1375 01b7 0E       		.uleb128 0xe
 1376 01b8 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 41


 1377 01b9 0B       		.uleb128 0xb
 1378 01ba 3B       		.uleb128 0x3b
 1379 01bb 0B       		.uleb128 0xb
 1380 01bc 49       		.uleb128 0x49
 1381 01bd 13       		.uleb128 0x13
 1382 01be 02       		.uleb128 0x2
 1383 01bf 18       		.uleb128 0x18
 1384 01c0 00       		.byte	0
 1385 01c1 00       		.byte	0
 1386 01c2 1D       		.uleb128 0x1d
 1387 01c3 34       		.uleb128 0x34
 1388 01c4 00       		.byte	0
 1389 01c5 03       		.uleb128 0x3
 1390 01c6 0E       		.uleb128 0xe
 1391 01c7 3A       		.uleb128 0x3a
 1392 01c8 0B       		.uleb128 0xb
 1393 01c9 3B       		.uleb128 0x3b
 1394 01ca 05       		.uleb128 0x5
 1395 01cb 49       		.uleb128 0x49
 1396 01cc 13       		.uleb128 0x13
 1397 01cd 3F       		.uleb128 0x3f
 1398 01ce 19       		.uleb128 0x19
 1399 01cf 3C       		.uleb128 0x3c
 1400 01d0 19       		.uleb128 0x19
 1401 01d1 00       		.byte	0
 1402 01d2 00       		.byte	0
 1403 01d3 1E       		.uleb128 0x1e
 1404 01d4 35       		.uleb128 0x35
 1405 01d5 00       		.byte	0
 1406 01d6 49       		.uleb128 0x49
 1407 01d7 13       		.uleb128 0x13
 1408 01d8 00       		.byte	0
 1409 01d9 00       		.byte	0
 1410 01da 00       		.byte	0
 1411              		.section	.debug_aranges,"",%progbits
 1412 0000 6C000000 		.4byte	0x6c
 1413 0004 0200     		.2byte	0x2
 1414 0006 00000000 		.4byte	.Ldebug_info0
 1415 000a 04       		.byte	0x4
 1416 000b 00       		.byte	0
 1417 000c 0000     		.2byte	0
 1418 000e 0000     		.2byte	0
 1419 0010 00000000 		.4byte	.LFB68
 1420 0014 5C000000 		.4byte	.LFE68-.LFB68
 1421 0018 00000000 		.4byte	.LFB69
 1422 001c 1A000000 		.4byte	.LFE69-.LFB69
 1423 0020 00000000 		.4byte	.LFB70
 1424 0024 24000000 		.4byte	.LFE70-.LFB70
 1425 0028 00000000 		.4byte	.LFB71
 1426 002c 1A000000 		.4byte	.LFE71-.LFB71
 1427 0030 00000000 		.4byte	.LFB72
 1428 0034 3C000000 		.4byte	.LFE72-.LFB72
 1429 0038 00000000 		.4byte	.LFB73
 1430 003c 0C000000 		.4byte	.LFE73-.LFB73
 1431 0040 00000000 		.4byte	.LFB74
 1432 0044 30000000 		.4byte	.LFE74-.LFB74
 1433 0048 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 42


 1434 004c 30000000 		.4byte	.LFE75-.LFB75
 1435 0050 00000000 		.4byte	.LFB76
 1436 0054 44000000 		.4byte	.LFE76-.LFB76
 1437 0058 00000000 		.4byte	.LFB77
 1438 005c 40000000 		.4byte	.LFE77-.LFB77
 1439 0060 00000000 		.4byte	.LFB78
 1440 0064 24000000 		.4byte	.LFE78-.LFB78
 1441 0068 00000000 		.4byte	0
 1442 006c 00000000 		.4byte	0
 1443              		.section	.debug_ranges,"",%progbits
 1444              	.Ldebug_ranges0:
 1445 0000 00000000 		.4byte	.LFB68
 1446 0004 5C000000 		.4byte	.LFE68
 1447 0008 00000000 		.4byte	.LFB69
 1448 000c 1A000000 		.4byte	.LFE69
 1449 0010 00000000 		.4byte	.LFB70
 1450 0014 24000000 		.4byte	.LFE70
 1451 0018 00000000 		.4byte	.LFB71
 1452 001c 1A000000 		.4byte	.LFE71
 1453 0020 00000000 		.4byte	.LFB72
 1454 0024 3C000000 		.4byte	.LFE72
 1455 0028 00000000 		.4byte	.LFB73
 1456 002c 0C000000 		.4byte	.LFE73
 1457 0030 00000000 		.4byte	.LFB74
 1458 0034 30000000 		.4byte	.LFE74
 1459 0038 00000000 		.4byte	.LFB75
 1460 003c 30000000 		.4byte	.LFE75
 1461 0040 00000000 		.4byte	.LFB76
 1462 0044 44000000 		.4byte	.LFE76
 1463 0048 00000000 		.4byte	.LFB77
 1464 004c 40000000 		.4byte	.LFE77
 1465 0050 00000000 		.4byte	.LFB78
 1466 0054 24000000 		.4byte	.LFE78
 1467 0058 00000000 		.4byte	0
 1468 005c 00000000 		.4byte	0
 1469              		.section	.debug_line,"",%progbits
 1470              	.Ldebug_line0:
 1471 0000 9F020000 		.section	.debug_str,"MS",%progbits,1
 1471      02008801 
 1471      00000201 
 1471      FB0E0D00 
 1471      01010101 
 1472              	.LASF43:
 1473 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1473      69746963 
 1473      616C4E65 
 1473      7374696E 
 1473      6700
 1474              	.LASF29:
 1475 0012 76506F72 		.ascii	"vPortEnterCritical\000"
 1475      74456E74 
 1475      65724372 
 1475      69746963 
 1475      616C00
 1476              	.LASF25:
 1477 0025 7078436F 		.ascii	"pxCode\000"
 1477      646500
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 43


 1478              	.LASF28:
 1479 002c 76506F72 		.ascii	"vPortEndScheduler\000"
 1479      74456E64 
 1479      53636865 
 1479      64756C65 
 1479      7200
 1480              	.LASF21:
 1481 003e 5469636B 		.ascii	"TickType_t\000"
 1481      54797065 
 1481      5F7400
 1482              	.LASF13:
 1483 0049 666C6F61 		.ascii	"float\000"
 1483      7400
 1484              	.LASF6:
 1485 004f 5F5F696E 		.ascii	"__int32_t\000"
 1485      7433325F 
 1485      7400
 1486              	.LASF5:
 1487 0059 6C6F6E67 		.ascii	"long int\000"
 1487      20696E74 
 1487      00
 1488              	.LASF34:
 1489 0062 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1489      4320342E 
 1489      392E3320 
 1489      32303135 
 1489      30333033 
 1490 0095 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1490      20726576 
 1490      6973696F 
 1490      6E203232 
 1490      31323230 
 1491 00c8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1491      66756E63 
 1491      74696F6E 
 1491      2D736563 
 1491      74696F6E 
 1492              	.LASF31:
 1493 00f0 78506F72 		.ascii	"xPortPendSVHandler\000"
 1493      7450656E 
 1493      64535648 
 1493      616E646C 
 1493      657200
 1494              	.LASF17:
 1495 0103 5461736B 		.ascii	"TaskFunction_t\000"
 1495      46756E63 
 1495      74696F6E 
 1495      5F7400
 1496              	.LASF11:
 1497 0112 696E7433 		.ascii	"int32_t\000"
 1497      325F7400 
 1498              	.LASF35:
 1499 011a 2E2E5C53 		.ascii	"..\\Source\\portable\\GCC\\ARM_CM3\\port.c\000"
 1499      6F757263 
 1499      655C706F 
 1499      72746162 
 1499      6C655C47 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 44


 1500              	.LASF2:
 1501 0140 756E7369 		.ascii	"unsigned char\000"
 1501      676E6564 
 1501      20636861 
 1501      7200
 1502              	.LASF7:
 1503 014e 5F5F7569 		.ascii	"__uint32_t\000"
 1503      6E743332 
 1503      5F7400
 1504              	.LASF8:
 1505 0159 6C6F6E67 		.ascii	"long unsigned int\000"
 1505      20756E73 
 1505      69676E65 
 1505      6420696E 
 1505      7400
 1506              	.LASF4:
 1507 016b 73686F72 		.ascii	"short unsigned int\000"
 1507      7420756E 
 1507      7369676E 
 1507      65642069 
 1507      6E7400
 1508              	.LASF44:
 1509 017e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1509      52784275 
 1509      66666572 
 1509      00
 1510              	.LASF14:
 1511 018b 646F7562 		.ascii	"double\000"
 1511      6C6500
 1512              	.LASF37:
 1513 0192 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1513      77424153 
 1513      45505249 
 1513      00
 1514              	.LASF26:
 1515 019f 70765061 		.ascii	"pvParameters\000"
 1515      72616D65 
 1515      74657273 
 1515      00
 1516              	.LASF23:
 1517 01ac 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1517      74536574 
 1517      42415345 
 1517      50524900 
 1518              	.LASF32:
 1519 01bc 78506F72 		.ascii	"xPortSysTickHandler\000"
 1519      74537973 
 1519      5469636B 
 1519      48616E64 
 1519      6C657200 
 1520              	.LASF0:
 1521 01d0 756E7369 		.ascii	"unsigned int\000"
 1521      676E6564 
 1521      20696E74 
 1521      00
 1522              	.LASF24:
 1523 01dd 7078546F 		.ascii	"pxTopOfStack\000"
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 45


 1523      704F6653 
 1523      7461636B 
 1523      00
 1524              	.LASF10:
 1525 01ea 6C6F6E67 		.ascii	"long long unsigned int\000"
 1525      206C6F6E 
 1525      6720756E 
 1525      7369676E 
 1525      65642069 
 1526              	.LASF22:
 1527 0201 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1527      74526169 
 1527      73654241 
 1527      53455052 
 1527      4900
 1528              	.LASF40:
 1529 0213 70727654 		.ascii	"prvTaskExitError\000"
 1529      61736B45 
 1529      78697445 
 1529      72726F72 
 1529      00
 1530              	.LASF33:
 1531 0224 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1531      74536574 
 1531      75705469 
 1531      6D657249 
 1531      6E746572 
 1532              	.LASF16:
 1533 023d 73697A65 		.ascii	"sizetype\000"
 1533      74797065 
 1533      00
 1534              	.LASF9:
 1535 0246 6C6F6E67 		.ascii	"long long int\000"
 1535      206C6F6E 
 1535      6720696E 
 1535      7400
 1536              	.LASF15:
 1537 0254 63686172 		.ascii	"char\000"
 1537      00
 1538              	.LASF18:
 1539 0259 53746163 		.ascii	"StackType_t\000"
 1539      6B547970 
 1539      655F7400 
 1540              	.LASF27:
 1541 0265 76506F72 		.ascii	"vPortSVCHandler\000"
 1541      74535643 
 1541      48616E64 
 1541      6C657200 
 1542              	.LASF3:
 1543 0275 73686F72 		.ascii	"short int\000"
 1543      7420696E 
 1543      7400
 1544              	.LASF30:
 1545 027f 76506F72 		.ascii	"vPortExitCritical\000"
 1545      74457869 
 1545      74437269 
 1545      74696361 
ARM GAS  C:\Users\bmt\AppData\Local\Temp\cco6P6CI.s 			page 46


 1545      6C00
 1546              	.LASF12:
 1547 0291 75696E74 		.ascii	"uint32_t\000"
 1547      33325F74 
 1547      00
 1548              	.LASF38:
 1549 029a 756C4E65 		.ascii	"ulNewMaskValue\000"
 1549      774D6173 
 1549      6B56616C 
 1549      756500
 1550              	.LASF19:
 1551 02a9 42617365 		.ascii	"BaseType_t\000"
 1551      54797065 
 1551      5F7400
 1552              	.LASF41:
 1553 02b4 70727650 		.ascii	"prvPortStartFirstTask\000"
 1553      6F727453 
 1553      74617274 
 1553      46697273 
 1553      74546173 
 1554              	.LASF1:
 1555 02ca 7369676E 		.ascii	"signed char\000"
 1555      65642063 
 1555      68617200 
 1556              	.LASF42:
 1557 02d6 78506F72 		.ascii	"xPortStartScheduler\000"
 1557      74537461 
 1557      72745363 
 1557      68656475 
 1557      6C657200 
 1558              	.LASF20:
 1559 02ea 55426173 		.ascii	"UBaseType_t\000"
 1559      65547970 
 1559      655F7400 
 1560              	.LASF39:
 1561 02f6 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1561      7274496E 
 1561      69746961 
 1561      6C697365 
 1561      53746163 
 1562              	.LASF36:
 1563 030c 433A5C55 		.ascii	"C:\\Users\\bmt\\Documents\\GitHub\\FreeRTOS_CY8CKIT"
 1563      73657273 
 1563      5C626D74 
 1563      5C446F63 
 1563      756D656E 
 1564 033a 5F303539 		.ascii	"_059\\FreeRTOS_Demo.cydsn\000"
 1564      5C467265 
 1564      6552544F 
 1564      535F4465 
 1564      6D6F2E63 
 1565              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

/** \file sniffFIFO.h
 * \brief sniffFIFO header file.
 * \details Declares the priority FIFO which can be configured in sniffConfig.h.
 * \author Marco Seiller
 * \date 2018
 */

#ifndef SNIFFFIFO_H_
#define SNIFFFIFO_H_

#include <sys/types.h>
#include <stdint.h>
#include <sniffConfig.h>


#define sniffFifoIsFull(fifo,prio) (fifo[prio].wptr==((fifo[prio].rptr+fifo[prio].size-1)%fifo[prio].size))
#define sniffFifoHasData(fifo,prio) (fifo[prio].wptr!=fifo[prio].rptr)

typedef struct{
	size_t wptr;
	size_t rptr;
	size_t size;
	void* Buffer[SIZE_OF_FIFO]; //buffer holds pointers
	uint8_t DataType[SIZE_OF_FIFO];

}sniffFIFO;

//size_t pType2Size(uint8_t ptype);

/*
Push data to FIFO
Params:
	fifo: DUAL_PORT_FIFO instance
	data: pointer to data object
	len: lenght of data object (currently ignored)
	prio: prioriy, 1=HP, 0=LP
return codes:
0 -> OK
1 -> FULL
*/
uint8_t writeFIFO(sniffFIFO fifo[],void* inData,payloadType pType,Priority prio);
/*
Behavior:
If high priority FIFO has data, read from HP FIFO, else read from LP FIFO
Params:
	fifo: DUAL_PORT_FIFO instance
	pData: target buffer for data
	pDType: buffer to put read lenght into
	pPrio: buffer to put read priority
return:
1: read OK
0: read FAIL
*/


uint8_t readFIFO(sniffFIFO fifo[],void* pData, payloadType* pType,Priority* pPrio);



void initialiseFIFO(sniffFIFO fifo[]);



#endif /* SNIFFFIFO_H_ */
